{"version":3,"sources":["webpack://opensoql/webpack/universalModuleDefinition","webpack://opensoql/webpack/bootstrap","webpack://opensoql/./src/lib/util.ts","webpack://opensoql/./src/lib/cache.ts","webpack://opensoql/./src/lib/call.ts","webpack://opensoql/./src/filters.ts","webpack://opensoql/./src/sort.ts","webpack://opensoql/./node_modules/fruitsconfits/src/lib/types.ts","webpack://opensoql/./node_modules/fruitsconfits/src/lib/parser.ts","webpack://opensoql/./node_modules/fruitsconfits/src/lib/string-parser.ts","webpack://opensoql/./node_modules/fruitsconfits/src/lib/object-parser.ts","webpack://opensoql/./src/lib/parser.ts","webpack://opensoql/./src/lib/compiler.ts","webpack://opensoql/./src/lib/datetime-util.ts","webpack://opensoql/./src/lib/functions.ts","webpack://opensoql/./src/lib/prepare.ts","webpack://opensoql/./src/lib/run-query.ts","webpack://opensoql/./src/builder.ts","webpack://opensoql/./src/lib/run-dml.ts","webpack://opensoql/./src/lib/csv-parser.ts","webpack://opensoql/./src/resolvers.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","globalObj","Function","objConstructor","constructor","funConstructor","DatePattern","DateTimePattern","dummyTargetObject","isUnsafeVarNames","target","varName","con","__proto__","deepCloneObject","obj","Array","isArray","slice","map","x","Map","ent","from","entries","Set","values","k","keys","isEqualComplexName","a","b","length","toLowerCase","getFullQualifiedName","primaryResolverName","sliced","push","concat","getTrueCaseFieldName","record","ni","index","findIndex","getObjectValue","getObjectValueWithFieldNameMap","has","getTrueCasePathName","ret","getObjectTrueCasePathValue","getObjectPathValue","condOp1FnCache","WeakMap","condOp2ValueCache","nestedFnInfoCache","callScalarFunction","ctx","field","fnInfo","fieldResultType","groupedRecs","args","type","z","Date","getTime","params","Error","argFnInfoTmp","argFnNameI","fn","functions","find","argFnInfo","callAggregateFunction","callImmediateScalarFunction","join","records","w","getGroupFieldTrueCaseName","groupFields","trueCaseName","isScalarFnCallable","getOp1Noop","fieldNameMap","cache","getOp1AggregateFnValue","op","op2FieldResultType","getOp1ScalarOnAggFnValue","getOp1ScalarOnNonAggFnValue","getOp1ImmediateScalarOnAggFnValue","getOp1ImmediateScalarOnNonAggFnValue","getOp1Value","isAggregation","cond","v","operands","op2","op2IsDateOrDatetime","isField","isDateOrDatetime","set","fnNameI","createOp1Cache","evalRecursiveCondition","evalCondition","convertPattern","pat0","replace","pattern","prev","EVAL","v1","v2","cached","getOp2Value","RegExp","test","filter","includes","OUTER","v1Items","split","v2Items","q","matched","applyWhereConditions","conds","NEXTREC","applyHavingConditions","groupedRecsArray","firstRec","query","groupBy","sortRecords","orderBy","primaryPathLen","orderFields","sort","direction","f","fieldAndFNames","fName","LOOP","va","vb","nulls","ParseError","result","super","message","parserInput","src","context","start","end","templateArgs","templateArgsPos","formatErrorMessage","msg","Math","max","pos","ar","lineAndCol","line","col","getLineAndCol","JSON","stringify","e","zeroWidth","helper","input","succeeded","next","tokens","zeroWidthError","error","beginning","quantify","min","parser","first","parsers","last","or","reduce","transform","trans","ctxTrans","t2","lookAhead","lookBehind","applyProductionRules","lexer","lexerInput","lexResult","completed","check","maxApply","rules","rule","rtol","len","nextSrc","makeProgram","templateStringsParam","criteria","conv","argIdx","getStringParsers","seq","rawToToken","needle","startsWith","cls","needles","some","idx","charClass","notCls","codePointAt","String","fromCodePoint","charClassNot","clsFn","substring","charClassByNeedleFn","cat","concatTokens","once","repeat","qty","combine","erase","isAlpha","isUpper","isLower","isNumber","isNonZeroNumber","isBinNum","isOctNum","isHexNum","isAlNum","isSpace","isSpaceWithinSingleLine","isControl","isWord","isNewline","isAny","binSep","octSep","hexSep","decimalIntegerNumber","bigDecimalIntegerNumber","floatingPointNumber","classes","alpha","upper","lower","num","nonzero","bin","oct","hex","alnum","space","spaceWithinSingleLine","ctrl","newline","word","any","numbers","prefixes","int","bigint","float","isParam","err","ahead","behind","objSequence","comparator","objClass","objClassNot","$s","rawToken","$o","getObjectParsers","seqI","toLocaleLowerCase","binaryOp","op1","isOperator","lineComment","blockComment","commentOrSpace","reservedKeywords","wordBoundary","notAheadReservedKeywords","trueValue","falseValue","nullValue","positiveInfinityValue","Number","POSITIVE_INFINITY","negativeInfinityValue","NEGATIVE_INFINITY","nanValue","NaN","binaryIntegerValue","parseInt","octalIntegerValue","decimalIntegerValue","floatingPointNumberValue","parseFloat","numberValue","stringEscapeSeq","stringValue","dateValue","dateTimeValue","symbolStringValue","sym","symbolName","complexSymbolName","parameterizedValue","literalValue","selectFieldFunctionCall","subQuery","selectStatement","listValue","complexSelectFieldName","aliasName","selectFieldList","select","fromClause","conditionalOperator","conditionExpressionExprRule3","conditionExpressionExprRule2","conditionExpressionExprRule1","whereFieldExpression","whereConditionExpressionInnerRoot","whereConditionExpression","whereClause","where","groupByClause","havingFieldExpression","havingConditionExpressionInnerRoot","havingConditionExpression","havingClause","having","orderByDirection","orderByNulls","orderByClause","offsetClause","offset","limitClause","limit","forViewClause","for","forUpdateClause","program","findResolver","rn","registerFields","defaultResolver","resolver","add","flatConditions","dest","parentOp","recurse","pushOperands","recureseForEachConditionFieldsFncall","arg","recureseForEachConditionFields","normalize","builder","parentName","parentAliases","resolverAliases","whereSubQueries","havingSubQueries","selectSubQueries","nameI","fieldAliasNames","normalizeTarget","normalizeSelectField","normalizeFnCall","opIndex","found","normalizeCondition","queryFields","queryFieldsMap","condFields","condAliasFields","havingCondFields","relationshipIdFields","registerQueryFields","rslv","registerCondFields","registerHavingCondFields","exprCount","collectFncallQueryFields","nested","resolverTmp","primaryResolverRootTrueCaseName","relationships","resolverTree","makeResolverTree","path","argResolverNameI","resolverName","argfieldOrRelNameI","fieldOrRelName","trueCaseArgResolverName","children","nextPath","lastFound","rt","j","resolvers","delete","sortFieldNames","childResolverName","childRelationshipInfo","childIdField","id","foreignIdFieldName","getUTCDayInYear","d0","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getDayInYear","getFullYear","getMonth","getDate","fnInfo_cast_to_string","fnInfo_cast_to_number","fnInfo_cast_to_boolean","Boolean","fnInfo_concat","fnInfo_add","fnInfo_sub","fnInfo_mul","fnInfo_div","fnInfo_mod","fnInfo_count","fnInfo_count_distinct","size","fnInfo_sum","isNaN","fnInfo_avg","fnInfo_max","fnInfo_min","dateScalarFunctionGen","fnName","fnInfo_calendar_month","dateStr","fnInfo_calendar_month_lc","fnInfo_calendar_quarter","floor","fnInfo_calendar_quarter_lc","fnInfo_calendar_year","fnInfo_calendar_year_lc","fnInfo_day_in_month","fnInfo_day_in_month_lc","fnInfo_day_in_week","getUTCDay","fnInfo_day_in_week_lc","getDay","fnInfo_day_in_year","fnInfo_day_in_year_lc","fnInfo_day_only","toISOString","fnInfo_day_only_lc","fnInfo_hour_in_day","getUTCHours","fnInfo_hour_in_day_lc","getHours","fnInfo_week_in_month","fnInfo_week_in_month_lc","builtinFunctions","builtinRules","idFieldName","masterResolverName","prepareQuery","strings","compile","joined","templateStringsParserInput","parse","filterZeroLengthCondFn","pruneCondition","tmp","pruneConditionCheckFncall","filterCondOperands","execCondSubQueries","tr","trOptions","condTemplate","resolverData","condSubQueries","forEach","collectSubQueriesFromCondition","subQueries","condSubQueryResults","executeCompiledQuery","then","Promise","all","fieldName","mapSelectFields","queryFieldsMapEntries","fnInfos","fnScaler","fnImmediateScaler","fnNoop","groupRecords","keystr","aggregateFields","fnAggregate","g","agg","fnImmediateScalar","fnScalar","getRemovingFields","removingFields","requestedFields","rec","getResolversInfo","resolverNames","parentType","parentKey","currentKey","parentResolverName","masterRelationshipInfo","foreignIdField","parentIdFieldName","currentIdFieldName","parent","parentQueriedRecords","parentResolverNames","parentResolverData","primaryRecords","primaryCapabilities","queriedRecords","normalizeLimitAndOffset","events","beginExecute","transactionData","transactionOptions","condWhereTemplate","condHavingTemplate","removingFieldsAndRecords","removingFieldsMap","parentRecords","hasAliasNameCond","sortFields","resolvingFields","condWhere","condHaving","ctxGen","graphPath","masterIdField","detailIdField","conditions","resolverCapabilities","filtering","sorting","filteredGrouped","beforeMasterSubQueries","parentFieldName","recs","afterMasterSubQueries","parentRemovingFields","promises","subQueryName","evtGen","beforeDetailSubQueries","afterDetailSubQueries","endExecute","Query","runCompiledQuery","build","preparedBI","insert","update","remove","prepareBuilderInfo","subscribers","Publisher","eventQueue","on","data","publish","queue","setTimeout","subscribe","unsubscribe","createTransactionScope","scopeTr","scopeTrOptions","scopePublisher","isIsolated","scopePub","toPublishFn","withTransactionEvents","publisher","run","beginTransaction","endTransaction","fire","e2","soql","resolverInfo","evt","executeInsertDML","executeUpdateDML","executeRemoveDML","touch","resolve","transaction","callback","commands","_trOptions","_publish","quoted","nakidNum","nakid","trim","cell","row","rows","defaultStaticResolverConfig","noCache","noFiltering","noSorting","setDefaultStaticResolverConfig","conf","assign","jsonRecordsParser","csvRecordsParser","rawRecords","header","cur","passThroughParser","staticResolverBuilderGen","fetcher","config","fields","cachedRecords","fetched","recordFields","parentId","every","filterAndSliceRecords","staticJsonResolverBuilder","staticCsvResolverBuilder","passThroughResolverBuilder"],"mappings":"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","file":"opensoql.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"opensoql\"] = factory();\n\telse\n\t\troot[\"opensoql\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-implied-eval\nconst globalObj = Function('return this')();\nconst objConstructor = ({}).constructor; // NOTE: objConstructor            === Object\nconst funConstructor = Function;         // NOTE: ({}).toString.constructor === Function\n\n\nexport const DatePattern = /^(\\d{4}-[01]\\d-[0-3]\\d)$/;\nexport const DateTimePattern =\n    /^((?:(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d))(?:[+-][0-2]\\d:[0-5]\\d|Z))$/;\nexport const DateTimeNoTzPattern =\n    /^((?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d))$/;\nexport const dummyTargetObject = {};\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function isUnsafeVarNames(target: any, varName: string) {\n    if (target === globalObj ||\n        varName === '__proto__' ||\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\n        return true;\n    }\n    if (varName === 'prototype' || varName === 'constructor') {\n        if (target === null || target === void 0 || typeof target === 'function') {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === objConstructor) {\n        if (objConstructor.hasOwnProperty(varName)) {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === funConstructor) {\n        // checking 'call', 'arguments', 'caller', ...\n        let con: any = funConstructor;\n        while (con) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n            if (con.hasOwnProperty(varName)) {\n                return true;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n            con = con.__proto__;\n        }\n    }\n    if (typeof target === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n        if (! target.hasOwnProperty(varName)) {\n            // function's prototypes' members\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function deepCloneObject<T>(obj: T): T {\n    switch (typeof obj) {\n    case 'object':\n        if (Array.isArray(obj)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return obj.slice().map(x => deepCloneObject(x)) as any;\n        } else if (obj === null) {\n            return obj;\n        } else {\n            if (obj instanceof Map) {\n                const ent: Array<[any, any]> =\n                    Array.from(obj.entries())\n                         .map(x => [deepCloneObject(x[0]), deepCloneObject(x[1])]);\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return new Map(ent) as any;\n            } else if (obj instanceof Set) {\n                const ent =\n                    Array.from(obj.values())\n                         // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                         .map(x => deepCloneObject(x));\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return new Set(ent) as any;\n            } else {\n                const r = {};\n                for (const k of Object.keys(obj)) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    r[k] = deepCloneObject(obj[k]);\n                }\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return r as any;\n            }\n        }\n    default:\n        return obj;\n    }\n}\n\n\nexport function isEqualComplexName(a: string[], b: string[]): boolean {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; i++) {\n        if (a[i].toLowerCase() !== b[i].toLowerCase()) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getFullQualifiedName(primaryResolverName: string[], name: string[]) {\n    const ns: string[] = [];\n    for (let i = 0; i < primaryResolverName.length; i++) {\n        const sliced = primaryResolverName.slice(i);\n        if (isEqualComplexName(name.slice(0, sliced.length), sliced)) {\n            break;\n        } else {\n            ns.push(primaryResolverName[i]);\n        }\n    }\n    if (ns.length) {\n        return ns.concat(name);\n    } else {\n        return name;\n    }\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getTrueCaseFieldName(record: any, name: string) {\n    const keys = Object.keys(record);\n    const ni = name.toLowerCase();\n    const index = keys.findIndex(x => x.toLowerCase() === ni);\n\n    if (0 > index) {\n        return null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n    return keys[index];\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getObjectValue(record: any, name: string) {\n    const keys = Object.keys(record);\n    const ni = name.toLowerCase();\n    const index = keys.findIndex(x => x.toLowerCase() === ni);\n\n    if (0 > index) {\n        return null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\n    return record[keys[index]];\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getObjectValueWithFieldNameMap(map: Map<string, string>, record: any, name: string) {\n    const ni = name.toLowerCase();\n\n    if (! map.has(ni)) {\n        return null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-non-null-assertion\n    return record[map.get(ni)!];\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getTrueCasePathName(record: any, name: string[]): string[] | null {\n    const ret: string[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    let r = record;\n\n    for (const n of name) {\n        if (r === null || r === void 0) {\n            return null;\n        }\n\n        const keys = Object.keys(r);\n        const ni = n.toLowerCase();\n        const index = keys.findIndex(x => x.toLowerCase() === ni);\n\n        if (0 > index) {\n            return null;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        r = r[keys[index]];\n\n        ret.push(keys[index]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return ret;\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getObjectTrueCasePathValue(record: any, name: string[]) {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    let r = record;\n\n    for (const n of name) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        r = r[n];\n\n        if (r === null || r === void 0) {\n            return null;\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return r;\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getObjectPathValue(record: any, name: string[]) {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    let r = record;\n\n    for (const n of name) {\n        const keys = Object.keys(r);\n        const ni = n.toLowerCase();\n        const index = keys.findIndex(x => x.toLowerCase() === ni);\n\n        if (0 > index) {\n            return null;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        r = r[keys[index]];\n\n        if (r === null || r === void 0) {\n            return null;\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return r;\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ResolverContext,\n         FieldResultType,\n         QueryFuncInfo,\n         PreparedConditionOperand,\n         PreparedCondition,\n         PreparedFnCall } from '../types';\n\n\n\nexport interface CondOp1CacheValue {\n    isField: boolean,\n    isDateOrDatetime: boolean,\n    op: PreparedConditionOperand,\n    op2FieldResultType: FieldResultType,\n    fnInfo: QueryFuncInfo | null,\n    fn: (fieldNameMap: Map<string, string>, ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        cache: CondOp1CacheValue, record: any) => any,\n}\n\nexport interface CondOp2CacheValue {\n    value: any,\n}\n\n\nexport const condOp1FnCache = new WeakMap<PreparedCondition, CondOp1CacheValue>();\n\nexport const condOp2ValueCache = new WeakMap<PreparedCondition, CondOp2CacheValue>();\n\nexport const nestedFnInfoCache = new WeakMap<PreparedFnCall, QueryFuncInfo>();\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { FieldResultType,\n         PreparedFnCall,\n         ResolverContext,\n         ScalarQueryFuncInfo,\n         ImmediateScalarQueryFuncInfo,\n         AggregateQueryFuncInfo } from '../types';\nimport { getObjectValue }         from './util';\nimport { nestedFnInfoCache }      from './cache';\n\n\n\nexport function callScalarFunction(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        field: PreparedFnCall, fnInfo: ScalarQueryFuncInfo, fieldResultType: FieldResultType,\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        record: any, groupedRecs: any[] | null): any {\n\n    const args = field.args.map(a => {\n        switch (typeof a) {\n        case 'object':\n            if (a === null) {\n                return a;\n            }\n            switch (a.type) {\n            case 'field':\n                {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    let z = getObjectValue(record, a.name[a.name.length - 1]);\n                    switch (fieldResultType) {\n                    case 'date': case 'datetime':\n                        z = new Date(z).getTime();\n                        break;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return z;\n                }\n            case 'date': case 'datetime':\n                switch (fieldResultType) {\n                case 'date': case 'datetime':\n                    return new Date(a.value).getTime();\n                default:\n                    return a.value;\n                }\n            case 'parameter':\n                {\n                    if (! Object.prototype.hasOwnProperty.call(ctx.params, a.name)) {\n                        throw new Error(`Parameter '${a.name}' is not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const z = ctx.params![a.name] ?? null;\n                    if (z === null) {\n                        return null;\n                    }\n                    switch (fieldResultType) {\n                    case 'date': case 'datetime':\n                        if (Array.isArray(z)) {\n                            throw new Error(`Parameter '${a.name}' should be string or number.`);\n                        }\n                        return new Date(z).getTime();\n                    default:\n                        return z;\n                    }\n                }\n            case 'fncall':\n                {\n                    let argFnInfoTmp = nestedFnInfoCache.get(a);\n                    if (! argFnInfoTmp) {\n                        const argFnNameI = a.fn.toLowerCase();\n                        argFnInfoTmp = ctx.functions.find(x => x.name.toLowerCase() === argFnNameI);\n                    }\n                    const argFnInfo = argFnInfoTmp;\n\n                    switch (argFnInfo?.type) {\n                    case 'aggregate':\n                        if (! groupedRecs) {\n                            throw new Error(`Nested function ${a.fn} is not allowed.`);\n                        }\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return callAggregateFunction(ctx, a, argFnInfo, 'any', groupedRecs);\n                    case 'scalar':\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return callScalarFunction(ctx, a, argFnInfo, 'any', record, groupedRecs);\n                    case 'immediate-scalar':\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return callImmediateScalarFunction(ctx, a, argFnInfo, 'any', record, groupedRecs);\n                    default:\n                        throw new Error(`Nested function ${a.fn} is not allowed.`);\n                    }\n                }\n            default:\n                return a;\n            }\n        default:\n            return a;\n        }\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return fnInfo.fn(ctx, args, record);\n}\n\n\nexport function callImmediateScalarFunction(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        field: PreparedFnCall, fnInfo: ImmediateScalarQueryFuncInfo, fieldResultType: FieldResultType,\n        record: any | null, groupedRecs: any[] | null): any {\n\n    const args = field.args.map(a => {\n        switch (typeof a) {\n        case 'object':\n            if (a === null) {\n                return a;\n            }\n            switch (a.type) {\n            case 'field':\n                throw new Error(`Immediate scalar function should not refer the field (${a.name.join('.')}).`);\n            case 'date': case 'datetime':\n                switch (fieldResultType) {\n                case 'date': case 'datetime':\n                    return new Date(a.value).getTime();\n                default:\n                    return a.value;\n                }\n            case 'parameter':\n                {\n                    if (! Object.prototype.hasOwnProperty.call(ctx.params, a.name)) {\n                        throw new Error(`Parameter '${a.name}' is not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const z = ctx.params![a.name] ?? null;\n                    if (z === null) {\n                        return null;\n                    }\n                    switch (fieldResultType) {\n                    case 'date': case 'datetime':\n                        if (Array.isArray(z)) {\n                            throw new Error(`Parameter '${a.name}' should be string or number.`);\n                        }\n                        return new Date(z).getTime();\n                    default:\n                        return z;\n                    }\n                }\n            case 'fncall':\n                {\n                    let argFnInfoTmp = nestedFnInfoCache.get(a);\n                    if (! argFnInfoTmp) {\n                        const argFnNameI = a.fn.toLowerCase();\n                        argFnInfoTmp = ctx.functions.find(x => x.name.toLowerCase() === argFnNameI);\n                    }\n                    const argFnInfo = argFnInfoTmp;\n\n                    switch (argFnInfo?.type) {\n                    case 'aggregate':\n                        if (groupedRecs === null) {\n                            throw new Error(`Nested function ${a.fn} is not allowed.`);\n                        }\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return callAggregateFunction(ctx, a, argFnInfo, 'any', groupedRecs);\n                    case 'scalar':\n                        if (record === null) {\n                            throw new Error(`Nested function ${a.fn} is not allowed.`);\n                        }\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return callScalarFunction(ctx, a, argFnInfo, 'any', record, groupedRecs);\n                    case 'immediate-scalar':\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return callImmediateScalarFunction(ctx, a, argFnInfo, 'any', record, groupedRecs);\n                    default:\n                        throw new Error(`Nested function ${a.fn} is not allowed.`);\n                    }\n                }\n            default:\n                return a;\n            }\n        default:\n            return a;\n        }\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return fnInfo.fn(ctx, args);\n}\n\n\nexport function callAggregateFunction(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        field: PreparedFnCall, fnInfo: AggregateQueryFuncInfo, fieldResultType: FieldResultType, records: any[]): any {\n\n    const args = field.args.map(a => {\n        switch (typeof a) {\n        case 'object':\n            if (a === null) {\n                return a;\n            }\n            switch (a.type) {\n            case 'field':\n                {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    let z = records.map(w => getObjectValue(w, a.name[a.name.length - 1]));\n                    switch (fieldResultType) {\n                    case 'date': case 'datetime':\n                        z = z.map(w => new Date(w).getTime());\n                        break;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return z;\n                }\n            case 'date': case 'datetime':\n                switch (fieldResultType) {\n                case 'date': case 'datetime':\n                    return new Date(a.value).getTime();\n                default:\n                    return a.value;\n                }\n            case 'parameter':\n                {\n                    if (! Object.prototype.hasOwnProperty.call(ctx.params, a.name)) {\n                        throw new Error(`Parameter '${a.name}' is not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const z = ctx.params![a.name] ?? null;\n                    if (z === null) {\n                        return null;\n                    }\n                    switch (fieldResultType) {\n                    case 'date': case 'datetime':\n                        if (Array.isArray(z)) {\n                            throw new Error(`Parameter '${a.name}' should be string or number.`);\n                        }\n                        return new Date(z).getTime();\n                    default:\n                        return z;\n                    }\n                }\n            case 'fncall':\n                {\n                    let argFnInfoTmp = nestedFnInfoCache.get(a);\n                    if (! argFnInfoTmp) {\n                        const argFnNameI = a.fn.toLowerCase();\n                        argFnInfoTmp = ctx.functions.find(x => x.name.toLowerCase() === argFnNameI);\n                    }\n                    const argFnInfo = argFnInfoTmp;\n\n                    switch (argFnInfo?.type) {\n                    case 'scalar':\n                        {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                            const z = records.map(w => callScalarFunction(ctx, a, argFnInfo, 'any', w, records));\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                            return z;\n                        }\n                    case 'immediate-scalar':\n                        {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                            const z = records.map(w => callImmediateScalarFunction(ctx, a, argFnInfo, 'any', w, records));\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                            return z;\n                        }\n                    default:\n                        throw new Error(`Nested function ${a.fn} is not allowed.`);\n                    }\n                }\n            default:\n                return a;\n            }\n        default:\n            return a;\n        }\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return fnInfo.fn(ctx, args, records);\n}\n\n\nexport function getGroupFieldTrueCaseName(groupFields: Map<string, string>, name: string): string | null {\n    if (groupFields.has(name)) {\n        const trueCaseName = groupFields.get(name);\n        if (trueCaseName) {\n            return trueCaseName;\n        }\n    }\n    return null;\n}\n\n\nexport function isScalarFnCallable(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        groupFields: Map<string, string>, args: PreparedFnCall['args']): boolean {\n\n    for (const a of args) {\n        switch (typeof a) {\n        case 'object':\n            switch (a?.type) {\n            case 'field':\n                {\n                    const trueCaseName = getGroupFieldTrueCaseName(groupFields, a.name[a.name.length - 1]);\n                    if (! trueCaseName) {\n                        return false;\n                    }\n                }\n                break;\n            case 'fncall':\n                {\n                    const argFnNameI = a.fn.toLowerCase();\n                    const argFnInfo = ctx.functions.find(x => x.name.toLowerCase() === argFnNameI);\n                    switch (argFnInfo?.type) {\n                    case 'scalar':\n                        if (! isScalarFnCallable(ctx, groupFields, a.args)) {\n                            return false;\n                        }\n                    }\n                }\n                break;\n            }\n            break;\n        }\n    }\n    return true;\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ResolverContext,\n         FieldResultType,\n         PreparedConditionOperand,\n         PreparedCondition,\n         PreparedAtomValue,\n         PreparedField,\n         PreparedFnCall,\n         ScalarQueryFuncInfo,\n         ImmediateScalarQueryFuncInfo,\n         AggregateQueryFuncInfo }         from './types';\nimport { getTrueCaseFieldName,\n         getObjectValueWithFieldNameMap } from './lib/util';\nimport { callAggregateFunction,\n         callScalarFunction,\n         callImmediateScalarFunction,\n         isScalarFnCallable }             from './lib/call';\nimport { CondOp1CacheValue,\n         condOp1FnCache,\n         condOp2ValueCache }              from './lib/cache';\n\n\n\nconst getOp1Noop = (\n    fieldNameMap: Map<string, string>, ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n    cache: CondOp1CacheValue, record: any) => void 0;\n\n\nconst getOp1AggregateFnValue = (\n        fieldNameMap: Map<string, string>, ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        cache: CondOp1CacheValue, record: any) => {\n\n    const { op, op2FieldResultType, fnInfo } = cache;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return callAggregateFunction(\n        ctx, op as PreparedFnCall, fnInfo as AggregateQueryFuncInfo, op2FieldResultType,\n        record);\n}\n\n\nconst getOp1ScalarOnAggFnValue = (\n        fieldNameMap: Map<string, string>, ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        cache: CondOp1CacheValue, record: any) => {\n\n    const { op, op2FieldResultType, fnInfo } = cache;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n    const firstRec = record[0];\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-assignment\n    return callScalarFunction(\n        ctx, op as PreparedFnCall, fnInfo as ScalarQueryFuncInfo, op2FieldResultType,\n        firstRec, record);\n}\n\n\nconst getOp1ScalarOnNonAggFnValue = (\n        fieldNameMap: Map<string, string>, ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        cache: CondOp1CacheValue, record: any) => {\n\n    const { op, op2FieldResultType, fnInfo } = cache;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-assignment\n    return callScalarFunction(\n        ctx, op as PreparedFnCall, fnInfo as ScalarQueryFuncInfo, op2FieldResultType,\n        record, null);\n}\n\n\nconst getOp1ImmediateScalarOnAggFnValue = (\n        fieldNameMap: Map<string, string>, ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        cache: CondOp1CacheValue, record: any) => {\n\n    const { op, op2FieldResultType, fnInfo } = cache;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-assignment\n    return callImmediateScalarFunction(\n        ctx, op as PreparedFnCall, fnInfo as ImmediateScalarQueryFuncInfo, op2FieldResultType,\n        null, record);\n}\n\n\nconst getOp1ImmediateScalarOnNonAggFnValue = (\n        fieldNameMap: Map<string, string>, ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        cache: CondOp1CacheValue, record: any) => {\n\n    const { op, op2FieldResultType, fnInfo } = cache;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-assignment\n    return callImmediateScalarFunction(\n        ctx, op as PreparedFnCall, fnInfo as ImmediateScalarQueryFuncInfo, op2FieldResultType,\n        record,  null);\n}\n\n\nfunction createOp1Cache(\n    groupFields: Map<string, string> | null,\n    isAggregation: boolean,\n    ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n    cond: PreparedCondition) {\n\n    let cache: CondOp1CacheValue | undefined = condOp1FnCache.get(cond);\n    const op = cond.operands[0];\n    const op2 = cond.operands[1];\n    let op2IsDateOrDatetime = false;\n    let op2FieldResultType: FieldResultType = 'any';\n\n    switch (typeof op2) {\n    case 'object':\n        if (op2 === null) {\n            // nothing to do\n        } else if (Array.isArray(op2)) {\n            // nothing to do\n        } else {\n            switch (op2.type) {\n            case 'date': case 'datetime':\n                op2IsDateOrDatetime = true;\n                op2FieldResultType = op2.type;\n                break;\n            }\n        }\n    }\n\n    switch (typeof op) {\n    case 'object':\n        if (op === null) {\n            // nothing to do (v is null)\n        } else if (Array.isArray(op)) {\n            throw new Error(`Array is not allowed in the operand(1).`);\n        } else {\n            switch (op.type) {\n            case 'field':\n                cache = {\n                    isField: true,\n                    isDateOrDatetime: op2IsDateOrDatetime,\n                    op,\n                    op2FieldResultType,\n                    fnInfo: null,\n                    fn: getOp1Noop,\n                };\n                condOp1FnCache.set(cond, cache);\n                break;\n            case 'fncall':\n                {\n                    const fnNameI = op.fn.toLowerCase();\n                    const fnInfo = ctx.functions.find(x => x.name.toLowerCase() === fnNameI);\n\n                    switch (fnInfo?.type) {\n                    case 'aggregate':\n                        if (! isAggregation) {\n                            throw new Error(`Aggregate function ${fnInfo.name} is not allowed.`);\n                        }\n                        cache = {\n                            isField: false,\n                            isDateOrDatetime: false,\n                            op,\n                            op2FieldResultType,\n                            fnInfo,\n                            fn: getOp1AggregateFnValue,\n                        };\n                        condOp1FnCache.set(cond, cache);\n                        break;\n                    case 'scalar':\n                        if (isAggregation) {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            if (! isScalarFnCallable(ctx, groupFields!, op.args)) {\n                                throw new Error(`${op.fn} is not allowed. Aggregate function is needed.`);\n                            }\n                            cache = {\n                                isField: false,\n                                isDateOrDatetime: false,\n                                op,\n                                op2FieldResultType,\n                                fnInfo,\n                                fn: getOp1ScalarOnAggFnValue,\n                            };\n                            condOp1FnCache.set(cond, cache);\n                        } else {\n                            cache = {\n                                isField: false,\n                                isDateOrDatetime: false,\n                                op,\n                                op2FieldResultType,\n                                fnInfo,\n                                fn: getOp1ScalarOnNonAggFnValue,\n                            };\n                            condOp1FnCache.set(cond, cache);\n                        }\n                        break;\n                    case 'immediate-scalar':\n                        cache = {\n                            isField: false,\n                            isDateOrDatetime: false,\n                            op,\n                            op2FieldResultType,\n                            fnInfo,\n                            fn: isAggregation\n                                ? getOp1ImmediateScalarOnAggFnValue\n                                : getOp1ImmediateScalarOnNonAggFnValue,\n                        };\n                        condOp1FnCache.set(cond, cache);\n                        break;\n                    default:\n                        throw new Error(`Unexpected type appears in the operand(1).`);\n                    }\n                }\n                break;\n            default:\n                throw new Error(`Unexpected type appears in the operand(1).`);\n            }\n        }\n        break;\n    default:\n        throw new Error(`Unexpected type appears in the operand(1).`);\n    }\n\n    return cache as CondOp1CacheValue;\n}\n\n\nfunction getOp1Value(\n        fieldNameMap: Map<string, string>,\n        groupFields: Map<string, string> | null,\n        isAggregation: boolean,\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        cond: PreparedCondition, record: any) {\n\n    let v = null;\n    const op = cond.operands[0];\n\n    const cache: CondOp1CacheValue = condOp1FnCache.get(cond)\n        ?? createOp1Cache(groupFields, isAggregation, ctx, cond);\n    \n    if (op === null) {\n        // NOTE: `cache` is possibly undefined.\n        // nothing to do (v is null)\n    } else if (Array.isArray(op)) {\n        throw new Error(`Array is not allowed in the operand(1).`);\n    } else if (cache.isField) {\n        // NOTE: Inline expansion\n\n        const { isDateOrDatetime, op } = cache;\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        v = getObjectValueWithFieldNameMap(\n            fieldNameMap, record, (op as PreparedField).name[(op as PreparedField).name.length - 1]);\n\n        if (isDateOrDatetime && v !== null) {\n            v = new Date(v).getTime();\n        }\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        v = cache.fn(fieldNameMap, ctx, cache, record);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return v;\n}\n\n\nfunction getOp2Value(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        cond: PreparedCondition, record: any):\n        string | number | PreparedAtomValue[] | null {\n\n    const cached = condOp2ValueCache.get(cond);\n    if (cached) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return cached.value;\n    }\n\n    let v = null;\n    const op = cond.operands[1];\n\n    switch (typeof op) {\n    case 'object':\n        if (op === null) {\n            // nothing to do (v is null)\n        } else if (Array.isArray(op)) {\n            v = op.map(x => {\n                if (x === null) {\n                    return null;\n                }\n                switch (typeof x) {\n                case 'object':\n                    switch (x.type) {\n                    case 'date': case 'datetime':\n                        return x.value;\n                    case 'parameter':\n                        {\n                            if (! Object.prototype.hasOwnProperty.call(ctx.params, x.name)) {\n                                throw new Error(`Parameter '${x.name}' is not found.`);\n                            }\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            const z = ctx.params![x.name] ?? null;\n                            if (Array.isArray(z)) {\n                                throw new Error(`Parameter '${x.name}' items should be atom.`);\n                            }\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-non-null-assertion\n                            return z;\n                        }\n                    }\n                default:\n                    return x;\n                }\n            });\n        } else {\n            switch (op.type) {\n            case 'fncall':\n                {\n                    const fnNameI = op.fn.toLowerCase();\n                    const fnInfo = ctx.functions.find(x => x.name.toLowerCase() === fnNameI);\n\n                    switch (fnInfo?.type) {\n                    case 'immediate-scalar':\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        v = callImmediateScalarFunction(ctx, op, fnInfo, 'any', null, null);\n                        break;\n                    default:\n                        throw new Error(`Unexpected type appears in the operand(2).`);\n                    }\n                }\n            default:\n                switch (op.type) {\n                case 'date': case 'datetime':\n                    v = new Date(op.value).getTime();\n                    break;\n                case 'parameter':\n                    if (! Object.prototype.hasOwnProperty.call(ctx.params, op.name)) {\n                        throw new Error(`Parameter '${op.name}' is not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-non-null-assertion\n                    v = ctx.params![op.name] ?? null;\n                    break;\n                default:\n                    throw new Error(`Unexpected type appears in the operand(2).`);\n                }\n                break;\n            }\n        }\n        break;\n    default:\n        v = op; // string or number\n        break;\n    }\n\n    condOp2ValueCache.set(cond, { value: v });\n    return v;\n}\n\n\nfunction evalRecursiveCondition(\n        fieldNameMap: Map<string, string>,\n        groupFields: Map<string, string> | null,\n        isAggregation: boolean,\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        w: PreparedConditionOperand, record: any): boolean {\n\n    let ret = true;\n\n    switch (typeof w) {\n    case 'object':\n        if (Array.isArray(w)) {\n            throw new Error(`Array is not allowed in the condition.`);\n        } else {\n            if (w === null) {\n                throw new Error(`Unexpected type appears in the condition.`);\n            }\n            switch (w.type) {\n            case 'condition':\n                ret = evalCondition(fieldNameMap, groupFields, isAggregation, ctx, w, record);\n                break;\n            default:\n                throw new Error(`Unexpected type appears in the condition.`);\n            }\n        }\n        break;\n    default:\n        throw new Error(`Unexpected type appears in the condition.`);\n    }\n\n    return ret;\n}\n\n\nfunction convertPattern(v: string) {\n    // NOTE: wildcards are '%' (= /.*/) and '_' (= /./)\n    //       wildcard escape sequences are '\\%' and '\\_'\n\n    const pat0 = v.replace(/[.*+?^=!:${}()|[\\]\\/]/g, '\\\\$&');\n    let pattern = '';\n    let prev: string | undefined = void 0;\n\n    for (const c of pat0) {\n        switch (c) {\n        case '%':\n            if (prev === '\\\\') {\n                pattern += '%';\n            } else {\n                pattern += '.*';\n            }\n            break;\n        case '_':\n            if (prev === '\\\\') {\n                pattern += '_';\n            } else {\n                pattern += '.';\n            }\n            break;\n        case '\\\\':\n            break;\n        default:\n            if (prev === '\\\\') {\n                pattern += '\\\\';\n            }\n            pattern += c;\n        }\n        prev = c;\n    }\n    if (prev === '\\\\') {\n        pattern += '\\\\';\n    }\n    return `^${pattern}$`;\n}\n\n\nfunction evalCondition(\n        fieldNameMap: Map<string, string>,\n        groupFields: Map<string, string> | null,\n        isAggregation: boolean,\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        cond: PreparedCondition, record: any): boolean {\n\n    let ret = true;\n\n    EVAL: switch (cond.op) {\n    case 'true':\n        break;\n    case 'and':\n        for (const w of cond.operands) {\n            if (! evalRecursiveCondition(fieldNameMap, groupFields, isAggregation, ctx, w, record)) {\n                ret = false;\n                break EVAL;\n            }\n        }\n        break;\n    case 'or':\n        for (const w of cond.operands) {\n            if (evalRecursiveCondition(fieldNameMap, groupFields, isAggregation, ctx, w, record)) {\n                break EVAL;\n            }\n        }\n        ret = false;\n        break;\n    case 'not':\n        ret = !evalRecursiveCondition(fieldNameMap, groupFields, isAggregation, ctx, cond.operands[0], record);\n        break;\n    default:\n        {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const v1 = getOp1Value(fieldNameMap, groupFields, isAggregation, ctx, cond, record);\n            const v2 = getOp2Value(ctx, cond, record);\n            switch (cond.op) {\n            case '=':\n                if (! (v1 === v2)) {\n                    ret = false;\n                }\n                break;\n            case '!=':\n                if (! (v1 !== v2)) {\n                    ret = false;\n                }\n                break;\n            case '<':\n                if (v1 === null) {\n                    ret = false;\n                    break;\n                }\n                if (v2 === null) {\n                    ret = false;\n                    break;\n                }\n                if (! ((v1 as any) < (v2 as any))) {\n                    ret = false;\n                }\n                break;\n            case '<=':\n                if (v1 === null) {\n                    ret = false;\n                    break;\n                }\n                if (v2 === null) {\n                    ret = false;\n                    break;\n                }\n                if (! ((v1 as any) <= (v2 as any))) {\n                    ret = false;\n                }\n                break;\n            case '>':\n                if (v1 === null) {\n                    ret = false;\n                    break;\n                }\n                if (v2 === null) {\n                    ret = false;\n                    break;\n                }\n                if (! ((v1 as any) > (v2 as any))) {\n                    ret = false;\n                }\n                break;\n            case '>=':\n                if (v1 === null) {\n                    ret = false;\n                    break;\n                }\n                if (v2 === null) {\n                    ret = false;\n                    break;\n                }\n                if (! ((v1 as any) >= (v2 as any))) {\n                    ret = false;\n                }\n                break;\n            case 'like':\n                if (typeof v1 !== 'string') {\n                    ret = false;\n                    break;\n                }\n                if (typeof v2 !== 'string') {\n                    throw new Error(`Operator \"like\": operand(2) should be string.`);\n                }\n                {\n                    const re = new RegExp(convertPattern(v2), 'i');\n                    if (! re.test(v1)) {\n                        ret = false;\n                    }\n                }\n                break;\n            case 'not_like':\n                if (typeof v1 !== 'string') {\n                    ret = false;\n                    break;\n                }\n                if (typeof v2 !== 'string') {\n                    throw new Error(`Operator \"not_like\": operand(2) should be string.`);\n                }\n                {\n                    const re = new RegExp(convertPattern(v2), 'i');\n                    if (re.test(v1)) {\n                        ret = false;\n                    }\n                }\n                break;\n            case 'in':\n                if (! Array.isArray(v2)) {\n                    throw new Error(`Operator \"in\": operand(2) should be array.`);\n                }\n                if (! v2.filter(w => w !== null).includes(v1)) {\n                    // NOTE: `(null = ?)`, `(? = null)` and `(null = null)` always FALSE.\n                    ret = false;\n                }\n                break;\n            case 'not_in':\n                if (! Array.isArray(v2)) {\n                    throw new Error(`Operator \"not_in\": operand(2) should be array.`);\n                }\n                if (v1 === null) {\n                    // NOTE: Emulate SQL's 'not in'; `(null <> null)` always FALSE.\n                    ret = false;\n                    break;\n                }\n                if (v2.includes(null)) {\n                    ret = false;\n                    break;\n                }\n                if (v2.includes(v1)) {\n                    ret = false;\n                }\n                break;\n            case 'includes':\n                if (typeof v1 !== 'string') {\n                    ret = false;\n                    break;\n                }\n                if (! Array.isArray(v2)) {\n                    throw new Error(`Operator \"includes\": operand(2) should be array.`);\n                }\n                ret = false;\n                OUTER: for (const p of v2) {\n                    if (typeof p !== 'string') {\n                        throw new Error(`Operator \"includes\": operand(2) array items should be string.`);\n                    }\n                    const v1Items = v1.split(';');\n                    const v2Items = p.split(';');\n                    for (const q of v2Items) {\n                        if (! v1Items.includes(q)) {\n                            continue OUTER;\n                        }\n                    }\n                    ret = true;\n                    break;\n                }\n                break;\n            case 'excludes':\n                if (typeof v1 !== 'string') {\n                    // NOTE: Emulate SQL's 'not in'; `(null <> null)` always FALSE.\n                    ret = false;\n                    break;\n                }\n                if (! Array.isArray(v2)) {\n                    throw new Error(`Operator \"excludes\": operand(2) should be array.`);\n                }\n                {\n                    const v1Items = v1.split(';');\n                    for (const p of v2) {\n                        if (typeof p !== 'string') {\n                            throw new Error(`Operator \"excludes\": operand(2) array items should be string.`);\n                        }\n                        const v2Items = p.split(';');\n                        let matched = true;\n                        for (const q of v2Items) {\n                            if (! v1Items.includes(q)) {\n                                matched = false;\n                                break;\n                            }\n                        }\n                        if (matched) {\n                            ret = false;\n                            break;\n                        }\n                    }\n                }\n                break;\n            }\n        }\n        break;\n    }\n\n    return ret;\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function applyWhereConditions(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        conds: PreparedCondition[], records: any[]) {\n\n    const ret: any[] = [];\n\n    if (! records.length) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return ret;\n    }\n    const fieldNameMap = new Map<string, string>(Object.keys(records[0]).map(x => [x.toLowerCase(), x]));\n\n    NEXTREC: for (const record of records) {\n        for (const cond of conds) {\n            if (! evalCondition(fieldNameMap, null, false, ctx, cond, record)) {\n                continue NEXTREC;\n            }\n        }\n        ret.push(record);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return ret;\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function applyHavingConditions(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        conds: PreparedCondition[], groupedRecsArray: any[][]) {\n\n    const ret: any[][] = [];\n\n    if (! groupedRecsArray.length) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return ret;\n    }\n    const fieldNameMap = new Map<string, string>(Object.keys(groupedRecsArray[0][0]).map(x => [x.toLowerCase(), x]));\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const firstRec = groupedRecsArray[0][0];\n    const groupFields = new Map<string, string>(\n        ctx.query?.groupBy?.map(w => [w.toLowerCase(), getTrueCaseFieldName(firstRec, w) ?? '']));\n\n    NEXTREC: for (const groupedRecs of groupedRecsArray) {\n        for (const cond of conds) {\n            if (! evalCondition(fieldNameMap, groupFields, true, ctx, cond, groupedRecs)) {\n                continue NEXTREC;\n            }\n        }\n        ret.push(groupedRecs);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return ret;\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { PreparedQuery,\n         PreparedOrderByField }      from './types';\nimport { getTrueCasePathName,\n         getObjectTrueCasePathValue,\n         getObjectPathValue }        from './lib/util';\n\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function sortRecords(query: PreparedQuery, records: any[]) {\n    if (query.orderBy) {\n        const primaryPathLen = query.from[0].name.length;\n        const orderFields = query.orderBy;\n\n        records = records.sort((a, b) => {\n            const direction =\n                (f: PreparedOrderByField, r: number) =>\n                    f.direction === 'desc' ? -r : r;\n\n            const fieldAndFNames = orderFields.map(f => ({\n                f,\n                fName: getTrueCasePathName(records[0], f.name.slice(primaryPathLen)),\n            }));\n\n            // eslint-disable-next-line prefer-const\n            LOOP: for (let {f, fName} of fieldAndFNames) {\n                let va = null;\n                let vb = null;\n\n                if (fName !== null) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    va = getObjectTrueCasePathValue(a, fName);\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    vb = getObjectTrueCasePathValue(b, fName);\n                } else {\n                    // Fallback (when the child relationship of records[0] is null)\n\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    va = getObjectPathValue(a, f.name.slice(primaryPathLen));\n\n                    fName = getTrueCasePathName(b, f.name.slice(primaryPathLen));\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    vb = fName !== null ? getObjectTrueCasePathValue(b, fName) : null;\n                }\n\n                if (va === vb) {\n                    continue;\n                }\n                if (va === null) {\n                    return direction(f, f.nulls === 'last' ? 1 : -1); // default is `nulls first`\n                }\n                if (vb === null) {\n                    return direction(f, f.nulls === 'last' ? -1 : 1); // default is `nulls first`\n                }\n\n                switch (typeof va) {\n                case 'number': case 'bigint':\n                    return direction(f, (va as any) - (vb as any));\n                case 'string':\n                    // TODO: date and datetime\n                    return direction(f, va > vb ? 1 : -1);\n                default:\n                    // Ignore this field\n                    continue LOOP;\n                }\n            }\n            return 0;\n        });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return records;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nexport interface ParserInputWithCtx<T extends ArrayLike<T[number]>, C> {\r\n    src: T;\r\n    start: number;\r\n    end: number;\r\n    context: C;\r\n    templateArgs?: any[];       // For \"template strings\". NOTE: For backword compatibility, this is optional.\r\n    templateArgsPos?: number[]; // For \"template strings\". NOTE: For backword compatibility, this is optional.\r\n}\r\nexport type ParserInput<T extends ArrayLike<T[number]>> = ParserInputWithCtx<T, undefined>;\r\nexport type StringParserInputWithCtx<C> = ParserInputWithCtx<string, C>;\r\nexport type StringParserInput = StringParserInputWithCtx<undefined>;\r\n\r\nexport class ParseError<T extends ArrayLike<T[number]>, C, R> extends Error {\r\n    public result: ParserFnFailedResult<T, C, R>;\r\n    constructor(result: ParserFnFailedResult<T, C, R>) {\r\n        super(result.message);\r\n        this.result = result;\r\n    }\r\n}\r\n\r\n\r\nexport function parserInput<T extends ArrayLike<T[number]>>(src: T): ParserInputWithCtx<T, undefined>;\r\nexport function parserInput<T extends ArrayLike<T[number]>, C>(src: T, context: C): ParserInputWithCtx<T, C>;\r\nexport function parserInput<T extends ArrayLike<T[number]>, C>(src: T, context?: C): ParserInputWithCtx<T, C> {\r\n    return ({\r\n        src,\r\n        start: 0,\r\n        end: src.length,\r\n        context: context as any,\r\n        templateArgs: [],\r\n        templateArgsPos: [],\r\n    });\r\n}\r\n\r\n\r\nexport function templateStringsParserInput<C>(strings: TemplateStringsArray, values: any[], context?: C): ParserInputWithCtx<string, C> {\r\n    const templateArgsPos: number[] = [];\r\n    let pos = 0;\r\n    if (values.length) {\r\n        for (let i = 0; i < strings.length; i++) {\r\n            const x = strings[i];\r\n            if (i < values.length) {\r\n                templateArgsPos.push(pos + x.length);\r\n                pos += x.length + 1;\r\n            }\r\n        }\r\n    }\r\n    const joined = strings.join('\\x00');\r\n    return ({\r\n        src: joined,\r\n        start: 0,\r\n        end: joined.length,\r\n        context: context as any,\r\n        templateArgs: values,\r\n        templateArgsPos,\r\n    });\r\n}\r\n\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ParserFnSucceededResult<T extends ArrayLike<T[number]>, C, R> =\r\n    {succeeded: true, next: ParserInputWithCtx<T, C>, tokens: R[]};\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ParserFnFailedResult<T extends ArrayLike<T[number]>, C, R> =\r\n    {succeeded: false, error: boolean, src: T, pos: number, message: string};\r\n\r\nexport type ParserFnWithCtx<T extends ArrayLike<T[number]>, C, R> =\r\n    (input: ParserInputWithCtx<T, C>) =>\r\n        ParserFnSucceededResult<T, C, R> |\r\n        ParserFnFailedResult<T, C, R>;\r\n\r\nexport type ParserFn<T extends ArrayLike<T[number]>, R> = ParserFnWithCtx<T, undefined, R>;\r\nexport type StringParserFnWithCtx<C, R> = ParserFnWithCtx<string, C, R>;\r\nexport type StringParserFn<R> = StringParserFnWithCtx<undefined, R>;\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { ParserInputWithCtx,\r\n         ParseError,\r\n         parserInput,\r\n         ParserFnFailedResult,\r\n         ParserFnWithCtx } from './types';\r\n\r\n\r\n\r\nfunction getLineAndCol(src: string, pos: number) {\r\n    let line = 1;\r\n    let col = 1;\r\n\r\n    for (let i = 0; i <= pos; i++) {\r\n        switch (src[i]) {\r\n        case '\\r':\r\n            if (src[i + 1] === '\\n') {\r\n                i++;\r\n            }\r\n            // FALL_TURU\r\n        case '\\n':\r\n            line++;\r\n            col = 1;\r\n            break;\r\n        default:\r\n            col++;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return ({\r\n        line,\r\n        col,\r\n    });\r\n}\r\n\r\n\r\nexport function formatErrorMessage<T extends ArrayLike<T[number]>, C, R>(\r\n    result: ParserFnFailedResult<T, C, R>) {\r\n\r\n    let msg = '';\r\n    let src = '';\r\n    if (typeof result.src === 'string') {\r\n        src = result.src.slice(Math.max(result.pos - 5, 0), result.pos + 55);\r\n\r\n        let ar = src.split(/\\r\\n|\\n|\\r/);\r\n        ar = ar.slice(0, 1)\r\n            .concat('          ^~~~~~~~')\r\n            .concat(...ar.slice(1));\r\n        src = ar.join('\\n') + '\\n\\n';\r\n\r\n        const lineAndCol = getLineAndCol(result.src, result.pos);\r\n        msg =  (`parse failed at position:${\r\n            result.pos} line:${lineAndCol.line} col:${lineAndCol.col} ${\r\n            result.message ? ` ${result.message}` : ''}\\n     ${src}`);\r\n    } else {\r\n        src = '     (object)\\n          ^~~~~~~~';\r\n        try {\r\n            src = '     ' +\r\n                JSON.stringify((result.src as any).slice(Math.max(result.pos - 10, 0), result.pos)) + '\\n          ' +\r\n                JSON.stringify((result.src as any).slice(result.pos, result.pos + 1)) + '\\n          ' +\r\n                JSON.stringify((result.src as any).slice(result.pos + 1, result.pos + 10));\r\n\r\n            let ar = src.split(/\\r\\n|\\n|\\r/);\r\n            ar = ar.slice(0, 2)\r\n                .concat('          ^~~~~~~~')\r\n                .concat(...ar.slice(2));\r\n            src = ar.join('\\n') + '\\n\\n';\r\n        } catch (e) {}\r\n\r\n        msg = (`parse failed at position:${\r\n            result.pos} ${\r\n            result.message ? ` ${result.message}` : ''}\\n     ${src}`);\r\n    }\r\n    return msg;\r\n}\r\n\r\n\r\nexport function zeroWidth<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return ({\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n                templateArgs: input.templateArgs,\r\n                templateArgsPos: input.templateArgsPos,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function zeroWidthError<T extends ArrayLike<T[number]>, C, R>(\r\n        message: string\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        throw new ParseError({\r\n            succeeded: false,\r\n            error: true,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: message || '',\r\n        });\r\n        // return ({\r\n        //     succeeded: false,\r\n        //     error: true,\r\n        //     src: input.src,\r\n        //     pos: input.start,\r\n        //     message: message || '',\r\n        // });\r\n    });\r\n}\r\n\r\n\r\nexport function beginning<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return (input.start === 0 ? {\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n                templateArgs: input.templateArgs,\r\n                templateArgsPos: input.templateArgsPos,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        } : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"beginning\"',\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function end<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return (input.start === input.end ? {\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n                templateArgs: input.templateArgs,\r\n                templateArgsPos: input.templateArgsPos,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        } : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"end\"',\r\n        });\r\n    });\r\n}\r\n\r\n// TODO: match by callback function parser\r\n// TODO: `nesting` parser\r\n\r\n\r\nexport function quantify<T extends ArrayLike<T[number]>, C, R>(\r\n        min?: number, max?: number\r\n        ): (parser: ParserFnWithCtx<T, C, R>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    min = min || 0;\r\n    return (parser => {\r\n        return (input => {\r\n            let next = input;\r\n            const matched: Array<{next: ParserInputWithCtx<T, C>, tokens: R[]}> = [];\r\n\r\n            for (;;) {\r\n                const x = parser(next);\r\n                if (x.succeeded) {\r\n                    next = x.next;\r\n                    matched.push({next: x.next, tokens: x.tokens});\r\n                    if (max && max === matched.length) {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if (x.error) {\r\n                        return x;\r\n                    }\r\n                    if (matched.length >= (min as number)) {\r\n                        break;\r\n                    } else {\r\n                        return ({\r\n                            succeeded: false,\r\n                            error: false,\r\n                            src: next.src,\r\n                            pos: next.start,\r\n                            message: 'operator \"quantify\"',\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            if (matched.length > 0) {\r\n                const r: R[] = [];\r\n                for (const x of matched) {\r\n                    r.push(...x.tokens);\r\n                }\r\n                return ({\r\n                    succeeded: true,\r\n                    next: (matched[matched.length - 1]).next,\r\n                    tokens: r,\r\n                });\r\n            } else {\r\n                return ({\r\n                    succeeded: true,\r\n                    next: {\r\n                        src: input.src,\r\n                        start: input.start,\r\n                        end: input.end,\r\n                        context: input.context,\r\n                        templateArgs: input.templateArgs,\r\n                        templateArgsPos: input.templateArgsPos,\r\n                    },\r\n                    tokens: [],\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function first<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        let matched: {next: ParserInputWithCtx<T, C>, tokens: R[]} | null = null;\r\n\r\n        let last: ParserFnFailedResult<T, C, R> | null = null;\r\n        for (const parser of parsers) {\r\n            const x = parser(input);\r\n            if (x.succeeded) {\r\n                matched = {next: x.next, tokens: x.tokens};\r\n                break;\r\n            }\r\n            if (last) {\r\n                if (x.error) {\r\n                    if (!last.error || last.pos < x.pos) {\r\n                        last = x;\r\n                    }\r\n                } else if (last.pos < x.pos) {\r\n                    last = x;\r\n                }\r\n            } else {\r\n                last = x;\r\n            }\r\n        }\r\n\r\n        return (matched ? {\r\n            succeeded: true, next: matched.next, tokens: matched.tokens\r\n        } : last ? last : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"first\"',\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function or<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        const matched: Array<{next: ParserInputWithCtx<T, C>, tokens: R[]}> = [];\r\n\r\n        let last: ParserFnFailedResult<T, C, R> | null = null;\r\n        for (const parser of parsers) {\r\n            const x = parser(input);\r\n            if (x.succeeded) {\r\n                matched.push({next: x.next, tokens: x.tokens});\r\n            } else {\r\n                if (last) {\r\n                    if (x.error) {\r\n                        if (!last.error || last.pos < x.pos) {\r\n                            last = x;\r\n                        }\r\n                    } else if (last.pos < x.pos) {\r\n                        last = x;\r\n                    }\r\n                } else {\r\n                    last = x;\r\n                }\r\n            }\r\n        }\r\n        if (matched.length > 0) {\r\n            const z = matched.reduce((a, b) => a.next.start >= b.next.start ? a : b);\r\n            return ({succeeded: true, next: z.next, tokens: z.tokens});\r\n        }\r\n\r\n        return (last ? last : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"or\"',\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function transform<T extends ArrayLike<T[number]>, C, R>(\r\n        trans?: ((tokens: R[], input: ParserInputWithCtx<T, C>) => R[]), ctxTrans?: ((context: C) => C)\r\n        ): (...parsers: Array<ParserFnWithCtx<T, C, R>>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return ((...parsers) => {\r\n        return (input => {\r\n            let next = input;\r\n            const tokens: R[] = [];\r\n\r\n            for (const parser of parsers) {\r\n                const x = parser(next);\r\n                if (! x.succeeded) {\r\n                    return x;\r\n                }\r\n                next = x.next;\r\n                tokens.push(...x.tokens);\r\n            }\r\n\r\n            // TODO: report errors while transforming\r\n            const t2 = trans ? trans(tokens, input) : tokens;\r\n            return ({\r\n                succeeded: true,\r\n                next: ctxTrans ? {\r\n                    src: next.src,\r\n                    start: next.start,\r\n                    end: next.end,\r\n                    context: ctxTrans(next.context),\r\n                    templateArgs: next.templateArgs,\r\n                    templateArgsPos: next.templateArgsPos,\r\n                } : next,\r\n                tokens: t2,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function combine<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return transform<T, C, R>()(...parsers);\r\n}\r\n\r\n\r\nexport function lookAhead<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        let next = input;\r\n\r\n        for (const parser of parsers) {\r\n            const x = parser(next);\r\n            if (! x.succeeded) {\r\n                return x;\r\n            }\r\n            next = x.next;\r\n        }\r\n\r\n        return ({\r\n            succeeded: true,\r\n            next: input,\r\n            tokens: [],\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function lookBehind<T extends ArrayLike<T[number]>, C, R>(\r\n        n: number, helper?: () => R): (\r\n            ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n            ) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return ((...parsers) => {\r\n        return (input => {\r\n            if (input.start - n < 0) {\r\n                return ({\r\n                    succeeded: false,\r\n                    error: false,\r\n                    src: input.src,\r\n                    pos: input.start,\r\n                    message: 'lookBehind: src is too short',\r\n                });\r\n            }\r\n            let next: ParserInputWithCtx<T, C> = {\r\n                src: input.src,\r\n                start: input.start - n,\r\n                end: input.end,\r\n                context: input.context,\r\n                templateArgs: input.templateArgs,\r\n                templateArgsPos: input.templateArgsPos,\r\n            };\r\n\r\n            for (const parser of parsers) {\r\n                const x = parser(next);\r\n                if (! x.succeeded) {\r\n                    return x;\r\n                }\r\n                next = x.next;\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: input,\r\n                tokens: helper ? [helper()] : [],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ApplyProductionRulesArg<T extends ArrayLike<T[number]>, C, R> = {\r\n    rules: Array<ParserFnWithCtx<R[], C, R> |\r\n           {parser: ParserFnWithCtx<R[], C, R>, rtol: boolean}>,\r\n    maxApply?: number,\r\n    check: ParserFnWithCtx<R[], C, R>,\r\n};\r\n\r\nexport function applyProductionRules<T extends ArrayLike<T[number]>, C, R>(\r\n        args: ApplyProductionRulesArg<T, C, R>\r\n        ): (lexer: ParserFnWithCtx<T, C, R>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return (lexer => {\r\n        return (lexerInput => {\r\n            const lexResult = lexer(lexerInput);\r\n            if (! lexResult.succeeded) {\r\n                return lexResult;\r\n            }\r\n\r\n            const input = parserInput<R[], C>(lexResult.tokens, lexerInput.context);\r\n            let next = input;\r\n            let completed = false;\r\n\r\n            if (args.check(next).succeeded) {\r\n                return ({\r\n                    succeeded: true,\r\n                    next: lexResult.next,\r\n                    tokens: lexResult.tokens,\r\n                });\r\n            }\r\n\r\n            completed: for (let i = 0;\r\n                    args.maxApply !== void 0 ? i < args.maxApply : true; i++) {\r\n                let matched = false;\r\n\r\n                rules: for (const rule of args.rules) {\r\n                    const {parser, rtol} =\r\n                        typeof rule === 'function' ?\r\n                            {parser: rule, rtol: false} : rule;\r\n                    const len = next.src.length;\r\n\r\n                    for (let s = 0; s <= len; s++) {\r\n                        const x = parser({\r\n                            src: next.src,\r\n                            start: rtol ? len - s : s,\r\n                            end: next.src.length,\r\n                            context: next.context,\r\n                            templateArgs: next.templateArgs,\r\n                            templateArgsPos: next.templateArgsPos,\r\n                        });\r\n                        if (x.succeeded) {\r\n                            matched = true;\r\n                            const nextSrc = next.src.slice(0, rtol ? len - s : s);\r\n                            nextSrc.push(...x.tokens);\r\n                            nextSrc.push(...next.src.slice(x.next.start));\r\n                            next = {\r\n                                src: nextSrc,\r\n                                start: 0,\r\n                                end: nextSrc.length,\r\n                                context: x.next.context,\r\n                                templateArgs: x.next.templateArgs,\r\n                                templateArgsPos: x.next.templateArgsPos,\r\n                            };\r\n                            if (args.check(next).succeeded) {\r\n                                completed = true;\r\n                                break completed;\r\n                            }\r\n                            break rules;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (! matched) {\r\n                    break;\r\n                }\r\n            }\r\n            if (! completed) {\r\n                if (! args.check(next).succeeded) {\r\n                    throw new ParseError({\r\n                        succeeded: false,\r\n                        error: true,\r\n                        src: input.src,\r\n                        pos: input.start,\r\n                        message: 'The application of production rules was not finished',\r\n                    });\r\n                }\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: lexResult.next,\r\n                tokens: next.src,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function makeProgram<T extends ArrayLike<T[number]>, C, R>(\r\n    parser: ParserFnWithCtx<T, C, R>): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        try {\r\n            return parser(input);\r\n        } catch (e) {\r\n            if (e.result) {\r\n                return e.result;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { StringParserFnWithCtx } from './types';\r\nimport { zeroWidth,\r\n         zeroWidthError,\r\n         beginning,\r\n         end,\r\n         quantify,\r\n         first,\r\n         or,\r\n         transform,\r\n         lookAhead,\r\n         lookBehind,\r\n         ApplyProductionRulesArg,\r\n         applyProductionRules,\r\n         makeProgram } from './parser';\r\n\r\n\r\n\r\nexport function charSequence<C, R>(\r\n        helper: (token: string) => R\r\n        ): (needle: string) => StringParserFnWithCtx<C, R> {\r\n\r\n    return (needle => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            return (src.startsWith(needle) ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needle.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                    templateArgs: input.templateArgs,\r\n                    templateArgsPos: input.templateArgsPos,\r\n                },\r\n                tokens: [helper(needle)],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"charSequence(${needle})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClass<C, R>(\r\n        helper: (token: string) => R\r\n        ): (...needles: string[]) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            let index = -1;\r\n\r\n            const succeeded = needles.some((needle, idx) => {\r\n                const matched = src.startsWith(needle);\r\n                if (matched) {\r\n                    index = idx;\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            return (succeeded ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needles[index].length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                    templateArgs: input.templateArgs,\r\n                    templateArgsPos: input.templateArgsPos,\r\n                },\r\n                tokens: [helper(needles[index])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"charClass(${needles.join(',')})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClassNot<C, R>(\r\n    helper: (token: string) => R\r\n    ): (...needles: string[]) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n\r\n            for (const needle of needles) {\r\n                const matched = src.startsWith(needle);\r\n                if (matched) {\r\n                    return ({\r\n                        succeeded: false,\r\n                        error: false,\r\n                        src: input.src,\r\n                        pos: input.start,\r\n                        message: `operator \"charClassNot(${needles.join(',')})\"`,\r\n                    });\r\n                }\r\n            }\r\n            const p = input.src.codePointAt(input.start);\r\n            if (p === void 0) {\r\n                return ({\r\n                    succeeded: false,\r\n                    error: false,\r\n                    src: input.src,\r\n                    pos: input.start,\r\n                    message: `operator \"charClassNot(${needles.join(',')})\"`,\r\n                });\r\n            }\r\n            const c = String.fromCodePoint(p);\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + c.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                    templateArgs: input.templateArgs,\r\n                    templateArgsPos: input.templateArgsPos,\r\n                },\r\n                tokens: [helper(c)],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClassByNeedleFn<C, R>(\r\n        helper: (token: string) => R\r\n        ): (needle: (src: string) => number) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return (needle => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            const len = needle(src);\r\n\r\n            return (len >= 0 ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + len,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                    templateArgs: input.templateArgs,\r\n                    templateArgsPos: input.templateArgsPos,\r\n                },\r\n                tokens: [helper(src.substring(0, len))],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"charClassByNeedleFn\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function templateStringsParam<C, R>(\r\n        criteria: (o: any) => boolean, conv?: (o: any) => any): StringParserFnWithCtx<C, R> {\r\n\r\n    return (input => {\r\n        const src = input.src.slice(input.start, input.start + 1);\r\n        if (src === '\\x00') {\r\n            if (input.templateArgsPos) {\r\n                let argIdx = -1;\r\n                const strIdx = input.templateArgsPos.findIndex((v, i) => {\r\n                    argIdx = i;\r\n                    return v === input.start;\r\n                });\r\n                if (0 <= strIdx) {\r\n                    const o = input.templateArgs![argIdx];\r\n                    if (criteria(o)) {\r\n                        return ({\r\n                            succeeded: true,\r\n                            next: {\r\n                                src: input.src,\r\n                                start: input.start + 1,\r\n                                end: input.end,\r\n                                context: input.context,\r\n                                templateArgs: input.templateArgs,\r\n                                templateArgsPos: input.templateArgsPos,\r\n                            },\r\n                            tokens: [(conv ? conv(o) : o)],\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return ({\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: `operator \"stringTemplatesParam()\"`,\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function getStringParsers<C, R>(\r\n        params: {\r\n            rawToToken: (rawToken: string) => R,\r\n            concatTokens: (tokens: R[]) => R[],\r\n        }) {\r\n\r\n    const seq = charSequence<C, R>(params.rawToToken);\r\n    const cls = charClass<C, R>(params.rawToToken);\r\n    const notCls = charClassNot<C, R>(params.rawToToken);\r\n    const clsFn = charClassByNeedleFn<C, R>(params.rawToToken);\r\n    const cat = transform<string, C, R>(params.concatTokens);\r\n    const once = quantify<string, C, R>(1, 1);\r\n    const repeat = quantify<string, C, R>();\r\n    // TODO: reduce unneccessary call for adding types.\r\n    const qty = (min?: number, max?: number) => quantify<string, C, R>(min, max);\r\n    const combine = transform<string, C, R>();\r\n    const erase = transform<string, C, R>(tokens => []);\r\n\r\n    const isAlpha = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'Z') ||\r\n            ('a' <= c && c <= 'z')) ? c.length : -1);\r\n    });\r\n\r\n    const isUpper = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('A' <= c && c <= 'Z') ? c.length : -1);\r\n    });\r\n\r\n    const isLower = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('a' <= c && c <= 'z') ? c.length : -1);\r\n    });\r\n\r\n    const isNumber = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '9') ? c.length : -1);\r\n    });\r\n\r\n    const isNonZeroNumber = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('1' <= c && c <= '9') ? c.length : -1);\r\n    });\r\n\r\n    const isBinNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '1') ? c.length : -1);\r\n    });\r\n\r\n    const isOctNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '7') ? c.length : -1);\r\n    });\r\n\r\n    const isHexNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'F') ||\r\n            ('a' <= c && c <= 'f') ||\r\n            ('0' <= c && c <= '9')) ? c.length : -1);\r\n    });\r\n\r\n    const isAlNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'Z') ||\r\n            ('a' <= c && c <= 'z') ||\r\n            ('0' <= c && c <= '9')) ? c.length : -1);\r\n    });\r\n\r\n    const isSpace = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((' \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n            '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n            '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c) ? c.length : -1);\r\n    });\r\n\r\n    const isSpaceWithinSingleLine = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((' \\f\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n            '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n            '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c) ? c.length : -1);\r\n    });\r\n\r\n    const isControl = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            (0x0000 <= p && p <= 0x001f) ||\r\n            (0x007f <= p && p <= 0x009f)) ? c.length : -1);\r\n    });\r\n\r\n    const isWord = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ((' \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n              '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n              '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c)) ||\r\n            ((0x0000 <= p && p <= 0x001f) ||\r\n             (0x007f <= p && p <= 0x009f)) ?\r\n            -1 : c.length);\r\n    });\r\n\r\n    const isNewline = cls('\\r\\n', '\\n', '\\r');\r\n\r\n    const isAny = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return c.length;\r\n    });\r\n\r\n\r\n    const binSep =\r\n        first(isBinNum, cls('_'));\r\n    const octSep =\r\n        first(isOctNum, cls('_'));\r\n    const hexSep =\r\n        first(isHexNum, cls('_'));\r\n\r\n    const binaryIntegerNumber = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isBinNum), repeat(binSep)), );\r\n    const octalIntegerNumber = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isOctNum), repeat(octSep)), );\r\n    const hexIntegerValue = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isHexNum), repeat(hexSep)), );\r\n    const decimalIntegerNumber =\r\n        combine(cat(qty(0, 1)(cls('+', '-')),\r\n            first(combine(once(isNonZeroNumber), repeat(first(isNumber, cls('_')))),\r\n                seq('0'), )));\r\n    const bigDecimalIntegerNumber =\r\n        combine(cat(decimalIntegerNumber,\r\n            erase(seq('n')), ));\r\n    const floatingPointNumber =\r\n        combine(cat(qty(0, 1)(cls('+', '-')),\r\n            first(combine(once(isNonZeroNumber), repeat(first(isNumber, cls('_')))),\r\n                seq('0'), ),\r\n            qty(0, 1)(combine(seq('.'),\r\n                qty(1)(first(isNumber, cls('_'))), )),\r\n            qty(0, 1)(combine(cls('E', 'e'), qty(0, 1)(cls('+', '-')),\r\n                first(combine(once(isNonZeroNumber), repeat(isNumber)), seq('0')), ))));\r\n\r\n    // TODO: reduce unneccessary call for adding types.\r\n    return ({\r\n        seq,\r\n        cls,\r\n        notCls,\r\n        clsFn,\r\n        classes: {\r\n            alpha: isAlpha,\r\n            upper: isUpper,\r\n            lower: isLower,\r\n            num: isNumber,\r\n            nonzero: isNonZeroNumber,\r\n            bin: isBinNum,\r\n            oct: isOctNum,\r\n            hex: isHexNum,\r\n            alnum: isAlNum,\r\n            space: isSpace,\r\n            spaceWithinSingleLine: isSpaceWithinSingleLine,\r\n            ctrl: isControl,\r\n            newline: isNewline,\r\n            word: isWord,\r\n            any: isAny,\r\n        },\r\n        numbers: {\r\n            bin: binaryIntegerNumber,\r\n            oct: octalIntegerNumber,\r\n            hex: hexIntegerValue,\r\n            int: decimalIntegerNumber,\r\n            bigint: bigDecimalIntegerNumber,\r\n            float: floatingPointNumber,\r\n        },\r\n        isParam: templateStringsParam,\r\n        cat,\r\n        once,\r\n        repeat,\r\n        qty,\r\n        zeroWidth: (helper?: () => R) => zeroWidth<string, C, R>(helper), // TODO:\r\n        err: (message: string) => zeroWidthError<string, C, R>(message),  // TODO:\r\n        beginning: (helper?: () => R) => beginning<string, C, R>(helper), // TODO:\r\n        end: (helper?: () => R) => end<string, C, R>(helper),             // TODO:\r\n        first: (...parsers: Array<StringParserFnWithCtx<C, R>>) => first<string, C, R>(...parsers), // TODO:\r\n        or: (...parsers: Array<StringParserFnWithCtx<C, R>>) => or<string, C, R>(...parsers),       // TODO:\r\n        combine,\r\n        erase,\r\n        trans: (fn: (tokens: R[]) => R[]) => transform<string, C, R>(fn),                                 // TODO:\r\n        ahead: (...parsers: Array<StringParserFnWithCtx<C, R>>) => lookAhead<string, C, R>(...parsers),   // TODO:\r\n        behind: (n: number, helper?: () => R) => lookBehind<string, C, R>(n, helper),\r\n        rules: (args: ApplyProductionRulesArg<string, C, R>) => applyProductionRules<string, C, R>(args), // TODO:\r\n        makeProgram,\r\n    });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { ParserFnWithCtx } from './types';\r\nimport { zeroWidth,\r\n         zeroWidthError,\r\n         beginning,\r\n         end,\r\n         quantify,\r\n         first,\r\n         or,\r\n         transform,\r\n         lookAhead,\r\n         lookBehind,\r\n         ApplyProductionRulesArg,\r\n         applyProductionRules,\r\n         makeProgram } from './parser';\r\n\r\n\r\n\r\nexport function objSequence<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (needle: T) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return (needle => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            let matched = true;\r\n\r\n            if (len >= needle.length) {\r\n                for (let i = 0; i < needle.length; i++) {\r\n                    if (! comparator(input.src[input.start + i], needle[i])) {\r\n                        matched = false;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                matched = false;\r\n            }\r\n\r\n            return (matched ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needle.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                    templateArgs: input.templateArgs,\r\n                    templateArgsPos: input.templateArgsPos,\r\n                },\r\n                tokens: [helper(needle)],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"objSequence(${needle})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClass<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (...needles: Array<T[number]>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            let index = -1;\r\n\r\n            const succeeded = len > 0 ? needles.some((needle, idx) => {\r\n                if (comparator(input.src[input.start], needle)) {\r\n                    index = idx;\r\n                    return true;\r\n                }\r\n            }) : false;\r\n\r\n            return (succeeded ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                    templateArgs: input.templateArgs,\r\n                    templateArgsPos: input.templateArgsPos,\r\n                },\r\n                tokens: [helper(needles[index])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"objClass(${needles.join(',')})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClassNot<T extends ArrayLike<T[number]>, C, R>(\r\n    helper: (token: T[number]) => R,\r\n    comparator: (a: T[number], b: T[number]) => boolean,\r\n    ): (...needles: Array<T[number]>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n\r\n            if (len > 0) {\r\n                for (const needle of needles) {\r\n                    let matched = true;\r\n\r\n                    if (! comparator(input.src[input.start], needle)) {\r\n                        matched = false;\r\n                        break;\r\n                    }\r\n\r\n                    if (matched) {\r\n                        return ({\r\n                            succeeded: false,\r\n                            error: false,\r\n                            src: input.src,\r\n                            pos: input.start,\r\n                            message: `operator \"objClassNot(${needles.join(',')})\"`,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                    templateArgs: input.templateArgs,\r\n                    templateArgsPos: input.templateArgsPos,\r\n                },\r\n                tokens: [helper(input.src[input.start])],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClassByNeedleFn<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (needle: (src: T[number]) => boolean) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return (needle => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            const matched = len > 0 ? needle(input.src[input.start]) : false;\r\n\r\n            return (matched ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                    templateArgs: input.templateArgs,\r\n                    templateArgsPos: input.templateArgsPos,\r\n                },\r\n                tokens: [helper(input.src[input.start])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"objClassByNeedleFn\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function getObjectParsers<T extends ArrayLike<T[number]>, C, R>(\r\n        params: {\r\n            rawToToken: (rawToken: T[number]) => R,\r\n            concatTokens: (tokens: R[]) => R[],\r\n            comparator: (a: T[number], b: T[number]) => boolean,\r\n        }) {\r\n\r\n    const clsFn = objClassByNeedleFn<T, C, R>(params.rawToToken, params.comparator);\r\n\r\n    const isAny = clsFn(src => true);\r\n\r\n    // TODO: reduce unneccessary call for adding types.\r\n    return ({\r\n        seq: objSequence<T, C, R>(params.rawToToken, params.comparator),\r\n        cls: objClass<T, C, R>(params.rawToToken, params.comparator),\r\n        notCls: objClassNot<T, C, R>(params.rawToToken, params.comparator),\r\n        clsFn,\r\n        classes: {\r\n            any: isAny,\r\n        },\r\n        cat: transform<T, C, R>(params.concatTokens),\r\n        once: quantify<T, C, R>(1, 1),\r\n        repeat: quantify<T, C, R>(),\r\n        qty: (min?: number, max?: number) => quantify<T, C, R>(min, max), // TODO:\r\n        zeroWidth: (helper?: () => R) => zeroWidth<T, C, R>(helper),      // TODO:\r\n        err: (message: string) => zeroWidthError<T, C, R>(message),       // TODO:\r\n        beginning: (helper?: () => R) => beginning<T, C, R>(helper),      // TODO:\r\n        end: (helper?: () => R) => end<T, C, R>(helper),                  // TODO:\r\n        first: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => first<T, C, R>(...parsers), // TODO:\r\n        or: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => or<T, C, R>(...parsers),       // TODO:\r\n        combine: transform<T, C, R>(),\r\n        erase: transform<T, C, R>(tokens => []),\r\n        trans: (fn: (tokens: R[]) => R[]) => transform<T, C, R>(fn),                            // TODO:\r\n        ahead: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => lookAhead<T, C, R>(...parsers), // TODO:\r\n        behind: (n: number, helper?: () => R) => lookBehind<T, C, R>(n, helper),\r\n        rules: (args: ApplyProductionRulesArg<T, C, R>) => applyProductionRules<T, C, R>(args), // TODO:\r\n        makeProgram,\r\n    });\r\n}\r\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { parserInput,\n         templateStringsParserInput } from 'fruitsconfits/modules/lib/types';\nimport { formatErrorMessage }         from 'fruitsconfits/modules/lib/parser';\nimport { getStringParsers }           from 'fruitsconfits/modules/lib/string-parser';\nimport { getObjectParsers }           from 'fruitsconfits/modules/lib/object-parser';\nimport { PreparedValue,\n         PreparedFieldListItem,\n         PreparedResolver,\n         PreparedCondition,\n         PreparedOrderByField,\n         ParsedQuery }                from '../types';\nimport { DatePattern,\n         DateTimePattern,\n         dummyTargetObject,\n         isUnsafeVarNames }           from './util';\n\n\n\ninterface SxOp {\n    'op': string;\n}\n\ninterface SxSymbol {\n    'symbol': string;\n}\n\ninterface SxObject {\n    'type': /* string */ any;\n}\n\ninterface SxName {\n    'name': /* string */ any[];\n}\n\ntype SxToken =\n    SxSymbol | SxObject | SxName |\n    PreparedValue | PreparedFieldListItem | PreparedResolver |\n    PreparedCondition | PreparedOrderByField | Partial<ParsedQuery> |\n    string | number | boolean | null | SxToken[];\n\ntype Ast = SxToken | SxOp | undefined | Ast[];\n\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface Ctx {}\n\n\nconst $s = getStringParsers<Ctx, Ast>({\n    rawToToken: rawToken => rawToken,\n    concatTokens: tokens => (tokens.length ?\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        [tokens.reduce((a, b) => String(a) + b)] : []),\n});\n\nconst $o = getObjectParsers<Ast[], Ctx, Ast>({\n    rawToToken: rawToken => rawToken,\n    concatTokens: tokens => (tokens.length ?\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        [tokens.reduce((a, b) => String(a) + b)] : []),\n    comparator: (a, b) => a === b,\n});\n\nconst {seq, cls, notCls, clsFn, classes, numbers, isParam, cat,\n       once, repeat, qty, zeroWidth, err, beginning, end,\n       first, or, combine, erase, trans, ahead, rules,\n       makeProgram} = $s;\n\nconst seqI = (x: string) => clsFn(c => c.slice(0, x.length).toLocaleLowerCase() === x ? x.length : -1);\n\n\nconst unaryOp = (op: string, op1: any) => {\n    return {type: 'condition', op, operands: [op1]};\n};\n\nconst binaryOp = (op: string, op1: any, op2: any) => {\n    return {type: 'condition', op, operands: [op1, op2]};\n};\n\nconst isOperator = (v: any, op: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (typeof v === 'object' && v.type === 'rawop' && v.op === op) {\n        return true;\n    }\n    return false;\n};\n\nconst isValue = (v: any) => {\n    // TODO: check type\n    return true;\n};\n\n\nconst lineComment =\n    combine(\n        erase(qty(2)(cls('-'))),\n        first(\n            combine(\n                repeat(notCls('\\r\\n', '\\n', '\\r')),\n                first(classes.newline, ahead(end())), ),\n            first(classes.newline, ahead(end())), ));\n\nconst blockComment =\n    combine(\n        seq('/*'),\n            repeat(notCls('*/')),\n            seq('*/'), );\n\nconst commentOrSpace =\n    first(classes.space, lineComment, blockComment);\n\n\nconst reservedKeywords =\n    first(\n        combine(seqI('select'), input => wordBoundary(input)),\n        combine(seqI('from'), input => wordBoundary(input)),\n        combine(seqI('where'), input => wordBoundary(input)),\n        cat(combine(seqI('order'), erase(qty(1)(commentOrSpace)), seqI('by'))),\n        cat(combine(seqI('group'), erase(qty(1)(commentOrSpace)), seqI('by'))),\n        combine(seqI('having'), input => wordBoundary(input)),\n        combine(seqI('offset'), input => wordBoundary(input)),\n        combine(seqI('limit'), input => wordBoundary(input)), );\n\nconst notAheadReservedKeywords =\n    ahead(input => {\n        const result = combine(\n            reservedKeywords,\n            first(\n                qty(1)(commentOrSpace),\n                cls('(', ')', \"'\", '\"', '=', '!', '<', '>'),\n                end(), ))(input);\n        if (result.succeeded) {\n            return ({\n                succeeded: false,\n                error: false,\n                src: input.src,\n                pos: input.start,\n                message: 'Unexpected reserved keyword aheads',\n            });\n        } else {\n            return ({\n                succeeded: true,\n                next: {\n                    src: input.src,\n                    start: input.start,\n                    end: input.end,\n                    context: input.context,\n                },\n                tokens: [],\n            });\n        }\n    });\n\n\nconst isWord = (s: string) => {\n    if (typeof s !== 'string') {\n        return false;\n    }\n    return /^[A-Za-z0-9$_\"]$/.test(s);\n}\n\n\nconst wordBoundary =\n    ahead(input => {\n        let w = false;\n        if (input.src.length === 0) {\n            w = true;\n        } else if (input.start === input.end) {\n            w = isWord(input.src[input.start - 1]);\n        } else if (input.start === 0) {\n            w = isWord(input.src[input.start]);\n        } else {\n            w = (!isWord(input.src[input.start - 1]) && isWord(input.src[input.start])) ||\n                (isWord(input.src[input.start - 1]) && !isWord(input.src[input.start]));\n        }\n        if (w) {\n            return ({\n                succeeded: true,\n                next: {\n                    src: input.src,\n                    start: input.start,\n                    end: input.end,\n                    context: input.context,\n                },\n                tokens: [],\n            });\n        } else {\n            return ({\n                succeeded: false,\n                error: false,\n                src: input.src,\n                pos: input.start,\n                message: 'Expect word break',\n            });\n        }\n    });\n\n\nconst trueValue =\n    trans(tokens => [true])\n    (seqI('true'), wordBoundary);\n\nconst falseValue =\n    trans(tokens => [false])\n    (seqI('false'), wordBoundary);\n\nconst nullValue =\n    trans(tokens => [null])\n    (seqI('null'), wordBoundary);\n\nconst positiveInfinityValue =\n    trans(tokens => [Number.POSITIVE_INFINITY])\n    (qty(0, 1)(seq('+')), seq('Infinity'), wordBoundary);\n\nconst negativeInfinityValue =\n    trans(tokens => [Number.NEGATIVE_INFINITY])\n    (seq('-Infinity'), wordBoundary);\n\nconst nanValue =\n    trans(tokens => [Number.NaN])\n    (seq('NaN'), wordBoundary);\n\n\nconst binaryIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 2)])\n    (numbers.bin(seq('0b')));\n\nconst octalIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 8)])\n    (numbers.oct(seq('0o'), seq('0')));\n\nconst hexIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 16)])\n    (numbers.hex(seq('0x'), seq('0X')));\n\nconst decimalIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 10)])\n    (numbers.int);\n\nconst floatingPointNumberValue =\n    trans(tokens => [Number.parseFloat((tokens as string[])[0].replace(/_/g, ''))])\n    (numbers.float);\n\nconst numberValue =\n    first(octalIntegerValue,\n          hexIntegerValue,\n          binaryIntegerValue,\n          floatingPointNumberValue,\n          decimalIntegerValue,\n          positiveInfinityValue,\n          negativeInfinityValue,\n          nanValue, );\n\n\nconst stringEscapeSeq = first(\n    trans(t => ['\\''])(seq('\\\\\\'')),\n    trans(t => ['\\\"'])(seq('\\\\\"')),\n    trans(t => ['\\`'])(seq('\\\\`')),\n    trans(t => ['/'])(seq('\\\\/')),\n    trans(t => ['\\\\'])(seq('\\\\\\\\')),\n    trans(t => [''])(seq('\\\\\\r\\n')),\n    trans(t => [''])(seq('\\\\\\r')),\n    trans(t => [''])(seq('\\\\\\n')),\n    trans(t => ['\\n'])(seq('\\\\n')),\n    trans(t => ['\\n'])(seq('\\\\N')),\n    trans(t => ['\\r'])(seq('\\\\r')),\n    trans(t => ['\\r'])(seq('\\\\R')),\n    trans(t => ['\\v'])(seq('\\\\v')),\n    trans(t => ['\\t'])(seq('\\\\t')),\n    trans(t => ['\\t'])(seq('\\\\T')),\n    trans(t => ['\\b'])(seq('\\\\b')),\n    trans(t => ['\\b'])(seq('\\\\B')),\n    trans(t => ['\\f'])(seq('\\\\f')),\n    trans(t => ['\\f'])(seq('\\\\F')),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\u')),\n                qty(4, 4)(classes.hex), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\u{')),\n                qty(1, 6)(classes.hex),\n                erase(seq('}')), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\x')),\n                qty(2, 2)(classes.hex), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 8))])(\n        cat(erase(seq('\\\\')),\n                qty(3, 3)(classes.oct), )));\n\nconst stringValue =\n    trans(tokens => [tokens[0] ?? ''])(\n        erase(seq(\"'\")),\n            cat(repeat(first(\n                stringEscapeSeq,\n                combine(cls('\\r', '\\n'), err('Line breaks within strings are not allowed.')),\n                notCls(\"'\"), ))),\n        erase(seq(\"'\")), );\n\n\nconst dateValue =\n    trans(tokens => [{type: 'date', value: tokens[0]}])(cat(\n        qty(4, 4)(classes.num),\n        cls('-'),\n        qty(2, 2)(classes.num),\n        cls('-'),\n        qty(2, 2)(classes.num),\n        wordBoundary, ));\n\n\nconst dateTimeValue =\n    trans(tokens => [{type: 'datetime', value: tokens[0]}])(cat(\n        qty(4, 4)(classes.num),\n        cls('-'),\n        qty(2, 2)(classes.num),\n        cls('-'),\n        qty(2, 2)(classes.num),\n        cls('T'),\n        qty(2, 2)(classes.num),\n        cls(':'),\n        qty(2, 2)(classes.num),\n        qty(0, 1)(combine(\n            cls(':'),\n            qty(2, 2)(classes.num), )),\n        first(\n            cls('Z'),\n            combine(\n                first(cls('+'), cls('-')),\n                qty(2, 2)(classes.num),\n                cls(':'),\n                qty(2, 2)(classes.num), )),\n        wordBoundary, ));\n\n\nconst symbolStringValue =\n    trans(tokens => {\n        const sym = tokens[0] ?? '';\n        if (isUnsafeVarNames(dummyTargetObject, sym as string)) {\n            throw new Error(`Unsafe symbol name is appeared: ${sym as string}`);\n        }\n        return [sym];\n    })(\n        erase(seq('\"')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                combine(cls('\\r', '\\n'), err('Line breaks within strings are not allowed.')),\n                notCls('\"'), ))),\n        erase(seq('\"')), );\n\n\nconst symbolName =\n    trans(tokens => {\n        if (isUnsafeVarNames(dummyTargetObject, tokens[0] as string)) {\n            throw new Error(`Unsafe symbol name is appeared: ${tokens[0] as string}`);\n        }\n        return tokens;\n    })(cat(combine(\n        first(classes.alpha, cls('$', '_')),\n        repeat(first(classes.alnum, cls('$', '_'))), )));\n\n\nconst complexSymbolName =\n    trans(tokens => [{name: tokens}])(\n        first(symbolName, symbolStringValue),\n        repeat(combine(\n            erase(repeat(commentOrSpace),\n                  cls('.'),\n                  repeat(commentOrSpace), ),\n            first(symbolName, symbolStringValue), )));\n\n\nconst parameterizedValue =\n    trans(tokens => [{type: 'parameter', name: tokens[0]}])(\n        erase(seq(':')),\n        symbolName, );\n\n\nconst literalValue =\n    first(\n        isParam(o => {\n            switch (typeof o) {\n            case 'number': case 'string': case 'boolean':\n                return true;\n            case 'object':\n                if (o === null) {\n                    return true;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                if ((o as any).type) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    switch ((o as any).type) {\n                    case 'date':\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                        if (typeof (o as any).value === 'string') {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                            return DatePattern.test((o as any).value);\n                        }\n                        break;\n                    case 'datetime':\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                        if (typeof (o as any).value === 'string') {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                            return DateTimePattern.test((o as any).value);\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n            return false;\n        }),\n        dateTimeValue,\n        dateValue,\n        numberValue,\n        stringValue,\n        trueValue,\n        falseValue,\n        nullValue,\n        parameterizedValue, );\n\n\nconst selectFieldFunctionCall =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{fn: tokens[0], args: tokens.slice(1)} as any])(\n        symbolName,\n        erase(repeat(commentOrSpace)),\n        erase(cls('(')),\n        erase(repeat(commentOrSpace)),\n        repeat(first(\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            trans(tokens => [{type: 'fncall', ...(tokens[0] as object)}])(\n                input => selectFieldFunctionCall(input), ),\n            literalValue,\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            trans(tokens => [{type: 'field', ...(tokens[0] as object)}])(\n                complexSymbolName, ))),\n        repeat(combine(\n            erase(repeat(commentOrSpace)),\n            erase(cls(',')),\n            erase(repeat(commentOrSpace)),\n            first(\n                // eslint-disable-next-line @typescript-eslint/ban-types\n                trans(tokens => [{type: 'fncall', ...(tokens[0] as object)}])(\n                    input => selectFieldFunctionCall(input), ),\n                literalValue,\n                // eslint-disable-next-line @typescript-eslint/ban-types\n                trans(tokens => [{type: 'field', ...(tokens[0] as object)}])(\n                    complexSymbolName, )))),\n        erase(repeat(commentOrSpace)),\n        erase(cls(')')), );\n\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-return\nconst subQuery = trans(tokens => [{query: tokens[0]} as any])(\n    erase(cls('('),\n          repeat(commentOrSpace), ),\n    input => selectStatement(input),\n    erase(repeat(commentOrSpace),\n          cls(')'), ));\n\n\nconst listValue = trans(tokens => [tokens])(\n    erase(cls('('),\n          repeat(commentOrSpace), ),\n    literalValue,\n    erase(repeat(commentOrSpace)),\n    repeat(combine(\n        erase(cls(','),\n              repeat(commentOrSpace), ),\n        literalValue, )),\n    erase(repeat(commentOrSpace),\n          cls(')'), ));\n\n\nconst complexSelectFieldName =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            ...(tokens[0] as object),\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            ...{aliasName: (tokens.length > 1 ? tokens[1] as object : null)}} as any])(\n        notAheadReservedKeywords,\n        first(\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            trans(tokens => [{type: 'fncall', ...(tokens[0] as object)}])(\n                selectFieldFunctionCall, ),\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            trans(tokens => [{type: 'field', ...(tokens[0] as object)}])(\n                complexSymbolName, ),\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            trans(tokens => [{type: 'subquery', ...(tokens[0] as object)}])(\n                subQuery, )),\n        first(\n            combine(\n                erase(repeat(commentOrSpace)), // TODO:\n                notAheadReservedKeywords,\n                symbolName, ),\n            zeroWidth(() => null), ));\n\n\nconst selectFieldList =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{select: tokens} as any])(\n        complexSelectFieldName,\n        erase(repeat(commentOrSpace)),\n        repeat(combine(\n            erase(cls(',')),\n            erase(repeat(commentOrSpace)),\n            complexSelectFieldName,\n            erase(repeat(commentOrSpace)), )));\n\n\nconst fromClause =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{from: tokens} as any])(\n        erase(seqI('from')),\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/ban-types\n        trans(tokens => [{...(tokens[0] as object), aliasName: tokens[1] ?? null} as any])(\n            erase(qty(1)(commentOrSpace)),\n            notAheadReservedKeywords,\n            complexSymbolName,\n            qty(0, 1)(combine(\n                erase(qty(1)(commentOrSpace)),\n                notAheadReservedKeywords,\n                symbolName, ))),\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/ban-types\n        repeat(trans(tokens => [{...(tokens[0] as object), aliasName: tokens[1] ?? null} as any])(\n            erase(repeat(commentOrSpace),\n                  cls(','),\n                  repeat(commentOrSpace), ),\n            notAheadReservedKeywords,\n            complexSymbolName,\n            first(\n                combine(\n                    erase(qty(1)(commentOrSpace)),\n                    notAheadReservedKeywords,\n                    symbolName, ),\n                zeroWidth(() => null), ))));\n\n\nconst conditionalOperator =\n    first(seq('!='),\n          seq('<='),\n          seq('>='),\n          seq('='),\n          seq('<'),\n          seq('>'),\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          trans(tokens => [`${tokens[0]}_${tokens[1]}`])(\n              seqI('not'),\n                  erase(qty(1)(commentOrSpace)),\n                  first(seqI('like'), seqI('in')),\n                  erase(wordBoundary, repeat(commentOrSpace)), ),\n          combine(seqI('like'),\n                  erase(wordBoundary, repeat(commentOrSpace)), ),\n          combine(seqI('in'),\n                  erase(wordBoundary, repeat(commentOrSpace)), ),\n          combine(seqI('includes'),\n                  erase(wordBoundary, repeat(commentOrSpace)), ),\n          combine(seqI('excludes'),\n                  erase(wordBoundary, repeat(commentOrSpace)), ));\n\n\n// production rules:\n//   S -> S \"not\" S\nconst conditionExpressionExprRule3 = $o.trans(tokens => [unaryOp('not', tokens[1])])(\n    $o.clsFn(t => isOperator(t, 'not')),\n    $o.clsFn(t => isValue(t)),\n);\n\n// production rules:\n//   S -> S \"and\" S\nconst conditionExpressionExprRule2 = $o.trans(tokens => [binaryOp('and', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, 'and')),\n    $o.clsFn(t => isValue(t)),\n);\n\n// production rules:\n//   S -> S \"or\" S\nconst conditionExpressionExprRule1 = $o.trans(tokens => [binaryOp('or', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, 'or')),\n    $o.clsFn(t => isValue(t)),\n);\n\n\nconst whereFieldExpression =\n    trans(tokens => [{\n            type: 'condition',\n            op: tokens[1],\n            operands: tokens.slice(0, 1).concat(tokens.slice(2))}])(\n        notAheadReservedKeywords,\n        first(\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            trans(tokens => [{type: 'fncall', ...(tokens[0] as object)}])(\n                selectFieldFunctionCall, ),\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            trans(tokens => [{type: 'field', ...(tokens[0] as object)}])(\n                complexSymbolName, )),\n        erase(repeat(commentOrSpace)),\n        conditionalOperator,\n        erase(repeat(commentOrSpace)),\n        first(literalValue,\n              // eslint-disable-next-line @typescript-eslint/ban-types\n              trans(tokens => [{type: 'subquery', ...(tokens[0] as object)}])(\n                  subQuery, ),\n              // eslint-disable-next-line @typescript-eslint/ban-types\n              trans(tokens => [{type: 'fncall', ...(tokens[0] as object)}])(\n                  selectFieldFunctionCall, ),\n              listValue, ));\n\n\nconst whereConditionExpressionInnerRoot =\n    trans(tokens => tokens)(\n        qty(0, 1)(combine(\n            trans(tokens => [{type: 'rawop', op: tokens[0]} as Ast])(seqI('not')),\n            erase(wordBoundary, repeat(commentOrSpace)), )),\n        first(\n            trans(tokens => tokens)(\n                erase(repeat(commentOrSpace)),\n                erase(cls('(')),\n                erase(repeat(commentOrSpace)),\n                input => whereConditionExpression(input),\n                erase(repeat(commentOrSpace)),\n                erase(cls(')')), ),\n            whereFieldExpression, ),\n        repeat(combine(\n            erase(repeat(commentOrSpace)),\n            trans(tokens => [{type: 'rawop', op: tokens[0]} as Ast])(first(seqI('and'), seqI('or'))),\n            erase(wordBoundary, repeat(commentOrSpace)),\n            input => whereConditionExpression(input), )));\n\n\nconst whereConditionExpression = rules({\n    rules: [\n        conditionExpressionExprRule3,\n        conditionExpressionExprRule2,\n        conditionExpressionExprRule1,\n    ],\n    check: $o.combine($o.classes.any, $o.end()),\n})(trans(tokens => tokens)(whereConditionExpressionInnerRoot));\n\n\nconst whereClause =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{where: [tokens[0]]} as any])(\n        erase(repeat(commentOrSpace), wordBoundary),\n        erase(seqI('where')),\n        erase(first(ahead(cls('(')),\n                    qty(1)(commentOrSpace),\n                    combine(repeat(commentOrSpace), wordBoundary), )),\n        whereConditionExpression, );\n\n\nconst groupByClause =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{groupBy: tokens} as any])(\n        erase(repeat(commentOrSpace), wordBoundary),\n        erase(seqI('group'),\n              qty(1)(commentOrSpace),\n              seqI('by'),\n              qty(1)(commentOrSpace), ),\n        symbolName,\n        repeat(combine(\n            erase(repeat(commentOrSpace),\n                  cls(','),\n                  repeat(commentOrSpace), ),\n            symbolName, )));\n\n\nconst havingFieldExpression =\n    trans(tokens => [{\n            type: 'condition',\n            op: tokens[1],\n            operands: tokens.slice(0, 1).concat(tokens.slice(2))}])(\n        notAheadReservedKeywords,\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        trans(tokens => [{type: 'fncall', ...(tokens[0] as object)}])(\n            selectFieldFunctionCall, ),\n        erase(repeat(commentOrSpace)),\n        conditionalOperator,\n        erase(repeat(commentOrSpace)),\n        first(literalValue,\n              // eslint-disable-next-line @typescript-eslint/ban-types\n              trans(tokens => [{type: 'subquery', ...(tokens[0] as object)}])(\n                  subQuery,\n              // eslint-disable-next-line @typescript-eslint/ban-types\n              trans(tokens => [{type: 'fncall', ...(tokens[0] as object)}])(\n                  selectFieldFunctionCall, ),\n              listValue, )));\n\n\nconst havingConditionExpressionInnerRoot =\n    trans(tokens => tokens)(\n        qty(0, 1)(combine(\n            trans(tokens => [{type: 'rawop', op: tokens[0]} as Ast])(seqI('not')),\n            erase(wordBoundary, repeat(commentOrSpace)), )),\n        first(\n            trans(tokens => tokens)(\n                erase(repeat(commentOrSpace)),\n                erase(cls('(')),\n                erase(repeat(commentOrSpace)),\n                input => havingConditionExpression(input),\n                erase(repeat(commentOrSpace)),\n                erase(cls(')')), ),\n            havingFieldExpression, ),\n        repeat(combine(\n            erase(repeat(commentOrSpace)),\n            trans(tokens => [{type: 'rawop', op: tokens[0]} as Ast])(first(seqI('and'), seqI('or'))),\n            erase(wordBoundary, repeat(commentOrSpace)),\n            input => havingConditionExpression(input), )));\n\n\nconst havingConditionExpression = rules({\n    rules: [\n        conditionExpressionExprRule3,\n        conditionExpressionExprRule2,\n        conditionExpressionExprRule1,\n    ],\n    check: $o.combine($o.classes.any, $o.end()),\n})(trans(tokens => tokens)(havingConditionExpressionInnerRoot));\n\n\nconst havingClause =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{having: [tokens[0]]} as any])(\n        erase(repeat(commentOrSpace), wordBoundary),\n        erase(seqI('having')),\n        erase(first(ahead(cls('(')),\n                    qty(1)(commentOrSpace),\n                    combine(repeat(commentOrSpace), wordBoundary), )),\n        havingConditionExpression, );\n\n\nconst orderByDirection =\n    first(\n        qty(1, 1)(combine(\n            erase(qty(1)(commentOrSpace)),\n            trans(tokens => [(tokens[0] as string).toLowerCase()])(first(seqI('asc'), seqI('desc'))),\n            erase(wordBoundary), )),\n        zeroWidth(() => 'asc'), );\n\n\nconst orderByNulls =\n    first(\n        qty(1, 1)(combine(\n            erase(qty(1)(commentOrSpace),\n                seqI('nulls'),\n                qty(1)(commentOrSpace), ),\n            trans(tokens => [(tokens[0] as string).toLowerCase()])(first(seqI('first'), seqI('last'))),\n            erase(wordBoundary), )),\n        zeroWidth(() => 'first'), );\n\n\nconst orderByClause =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{orderBy: tokens} as any])(\n        erase(repeat(commentOrSpace), wordBoundary),\n        erase(seqI('order'),\n              qty(1)(commentOrSpace),\n              seqI('by'),\n              qty(1)(commentOrSpace), ),\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/ban-types\n        trans(tokens => [{...(tokens[0] as object), direction: tokens[1], nulls: tokens[2]} as any])(\n            complexSymbolName,\n            orderByDirection,\n            orderByNulls, ),\n        repeat(combine(\n            erase(repeat(commentOrSpace),\n                  cls(','),\n                  repeat(commentOrSpace), ),\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/ban-types\n            trans(tokens => [{...(tokens[0] as object), direction: tokens[1], nulls: tokens[2]} as any])(\n                complexSymbolName,\n                orderByDirection,\n                orderByNulls, ))));\n\n\nconst offsetClause =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{offset: tokens[0]} as any])(\n        erase(repeat(commentOrSpace), wordBoundary),\n        erase(seqI('offset'),\n              qty(1)(commentOrSpace), ),\n        first(\n            decimalIntegerValue,\n            parameterizedValue,\n            isParam(o => typeof o === 'number'), ));\n\n\nconst limitClause =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    trans(tokens => [{limit: tokens[0]} as any])(\n        erase(repeat(commentOrSpace), wordBoundary),\n        erase(seqI('limit'),\n              qty(1)(commentOrSpace), ),\n        first(\n            decimalIntegerValue,\n            parameterizedValue,\n            isParam(o => typeof o === 'number'), ));\n\n\nconst forViewClause =\n    trans(tokens => [{for: (tokens as string[]).map(x => x.toLowerCase())}])(\n        erase(repeat(commentOrSpace), wordBoundary),\n        erase(seqI('for'),\n              qty(1)(commentOrSpace), ),\n        first(\n            combine(seqI('view'),\n                    qty(0, 1)(combine(\n                        erase(repeat(commentOrSpace),\n                              cls(','),\n                              repeat(commentOrSpace), ),\n                        seqI('reference'), ))),\n            combine(seqI('reference'),\n                    qty(0, 1)(combine(\n                        erase(repeat(commentOrSpace),\n                              cls(','),\n                              repeat(commentOrSpace), ),\n                        seqI('view'), )))),\n        erase(wordBoundary), );\n\n\nconst forUpdateClause =\n    trans(tokens => [{for: (tokens as string[]).map(x => x.toLowerCase())}])(\n        erase(repeat(commentOrSpace), wordBoundary),\n        erase(seqI('for'),\n              qty(1)(commentOrSpace), ),\n        seqI('update'),\n        first(\n            combine(erase(qty(1)(commentOrSpace)),\n                    seqI('tracking'),\n                    qty(0, 1)(combine(\n                        erase(repeat(commentOrSpace),\n                              cls(','),\n                              repeat(commentOrSpace), ),\n                        seqI('viewstat'), ))),\n            combine(erase(qty(1)(commentOrSpace)),\n                    seqI('viewstat'),\n                    qty(0, 1)(combine(\n                        erase(repeat(commentOrSpace),\n                              cls(','),\n                              repeat(commentOrSpace), ),\n                        seqI('tracking'), ))),\n            zeroWidth(() => void 0), ),\n        erase(wordBoundary), );\n\n\nconst selectStatement =\n    trans(tokens => {\n        let z = {};\n        for (const t of tokens) {\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            z = {...z, ...(t as object)};\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return [z] as any;\n    })(\n        erase(seqI('select')),\n        erase(qty(1)(commentOrSpace)),\n        selectFieldList,\n        fromClause,\n        // TODO: using scope\n        qty(0, 1)(whereClause),\n        // TODO: with\n        qty(0, 1)(combine(\n            groupByClause,  // TODO: rollup, cube\n            qty(0, 1)(havingClause), )),\n        qty(0, 1)(orderByClause),\n        qty(0, 1)(first(\n            combine(\n                offsetClause,\n                qty(0, 1)(limitClause), ),\n            combine(\n                limitClause,\n                qty(0, 1)(offsetClause), ))),\n        qty(0, 1)(first(forViewClause,\n                        forUpdateClause, )),\n        erase(repeat(commentOrSpace)), );\n\n\nconst program =\n    makeProgram(combine(\n        beginning(),\n        erase(repeat(commentOrSpace)),\n        selectStatement,\n        erase(repeat(commentOrSpace)),\n        end(), ));\n\n\nexport function parse(strings: TemplateStringsArray | string, ...values: any[]): ParsedQuery {\n    // TODO: deny dangerous names\n    const z = program(\n        typeof strings === 'string'\n            ? parserInput(strings, {})\n            : templateStringsParserInput(strings, values, {})\n        );\n\n    if (! z.succeeded) {\n        throw new Error(formatErrorMessage(z));\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return z.tokens[0] as any;\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ParsedQuery,\n         PreparedQuery,\n         PreparedField,\n         PreparedFnCall,\n         PreparedFieldListItem,\n         ParsedResolver,\n         PreparedCondition,\n         PreparedOrderByField,\n         ResolverTreeDirection,\n         ResolverTreeNode,\n         QueryBuilderInfoInternal } from '../types';\nimport { isEqualComplexName,\n         getFullQualifiedName,\n         getTrueCaseFieldName }     from './util';\n\n\n\nfunction makeResolverTree(\n        builder: QueryBuilderInfoInternal,\n        path: ResolverTreeNode[],\n        args: Pick<ResolverTreeNode, 'fieldOrRelName' | 'resolverName' | 'direction'>): ResolverTreeNode {\n\n    const argResolverNameI = args.resolverName.toLowerCase();\n    const argfieldOrRelNameI = args.fieldOrRelName.toLowerCase();\n    const trueCaseArgResolverName = getTrueCaseFieldName(builder.relationships, args.resolverName);\n\n    if (! trueCaseArgResolverName) {\n        throw new Error(`Resolver '${args.resolverName}' is not found.`);\n    }\n\n    const found = path.find(\n        x => x.resolverName.toLowerCase() === argResolverNameI &&\n        x.fieldOrRelName.toLowerCase() === argfieldOrRelNameI);\n\n    if (found) {\n        return found;\n    }\n\n    const children: ResolverTreeNode[] = [];\n    const ret: ResolverTreeNode = {\n        fieldOrRelName: args.fieldOrRelName,\n        resolverName: trueCaseArgResolverName,\n        // fkeyIdName: '', // TODO:\n        direction: args.direction,\n        children: children,\n    };\n\n    const q = builder.relationships[trueCaseArgResolverName];\n    const nextPath = path.concat([ret]);\n\n    for (const k of Object.keys(q)) {\n        const c = q[k];\n        if (Array.isArray(c)) {\n            children.push(makeResolverTree(builder, nextPath, {\n                resolverName: c[0],\n                fieldOrRelName: k,\n                direction: ResolverTreeDirection.MasterToDetail,\n            }));\n        } else if (typeof c === 'string') {\n            children.push(makeResolverTree(builder, nextPath, {\n                resolverName: c,\n                fieldOrRelName: k,\n                direction: ResolverTreeDirection.DetailsToMaster,\n            }));\n        } else {\n            children.push(makeResolverTree(builder, nextPath, {\n                resolverName: c.resolver,\n                fieldOrRelName: k,\n                direction: ResolverTreeDirection.DetailsToMaster,\n            }));\n        }\n    }\n\n    return ret;\n}\n\n\nfunction findResolver(\n    query: ParsedQuery,\n    x: PreparedField | PreparedOrderByField) {\n\n    const rn = x.name.slice(0, x.name.length - 1);\n    return query.from.find(w => isEqualComplexName(w.name, rn));\n}\n\n\nfunction registerFields(\n        query: ParsedQuery,\n        x: PreparedField | PreparedOrderByField,\n        defaultResolver: ParsedResolver | undefined,\n        fn: (rslv: ParsedResolver) => Set<string>) {\n\n    const resolver = findResolver(query, x) ?? defaultResolver;\n    if (resolver) {\n        fn(resolver).add(x.name[x.name.length - 1]);\n    }\n}\n\n\nfunction flatConditions(\n        dest: PreparedCondition[],\n        parentOp: 'and' | 'or' | 'not',\n        cond: PreparedCondition) {\n\n    const recurse = (op: typeof parentOp, x: PreparedCondition) => {\n        const c: PreparedCondition[] = [];\n        flatConditions(c, op, x);\n        x.operands = c;\n        dest.push(x);\n    };\n\n    const pushOperands = () => {\n        for (const x of cond.operands) {\n            switch (typeof x) {\n            case 'object':\n                if (x === null || Array.isArray(x)) {\n                    throw new Error(`Unexpected AST is found.`);\n                } else {\n                    switch (x.type) {\n                    case 'condition':\n                        switch (x.op) {\n                        case 'and': case 'or': case 'not':\n                            if (x.op !== 'not' && x.op === parentOp) {\n                                flatConditions(dest, x.op, x);\n                            } else {\n                                recurse(x.op, x);\n                            }\n                            break;\n                        default:\n                            dest.push(x);\n                            break;\n                        }\n                        break;\n                    default:\n                        throw new Error(`Unexpected AST ${x.type} is found.`);\n                    }\n                }\n                break;\n            default:\n                throw new Error(`Unexpected AST is found.`);\n            }\n        }\n    };\n\n    switch (cond.op) {\n    case 'and': case 'or': case 'not':\n        if (cond.op === parentOp) {\n            pushOperands();\n        } else {\n            recurse(cond.op, cond);\n        }\n        break;\n    default:\n        dest.push(cond);\n        break;\n    }\n}\n\n\nfunction recureseForEachConditionFieldsFncall(\n        x: PreparedFnCall,\n        fn: (field: PreparedField | PreparedOrderByField) => void) {\n\n    for (const arg of x.args) {\n        switch (typeof arg) {\n        case 'object':\n            if (arg === null) {\n                // NOTE: Nothing to do.\n            } else {\n                switch (arg.type) {\n                case 'field':\n                    fn(arg);\n                    break;\n                case 'fncall':\n                    recureseForEachConditionFieldsFncall(arg, fn);\n                    break;\n                }\n            }\n            break;\n        }\n    }\n}\n\n\nfunction recureseForEachConditionFields(\n        cond: PreparedCondition,\n        fn: (field: PreparedField | PreparedOrderByField) => void) {\n\n    switch (cond.type) {\n    case 'condition':\n        for (const x of cond.operands) {\n            switch (typeof x) {\n            case 'object':\n                if (x === null) {\n                    // NOTE: never reach here.\n                } else if (Array.isArray(x)) {\n                    // NOTE: Nothing to do. It is data.\n                } else {\n                    switch (x.type) {\n                    case 'condition':\n                        recureseForEachConditionFields(x, fn);\n                        break;\n                    case 'field':\n                        fn(x);\n                        break;\n                    case 'fncall':\n                        for (const arg of x.args) {\n                            switch (typeof arg) {\n                            case 'object':\n                                if (arg === null) {\n                                    // NOTE: Nothing to do.\n                                } else {\n                                    switch (arg.type) {\n                                    case 'field':\n                                        fn(arg);\n                                        break;\n                                    case 'fncall':\n                                        recureseForEachConditionFieldsFncall(arg, fn);\n                                        break;\n                                    }\n                                }\n                                break;\n                            }\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        break;\n    }\n\n    return cond;\n}\n\n\nfunction normalize(\n        builder: QueryBuilderInfoInternal, query: ParsedQuery,\n        parentName: string[], parentAliases: Map<string, string[]> | null): PreparedQuery {\n\n    // Check and normalize `from` resolvers\n    const resolverAliases = new Map<string, string[]>(parentAliases ?? []);\n\n    if (parentName.length === 0 && query.from[0].name.length > 1) {\n        throw new Error('Relationship name is not allowed at first item of root level from clause.');\n    }\n\n    {\n        const x = query.from[0];\n        if (query.from[0].name.length > 1) {\n            while (resolverAliases.has(x.name[0].toLowerCase())) { // TODO: set max loop\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                x.name = resolverAliases.get(x.name[0].toLowerCase())!.concat(x.name.slice(1));\n            }\n        }\n        if (parentName.length > 0) {\n            x.name = getFullQualifiedName(parentName, x.name);\n            if (! isEqualComplexName(x.name.slice(0, parentName.length), parentName)) {\n                throw new Error(`Resolver name ${x.name.join('.')} is not match to parent resolver ${parentName.join('.')}`);\n            }\n        }\n    }\n\n    const primaryResolverName = query.from[0].name;\n\n    if (query.from[0].aliasName) {\n        resolverAliases.set(query.from[0].aliasName.toLowerCase(), primaryResolverName);\n    }\n\n    query.whereSubQueries = [];\n    query.havingSubQueries = [];\n    query.selectSubQueries = [];\n\n    for (const x of query.from.slice(1)) {\n        if (x.name.length === 1) {\n            x.name = primaryResolverName.concat(x.name);\n        } else {\n            let nameI = x.name[0].toLowerCase();\n            while (resolverAliases.has(nameI)) { // TODO: set max loop\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                x.name = resolverAliases.get(nameI)!.concat(x.name.slice(1));\n                nameI = x.name[0].toLowerCase();\n            }\n\n            x.name = getFullQualifiedName(primaryResolverName, x.name);\n        }\n        if (x.aliasName) {\n            resolverAliases.set(x.aliasName.toLowerCase(), x.name);\n        }\n    }\n\n    const fieldAliasNames = new Map<string, string[]>();\n    let normalizeTarget: 'select' | 'where' | 'having' | 'orderby' = 'select';\n\n    const normalizeSelectField = (x: PreparedField | PreparedOrderByField) => {\n        // Resolve field alias names\n        switch (normalizeTarget) {\n        case 'select':\n            if ((x as PreparedField).aliasName) {\n                fieldAliasNames.set(\n                    ((x as PreparedField).aliasName as string).toLowerCase(),\n                    x.name\n                );\n            }\n            break;\n        case 'where': case 'having': case 'orderby':\n            if (x.name.length === 1) {\n                const nameI = x.name[0].toLowerCase();\n                if (fieldAliasNames.has(nameI)) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    x.name = fieldAliasNames.get(nameI)!;\n                }\n            }\n            break;\n        }\n\n        // Resolve resolver alias names\n        if (x.name.length === 1) {\n            x.name = primaryResolverName.concat(x.name);\n        } else {\n            let nameI = x.name[0].toLowerCase();\n            while (resolverAliases.has(nameI)) { // TODO: set max loop\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                x.name = resolverAliases.get(nameI)!.concat(x.name.slice(1));\n                nameI = x.name[0].toLowerCase();\n            }\n\n            x.name = getFullQualifiedName(primaryResolverName, x.name);\n\n            const rn = x.name.slice(0, x.name.length - 1);\n            if (! query.from.find(w => isEqualComplexName(w.name, rn))) {\n                query.from.push({\n                    name: rn,\n                    aliasName: null,\n                });\n            }\n        }\n\n        return x;\n    };\n\n    const normalizeFnCall = (x: PreparedFnCall, opIndex: number) => {\n        const fnNameI = x.fn.toLowerCase();\n        const found = builder.functions.find(z => z.name.toLowerCase() === fnNameI);\n        if (! found) {\n            throw new Error(`Function '${x.fn}' is not found.`);\n        }\n\n        switch (normalizeTarget) {\n        case 'select':\n            if (found.type === 'aggregate' && !query.groupBy) {\n                query.groupBy = [];\n            }\n            break;\n        case 'where':\n            if (found.type === 'aggregate') {\n                // NOTE: scalar and immediate-scalar is allowed.\n                throw new Error(`Aggregate function '${x.fn}' is not allowed.`);\n            }\n            if (opIndex !== 0 && found.type !== 'immediate-scalar') {\n                throw new Error(`Function '${x.fn}' is not allowed at operand ${opIndex + 1}.`);\n            }\n            break;\n        case 'having':\n            if (opIndex !== 0 && found.type !== 'immediate-scalar') {\n                throw new Error(`Function '${x.fn}' is not allowed at operand ${opIndex + 1}.`);\n            }\n            break;\n        }\n\n        for (const arg of x.args) {\n            switch (typeof arg) {\n            case 'object':\n                if (arg === null) {\n                    // NOTE: Nothing to do.\n                } else {\n                    switch (arg.type) {\n                    case 'field':\n                        normalizeSelectField(arg);\n                        break;\n                    case 'fncall':\n                        normalizeFnCall(arg, 0); // NOTE: treat as opIndex = 0 (always correct)\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n        return x;\n    };\n\n    const normalizeCondition = (cond: PreparedCondition) => {\n        switch (cond.type) {\n        case 'condition':\n            for (let i = 0; i < cond.operands.length; i++) {\n                const x = cond.operands[i];\n                switch (typeof x) {\n                case 'object':\n                    if (x === null) {\n                        // NOTE: never reach here.\n                    } else if (Array.isArray(x)) {\n                        // NOTE: Nothing to do. It is data.\n                    } else {\n                        switch (x.type) {\n                        case 'condition':\n                            normalizeCondition(x);\n                            break;\n                        case 'field':\n                            normalizeSelectField(x);\n                            break;\n                        case 'fncall':\n                            normalizeFnCall(x, i);\n                            break;\n                        case 'subquery':\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            (normalizeTarget === 'where' ?\n                                query.whereSubQueries :\n                                query.havingSubQueries)!.push(x);\n                            x.query = normalize(builder, x.query, [], null);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n            break;\n        }\n        return cond;\n    };\n\n    // Check and normalize `select` fields\n    for (let i = 0; i < query.select.length; i++) {\n        const x = query.select[i];\n        switch (x.type) {\n        case 'field':\n            normalizeSelectField(x);\n            break;\n        case 'fncall':\n            normalizeFnCall(x, i);\n            break;\n        case 'subquery':\n            query.selectSubQueries.push(x);\n            x.query = normalize(builder, x.query, primaryResolverName, resolverAliases);\n            break;\n        }\n    }\n\n    // Check and normalize `where` fields\n    if (query.where) {\n        normalizeTarget = 'where';\n        normalizeCondition(query.where[0]);\n    }\n\n    // Check and normalize `having` fields\n    if (query.having) {\n        normalizeTarget = 'having';\n        normalizeCondition(query.having[0]);\n    }\n\n    // Check and normalize `orderBy` fields\n    if (query.orderBy) {\n        normalizeTarget = 'orderby';\n        for (const x of query.orderBy) {\n            normalizeSelectField(x);\n        }\n    }\n\n    for (const x of query.from) {\n        x.queryFields = new Set<string>();\n        x.queryFieldsMap = new Map<string, PreparedFieldListItem>();\n        x.condFields = new Set<string>();\n        x.condAliasFields = new Set<string>();\n        x.havingCondFields = new Set<string>();\n        // fieldAliasNames\n        // sortFieldNames\n        x.relationshipIdFields = new Set<string>();\n    }\n\n    const registerQueryFields = (x: PreparedField) =>\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        registerFields(query, x, query.from[0], (rslv: ParsedResolver) => rslv.queryFields!);\n\n    const registerCondFields = (x: PreparedField | PreparedOrderByField) =>\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        registerFields(query, x, query.from[0], (rslv: ParsedResolver) => rslv.condFields!);\n\n    const registerHavingCondFields = (x: PreparedField | PreparedOrderByField) =>\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        registerFields(query, x, query.from[0], (rslv: ParsedResolver) => rslv.havingCondFields!);\n\n    let exprCount = 0;\n\n    const collectFncallQueryFields = (x: PreparedFnCall, nested: boolean) => {\n        if (! nested) {\n            if (! x.aliasName) {\n                x.aliasName = `expr${exprCount++}`; // TODO: Check conflict\n            }\n        }\n        let resolver: ParsedResolver | undefined = void 0;\n        for (const arg of x.args) {\n            switch (typeof arg) {\n            case 'object':\n                if (arg === null) {\n                    // NOTE: Nothing to do.\n                } else {\n                    switch (arg.type) {\n                    case 'field':\n                        registerQueryFields(arg);\n                        if (! resolver) {\n                            // BUG: TODO: Check all arguments are same resolver's field.\n                            resolver = findResolver(query, arg);\n                        }\n                        break;\n                    case 'fncall':\n                        {\n                            const resolverTmp = collectFncallQueryFields(arg, true);\n                            if (! resolver) {\n                                resolver = resolverTmp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        if (! nested) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            (resolver ?? query.from[0]).queryFieldsMap!.set(x.aliasName, x);\n        }\n        return resolver;\n    };\n\n    for (const x of query.select) {\n        switch (x.type) {\n        case 'field':\n            {\n                registerQueryFields(x);\n                const resolver = findResolver(query, x); // TODO: find twice!\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                resolver?.queryFieldsMap!.set(x.name[x.name.length - 1], x);\n            }\n            break;\n        case 'fncall':\n            collectFncallQueryFields(x, false);\n            break;\n        }\n    }\n\n    if (query.where) {\n        recureseForEachConditionFields(query.where[0], registerCondFields);\n    }\n\n    if (query.having) {\n        recureseForEachConditionFields(query.having[0], registerHavingCondFields);\n    }\n\n    if (query.groupBy) {\n        for (const x of query.groupBy) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            query.from[0].havingCondFields!.add(x);\n        }\n    }\n\n    query.from[0].name = primaryResolverName;\n\n    // Check resolvers' paths\n    const primaryResolverRootTrueCaseName = getTrueCaseFieldName(builder.relationships, primaryResolverName[0]);\n    if (! primaryResolverRootTrueCaseName) {\n        throw new Error(`Resolver '${primaryResolverName[0]}' is not found.`);\n    }\n\n    const resolverTree = makeResolverTree(builder, [], {\n        resolverName: primaryResolverRootTrueCaseName,\n        fieldOrRelName: primaryResolverRootTrueCaseName,\n        direction: ResolverTreeDirection.DetailsToMaster,\n    });\n\n    for (const x of query.from) {\n        let rt = [resolverTree];\n        let lastFound: ResolverTreeNode | undefined;\n\n        for (let j = 0; j < x.name.length; j++) {\n            const name = x.name[j];\n            const nameI = name.toLowerCase();\n            const found = rt.find(z => z.fieldOrRelName.toLowerCase() === nameI);\n            if (found) {\n                lastFound = found;\n                rt = found.children;\n                x.name[j] = found.fieldOrRelName; // NOTE: fix case\n            } else {\n                throw new Error(`Resolver '${name}' is not found.`);\n            }\n        }\n\n        if (lastFound) {\n            x.resolver = builder.resolvers.query[lastFound.resolverName];\n            x.resolverName = lastFound.resolverName;\n        }\n    }\n\n    if (query.where) {\n        const c: PreparedCondition[] = [];\n        flatConditions(c, 'and', query.where[0]);\n        query.where = c;\n    }\n    if (query.having) {\n        const c: PreparedCondition[] = [];\n        flatConditions(c, 'and', query.having[0]);\n        query.having = c;\n    }\n\n    // TODO: Error if subquery appears `or`'s 2nd or later operand.\n\n    query.from = query.from.slice(0, 1).concat(\n        query.from.slice(1).sort((a, b) => a.name.length - b.name.length));\n\n    for (let i = 0; i < query.from.length; i++) {\n        const x = query.from[i];\n\n        {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            x.fieldAliasNames = new Set<string>(Array.from(x.queryFieldsMap!.entries()).map(c => {\n                const f = c[1];\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                if (f.aliasName && !x.queryFields!.has(f.aliasName)) {\n                    return f.aliasName.toLowerCase();\n                } else {\n                    return '';\n                }\n            }).filter(c => !!c));\n\n            for (const c of x.fieldAliasNames) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                if (x.condFields!.has(c)) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    x.condFields!.delete(c);\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    x.condAliasFields!.add(c);\n                }\n            }\n        }\n\n        {\n            x.sortFieldNames = new Set<string>(\n                query.orderBy\n                    ? query.orderBy\n                        .filter(c =>\n                            x.name.length + 1 === c.name.length &&\n                                isEqualComplexName(x.name, c.name.slice(0, x.name.length)))\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        .filter(c => !(x.fieldAliasNames!.has(c.name[c.name.length - 1].toLowerCase())))\n                        .map(c => c.name[c.name.length - 1])\n                    : []);\n        }\n\n        {\n            const resolverName = x.resolverName ?? '';\n\n            for (let j = i + 1; j < query.from.length; j++) {\n                const c = query.from[j];\n\n                if (x.name.length + 1 === c.name.length && isEqualComplexName(x.name, c.name.slice(0, x.name.length))) {\n                    const childResolverName = c.resolverName ?? '';\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-non-null-assertion\n                    const childRelationshipInfo = ((builder.relationships[resolverName] ?? {})[childResolverName] as any) ?? {};\n\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    const childIdField = childRelationshipInfo.id\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                        ? childRelationshipInfo.id as string\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        : builder.rules.foreignIdFieldName!(childResolverName);\n\n                    if (childIdField) {\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        x.relationshipIdFields!.add(childIdField);\n                    }\n                }\n            }\n        }\n    }\n\n    return query as PreparedQuery;\n}\n\n\nexport function compile(\n    builder: QueryBuilderInfoInternal, query: ParsedQuery): PreparedQuery {\n\n    return normalize(builder, query, [], null);\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getUTCDayInYear(d: Date) {\n    const d0 = Date.UTC(d.getUTCFullYear(), 0, 1);\n    const d1 = Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n    return ((d1 - d0) / (1000 * 60 * 60 * 24)) + 1;\n}\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getDayInYear(d: Date) {\n    const d0 = Date.UTC(d.getFullYear(), 0, 1);\n    const d1 = Date.UTC(d.getFullYear(), d.getMonth(), d.getDate());\n    return ((d1 - d0) / (1000 * 60 * 60 * 24)) + 1;\n}\n\n\n/*\nexport function getUTCWeekInYearISO(d: Date) {\n    // ISO 8601 week number\n    // Weeks starting on Monday.\n    // The first week of year (W1) contains first Thursday.\n    const dcMon = d.getUTCMonth();\n    const dcDate = d.getUTCDate();\n\n    if (dcMon === 11 && dcDate >= 29) {\n        const d2 = new Date(Date.UTC(d.getUTCFullYear() + 1, 0, 1));\n        const day2 = (d2.getUTCDay() + 6) % 7; // Monday is 0\n        if (day2 <= 3) {\n            // Mon, Tue, Wed, Thu\n            //  29   30   31   01  (day2 === 3)\n            //  30   31   01       (day2 === 2)\n            //  31   01            (day2 === 1)\n            //  01                 (day2 === 0)\n            // Next year's first week is W01.\n            if (day2 + dcDate >= 32) {\n                return 1;\n            }\n        }\n    }\n\n    const d0 = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n    const day0 = (d0.getUTCDay() + 6) % 7; // Monday is 0\n\n    const ds = d0.getTime() - ((1000 * 60 * 60 * 24) * day0);\n\n    const dc = Date.UTC(d.getUTCFullYear(), dcMon, dcDate);\n    const diff = Math.floor((dc - ds) / (1000 * 60 * 60 * 24 * 7));\n\n    if (day0 > 3) {\n        // First day of year is: Fri, Sat, Sun\n        // First day of year is last year's final week.\n        if (diff === 0) {\n            // Last year's final week.\n            const d1 = new Date(Date.UTC(d.getUTCFullYear() - 1, 0, 1));\n            const day1 = (d1.getUTCDay() + 6) % 7; // Monday is 0\n\n            const dp = d1.getTime() - ((1000 * 60 * 60 * 24) * day1);\n            const diff1 = Math.floor((dc - dp) / (1000 * 60 * 60 * 24 * 7));\n            if (day1 > 3) {\n                // Fri, Sat, Sun\n                return diff1;\n            } else {\n                // Mon, Tue, Wed, Thu\n                return diff1 + 1;\n            }\n        } else {\n            return diff;\n        }\n    } else {\n        // First day of year is: Mon, Tue, Wed, Thu\n        // First day of year is this year's first week.\n        return diff + 1;\n    }\n}\n*/\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ScalarQueryFuncInfo,\n         QueryFuncInfo }   from '../types';\nimport { DatePattern,\n         DateTimePattern } from './util';\nimport { getUTCDayInYear,\n         getDayInYear }    from './datetime-util';\n\n\n\nexport const fnInfo_cast_to_string: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'cast_to_string',\n    fn: (ctx, args, records) => {\n        if (args.length > 0) {\n            if (args[0] === null) {\n                return null;\n            }\n            return String(args[0]);\n        }\n        throw new Error(`Argument of function \"cast_to_string\" should be field.`);\n    },\n};\n\nexport const fnInfo_cast_to_number: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'cast_to_number',\n    fn: (ctx, args, records) => {\n        if (args.length > 0) {\n            if (args[0] === null) {\n                return null;\n            }\n            return Number(args[0]);\n        }\n        throw new Error(`Argument of function \"cast_to_number\" should be field.`);\n    },\n};\n\nexport const fnInfo_cast_to_boolean: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'cast_to_boolean',\n    fn: (ctx, args, records) => {\n        if (args.length > 0) {\n            if (args[0] === null) {\n                return null;\n            }\n            return Boolean(args[0]);\n        }\n        throw new Error(`Argument of function \"cast_to_boolean\" should be field.`);\n    },\n};\n\nexport const fnInfo_concat: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'concat',\n    fn: (ctx, args, records) => {\n        if (args.length > 0) {\n            const z = args.filter(c => c !== null);\n            if (z.length === 0) {\n                return null;\n            }\n            return z.map(c => String(c)).join('');\n        }\n        throw new Error(`Argument of function \"concat\" should be field.`);\n    },\n};\n\nexport const fnInfo_add: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'add',\n    fn: (ctx, args, records) => {\n        if (args.length > 1) {\n            const z = args.filter(c => c !== null);\n            if (z.length === 0) {\n                return null;\n            }\n            return z.map(c => Number(c)).reduce((a, b) => a + b);\n        }\n        throw new Error(`Argument of function \"add\" should be field.`);\n    },\n};\n\nexport const fnInfo_sub: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'sub',\n    fn: (ctx, args, records) => {\n        if (args.length > 1) {\n            if (args[0] === null) {\n                return null;\n            }\n            return args.filter(c => c !== null).map(c => Number(c)).reduce((a, b) => a - b);\n        }\n        throw new Error(`Argument of function \"sub\" should be field.`);\n    },\n};\n\nexport const fnInfo_mul: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'mul',\n    fn: (ctx, args, records) => {\n        if (args.length > 1) {\n            const z = args.filter(c => c !== null);\n            if (z.length === 0) {\n                return null;\n            }\n            return z.map(c => Number(c)).reduce((a, b) => a * b);\n        }\n        throw new Error(`Argument of function \"mul\" should be field.`);\n    },\n};\n\nexport const fnInfo_div: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'div',\n    fn: (ctx, args, records) => {\n        if (args.length > 1) {\n            if (args[0] === null) {\n                return null;\n            }\n            return args.filter(c => c !== null).map(c => Number(c)).reduce((a, b) => a / b);\n        }\n        throw new Error(`Argument of function \"div\" should be field.`);\n    },\n};\n\nexport const fnInfo_mod: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'mod',\n    fn: (ctx, args, records) => {\n        if (args.length > 1) {\n            if (args[0] === null) {\n                return null;\n            }\n            return args.filter(c => c !== null).map(c => Number(c)).reduce((a, b) => a % b);\n        }\n        throw new Error(`Argument of function \"div\" should be field.`);\n    },\n};\n\n\nexport const fnInfo_count: QueryFuncInfo = {\n    type: 'aggregate',\n    name: 'count',\n    fn: (ctx, args, records) => {\n        if (args.length === 0) {\n            return records.length;\n        } else {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const arg = args[0];\n            if (Array.isArray(arg)) {\n                return arg.filter(r => (r === null || r === void 0) ? false : true).length;\n            }\n            throw new Error(`Argument of function \"count\" should be field.`);\n        }\n    },\n};\n\n\nexport const fnInfo_count_distinct: QueryFuncInfo = {\n    type: 'aggregate',\n    name: 'count_distinct',\n    fn: (ctx, args, records) => {\n        if (args.length > 0) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const arg = args[0];\n            if (Array.isArray(arg)) {\n                const w = arg\n                    .filter(r => (r === null || r === void 0) ? false : true)\n                    .map(x => JSON.stringify(x));\n                return new Set<string>(w).size;\n            }\n        }\n        throw new Error(`Argument of function \"count_distinct\" should be field.`);\n    },\n};\n\n\nexport const fnInfo_sum: QueryFuncInfo = {\n    type: 'aggregate',\n    name: 'sum',\n    fn: (ctx, args, records) => {\n        if (args.length > 0) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const arg = args[0];\n            if (Array.isArray(arg)) {\n                const w = arg\n                    .filter(r => (typeof r === 'number' && !Number.isNaN(r)) ? true : false);\n                if (w.length) {\n                    return w.reduce((a, b) => (a as number) + (b as number));\n                } else {\n                    return null;\n                }\n            }\n        }\n        throw new Error(`Argument of function \"sum\" should be field.`);\n    },\n};\n\n\nexport const fnInfo_avg: QueryFuncInfo = {\n    type: 'aggregate',\n    name: 'avg',\n    fn: (ctx, args, records) => {\n        if (args.length > 0) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const arg = args[0];\n            if (Array.isArray(arg)) {\n                const w = arg\n                    .filter(r => (typeof r === 'number' && !Number.isNaN(r)) ? true : false);\n                if (w.length) {\n                    return (w.reduce((a, b) => (a as number) + (b as number)) as number) / w.length;\n                } else {\n                    return null;\n                }\n            }\n        }\n        throw new Error(`Argument of function \"avg\" should be field.`);\n    },\n};\n\n\nexport const fnInfo_max: QueryFuncInfo = {\n    type: 'aggregate',\n    name: 'max',\n    fn: (ctx, args, records) => {\n        if (args.length > 0) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const arg = args[0];\n            if (Array.isArray(arg)) {\n                const w = arg\n                    .filter(r => ((typeof r === 'number' && !Number.isNaN(r)) || typeof r === 'string') ? true : false);\n                if (w.length) {\n                    return w.reduce((a, b) => (a as number | string) > (b as number | string) ? a : b);\n                } else {\n                    return null;\n                }\n            }\n        }\n        throw new Error(`Argument of function \"max\" should be field.`);\n    },\n};\n\n\nexport const fnInfo_min: QueryFuncInfo = {\n    type: 'aggregate',\n    name: 'min',\n    fn: (ctx, args, records) => {\n        if (args.length > 0) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const arg = args[0];\n            if (Array.isArray(arg)) {\n                const w = arg\n                    .filter(r => ((typeof r === 'number' && !Number.isNaN(r)) || typeof r === 'string') ? true : false);\n                if (w.length) {\n                    return w.reduce((a, b) => (a as number | string) < (b as number | string) ? a : b);\n                } else {\n                    return null;\n                }\n            }\n        }\n        throw new Error(`Argument of function \"min\" should be field.`);\n    },\n};\n\n\nfunction dateScalarFunctionGen(fnName: string, fn: (dateStr: string) => any): ScalarQueryFuncInfo['fn'] {\n    return (ctx, args, record) => {\n        if (args.length > 0) {\n            const arg = args[0];\n            switch (typeof arg) {\n            case 'object':\n                if (arg === null) {\n                    return null;\n                } else {\n                    switch (arg.type) {\n                    case 'date': case 'datetime':\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return fn(arg.value);\n                    default:\n                        return null;\n                    }\n                }\n            case 'string':\n                if (DatePattern.test(arg) || DateTimePattern.test(arg)) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return fn(arg);\n                } else {\n                    return null;\n                }\n            }\n        }\n        throw new Error(`Argument of function \"${fnName}\" should be field.`);\n    };\n}\n\n\nexport const fnInfo_calendar_month: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'calendar_month',\n    fn: dateScalarFunctionGen('calendar_month', (dateStr) => new Date(dateStr).getUTCMonth() + 1), // 1, ... , 12\n};\n\n\nexport const fnInfo_calendar_month_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'calendar_month_lc',\n    fn: dateScalarFunctionGen('calendar_month_lc', (dateStr) => new Date(dateStr).getMonth() + 1), // 1, ... , 12\n};\n\n\nexport const fnInfo_calendar_quarter: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'calendar_quarter',\n    fn: dateScalarFunctionGen('calendar_quarter', (dateStr) => Math.floor(new Date(dateStr).getUTCMonth() / 3) + 1), // 1, ... , 4\n};\n\n\nexport const fnInfo_calendar_quarter_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'calendar_quarter_lc',\n    fn: dateScalarFunctionGen('calendar_quarter_lc', (dateStr) => Math.floor(new Date(dateStr).getMonth() / 3) + 1), // 1, ... , 4\n};\n\n\nexport const fnInfo_calendar_year: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'calendar_year',\n    fn: dateScalarFunctionGen('calendar_year', (dateStr) => new Date(dateStr).getUTCFullYear()),\n};\n\n\nexport const fnInfo_calendar_year_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'calendar_year_lc',\n    fn: dateScalarFunctionGen('calendar_year_lc', (dateStr) => new Date(dateStr).getFullYear()),\n};\n\n\nexport const fnInfo_day_in_month: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'day_in_month',\n    fn: dateScalarFunctionGen('day_in_month', (dateStr) => new Date(dateStr).getUTCDate()), // 1 , ... , 31\n};\n\n\nexport const fnInfo_day_in_month_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'day_in_month_lc',\n    fn: dateScalarFunctionGen('day_in_month_lc', (dateStr) => new Date(dateStr).getDate()), // 1 , ... , 31\n};\n\n\nexport const fnInfo_day_in_week: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'day_in_week',\n    fn: dateScalarFunctionGen('day_in_week', (dateStr) => new Date(dateStr).getUTCDay() + 1), // Sun:1 , ... , Sat:7\n};\n\n\nexport const fnInfo_day_in_week_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'day_in_week_lc',\n    fn: dateScalarFunctionGen('day_in_week_lc', (dateStr) => new Date(dateStr).getDay() + 1), // Sun:1 , ... , Sat:7\n};\n\n\nexport const fnInfo_day_in_year: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'day_in_year',\n    fn: dateScalarFunctionGen('day_in_year', (dateStr) => getUTCDayInYear(new Date(dateStr))), // 1 , ... , 366\n};\n\n\nexport const fnInfo_day_in_year_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'day_in_year_lc',\n    fn: dateScalarFunctionGen('day_in_year_lc', (dateStr) => getDayInYear(new Date(dateStr))), // 1 , ... , 366\n};\n\n\nexport const fnInfo_day_only: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'day_only',\n    fn: dateScalarFunctionGen('day_only', (dateStr) => new Date(dateStr).toISOString().split('T')[0]),\n};\n\n\nexport const fnInfo_day_only_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'day_only_lc',\n    fn: dateScalarFunctionGen('day_only_lc', (dateStr) => {\n        const d = new Date(dateStr);\n        return new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate())).toISOString().split('T')[0];\n    }),\n};\n\n\nexport const fnInfo_hour_in_day: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'hour_in_day',\n    fn: dateScalarFunctionGen('hour_in_day', (dateStr) => new Date(dateStr).getUTCHours()), // 0 , ... , 23\n};\n\n\nexport const fnInfo_hour_in_day_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'hour_in_day_lc',\n    fn: dateScalarFunctionGen('hour_in_day_lc', (dateStr) => new Date(dateStr).getHours()), // 0 , ... , 23\n};\n\n\nexport const fnInfo_week_in_month: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'week_in_month',\n    fn: dateScalarFunctionGen('week_in_month', (dateStr) => Math.floor((new Date(dateStr).getUTCDate() - 1) / 7) + 1), // 1(day 1~7) , ... , 5(day 29~31)\n};\n\n\nexport const fnInfo_week_in_month_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'week_in_month_lc',\n    fn: dateScalarFunctionGen('week_in_month_lc', (dateStr) => Math.floor((new Date(dateStr).getDate() - 1) / 7) + 1), // 1(day 1~7) , ... , 5(day 29~31)\n};\n\n\nexport const fnInfo_week_in_year: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'week_in_year',\n    fn: dateScalarFunctionGen('week_in_year', (dateStr) => Math.floor((getUTCDayInYear(new Date(dateStr)) - 1) / 7) + 1),\n};\n\n\nexport const fnInfo_week_in_year_lc: QueryFuncInfo = {\n    type: 'scalar',\n    name: 'week_in_year_lc',\n    fn: dateScalarFunctionGen('week_in_year_lc', (dateStr) => Math.floor((getDayInYear(new Date(dateStr)) - 1) / 7) + 1),\n};\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { PreparedQuery,\n         QueryFuncInfo,\n         QueryBuilderInfo,\n         QueryBuilderInfoInternal } from '../types';\nimport { parse }                    from './parser';\nimport { compile }                  from './compiler';\nimport { fnInfo_cast_to_string,\n         fnInfo_cast_to_number,\n         fnInfo_cast_to_boolean,\n         fnInfo_concat,\n         fnInfo_add,\n         fnInfo_sub,\n         fnInfo_mul,\n         fnInfo_div,\n         fnInfo_mod,\n         fnInfo_count,\n         fnInfo_count_distinct,\n         fnInfo_sum,\n         fnInfo_avg,\n         fnInfo_max,\n         fnInfo_min,\n         fnInfo_calendar_month,\n         fnInfo_calendar_quarter,\n         fnInfo_calendar_year,\n         fnInfo_day_in_month,\n         fnInfo_day_in_week,\n         fnInfo_day_in_year,\n         fnInfo_day_only,\n         fnInfo_hour_in_day,\n         fnInfo_week_in_month,\n         fnInfo_week_in_year,\n         fnInfo_calendar_month_lc,\n         fnInfo_calendar_quarter_lc,\n         fnInfo_calendar_year_lc,\n         fnInfo_day_in_month_lc,\n         fnInfo_day_in_week_lc,\n         fnInfo_day_in_year_lc,\n         fnInfo_day_only_lc,\n         fnInfo_hour_in_day_lc,\n         fnInfo_week_in_month_lc,\n         fnInfo_week_in_year_lc }   from './functions';\n\n\n\nconst builtinFunctions: QueryFuncInfo[] = [\n    fnInfo_cast_to_string,\n    fnInfo_cast_to_number,\n    fnInfo_cast_to_boolean,\n    fnInfo_concat,\n    fnInfo_add,\n    fnInfo_sub,\n    fnInfo_mul,\n    fnInfo_div,\n    fnInfo_mod,\n    fnInfo_count,\n    fnInfo_count_distinct,\n    fnInfo_sum,\n    fnInfo_avg,\n    fnInfo_max,\n    fnInfo_min,\n    fnInfo_calendar_month,\n    fnInfo_calendar_quarter,\n    fnInfo_calendar_year,\n    fnInfo_day_in_month,\n    fnInfo_day_in_week,\n    fnInfo_day_in_year,\n    fnInfo_day_only,\n    fnInfo_hour_in_day,\n    fnInfo_week_in_month,\n    fnInfo_week_in_year,\n    fnInfo_calendar_month_lc,\n    fnInfo_calendar_quarter_lc,\n    fnInfo_calendar_year_lc,\n    fnInfo_day_in_month_lc,\n    fnInfo_day_in_week_lc,\n    fnInfo_day_in_year_lc,\n    fnInfo_day_only_lc,\n    fnInfo_hour_in_day_lc,\n    fnInfo_week_in_month_lc,\n    fnInfo_week_in_year_lc,\n];\n\n\nconst builtinRules: QueryBuilderInfo['rules'] = {\n    idFieldName: () => 'Id',\n    foreignIdFieldName: (masterResolverName) => masterResolverName ? `${masterResolverName}Id` : void 0,\n};\n\n\nexport function prepareBuilderInfo(builder: QueryBuilderInfo): QueryBuilderInfoInternal {\n    const ret = {...builder};\n\n    if (! ret.relationships) {\n        ret.relationships = {};\n    }\n\n    for (const k of Object.keys(ret.resolvers.query)) {\n        if (! ret.relationships[k]) {\n            ret.relationships[k] = {};\n        }\n    }\n\n    if (! ret.resolvers.insert) {\n        ret.resolvers.insert = {};\n    }\n    if (! ret.resolvers.update) {\n        ret.resolvers.update = {};\n    }\n    if (! ret.resolvers.remove) {\n        ret.resolvers.remove = {};\n    }\n\n    if (! ret.functions) {\n        ret.functions = [];\n    }\n    ret.functions = ret.functions.concat(builtinFunctions);\n\n    if (! ret.rules) {\n        ret.rules = {};\n    }\n    ret.rules = {...builtinRules, ...ret.rules};\n\n    if (! ret.events) {\n        ret.events = {};\n    }\n\n    return ret as QueryBuilderInfoInternal;\n}\n\n\nexport function prepareQuery(\n        builder: QueryBuilderInfoInternal,\n        strings: TemplateStringsArray | string,\n        ...values: any[]): PreparedQuery {\n\n    return compile(builder, parse(strings, ...values));\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { PreparedQuery,\n         PreparedResolver,\n         PreparedFnCall,\n         PreparedSubQuery,\n         PreparedFieldListItem,\n         PreparedCondition,\n         PreparedParameterizedValue,\n         ResolverCapabilities,\n         ResolverContext,\n         ResolverEvent,\n         QueryParams,\n         AggregateQueryFuncInfo,\n         ScalarQueryFuncInfo,\n         ImmediateScalarQueryFuncInfo,\n         QueryFuncInfo,\n         QueryBuilderInfoInternal }       from '../types';\nimport { deepCloneObject,\n         isEqualComplexName,\n         getTrueCaseFieldName,\n         getObjectValueWithFieldNameMap } from './util';\nimport { callAggregateFunction,\n         callScalarFunction,\n         callImmediateScalarFunction,\n         getGroupFieldTrueCaseName,\n         isScalarFnCallable }             from './call';\nimport { sortRecords }                    from '../sort';\nimport { applyWhereConditions,\n         applyHavingConditions }          from '../filters';\n\n\n\nfunction filterZeroLengthCondFn(cond: PreparedCondition) {\n    switch (cond.op) {\n    case 'true':\n        return false;\n    case 'not': case 'and': case 'or':\n        if (cond.operands.length === 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\nfunction filterCondOperands(name: string[], cond: PreparedCondition) {\n    cond.operands = cond.operands\n    .map(x => {\n        switch (typeof x) {\n        case 'object':\n            if (Array.isArray(x)) {\n                return x;\n            } else {\n                if (x === null) {\n                    // NOTE: never reach here.\n                    return x;\n                }\n                switch (x.type) {\n                case 'condition':\n                    return pruneCondition(name, x);\n                default:\n                    return x;\n                }\n            }\n        default:\n            return x;\n        }\n    })\n    .filter(x => {\n        switch (typeof x) {\n        case 'object':\n            if (x !== null && !Array.isArray(x) && x.type === 'condition') {\n                return filterZeroLengthCondFn(x);\n            }\n        }\n        return true;\n    });\n\n    return cond;\n}\n\n\nfunction pruneConditionCheckFncall(name: string[], x: PreparedFnCall): PreparedCondition | null {\n    for (const arg of x.args) {\n        switch (typeof arg) {\n        case 'object':\n            if (arg === null) {\n                // NOTE: Nothing to do.\n            } else {\n                switch (arg.type) {\n                case 'field':\n                    // TODO: Check all arguments' resolver are equal\n                    if (! isEqualComplexName(name, arg.name.slice(0, arg.name.length - 1))) {\n                        return ({\n                            type: 'condition',\n                            op: 'true',\n                            operands: [],\n                        });\n                    } else {\n                        arg.name = arg.name.slice(arg.name.length - 1);\n                    }\n                    break;\n                case 'fncall':\n                    {\n                        const tmp = pruneConditionCheckFncall(name, arg);\n                        if (tmp) {\n                            return tmp;\n                        }\n                    }\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    return null;\n}\n\n\nfunction pruneCondition(name: string[], cond: PreparedCondition): PreparedCondition {\n    if (cond.operands.length) {\n        const x = cond.operands[0];\n\n        switch (typeof x) {\n        case 'object':\n            if (x === null) {\n                // NOTE: never reach here.\n                // NOTE: Nothing to do.\n            } else if (Array.isArray(x)) {\n                // NOTE: Nothing to do. It is data.\n            } else {\n                switch (x.type) {\n                case 'field':\n                    if (! isEqualComplexName(name, x.name.slice(0, x.name.length - 1))) {\n                        return ({\n                            type: 'condition',\n                            op: 'true',\n                            operands: [],\n                        });\n                    } else {\n                        x.name = x.name.slice(x.name.length - 1);\n                    }\n                    break;\n                case 'fncall':\n                    {\n                        const tmp = pruneConditionCheckFncall(name, x);\n                        if (tmp) {\n                            return tmp;\n                        }\n                    }\n                }\n            }\n            break;\n        }\n    }\n\n    return filterCondOperands(name, cond);\n}\n\n\nfunction collectSubQueriesFromCondition(\n        subQueries: Array<{ cond: PreparedCondition, index: number, subQuery: PreparedSubQuery }>,\n        cond: PreparedCondition) {\n\n    switch (cond.type) {\n    case 'condition':\n        for (let i = 0; i < cond.operands.length; i++) {\n            const x = cond.operands[i];\n\n            switch (typeof x) {\n            case 'object':\n                if (x === null) {\n                    // NOTE: never reach here.\n                    // NOTE: Nothing to do.\n                } else if (Array.isArray(x)) {\n                    // NOTE: Nothing to do. It is data.\n                } else {\n                    switch (x.type) {\n                    case 'condition':\n                        collectSubQueriesFromCondition(subQueries, x);\n                        break;\n                    case 'subquery':\n                        subQueries.push({cond, index: i, subQuery: x});\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        break;\n    }\n\n    return cond;\n}\n\n\nasync function execCondSubQueries(\n        builder: QueryBuilderInfoInternal,\n        params: QueryParams,\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        tr: any,\n        trOptions: any | undefined,\n        condTemplate: PreparedCondition[],\n        resolverData: any | null) {\n\n    const condSubQueries: Array<{ cond: PreparedCondition, index: number, subQuery: PreparedSubQuery }> = [];\n\n    condTemplate.forEach(x => collectSubQueriesFromCondition(condSubQueries, x));\n\n    const condSubQueryResults =\n        condSubQueries\n            .map(x =>\n                executeCompiledQuery(\n                    builder, params, tr, trOptions,\n                    x.subQuery.query, null, null, null, resolverData)\n                .then(r => ({ cond: x.cond, index: x.index, subQuery: x.subQuery, result: r })));\n\n    (await Promise.all(condSubQueryResults)).map(x => {\n        const field = x.subQuery.query.select[0];\n        let fieldName = '';\n\n        switch (field.type) {\n        case 'field':\n            fieldName = field.name[field.name.length - 1];\n            break;\n        default:\n            fieldName = field.aliasName ?? '';\n            break;\n        }\n\n        if (x.result.length) {\n            const fieldNameMap = new Map<string, string>(Object.keys(x.result[0]).map(x => [x.toLowerCase(), x]));\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            x.cond.operands[x.index] = x.result.map(w => getObjectValueWithFieldNameMap(fieldNameMap, w, fieldName));\n        } else {\n            x.cond.operands[x.index] = [];\n        }\n    });\n}\n\n\nfunction mapSelectFields(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>,\n        x: PreparedResolver, records: any[], isAggregation: boolean) {\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const queryFieldsMapEntries:\n        Array<{\n            isField: boolean,\n            fieldName: string,\n            field: PreparedFieldListItem,\n            fn: (i: number, fieldName: string, field: PreparedFieldListItem, record: any) => void,\n        }> = new Array(x.queryFieldsMap.size);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const fnInfos: QueryFuncInfo[] = new Array(x.queryFieldsMap.size);\n\n    const fnScaler = (i: number, fieldName: string, field: PreparedFieldListItem, record: any) => {\n        const fnInfo: ScalarQueryFuncInfo = fnInfos[i] as ScalarQueryFuncInfo;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        record[(field as PreparedFnCall).aliasName] = callScalarFunction(ctx, field as PreparedFnCall, fnInfo, 'any', record, null);\n    };\n\n    const fnImmediateScaler = (i: number, fieldName: string, field: PreparedFieldListItem, record: any) => {\n        const fnInfo: ImmediateScalarQueryFuncInfo = fnInfos[i] as ImmediateScalarQueryFuncInfo;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        record[(field as PreparedFnCall).aliasName] = callImmediateScalarFunction(ctx, field as PreparedFnCall, fnInfo, 'any', record, null);\n    };\n\n    const fnNoop = (i: number, fieldName: string, field: PreparedFieldListItem, record: any) => void 0;\n\n    {\n        let i = 0;\n        for (const ent of x.queryFieldsMap.entries()) {\n            const [fieldName, field] = ent;\n            switch (field.type) {\n            case 'field':\n                queryFieldsMapEntries[i] = { isField: true, fieldName, field, fn: fnNoop };\n                break;\n            case 'fncall':\n                // NOTE: If aggregation, function will be called at `aggregateFields()`.\n                if (isAggregation) {\n                    queryFieldsMapEntries[i] = { isField: false, fieldName, field, fn: fnNoop };\n                } else {\n                    const fnNameI = field.fn.toLowerCase();\n                    const fnInfo = ctx.functions.find(x => x.name.toLowerCase() === fnNameI);\n\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    fnInfos[i] = fnInfo!;\n\n                    switch (fnInfo?.type) {\n                    case 'scalar':\n                        queryFieldsMapEntries[i] = { isField: false, fieldName, field, fn: fnScaler };\n                        break;\n                    case 'immediate-scalar':\n                        queryFieldsMapEntries[i] = { isField: false, fieldName, field, fn: fnImmediateScaler };\n                        break;\n                    default:\n                        queryFieldsMapEntries[i] = { isField: false, fieldName, field, fn: fnNoop };\n                        break;\n                    }\n                }\n                break;\n            default:\n                queryFieldsMapEntries[i] = { isField: false, fieldName, field, fn: fnNoop };\n                break;\n            }\n            i++;\n        }\n    }\n\n    for (const record of records) {\n        for (let i = 0; i < queryFieldsMapEntries.length; i++) {\n            const { isField, fieldName, field, fn } = queryFieldsMapEntries[i];\n\n            if (isField) {\n                // NOTE: Inline expansion\n\n                if(field.aliasName) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-non-null-assertion\n                    record[field.aliasName!] = record[fieldName];\n                }\n            } else {\n                fn(i, fieldName, field, record);\n            }\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return records;\n}\n\n\nfunction groupRecords(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>, groupBy: string[],\n        x: PreparedResolver, records: any[]) {\n\n    if (records.length === 0) {\n        return [];\n    }\n    if (records.length === 1 || groupBy.length === 0) {\n        return [records];\n    }\n\n    const result = new Map<string, any[]>();\n\n    if (records.length) {\n        let i = 0;\n        const fieldNameMap = new Map<string, string>(Object.keys(records[0]).map(x => [x.toLowerCase(), x]));\n\n        for (const record of records) {\n            const key: any[] = [];\n            for (const k of groupBy) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                let v = getObjectValueWithFieldNameMap(fieldNameMap, record, k);\n                if (v === null || v === void 0) {\n                    v = `__$$GENSYM_VT4iHbNbZW3C7taC7J6bx8pruw40cX5X$$_${i++}`;\n                }\n                key.push(v);\n            }\n\n            const keystr = JSON.stringify(key);\n            if (result.has(keystr)) {\n                const a = result.get(keystr);\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                a!.push(record);\n            } else {\n                result.set(keystr, [record]);\n            }\n        }\n    }\n\n    return Array.from(result.values());\n}\n\n\nfunction aggregateFields(\n        ctx: Omit<ResolverContext, 'resolverCapabilities'>, groupBy: string[],\n        x: PreparedResolver, records: any[][]) {\n\n    const result: any[] = [];\n    if (! records.length) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return result;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const firstRec = records[0][0];\n    const groupFields = new Map<string, string>(\n        groupBy.map(w => [w.toLowerCase(), getTrueCaseFieldName(firstRec, w) ?? '']));\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const queryFieldsMapEntries:\n        Array<{\n            isField: boolean,\n            field: PreparedFieldListItem,\n            trueCaseName: string,\n            fn: (i: number, field: PreparedFieldListItem, g: any[], agg: any) => void,\n        }> = new Array(x.queryFieldsMap.size);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const fnInfos: QueryFuncInfo[] = new Array(x.queryFieldsMap.size);\n\n    const fnAggregate = (i: number, field: PreparedFieldListItem, g: any[], agg: any) => {\n        const fnInfo: AggregateQueryFuncInfo = fnInfos[i] as AggregateQueryFuncInfo;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        agg[(field as PreparedFnCall).aliasName] = callAggregateFunction(ctx, field as PreparedFnCall, fnInfo, 'any', g);\n    };\n\n    const fnImmediateScalar = (i: number, field: PreparedFieldListItem, g: any[], agg: any) => {\n        const fnInfo: ImmediateScalarQueryFuncInfo = fnInfos[i] as ImmediateScalarQueryFuncInfo;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        agg[(field as PreparedFnCall).aliasName] = callImmediateScalarFunction(ctx, field as PreparedFnCall, fnInfo, 'any', null, g);\n    };\n\n    const fnScalar = (i: number, field: PreparedFieldListItem, g: any[], agg: any) => {\n        const fnInfo: ScalarQueryFuncInfo = fnInfos[i] as ScalarQueryFuncInfo;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        agg[(field as PreparedFnCall).aliasName] = callScalarFunction(ctx, field as PreparedFnCall, fnInfo, 'any', g[0], g);\n    };\n\n    const fnNoop = (i: number, field: PreparedFieldListItem, g: any[], agg: any) => void 0;\n\n    {\n        let i = 0;\n        for (const ent of x.queryFieldsMap.entries()) {\n            const [, field] = ent;\n            switch (field.type) {\n            case 'field':\n                {\n                    const trueCaseName = getGroupFieldTrueCaseName(groupFields, field.name[field.name.length - 1]);\n                    if (! trueCaseName) {\n                        throw new Error(`${field.name.join('.')} is not allowed. Aggregate function is needed.`);\n                    }\n                    queryFieldsMapEntries[i] = {\n                        isField: true,\n                        field,\n                        trueCaseName,\n                        fn: fnNoop,\n                    };\n                }\n                break;\n            case 'fncall':\n                {\n                    const fnNameI = field.fn.toLowerCase();\n                    const fnInfo = ctx.functions.find(x => x.name.toLowerCase() === fnNameI);\n\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    fnInfos[i] = fnInfo!;\n\n                    switch (fnInfo?.type) {\n                    case 'aggregate':\n                        queryFieldsMapEntries[i] = {\n                            isField: false,\n                            field,\n                            trueCaseName: '',\n                            fn: fnAggregate,\n                        };\n                        break;\n                    case 'immediate-scalar':\n                        queryFieldsMapEntries[i] = {\n                            isField: false,\n                            field,\n                            trueCaseName: '',\n                            fn: fnImmediateScalar,\n                        };\n                        break;\n                    case 'scalar':\n                        if (! isScalarFnCallable(ctx, groupFields, field.args)) {\n                            throw new Error(`${field.aliasName ?? '(unnamed)'} is not allowed. Aggregate function is needed.`);\n                        }\n                        queryFieldsMapEntries[i] = {\n                            isField: false,\n                            field,\n                            trueCaseName: '',\n                            fn: fnScalar,\n                        };\n                        break;\n                    default:\n                        throw new Error(`${field.aliasName ?? '(unnamed)'} is not allowed. Aggregate function is needed.`);\n                    }\n                }\n                break;\n            default:\n                queryFieldsMapEntries[i] = {\n                    isField: false,\n                    field,\n                    trueCaseName: '',\n                    fn: fnNoop,\n                };\n                break;\n            }\n            i++;\n        }\n    }\n\n    for (const g of records) {\n        const agg = {};\n        for (let i = 0; i < queryFieldsMapEntries.length; i++) {\n            const { isField, field, trueCaseName, fn } = queryFieldsMapEntries[i];\n\n            if (isField) {\n                // NOTE: Inline expansion\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n                agg[trueCaseName] = g[0][trueCaseName];\n\n                if (field.aliasName) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n                    agg[field.aliasName] = g[0][trueCaseName];\n                }\n            } else {\n                fn(i, field, g, agg);\n            }\n        }\n        result.push(agg);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return result;\n}\n\n\nfunction getRemovingFields(x: PreparedResolver, records: any[], isAggregation: boolean) {\n    const removingFields = new Set<string>();\n    if (records.length) {\n        const requestedFields = new Set<string>();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const rec = records[0];\n        for (const ent of x.queryFieldsMap.entries()) {\n            const f = ent[1];\n            if (isAggregation && f.type === 'field' && f.aliasName) {\n                requestedFields.add(f.aliasName);\n            } else {\n                const name = getTrueCaseFieldName(rec, ent[0]);\n                if (name) {\n                    requestedFields.add(name);\n                }\n            }\n        }\n        for (const k of Object.keys(rec)) {\n            if (! requestedFields.has(k)) {\n                removingFields.add(k);\n            }\n        }\n    }\n    return removingFields;\n}\n\n\nfunction getResolversInfo(builder: QueryBuilderInfoInternal, resolverNames: Map<string, string>, x: PreparedResolver, i: number) {\n    const parentType: ('master' | 'detail') = i === 0 ? 'master' : 'detail';\n    const parentKey = JSON.stringify(x.name.slice(0, x.name.length - 1));\n    const currentKey = JSON.stringify(x.name);\n    const resolverName = x.resolverName ?? '';\n    const parentResolverName = resolverNames.get(parentKey);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const masterRelationshipInfo = (\n        (i === 0 ?\n            (\n                // for subquery's primary resolver\n\n                (builder.relationships[resolverName] ?? {})\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                [parentResolverName!] as any\n            ) : (\n                // for detail->master relationship\n\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                (builder.relationships[parentResolverName!] ?? {})\n                [resolverName] as any\n            )\n        ) ?? {});\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const foreignIdField = (typeof masterRelationshipInfo === 'object' && masterRelationshipInfo.id)\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        ? masterRelationshipInfo.id as string\n        : i === 0\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            ? builder.rules.foreignIdFieldName(parentResolverName!)\n            : builder.rules.foreignIdFieldName(resolverName) ;\n\n    const parentIdFieldName = parentResolverName ? builder.rules.idFieldName(parentResolverName) : void 0;\n    const currentIdFieldName = builder.rules.idFieldName(resolverName);\n\n    return ({\n        parentType,\n        parentKey,\n        currentKey,\n        resolverName,\n        parentResolverName,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        masterRelationshipInfo,\n        foreignIdField,\n        parentIdFieldName,\n        currentIdFieldName,\n    });\n}\n\n\nfunction normalizeLimitAndOffset(\n        params: QueryParams,\n        limit: number | PreparedParameterizedValue | null | undefined,\n        offset: number | PreparedParameterizedValue | null | undefined) {\n\n    limit = limit ?? null;\n    offset = offset ?? null;\n\n    if (limit !== null && typeof limit === 'object') {\n        if (! Object.prototype.hasOwnProperty.call(params, limit.name)) {\n            throw new Error(`Parameter '${limit.name}' is not found.`);\n        }\n        const w = params[limit.name] ?? null;\n        if (typeof w !== 'number') {\n            throw new Error(`Parameter '${limit.name}' should be number.`);\n        }\n        limit = w;\n    }\n    if (offset !== null && typeof offset === 'object') {\n        if (! Object.prototype.hasOwnProperty.call(params, offset.name)) {\n            throw new Error(`Parameter '${offset.name}' is not found.`);\n        }\n        const w = params[offset.name] ?? null;\n        if (typeof w !== 'number') {\n            throw new Error(`Parameter '${offset.name}' should be number.`);\n        }\n        offset = w;\n    }\n\n    return { limit, offset };\n}\n\n\nexport async function executeCompiledQuery(\n        builder: QueryBuilderInfoInternal,\n        params: QueryParams,\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        tr: any,\n        trOptions: any | undefined,\n        query: PreparedQuery,\n        parent: any | null,\n        parentQueriedRecords: Map<string, any[]> | null,\n        parentResolverNames: Map<string, string> | null,\n        parentResolverData: any | null\n        ): Promise<any[]> {\n\n    let primaryRecords: any[] | undefined;\n    let primaryCapabilities: ResolverCapabilities | undefined;\n\n    const queriedRecords = parentQueriedRecords ?? new Map<string, any[]>();\n    const resolverNames = parentResolverNames ?? new Map<string, string>();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const resolverData = parentResolverData ?? {};\n\n    const { limit, offset } = normalizeLimitAndOffset(params, query.limit, query.offset);\n\n    if (!parent && builder.events.beginExecute) {\n        await builder.events.beginExecute({\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            resolverData,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            transactionData: tr,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            transactionOptions: trOptions,\n        });\n    }\n\n    try {\n        const condWhereTemplate = query.where ?\n            deepCloneObject(query.where) : [];\n        const condHavingTemplate = query.having ?\n            deepCloneObject(query.having) : [];\n\n        await execCondSubQueries(builder, params, tr, trOptions, condWhereTemplate, resolverData);\n        await execCondSubQueries(builder, params, tr, trOptions, condHavingTemplate, resolverData);\n\n        const removingFieldsAndRecords: Array<[Set<string>, any[]]> = [];\n        const removingFieldsMap = new Map<string, Set<string>>();\n\n        for (let i = 0; i < query.from.length; i++) {\n            const x = query.from[i];\n\n            const {\n                parentType,\n                parentKey,\n                currentKey,\n                resolverName,\n                parentResolverName,\n                foreignIdField,\n                parentIdFieldName,\n                currentIdFieldName,\n            } = getResolversInfo(builder, resolverNames, x, i);\n\n            if (! x.resolver) {\n                throw new Error(`Resolver name ${x.name.join('.')} is not resolved.`);\n            }\n\n            let records: any[] = [];\n            const parentRecords = queriedRecords.get(parentKey);\n\n            const hasAliasNameCond = (x.condAliasFields.size > 0) ? true : false;\n            const isAggregation = (i === 0 && query.groupBy) ? true : false;\n\n            const queryFields =\n                Array.from(x.queryFields.values());\n            const condFields =\n                Array.from(x.condFields.values());\n            const havingCondFields =\n                Array.from(x.havingCondFields.values());\n            const groupFields: string[] =\n                (i === 0 && query.groupBy) ? query.groupBy : []; // NOTE: condition is same as `isAggregation`\n            const sortFields =\n                Array.from(x.sortFieldNames.values());\n            const relationshipIdFields =\n                Array.from(x.relationshipIdFields.values());\n\n            const resolvingFields =\n                Array.from(\n                    new Set<string>(queryFields\n                        .concat(condFields)\n                        .concat(havingCondFields)\n                        .concat(builder.rules.idFieldName ? [builder.rules.idFieldName(resolverName)] : [])\n                        .concat(groupFields)\n                        .concat(sortFields)\n                        .concat(relationshipIdFields)\n                    ).values());\n\n            const condWhere = deepCloneObject(condWhereTemplate)\n                .map(cond => pruneCondition(x.name, cond))\n                .filter(filterZeroLengthCondFn);\n            const condHaving = deepCloneObject(condHavingTemplate)\n                .map(cond => pruneCondition(x.name, cond))\n                .filter(filterZeroLengthCondFn);\n\n            const ctxGen: Omit<ResolverContext, 'resolverCapabilities'> = {\n                functions: builder.functions,\n                query,\n                params,\n                graphPath: x.name,\n                resolverName,\n                parentResolverName,\n                parentType,\n                foreignIdField,\n                masterIdField: i === 0 ? parentIdFieldName : currentIdFieldName,\n                detailIdField: i === 0 ? currentIdFieldName : parentIdFieldName,\n                parentRecords,\n                conditions: condWhere,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                resolverData,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                transactionData: tr,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                transactionOptions: trOptions,\n            };\n\n            if (i === 0) {\n                const ctx: ResolverContext = {\n                    ...ctxGen,\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    parent,\n                    resolverCapabilities: {\n                        filtering: false,\n                        sorting: false,\n                        limit: false,\n                        offset: false,\n                    },\n                };\n\n                records = await x.resolver(\n                    resolvingFields,\n                    hasAliasNameCond ? [] : condWhere,\n                    (isAggregation || hasAliasNameCond) ? null : limit,\n                    (isAggregation || hasAliasNameCond) ? null : offset,\n                    ctx,\n                );\n                primaryCapabilities = ctx.resolverCapabilities;\n\n                if (hasAliasNameCond) {\n                    primaryCapabilities.filtering = false;\n                    primaryCapabilities.limit = false;\n                    primaryCapabilities.offset = false;\n                    primaryCapabilities.sorting = false;\n                }\n\n                if (hasAliasNameCond) {\n                    records = mapSelectFields(ctxGen, x, records, isAggregation);\n                }\n\n                if (! ctx.resolverCapabilities.filtering) {\n                    records = applyWhereConditions(ctxGen, condWhere, records);\n                }\n\n                if (! hasAliasNameCond) {\n                    records = mapSelectFields(ctxGen, x, records, isAggregation);\n                }\n\n                if (isAggregation) {\n                    // TODO: `count()` on non-aggregation query\n\n                    primaryCapabilities.limit = false;\n                    primaryCapabilities.offset = false;\n                    primaryCapabilities.sorting = false;\n\n                    const grouped = groupRecords(ctxGen, groupFields, x, records);\n                    const filteredGrouped = applyHavingConditions(ctxGen, condHaving, grouped);\n                    records = aggregateFields(ctxGen, groupFields, x, filteredGrouped);\n                }\n\n                primaryRecords = records;\n            } else if (parentRecords && parentRecords.length) {\n                // Get master relationships.\n\n                // For N+1 Query problem\n                if (builder.events.beforeMasterSubQueries) {\n                    await builder.events.beforeMasterSubQueries(ctxGen);\n                }\n\n                const parentFieldName = x.name[x.name.length - 1];\n                for (const p of parentRecords) {\n                    const ctx: ResolverContext = {\n                        ...ctxGen,\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        parent: p,\n                        resolverCapabilities: {\n                            filtering: false,\n                            sorting: false,\n                            limit: false,\n                            offset: false,\n                        },\n                    };\n\n                    let recs = (await x.resolver(\n                        resolvingFields,\n                        hasAliasNameCond ? [] : condWhere,\n                        1, 0, ctx)).slice(0, 1);\n\n                    if (hasAliasNameCond) {\n                        ctx.resolverCapabilities.filtering = false;\n                        ctx.resolverCapabilities.limit = false;\n                        ctx.resolverCapabilities.offset = false;\n                        ctx.resolverCapabilities.sorting = false;\n                    }\n\n                    if (hasAliasNameCond) {\n                        recs = mapSelectFields(ctxGen, x, recs, isAggregation);\n                    }\n\n                    if (! ctx.resolverCapabilities.filtering) {\n                        recs = applyWhereConditions(ctxGen, condWhere, recs);\n                    }\n\n                    if (! hasAliasNameCond) {\n                        recs = mapSelectFields(ctxGen, x, recs, isAggregation);\n                    }\n\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n                    p[parentFieldName] = recs.length > 0 ? recs[0] : null;\n\n                    records = records.concat(recs);\n                }\n\n                if (builder.events.afterMasterSubQueries) {\n                    await builder.events.afterMasterSubQueries(ctxGen);\n                }\n\n                const parentRemovingFields = removingFieldsMap.get(parentKey);\n                if (parentRemovingFields) {\n                    parentRemovingFields.delete(parentFieldName);\n                }\n            }\n\n            const removingFields = getRemovingFields(x, records, isAggregation);\n            removingFieldsAndRecords.push([removingFields, records]);\n            removingFieldsMap.set(currentKey, removingFields);\n\n            queriedRecords.set(currentKey, records);\n            resolverNames.set(currentKey, resolverName);\n        }\n\n        if (query.selectSubQueries && primaryRecords) {\n            const promises: Promise<{ name: string[], parent: any, result: any[] }>[] = [];\n            for (const x of query.selectSubQueries) {\n                const subQueryName = x.query.from[0].name;\n                const parentKey = JSON.stringify(subQueryName.slice(0, subQueryName.length - 1));\n                const parentRecords = queriedRecords.get(parentKey);\n\n                if (parentRecords) {\n                    // For N+1 Query problem // TODO: reduce descendants (grandchildren and ...) queries\n\n                    const {\n                        parentType,\n                        resolverName,\n                        parentResolverName,\n                        foreignIdField,\n                        parentIdFieldName,\n                        currentIdFieldName,\n                    } = getResolversInfo(builder, resolverNames, x.query.from[0], 0);\n\n                    const evtGen: ResolverEvent = {\n                        functions: builder.functions,\n                        query: x.query,\n                        params,\n                        graphPath: subQueryName,\n                        resolverName,\n                        parentResolverName,\n                        parentType,\n                        foreignIdField,\n                        masterIdField: parentIdFieldName,\n                        detailIdField: currentIdFieldName,\n                        parentRecords,\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        resolverData,\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        transactionData: tr,\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        transactionOptions: trOptions,\n                    };\n\n                    if (builder.events.beforeDetailSubQueries) {\n                        await builder.events.beforeDetailSubQueries({\n                            ...evtGen,\n                        });\n                    }\n\n                    for (const p of parentRecords) {\n                        promises.push(\n                            executeCompiledQuery(\n                                builder, params, tr, trOptions,\n                                x.query, p, queriedRecords, resolverNames, resolverData)\n                            .then(q => ({\n                                name: subQueryName,\n                                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                                parent: p,\n                                result: q,\n                            }))\n                        );\n                    }\n\n                    if (builder.events.afterDetailSubQueries) {\n                        await builder.events.afterDetailSubQueries({\n                            ...evtGen,\n                        });\n                    }\n                }\n\n                const parentRemovingFields = removingFieldsMap.get(parentKey);\n                if (parentRemovingFields) {\n                    parentRemovingFields.delete(subQueryName[subQueryName.length - 1]);\n                }\n            }\n\n            const results = await Promise.all(promises);\n            results.forEach(r => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                r.parent[r.name[r.name.length - 1]] = r.result;\n            });\n        }\n\n        if (primaryRecords) {\n            if (primaryCapabilities) {\n                if (! primaryCapabilities.sorting) {\n                    primaryRecords = sortRecords(query, primaryRecords);\n                }\n\n                if (! (primaryCapabilities.offset || primaryCapabilities.limit)) {\n                    if (typeof offset === 'number' && typeof limit === 'number') {\n                        primaryRecords = primaryRecords.slice(offset, offset + limit);\n                    } else if (typeof offset === 'number') {\n                        primaryRecords = primaryRecords.slice(offset);\n                    } else if (typeof limit === 'number') {\n                        primaryRecords = primaryRecords.slice(0, limit);\n                    }\n                } else if (! primaryCapabilities.offset) {\n                    if (typeof offset === 'number') {\n                        primaryRecords = primaryRecords.slice(offset);\n                    }\n                } else if (! primaryCapabilities.limit) {\n                    if (typeof limit === 'number') {\n                        primaryRecords = primaryRecords.slice(0, limit);\n                    }\n                }\n            }\n        } else {\n            // NOTE: never reach here.\n            primaryRecords = [];\n        }\n\n        for (const ent of removingFieldsAndRecords) {\n            const [removingFields, records] = ent;\n            for (const r of records) {\n                for (const name of removingFields) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    delete r[name];\n                }\n            }\n        }\n\n        if (!parent && builder.events.endExecute) {\n            await builder.events.endExecute({\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                resolverData,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                transactionData: tr,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                transactionOptions: trOptions,\n            }, null);\n        }\n    } catch (e) {\n        if (!parent && builder.events.endExecute) {\n            await builder.events.endExecute({\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                resolverData,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                transactionData: tr,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                transactionOptions: trOptions,\n            }, e);\n        }\n        throw e;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return primaryRecords;\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { QueryBuilderInfo,\n         QueryParams,\n         IQuery,\n         PreparedQuery,\n         SubscriberParams,\n         Subscriber }      from './types';\nimport { prepareQuery,\n         prepareBuilderInfo }   from './lib/prepare';\nimport { executeCompiledQuery } from './lib/run-query';\nimport { executeInsertDML,\n         executeUpdateDML,\n         executeRemoveDML }     from './lib/run-dml';\n\n\n\nclass Query implements IQuery {\n    constructor(private query: PreparedQuery, private runCompiledQuery:\n            (q: PreparedQuery, p?: QueryParams) => Promise<any[]>) {\n        // nothing to do.\n    }\n\n    public execute<R>(params?: QueryParams): Promise<R[]> {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return this.runCompiledQuery(this.query, params);\n    }\n}\n\n\ninterface Subscribers {\n    [resolverNames: string]: Map<any, Set<Subscriber>>;\n}\n\ninterface PublishedEvtQueueItem extends SubscriberParams {\n    fn: Subscriber;\n}\n\ntype PublishFn = (resolver: string, on: string, data: any[]) => void;\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function build(builder: QueryBuilderInfo) {\n    const preparedBI = prepareBuilderInfo(builder);\n    const subscribers: Subscribers = {};\n\n\n    class Publisher {\n        private eventQueue: PublishedEvtQueueItem[] = [];\n\n        public publish(resolver: string, on: SubscriberParams['on'], data: any[]) {\n            const map = subscribers[resolver];\n            if (map && map.size) {\n                {\n                    const set = map.get(null);\n                    if (set) {\n                        for (const fn of set.values()) {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            this.eventQueue.push({ on, resolver, id: null, fn });\n                        }\n                    }\n                }\n                const idFieldName = preparedBI.rules.idFieldName(resolver);\n                for (const rec of data) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n                    const id = rec[idFieldName];\n                    const set = map.get(id);\n                    if (set) {\n                        for (const fn of set.values()) {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            this.eventQueue.push({ on, resolver, id, fn });\n                        }\n                    }\n                }\n            }\n        }\n\n        public toPublishFn() {\n            return (resolver: string, on: SubscriberParams['on'], data: any[]) => this.publish(resolver, on, data);\n        }\n\n        public fire() {\n            if (this.eventQueue.length) {\n                const queue = this.eventQueue;\n                this.eventQueue = [];\n\n                setTimeout(() => {\n                    for (const q of queue) {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            q.fn({ on: q.on, resolver: q.resolver, id: q.id });\n                        } catch (e) {\n                            // nothing to do.\n                        }\n                    }\n                }, 0);\n            }\n        }\n    }\n\n\n    function subscribe(resolver: string, id: any | null, fn: Subscriber) {\n        if (! subscribers[resolver]) {\n            subscribers[resolver] = new Map<any, Set<Subscriber>>();\n        }\n\n        const map = subscribers[resolver];\n        if (! map.has(id)) {\n            map.set(id, new Set<Subscriber>());\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const set = map.get(id)!;\n        set.add(fn);\n    }\n\n\n    function unsubscribe(resolver: string, id: any | null, fn: Subscriber) {\n        if (! subscribers[resolver]) {\n            return;\n        }\n\n        const map = subscribers[resolver];\n        if (! map.has(id)) {\n            return;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const set = map.get(id)!;\n        set.delete(fn);\n    }\n\n\n    function createTransactionScope(\n            scopeTr: any, scopeTrOptions: any | undefined, scopePublisher: Publisher | undefined, isIsolated: boolean) {\n\n        const scopePub = scopePublisher?.toPublishFn();\n\n\n        async function withTransactionEvents<R>(\n                tr: any, trOptions: any | undefined, publisher: Publisher,\n                run: (tx: any, txOpts: any | undefined, publish: PublishFn) => Promise<R>) {\n\n            try {\n                if (preparedBI.events.beginTransaction) {\n                    await preparedBI.events.beginTransaction({\n                        resolverData: {},\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        transactionData: tr,\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        transactionOptions: trOptions,\n                    });\n                }\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const ret =  await run(tr, trOptions, publisher.toPublishFn());\n\n                if (preparedBI.events.endTransaction) {\n                    await preparedBI.events.endTransaction({\n                        resolverData: {},\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        transactionData: tr,\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        transactionOptions: trOptions,\n                    }, null);\n                }\n\n                publisher.fire();\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return ret;\n            } catch (e) {\n                try {\n                    if (preparedBI.events.endTransaction) {\n                        await preparedBI.events.endTransaction({\n                            resolverData: {},\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            transactionData: tr,\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            transactionOptions: trOptions,\n                        }, e);\n                    }\n                } catch (e2) {\n                    // nothing to do.\n                }\n                throw e;\n            }\n        }\n\n\n        async function runCompiledQuery<R>(query: PreparedQuery, params?: QueryParams): Promise<R[]> {\n            const run = async (tr: any, trOptions: any | undefined, publish: PublishFn) => {\n                const ret = await executeCompiledQuery(preparedBI, params ?? {}, tr, trOptions, query, null, null, null, null);\n\n                if (query.for && (query.for.includes('view') || query.for.includes('reference'))) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    publish(query.from[0].resolverName![query.from[0].resolverName!.length - 1], 'update', ret);\n                }\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return ret;\n            };\n\n            if (isIsolated) {\n                return await withTransactionEvents<R[]>({}, void 0, new Publisher(), run);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-non-null-assertion\n                return await run(scopeTr, scopeTrOptions, scopePub!);\n            }\n        }\n\n\n        function compileQuery(strings: TemplateStringsArray | string, ...values: any[]): IQuery {\n            const query = prepareQuery(preparedBI, strings, ...values);\n            return new Query(query, runCompiledQuery);\n        }\n\n\n        async function runQuery<R>(strings: TemplateStringsArray | string, ...values: any[]): Promise<R[]> {\n            const run = async (tr: any, trOptions: any | undefined, publish: PublishFn) => {\n                const query = prepareQuery(preparedBI, strings, ...values);\n                const ret = await executeCompiledQuery(preparedBI, {}, tr, trOptions, query, null, null, null, null);\n\n                if (query.for && (query.for.includes('view') || query.for.includes('reference'))) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    publish(query.from[0].resolverName![query.from[0].resolverName!.length - 1], 'update', ret);\n                }\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return ret;\n            };\n\n            if (isIsolated) {\n                return await withTransactionEvents<R[]>({}, void 0, new Publisher(), run);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-non-null-assertion\n                return await run(scopeTr, scopeTrOptions, scopePub!);\n            }\n        }\n\n\n        async function runInsert<T>(resolver: string, obj: T): Promise<T extends (infer R)[] ? R[] : T> {\n            const run = async (tr: any, trOptions: any | undefined, publish: PublishFn) => {\n                const isArray = Array.isArray(obj);\n    \n                const ret = await executeInsertDML(preparedBI, tr, trOptions, resolver, isArray ? obj as any : [obj]);\n\n                publish(resolver, 'insert', ret);\n\n                if (isArray) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return ret as any;\n                } else {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return ret[0];\n                }\n            };\n\n            if (isIsolated) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return await withTransactionEvents({}, void 0, new Publisher(), run);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-non-null-assertion\n                return await run(scopeTr, scopeTrOptions, scopePub!);\n            }\n        }\n\n\n        async function runUpdate<T>(resolver: string, obj: T): Promise<T extends (infer R)[] ? R[] : T> {\n            const run = async (tr: any, trOptions: any | undefined, publish: PublishFn) => {\n                const isArray = Array.isArray(obj);\n\n                const ret = await executeUpdateDML(preparedBI, tr, trOptions, resolver, isArray ? obj as any : [obj]);\n\n                publish(resolver, 'update', ret);\n\n                if (isArray) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return ret as any;\n                } else {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return ret[0];\n                }\n            };\n\n            if (isIsolated) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return await withTransactionEvents({}, void 0, new Publisher(), run);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-non-null-assertion\n                return await run(scopeTr, scopeTrOptions, scopePub!);\n            }\n        }\n\n\n        async function runRemove<T>(resolver: string, obj: T): Promise<void> {\n            const run = async (tr: any, trOptions: any | undefined, publish: PublishFn) => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const data: any[] = Array.isArray(obj) ? obj : [obj];\n\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                await executeRemoveDML(preparedBI, tr, trOptions, resolver, data);\n\n                publish(resolver, 'remove', data);\n\n                return;\n            };\n\n            if (isIsolated) {\n                return await withTransactionEvents({}, void 0, new Publisher(), run);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-non-null-assertion\n                return await run(scopeTr, scopeTrOptions, scopePub!);\n            }\n        }\n\n\n        async function runTouch<T>(resolver: string, obj: T): Promise<void> {\n            const run = (tr: any, trOptions: any | undefined, publish: PublishFn) => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const data: any[] = Array.isArray(obj) ? obj : [obj];\n\n                publish(resolver, 'update', data);\n\n                return Promise.resolve();\n            };\n\n            if (isIsolated) {\n                return await withTransactionEvents({}, void 0, new Publisher(), run);\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-non-null-assertion\n                return await run(scopeTr, scopeTrOptions, scopePub!);\n            }\n        }\n\n\n        async function transaction(\n                callback: (commands: {\n                        compile: typeof compileQuery,\n                        soql: typeof runQuery,\n                        insert: typeof runInsert,\n                        update: typeof runUpdate,\n                        remove: typeof runRemove,\n                        touch: typeof runTouch,\n                    }, tr: any) => Promise<void>,\n                trOptions?: any,\n                ) {\n\n            const tr = {};\n\n            const publisher = new Publisher();\n            const commands = createTransactionScope(tr, trOptions, publisher, false);\n\n            const run = async (tr: any, _trOptions: any | undefined, _publish: PublishFn) => {\n                await callback({\n                    compile: commands.compile,\n                    soql: commands.soql,\n                    insert: commands.insert,\n                    update: commands.update,\n                    remove: commands.remove,\n                    touch: commands.touch,\n                }, tr);\n            };\n\n            return await withTransactionEvents(tr, trOptions, publisher, run);\n        }\n\n        return ({\n            compile: compileQuery,\n            soql: runQuery,\n            insert: runInsert,\n            update: runUpdate,\n            remove: runRemove,\n            touch: runTouch,\n            subscribe,\n            unsubscribe,\n            transaction,\n        });\n    }\n\n\n    return createTransactionScope({}, void 0, void 0, true);\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ResolverEvent,\n         InsertResolverFn,\n         UpdateResolverFn,\n         RemoveResolverFn,\n         QueryBuilderInfoInternal } from '../types';\n\n\n\nexport async function executeInsertDML(\n        builder: QueryBuilderInfoInternal,\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        tr: any,\n        trOptions: any | undefined,\n        resolverName: string,\n        records: any[]\n        ): Promise<any[]> {\n\n    const resolvers = builder.resolvers.insert;\n    let resolverInfo: InsertResolverFn | null = null;\n    for (const key of Object.keys(resolvers)) {\n        if (key.toLowerCase() === resolverName.toLowerCase()) {\n            resolverInfo = resolvers[key];\n        }\n    }\n    if (! resolverInfo) {\n        throw new Error(`Resolver name ${resolverName} is not resolved.`);\n    }\n\n    const evt: ResolverEvent = {\n        resolverData: {},\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        transactionData: tr,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        transactionOptions: trOptions,\n    };\n\n    if (builder.events.beginExecute) {\n        await builder.events.beginExecute(evt);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    let ret: any [] = null as any;\n\n    try {\n        const ctx = {\n            functions: builder.functions,\n            graphPath: [],\n            resolverName: resolverName,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            resolverData: evt.resolverData,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            transactionData: tr,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            transactionOptions: trOptions,\n            resolverCapabilities: {\n                filtering: false,\n                sorting: false,\n                limit: false,\n                offset: false,\n            },\n        };\n\n        ret = await resolverInfo(records, ctx);\n\n        if (builder.events.endExecute) {\n            await builder.events.endExecute(evt, null);\n        }\n    } catch(e) {\n        if (builder.events.endExecute) {\n            await builder.events.endExecute(evt, e);\n        }\n\n        throw e;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return ret;\n}\n\n\nexport async function executeUpdateDML(\n        builder: QueryBuilderInfoInternal,\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        tr: any,\n        trOptions: any | undefined,\n        resolverName: string,\n        records: any[]\n        ): Promise<any[]> {\n\n    const resolvers = builder.resolvers.update;\n    let resolverInfo: UpdateResolverFn | null = null;\n    for (const key of Object.keys(resolvers)) {\n        if (key.toLowerCase() === resolverName.toLowerCase()) {\n            resolverInfo = resolvers[key];\n        }\n    }\n    if (! resolverInfo) {\n        throw new Error(`Resolver name ${resolverName} is not resolved.`);\n    }\n\n    const evt: ResolverEvent = {\n        resolverData: {},\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        transactionData: tr,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        transactionOptions: trOptions,\n    };\n\n    if (builder.events.beginExecute) {\n        await builder.events.beginExecute(evt);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    let ret: any [] = null as any;\n\n    try {\n        const ctx = {\n            functions: builder.functions,\n            graphPath: [],\n            resolverName: resolverName,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            resolverData: evt.resolverData,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            transactionData: tr,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            transactionOptions: trOptions,\n            resolverCapabilities: {\n                filtering: false,\n                sorting: false,\n                limit: false,\n                offset: false,\n            },\n        };\n\n        ret = await resolverInfo(records, ctx);\n\n        if (builder.events.endExecute) {\n            await builder.events.endExecute(evt, null);\n        }\n    } catch(e) {\n        if (builder.events.endExecute) {\n            await builder.events.endExecute(evt, e);\n        }\n\n        throw e;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return ret;\n}\n\n\nexport async function executeRemoveDML(\n        builder: QueryBuilderInfoInternal,\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        tr: any,\n        trOptions: any | undefined,\n        resolverName: string,\n        records: any[]\n        ): Promise<void> {\n\n    const resolvers = builder.resolvers.remove;\n    let resolverInfo: RemoveResolverFn | null = null;\n    for (const key of Object.keys(resolvers)) {\n        if (key.toLowerCase() === resolverName.toLowerCase()) {\n            resolverInfo = resolvers[key];\n        }\n    }\n    if (! resolverInfo) {\n        throw new Error(`Resolver name ${resolverName} is not resolved.`);\n    }\n\n    const evt: ResolverEvent = {\n        resolverData: {},\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        transactionData: tr,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        transactionOptions: trOptions,\n    };\n\n    if (builder.events.beginExecute) {\n        await builder.events.beginExecute(evt);\n    }\n\n    try {\n        const ctx = {\n            functions: builder.functions,\n            graphPath: [],\n            resolverName: resolverName,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            resolverData: evt.resolverData,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            transactionData: tr,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            transactionOptions: trOptions,\n            resolverCapabilities: {\n                filtering: false,\n                sorting: false,\n                limit: false,\n                offset: false,\n            },\n        };\n\n        await resolverInfo(records, ctx);\n\n        if (builder.events.endExecute) {\n            await builder.events.endExecute(evt, null);\n        }\n    } catch(e) {\n        if (builder.events.endExecute) {\n            await builder.events.endExecute(evt, e);\n        }\n\n        throw e;\n    }\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { parserInput }        from 'fruitsconfits/modules/lib/types';\nimport { formatErrorMessage } from 'fruitsconfits/modules/lib/parser';\nimport { getStringParsers }   from 'fruitsconfits/modules/lib/string-parser';\n\n\n\ntype Ctx = undefined;\ntype Ast = string | number | boolean | null | string[];\n\n\nconst $s = getStringParsers<Ctx, Ast>({\n    rawToToken: rawToken => rawToken,\n    concatTokens: tokens => (tokens.length ?\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        [tokens.reduce((a, b) => a as string + b as string)] : []),\n});\n\nconst {seq, cls, notCls, classes, numbers, cat,\n       repeat, end, first, combine, erase, trans, ahead,\n       makeProgram} = $s;\n\n\nconst decimalIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 10)])\n    (numbers.int);\n\nconst floatingPointNumberValue =\n    trans(tokens => [Number.parseFloat((tokens as string[])[0].replace(/_/g, ''))])\n    (numbers.float);\n\nconst numberValue =\n    first(floatingPointNumberValue,\n          decimalIntegerValue, );\n\nconst trueValue =\n    trans(tokens => [true])(seq('true'));\n\nconst falseValue =\n    trans(tokens => [false])(seq('false'));\n\n\nconst quoted = trans(input => input.length ? input : [''])(\n    erase(repeat(classes.spaceWithinSingleLine), cls('\"')),\n    cat(repeat(first(\n        trans(input => ['\"'])(seq('\"\"')),\n        notCls('\"'), ))),\n    erase(cls('\"'), repeat(erase(classes.spaceWithinSingleLine))), );\n\nconst nakidNum = trans(input => input.length ? input : [null])(\n    erase(repeat(classes.spaceWithinSingleLine)),\n    first(trueValue, falseValue, numberValue),\n    erase(repeat(classes.spaceWithinSingleLine)),\n    ahead(first(cls(',', '\\r\\n', '\\n', '\\r'), end())), );\n\nconst nakid = trans(input => input.length ? ([input[0] ? (input[0] as string).trim() : '']) : [null])(\n    erase(repeat(classes.spaceWithinSingleLine)),\n    cat(repeat(first(\n        erase(classes.spaceWithinSingleLine, ahead(cls(',', '\\r\\n', '\\n', '\\r'))),\n        notCls(',', '\\r\\n', '\\n', '\\r'), ))));\n\nconst cell = first(quoted, nakidNum, nakid);\n\nconst row = trans(input => [input as string[]])(\n    cell,\n    repeat(combine(erase(seq(',')), cell)), );\n\nconst rows = makeProgram(combine(\n    row,\n    repeat(combine(erase(classes.newline), row)),\n    end(), ));\n\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function parse(s: string) {\n    const z = rows(parserInput(s));\n    if (! z.succeeded) {\n        throw new Error(formatErrorMessage(z));\n    }\n    return z.tokens as string[][];\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { QueryResolverFn,\n         PreparedCondition,\n         ResolverContext }      from './types';\nimport { dummyTargetObject,\n         isUnsafeVarNames,\n         getObjectValue,\n         getTrueCaseFieldName, \n         isEqualComplexName }   from './lib/util';\nimport { parse as parseCsv }    from './lib/csv-parser';\nimport { sortRecords }          from './sort';\nimport { applyWhereConditions } from './filters';\n\n\n\nexport interface StaticResolverConfig {\n    noCache?: boolean;\n    noFiltering?: boolean;\n    noSorting?: boolean;\n}\n\n// const defaultStaticResolverConfig: StaticResolverConfig = {\n//     noCache: true,\n//     noFiltering: true,\n//     noSorting: true,\n// };\nconst defaultStaticResolverConfig: StaticResolverConfig = {\n    noCache: false,\n    noFiltering: false,\n    noSorting: false,\n};\n\n\nexport function setDefaultStaticResolverConfig(conf: StaticResolverConfig): void {\n    Object.assign(defaultStaticResolverConfig, conf);\n}\n\n\nfunction jsonRecordsParser(src: string) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const records: any[] = JSON.parse(src);\n    if (! Array.isArray(records)) {\n        throw new Error(`jsonRecordsParser: Records should be array.`);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return records;\n}\n\n\nfunction csvRecordsParser(src: string) {\n    const rawRecords = parseCsv(src.trim());\n    if (! rawRecords.length) {\n        throw new Error(`csvRecordsParser: Header row is needed.`);\n    }\n\n    const header = rawRecords[0];\n\n    for (let c = 0; c < header.length; c++) {\n        if (isUnsafeVarNames(dummyTargetObject, header[c])) {\n            throw new Error(`Unsafe symbol name is appeared: ${header[c]}`);\n        }\n    }\n\n    const records: any[] = [];\n\n    for (let i = 1; i < rawRecords.length; i++) {\n        const cur = rawRecords[i];\n        const rec = {};\n        for (let c = 0; c < header.length; c++) {\n            rec[header[c]] = cur[c];\n        }\n        records.push(rec);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return records;\n}\n\n\nfunction passThroughParser(src: any[]) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return src;\n}\n\n\nfunction filterAndSliceRecords(\n        records: any[], fields: string[], conditions: PreparedCondition[],\n        limit: number | null, offset: number | null, ctx: ResolverContext,\n        config: StaticResolverConfig) {\n\n    if (! records.length) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return records;\n    }\n\n    const removingFields = new Set<string>();\n    const recordFields = new Map<string, string>(Object.keys(records[0]).map(x => [x.toLowerCase(), x]));\n    const requestedFields = new Set<string>(fields.map(x => x.toLowerCase()));\n\n    for (const field of requestedFields.keys()) {\n        if (! recordFields.has(field)) {\n            throw new Error(`Field \"${field}\" is not supplied from resolver \"${ctx.resolverName}\".`);\n        }\n    }\n\n    if (! config.noFiltering) {\n        records = applyWhereConditions(ctx, conditions, records);\n        ctx.resolverCapabilities.filtering = true;\n    }\n\n    if (records.length && ctx.parent) {\n        switch (ctx.parentType) {\n        case 'master':\n            if (ctx.foreignIdField) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-non-null-assertion\n                const parentId = getObjectValue(ctx.parent, ctx.masterIdField!);\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const fName = getTrueCaseFieldName(records[0], ctx.foreignIdField!);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-non-null-assertion\n                records = records.filter(x => x[fName!] === parentId);\n            }\n            break;\n        case 'detail':\n            if (ctx.foreignIdField) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-non-null-assertion\n                const parentId = getObjectValue(ctx.parent, ctx.foreignIdField!);\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const fName = getTrueCaseFieldName(records[0], ctx.masterIdField!);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-non-null-assertion\n                records = records.filter(x => x[fName!] === parentId);\n            }\n            break;\n        }\n    }\n\n    if (config.noFiltering) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return records;\n    }\n\n    if (!config.noSorting && ctx.query && ctx.query.orderBy) {\n        const primaryPathLen = ctx.query.from[0].name.length;\n        if (ctx.graphPath.length === primaryPathLen && isEqualComplexName(ctx.graphPath, ctx.query.from[0].name)) {\n            if (ctx.query.orderBy.every(w => w.name.length === primaryPathLen + 1 &&\n                recordFields.has(w.name[w.name.length - 1].toLowerCase()))) {\n\n                records = sortRecords(ctx.query, records);\n                ctx.resolverCapabilities.sorting = true;\n            }\n        }\n    }\n\n    for (const field of recordFields.keys()) {\n        if (! requestedFields.has(field)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            removingFields.add(recordFields.get(field)!);\n        }\n    }\n    for (const record of records) {\n        for (const field of removingFields) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            delete record[field];\n        }\n    }\n\n    if (ctx.resolverCapabilities.sorting) {\n        if (typeof offset === 'number') {\n            records = records.slice(offset);\n        }\n        if (typeof limit === 'number') {\n            records = records.slice(0, limit);\n        }\n        ctx.resolverCapabilities.limit = true;\n        ctx.resolverCapabilities.offset = true;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return records;\n}\n\n\nfunction staticResolverBuilderGen<T>(parser: (s: T) => any[]):\n        (resolverName: string, fetcher: () => Promise<T>, config: StaticResolverConfig) => QueryResolverFn {\n\n    return (resolverName, fetcher, config) => {\n        return async (fields, conditions, limit, offset, ctx) => {\n            let cache: Map<string, any[]> | null;\n            let cachedRecords: any[] | null = null;\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (ctx.resolverData.cache) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n                cache = ctx.resolverData.cache;\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                if (cache!.has(resolverName)) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    cachedRecords = cache!.get(resolverName)!;\n                }\n            } else {\n                cache = new Map<string, any[]>();\n                if (! config.noCache) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                    ctx.resolverData.cache = cache;\n                }\n            }\n\n            let records: any[] | null = null;\n            if (cachedRecords === null) {\n                const fetched = await fetcher();\n                records = parser(fetched);\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-unsafe-return\n                cache!.set(resolverName, records.map(x => ({...x})));\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                records = cachedRecords.map(x => ({...x}));\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return filterAndSliceRecords(records, fields, conditions, limit, offset, ctx, config);\n        };\n    }\n}\n\n\nexport const staticJsonResolverBuilder:\n        (resolverName: string, fetcher: () => Promise<string>, config?: StaticResolverConfig) => QueryResolverFn =\n    (resolverName, fetcher, config) => {\n        return staticResolverBuilderGen(jsonRecordsParser)(resolverName, fetcher, config ?? defaultStaticResolverConfig);\n    };\n\n\nexport const staticCsvResolverBuilder:\n        (resolverName: string, fetcher: () => Promise<string>, config?: StaticResolverConfig) => QueryResolverFn =\n    (resolverName, fetcher, config) => {\n        return staticResolverBuilderGen(csvRecordsParser)(resolverName, fetcher, config ?? defaultStaticResolverConfig);\n    };\n\n\nexport const passThroughResolverBuilder:\n        (resolverName: string, fetcher: () => Promise<any[]>, config?: StaticResolverConfig) => QueryResolverFn =\n    (resolverName, fetcher, config) => {\n        return staticResolverBuilderGen(passThroughParser)(resolverName, fetcher, config ?? defaultStaticResolverConfig);\n    };\n"],"sourceRoot":""}