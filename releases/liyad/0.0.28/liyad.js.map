{"version":3,"sources":["webpack://liyad/webpack/universalModuleDefinition","webpack://liyad/webpack/bootstrap","webpack://liyad/./src/index.ts","webpack://liyad/./src/lib/data.ts","webpack://liyad/./src/s-exp/ast.ts","webpack://liyad/./src/s-exp/browser.ts","webpack://liyad/./src/s-exp/compile.ops/helpers.ts","webpack://liyad/./src/s-exp/compile.ops/index.ts","webpack://liyad/./src/s-exp/compile.ts","webpack://liyad/./src/s-exp/errors.ts","webpack://liyad/./src/s-exp/evaluate.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.fn.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.macro.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.operator.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.symbol.ts","webpack://liyad/./src/s-exp/operators/arithmetic/index.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.fn.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.macro.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.operator.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.symbol.ts","webpack://liyad/./src/s-exp/operators/concurrent/index.ts","webpack://liyad/./src/s-exp/operators/core/core.fn.ts","webpack://liyad/./src/s-exp/operators/core/core.macro.ts","webpack://liyad/./src/s-exp/operators/core/core.operator.ts","webpack://liyad/./src/s-exp/operators/core/core.symbol.ts","webpack://liyad/./src/s-exp/operators/core/index.ts","webpack://liyad/./src/s-exp/operators/jsx/index.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.fn.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.macro.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.operator.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.symbol.ts","webpack://liyad/./src/s-exp/operators/sequence/index.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.fn.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.macro.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.operator.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.symbol.ts","webpack://liyad/./src/s-exp/parser.ts","webpack://liyad/./src/s-exp/s-expression.ts","webpack://liyad/./src/s-exp/types.ts"],"names":[],"mappings":"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","file":"liyad.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"liyad\"] = factory();\n\telse\n\t\troot[\"liyad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nexport * from './s-exp/s-expression';\r\nexport * from './s-exp/browser';\r\n\r\n\r\nexport { default as installCore }         from './s-exp/operators/core';\r\nexport { default as installArithmetic }   from './s-exp/operators/arithmetic';\r\nexport { default as installSequence }     from './s-exp/operators/sequence';\r\nexport { default as installJsx }          from './s-exp/operators/jsx';\r\nexport { default as installConcurrent }   from './s-exp/operators/concurrent';\r\n\r\n\r\nimport { default as coreOperators }       from './s-exp/operators/core/core.operator';\r\nimport { default as coreMacros }          from './s-exp/operators/core/core.macro';\r\nimport { default as coreSymbols }         from './s-exp/operators/core/core.symbol';\r\n\r\nimport { default as arithmeticOperators } from './s-exp/operators/arithmetic/arithmetic.operator';\r\nimport { default as arithmeticMacros }    from './s-exp/operators/arithmetic/arithmetic.macro';\r\nimport { default as arithmeticSymbols }   from './s-exp/operators/arithmetic/arithmetic.symbol';\r\n\r\nimport { default as sequenceOperators }   from './s-exp/operators/sequence/sequence.operator';\r\nimport { default as sequenceMacros }      from './s-exp/operators/sequence/sequence.macro';\r\nimport { default as sequenceSymbols }     from './s-exp/operators/sequence/sequence.symbol';\r\n\r\nimport { default as jsxOperators }        from './s-exp/operators/jsx/jsx.operator';\r\nimport { default as jsxMacros }           from './s-exp/operators/jsx/jsx.macro';\r\nimport { default as jsxSymbols }          from './s-exp/operators/jsx/jsx.symbol';\r\n\r\nimport { default as concurrentOperators } from './s-exp/operators/concurrent/concurrent.operator';\r\nimport { default as concurrentMacros }    from './s-exp/operators/concurrent/concurrent.macro';\r\nimport { default as concurrentSymbols }   from './s-exp/operators/concurrent/concurrent.symbol';\r\n\r\n\r\nexport const builtinOperators = {\r\n    core: coreOperators,\r\n    arithmetic: arithmeticOperators,\r\n    sequence: sequenceOperators,\r\n    jsx: jsxOperators,\r\n    concurrent: concurrentOperators,\r\n};\r\n\r\nexport const builtinMacros = {\r\n    core: coreMacros,\r\n    arithmetic: arithmeticMacros,\r\n    sequence: sequenceMacros,\r\n    jsx: jsxMacros,\r\n    concurrent: concurrentMacros,\r\n};\r\n\r\nexport const builtinSymbols = {\r\n    core: coreSymbols,\r\n    arithmetic: arithmeticSymbols,\r\n    sequence: sequenceSymbols,\r\n    jsx: jsxSymbols,\r\n    concurrent: concurrentSymbols,\r\n};\r\n","// Copyright (c) 2017, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport class Query<T> {\r\n    public constructor(public data: T[]) {\r\n    }\r\n\r\n    public orderBy(condition: Array<string | string[/* colName: string, ('asc' | 'desc') */]> | ((a: T, b: T) => number)): Query<T> {\r\n        let fn: (a: T, b: T) => number;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (typeof c === 'string') {\r\n                        if (x[c] > y[c]) return 1;\r\n                        if (x[c] < y[c]) return -1;\r\n                    } else {\r\n                        const desc = c[1] === 'desc' ? -1 : 1;\r\n                        if (x[c[0]] > y[c[0]]) return 1 * desc;\r\n                        if (x[c[0]] < y[c[0]]) return -1 * desc;\r\n                    }\r\n                }\r\n                return 0;\r\n            };\r\n        } else {\r\n            fn = condition;\r\n        }\r\n        return new Query(this.data.slice(0).sort(fn));\r\n    }\r\n\r\n    public groupBy(condition: string[/* colName: string */] | ((a: T, b: T, index: number, array: T[]) => boolean)): Query<T[]> {\r\n        let fn: (a: T, b: T, index: number, array: T[]) => boolean;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (x[c] !== y[c]) return false;\r\n                }\r\n                return true;\r\n            };\r\n        } else{\r\n            fn = condition;\r\n        }\r\n        const r: T[][] = [];\r\n        let start = 0;\r\n        let i = 1;\r\n        for (; i < this.data.length; i++) {\r\n            if (! fn(this.data[start], this.data[i], i, this.data)) {\r\n                r.push(this.data.slice(start, i));\r\n                start = i;\r\n            }\r\n        }\r\n        r.push(this.data.slice(start, i));\r\n        return new Query(r);\r\n    }\r\n\r\n    public groupEvery(n: number | {single: number, first?: number, intermediate: number, last?: number}): Query<T[]> {\r\n        if (typeof n === 'number') {\r\n            return this.groupBy((a, b, index, array) => {\r\n                if ((index % n) === 0) return false;\r\n                return true;\r\n            });\r\n        } else {\r\n            const w = Object.assign({first: n.intermediate, last: n.intermediate}, n);\r\n            const r = this.groupBy((a, b, index, array) => {\r\n                if (w.single >= array.length) {\r\n                    if ((index % w.single) === 0) return false;\r\n                    return true;\r\n                } else if (index <= w.first) {\r\n                    if ((index % w.first) === 0) return false;\r\n                    return true;\r\n                } else {\r\n                    if (((index - w.first) % w.intermediate) === 0) return false;\r\n                    return true;\r\n                }\r\n            });\r\n            if (r.data.length === 1) {\r\n                if (w.single < r.data[0].length) {\r\n                    r.data.push([]);\r\n                }\r\n            } else {\r\n                if (w.first < r.data[0].length) {\r\n                    // case of w.first === 0\r\n                    r.data.unshift([]);\r\n                }\r\n            }\r\n            if (r.data.length > 1) {\r\n                if (r.data[r.data.length - 1].length > w.last) {\r\n                    r.data.push([]);\r\n                }\r\n            }\r\n            return r;\r\n        }\r\n    }\r\n\r\n    public where(fn: (value: T, index: number, array: T[]) => boolean): Query<T> {\r\n        return new Query(this.data.filter(fn));\r\n    }\r\n\r\n    public select(): T[];\r\n    public select<R>(fn: (value: T, index: number, array: T[]) => R): R[];\r\n    public select<R>(fn?: (value: T, index: number, array: T[]) => R): Array<R | T> {\r\n        return fn ? this.data.map(fn) : this.data as any;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function query<T>(data: T[]): Query<T> {\r\n    return new Query<T>(data);\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol }     from './types';\r\n\r\n\r\n\r\nexport function quote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.quote}, x];\r\n}\r\n\r\n\r\nexport function isQuoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.quote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function backquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.backquote}, x];\r\n}\r\n\r\n\r\nexport function isBackquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.backquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function wrapByUnquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.unquote}, x];\r\n}\r\n\r\n\r\nexport function isUnquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.unquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function spread(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.spread}, x];\r\n}\r\n\r\n\r\nexport function splice(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.splice}, x];\r\n}\r\n\r\n\r\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\r\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\r\n        if (name !== void 0) {\r\n            return x.symbol === name ? x : null;\r\n        } else {\r\n            return x;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SExpressionTemplateFn,\r\n         SExpressionAsyncTemplateFn } from './types';\r\n\r\n\r\n\r\nexport function runScriptTags(lisp: SExpressionTemplateFn | SExpressionAsyncTemplateFn, globals?: object, contentType = 'text/lisp') {\r\n    const codes = document.querySelectorAll(`script[type=\"${contentType}\"]`);\r\n    const cs = [];\r\n    for (let i = 0; i < codes.length; i++) {\r\n        cs.push(codes[i].innerHTML);\r\n    }\r\n    lisp = lisp.appendGlobals(globals || {});\r\n    return lisp(cs.join('\\n'));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken }            from '../types';\r\nimport { isSymbol }           from '../ast';\r\nimport { resolveSplice,\r\n         resolveMacro,\r\n         resolveValueSymbol,\r\n         getScope }           from '../evaluate';\r\nimport { setEvaluationCount } from '../errors';\r\n\r\n\r\n\r\nexport function applyMacros(state: SxParserState, tok: SxToken) {\r\n    let r: SxToken = tok;\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                break;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym);\r\n                if (m) {\r\n                    r = m(r);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function stripQuote(state: SxParserState, tok: SxToken) {\r\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\r\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\r\n    }\r\n    return (tok as any)[1];\r\n}\r\n\r\n\r\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\r\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\r\n        return (tok as any)[1];\r\n    } else {\r\n        return tok;\r\n    }\r\n}\r\n\r\n\r\nexport function getScope_stateApplied(state: SxParserState) {\r\n    return (function() { return getScope(state); });\r\n}\r\n\r\n\r\nexport function resolveValueSymbol_dynamic(state: SxParserState, name: string) {\r\n    return (function(){ return resolveValueSymbol(state, {symbol: name}); });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         CompilerContext }            from '../types';\r\nimport { isSymbol }                   from '../ast';\r\nimport { checkParamsLength }          from '../errors';\r\nimport { stripQuote,\r\n         stripQuoteOrPass,\r\n         getScope_stateApplied,\r\n         resolveValueSymbol_dynamic } from './helpers';\r\n\r\n\r\n\r\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\r\n    const {\r\n        _$_vars,\r\n        ops,\r\n        makeScope,\r\n        compileToken,\r\n    } = ctx;\r\n\r\n\r\n    ops.set('$quote', function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$self', function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        compFnBody += `((_$_vars[0])(${\r\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if condition 't-expr 'f-expr)\r\n        //  -> (if condition is true ) S expr  : t-expr\r\n        //  -> (if condition is false) S expr  : f-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if', args, 2, 3);\r\n        compFnBody += `(${compileToken(r, 1)}?(${\r\n            compileToken([stripQuote(state, r[2])], 0)}):(${\r\n            compileToken([stripQuote(state, r[3])], 0)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if-null condition 'null-expr)\r\n        //  -> (if condition is not null ) S expr  : condition\r\n        //  -> (if condition is null)      S expr  : null-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\r\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\r\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        //  -> (if (eval condI) is true ) S expr  : exprI\r\n        //  -> (if no matched)            S expr  : null\r\n        let compFnBody = '';\r\n        {\r\n            checkParamsLength('compileToken:$__cond', args, 1);\r\n            compFnBody += `(`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\r\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\r\n            }\r\n            compFnBody += `null`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `)`;\r\n            }\r\n            compFnBody += `)`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__while', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n        //  -> (if n > 0) S expr  : exprN\r\n        //  -> (else)     S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__repeat', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n        //  -> (if list.length > 0) S expr  : exprN\r\n        //  -> (else)               S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__for', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n        //  -> (else)               S expr  : exprN\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__scope', args, 2);\r\n        // r[1]: isBlockLocal\r\n        // r[2]: returnMultiple\r\n        if (! Array.isArray(r[3])) {\r\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\r\n        }\r\n        makeScope(() => {\r\n            for (const x of stripQuote(state, r[3]) as any[]) {\r\n                let name = '';\r\n                if (Array.isArray(x)) {\r\n                    if (x.length < 1) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\r\n                    }\r\n                    if (! isSymbol(x[0])) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\r\n                    }\r\n                    name = x[0].symbol;\r\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\r\n                } else {\r\n                    if (! isSymbol(x)) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\r\n                    }\r\n                    name = x.symbol;\r\n                }\r\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n                ctx.varNames.set(x.symbol, 'v' + ctx.varNamesCount++);\r\n            }\r\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\r\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__try 'expr 'catch-expr)\r\n        //  ->                               S expr  : expr\r\n        //  -> (if error is raised in expr)  S expr  : catch-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__try', args, 1, 2);\r\n        compFnBody += `((()=>{try{${\r\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\r\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\r\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\r\n        makeScope(() => {\r\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\r\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\r\n            compFnBody += `${\r\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$raise', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($raise 'expr)\r\n        //  -> S expr  : -\r\n        let compFnBody = '';\r\n        compFnBody += `((()=>{throw ${\r\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($boolean any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\r\n        compFnBody += `((x0=${compileToken(args, 0)\r\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__get', args, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__let 'nameStrOrSymbol expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__let', args, 1, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        if (! ctx.varNames.has(name)) {\r\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n        }\r\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__set', args, 2, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ?\r\n            quoted.symbol :\r\n            (typeof quoted === 'string' ?\r\n                quoted :\r\n                (Array.isArray(quoted) ?\r\n                    (isSymbol(quoted[0]) ?\r\n                        quoted[0].symbol :\r\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\r\n                    ) :\r\n                    null\r\n                )\r\n            );\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$not', args, 1, 1);\r\n        compFnBody += `(!${compileToken(args, 0)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__and 'expr1 ... 'exprN)\r\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n        //  -> (else)                                                     S expr  : expr-i (false left most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__and', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__or 'expr1 ... 'exprN)\r\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n        //  -> (else)                                                  S expr  : expr-i (false right most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__or', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($eq arg1 arg2)\r\n        //  -> (if arg1 === arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:===', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not-eq arg1 arg2)\r\n        //  -> (if arg1 !== arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (== a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (!= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (< a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (> a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($concat listOrString1 ... listOrStringN)\r\n        //  -> S expr  : listOrString\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}].concat(${\r\n            args.map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (+ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (- number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:-', args, 1);\r\n        compFnBody += `(${r.length > 2 ?\r\n            args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\r\n            `-(${String(compileToken(r, 1))})`})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (* number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:*', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (** number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:**', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (/ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:/', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (% number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:%', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<< number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-not number)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\r\n        compFnBody += `(~(${compileToken(r, 1)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-and numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-or numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-xor numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\r\n        return compFnBody;\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         SxFuncInfo,\r\n         CompilerOperator,\r\n         CompilerContext  }           from './types';\r\nimport { isSymbol }                   from './ast';\r\nimport { getCapturedScopes,\r\n         optimizeTailCall }           from './evaluate';\r\nimport { applyMacros,\r\n         stripQuoteOrPass,\r\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\r\nimport { registerOperators }          from './compile.ops';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\r\n\r\n    function makeScope(scoped: () => void) {\r\n        const varNamesCopy = new Map<string, string>();\r\n        for (const x of ctx.varNames.entries()) {\r\n            varNamesCopy.set(x[0], x[1]);\r\n        }\r\n        scoped();\r\n        ctx.varNames = varNamesCopy;\r\n    }\r\n\r\n\r\n    function compileValue(b: any) {\r\n        let compFnBody = '';\r\n        if (b === null) {\r\n            compFnBody += '(null)';\r\n        } else if (b === void 0) {\r\n            compFnBody += '(void 0)';\r\n        } else switch (typeof b) {\r\n        case 'boolean': case 'number':\r\n            compFnBody += `(${String(b)})`;\r\n            break;\r\n        case 'object':\r\n            if (isSymbol(b)) {\r\n                const sym = b as SxSymbol;\r\n                if (ctx.varNames.has(sym.symbol)) {\r\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\r\n                } else {\r\n                    _$_vars[ctx.varsCount] = sym.symbol;\r\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n                }\r\n                break;\r\n            } else {}\r\n            // FALL_THRU\r\n        default:\r\n            _$_vars[ctx.varsCount] = b;\r\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n            break;\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    function compileToken(body: any[], i: number) {\r\n        let compFnBody = '';\r\n        const b = body[i];\r\n        if (Array.isArray(b)) {\r\n            if (0 < b.length) {\r\n                const r: SxToken = applyMacros(state, b);\r\n                if (Array.isArray(r)) {\r\n                    if (0 < r.length) {\r\n                        if (isSymbol(r[0])) {\r\n                            const sym = r[0] as SxSymbol;\r\n                            const args = r.slice(1);\r\n                            if (ops.has(sym.symbol)) {\r\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\r\n                            } else {\r\n                                if (sym.symbol === '$spread') {\r\n                                    compFnBody += `...(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else if (state.funcMap.has(sym.symbol)) {\r\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                } else if (ctx.varNames.has(sym.symbol)) {\r\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else {\r\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            switch (typeof r[0]) {\r\n                            case 'function':\r\n                                _$_vars[ctx.varsCount] = r[0];\r\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                break;\r\n                            default:\r\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        compFnBody += '([])';\r\n                    }\r\n                } else {\r\n                    compFnBody += compileValue(b);\r\n                }\r\n            } else {\r\n                compFnBody += '([])';\r\n            }\r\n        } else {\r\n            compFnBody += compileValue(b);\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    const ctx: CompilerContext = {\r\n        _$_vars,\r\n        varsCount: 1,\r\n        varNames: new Map<string, string>(),\r\n        varNamesCount: 0,\r\n        varDefs: 'var x0;',\r\n        ops: new Map<string, CompilerOperator>(),\r\n        makeScope,\r\n        compileToken,\r\n    };\r\n\r\n    registerOperators(state, ctx);\r\n    const ops = ctx.ops;\r\n\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n    if (capturedScopes) {\r\n        for (const x in capturedScopes) {\r\n            if (Object.hasOwnProperty.call(capturedScopes, x)) {\r\n                _$_vars[ctx.varsCount++] = x;\r\n                _$_vars[ctx.varsCount] = capturedScopes[x];\r\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\r\n                ctx.varsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const compFormalArgs = `${formalArgs.map((x, i) => {\r\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\r\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\r\n    }).join(',')}`;\r\n\r\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\r\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\r\n}\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\r\n    // tslint:disable-next-line:no-eval\r\n    _$_vars[0] = eval(code);\r\n    return _$_vars[0];\r\n}\r\n\r\n\r\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\r\n    // tslint:disable-next-line:variable-name\r\n    const _$_vars: any[] = [];\r\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         MaxEvaluationCountError } from './types';\r\n\r\n\r\n\r\nexport function setEvaluationCount(state: SxParserState) {\r\n    state.evalCount++;\r\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\r\n        throw new MaxEvaluationCountError();\r\n    }\r\n}\r\n\r\n\r\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\r\n    if (args.length < min) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\r\n    }\r\n    if (max && max < args.length) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\r\n    }\r\n    return true;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedPair,\r\n         SxDottedFragment,\r\n         SxToken,\r\n         SxScope,\r\n         CapturedScopes }     from './types';\r\nimport { isSymbol }           from './ast';\r\nimport { setEvaluationCount } from './errors';\r\n\r\n\r\n\r\nexport function toNumber(x: any) {\r\n    switch (typeof x) {\r\n    case 'object': case 'symbol': case 'function':\r\n        return NaN;\r\n    default:\r\n        return Number(x);\r\n    }\r\n}\r\n\r\n\r\nexport function resolveUnquote(state: SxParserState, r: SxToken[]) {\r\n    for (let i = 0; i < r.length; i++) {\r\n        const symUnquote = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.unquote);\r\n        if (symUnquote) {\r\n            r = r.slice(0, i).concat([evaluate(state, (r[i] as SxToken[])[1])], r.slice(i + 1));\r\n        }\r\n        if (Array.isArray(r[i])) {\r\n            r = r.slice(0);\r\n            r[i] = resolveUnquote(state, r[i] as SxToken[]);\r\n        }\r\n    }\r\n    return resolveSplice(state, r);\r\n}\r\n\r\n\r\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\r\n    if (state.config.enableSplice) {\r\n        for (let i = r.length - 1; i >= 0; i--) {\r\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\r\n            if (symSplice) {\r\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function resolveMacro(state: SxParserState, x: SxSymbol): ((list: SxToken[]) => SxToken) | false {\r\n    const macroInfo = state.macroMap.get(x.symbol);\r\n    if (macroInfo) {\r\n        return macroInfo.fn(state, x.symbol);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\r\n    if (typeof x === 'function') {\r\n        return x;\r\n    }\r\n    const funcInfo = state.funcMap.get(x.symbol);\r\n    if (funcInfo) {\r\n        return funcInfo.fn(state, x.symbol);\r\n    } else {\r\n        const v = resolveValueSymbol(state, x);\r\n        if (typeof v === 'function') {\r\n            return v;\r\n        }\r\n        if (state.config.funcSymbolResolverFallback) {\r\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\r\n            return localScope.scope;\r\n        }\r\n        if (localScope.capturedScopes &&\r\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\r\n            return localScope.capturedScopes[x.symbol];\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    const globalScope = getGlobalScope(state);\r\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\r\n        return globalScope.scope;\r\n    }\r\n    return nullIfNotDefined ? null : getScope(state).scope;\r\n}\r\n\r\n\r\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\r\n    const scope = resolveValueSymbolScope(state, x, true);\r\n    if (scope) {\r\n        return scope[x.symbol];\r\n    }\r\n    const symInfo = state.symbolMap.get(x.symbol);\r\n    if (symInfo) {\r\n        return symInfo.fn(state, x.symbol);\r\n    } else {\r\n        if (state.config.valueSymbolResolverFallback) {\r\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\r\n    const capturedScopes: CapturedScopes = {};\r\n    for (const n of names) {\r\n        const scope = resolveValueSymbolScope(state, n, true);\r\n        if (scope === null) {\r\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\r\n        }\r\n        capturedScopes[n.symbol] = scope;\r\n    }\r\n    return capturedScopes;\r\n}\r\n\r\n\r\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\r\n    const a: CapturedScopes[] = [];\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope.capturedScopes) {\r\n            a.unshift(localScope.capturedScopes);\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\r\n}\r\n\r\n\r\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\r\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\r\n}\r\n\r\n\r\nexport function uninstallScope(state: SxParserState): any {\r\n    if (state.scopes.length < 2) {\r\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\r\n    }\r\n    return state.scopes.pop();\r\n}\r\n\r\n\r\nexport function getScope(state: SxParserState) {\r\n    return state.scopes[state.scopes.length - 1];\r\n}\r\n\r\n\r\nexport function getGlobalScope(state: SxParserState) {\r\n    return state.scopes[0];\r\n}\r\n\r\n\r\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //    formalArgs: 'sym1 ... 'symN\r\n    //        fnBody: 'expr1 ... 'exprN\r\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\r\n        const front = fnBody.slice(0, fnBody.length - 1);\r\n        const tail = fnBody[fnBody.length - 1];\r\n        if (tail && (typeof tail[0] === 'object') && tail[0].symbol === state.config.reservedNames.if) {\r\n            // S expression: ($if cond t-expr f-expr)\r\n            if (Array.isArray(tail[3]) && (typeof tail[3][0] === 'object') && tail[3][0].symbol === state.config.reservedNames.self) {\r\n                // S expression (recursive):\r\n                //     (                                 ;; fnBody\r\n                //         expr1 ... exprN-1             ;; front\r\n                //         ($if cond                     ;; tail[0] [1]\r\n                //             t-expr                    ;;     [2]\r\n                //             ($self                    ;;     [3]\r\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\r\n                //     )\r\n                //\r\n                //  -> S exp (tail call optimization):\r\n                //     (                                                                  ;; fnBody\r\n                //         ($until cond                                                   ;; tail[1]\r\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\r\n                //                 expr1 ... exprN-1                                      ;; front\r\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\r\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\r\n                //             )                                                          ;;\r\n                //         )                                                              ;;\r\n                //         expr1 ... exprN-1                                              ;; front\r\n                //         t-expr                                                         ;; tail[2]\r\n                //     )\r\n\r\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\r\n\r\n                return [\r\n                    [{symbol: state.config.reservedNames.until}, tail[1],\r\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\r\n                            ...front,\r\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\r\n                            ...(tempVarsSyms.map((x, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\r\n                        ],\r\n                    ],\r\n                    ...front,\r\n                    tail[2],\r\n                ];\r\n            }\r\n        }\r\n    }\r\n    return fnBody;\r\n}\r\n\r\n\r\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\r\n    setEvaluationCount(state);\r\n\r\n    if (x === null || x === void 0) {\r\n        return x;\r\n    }\r\n    let r: SxToken = x;\r\n\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                return r;\r\n            }\r\n\r\n            r = resolveSplice(state, r);\r\n\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym);\r\n\r\n                if (m) {\r\n                    r = m(r);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        setEvaluationCount(state);\r\n    }\r\n\r\n    if (Array.isArray(r)) {\r\n        r = r.slice(0);\r\n        if (0 < r.length) {\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                if (sym.symbol === state.config.reservedNames.quote) {\r\n                    return r.slice(1, 2)[0];\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.backquote) {\r\n                    r = r.slice(1, 2)[0];\r\n                    if (Array.isArray(r)) {\r\n                        r = resolveUnquote(state, r);\r\n                    }\r\n                    return r;\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.eval) {\r\n                    return evaluate(state, evaluate(state, r.slice(1, 2)[0]));\r\n                }\r\n            }\r\n\r\n            const sprs = [];\r\n            for (let i = 1; i < r.length; i++) {\r\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\r\n                if (symSpr) {\r\n                    sprs.push(i);\r\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\r\n                    r[i] = Array.isArray(a) ? a : [a];\r\n                } else {\r\n                    r[i] = evaluate(state, r[i]);\r\n                }\r\n            }\r\n            for (const i of sprs.reverse()) {\r\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\r\n            }\r\n\r\n            let fn: any;\r\n            if (typeof r[0] === 'function') {\r\n                fn = r[0];\r\n            } else if (sym) {\r\n                fn = resolveFunctionSymbol(state, sym);\r\n            } else {\r\n                fn = evaluate(state, r[0]);\r\n            }\r\n\r\n            if (typeof fn === 'function') {\r\n                r = (fn as any)(...(r.slice(1)));\r\n            } else {\r\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\r\n            }\r\n        }\r\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\r\n        r = (r as SxExternalValue).value;\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\r\n        r = resolveValueSymbol(state, r as SxSymbol);\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\r\n        const car = evaluate(state, (r as SxDottedPair).car);\r\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\r\n        if (Array.isArray(cdr)) {\r\n            const a = (cdr as any[]).slice(0);\r\n            a.unshift(car);\r\n            r = a;\r\n        } else {\r\n            r = { car, cdr };\r\n        }\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\r\n        r = [\r\n            evaluate(state, (r as SxDottedFragment).dotted),\r\n        ];\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\r\n        r = [];\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\n\r\n\r\n\r\nexport const $bitLShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<< number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitLShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car << cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car >>> (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitLShift = $bitLShift(null as any, null as any);\r\n\r\n\r\nexport const $bitSRShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitSRShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >> cdr : (car & 0x080000000) ? -1 : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitSRShift = $bitSRShift(null as any, null as any);\r\n\r\n\r\nexport const $bitURShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitURShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >>> cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitURShift = $bitURShift(null as any, null as any);\r\n\r\n\r\nexport const $bitNot = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-not number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitNot', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    return ~toNumber(car);\r\n};\r\nexport const $$bitNot = $bitNot(null as any, null as any);\r\n\r\n\r\nexport const $bitAnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-and numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitAnd', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) & toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitAnd = $bitAnd(null as any, null as any);\r\n\r\n\r\nexport const $bitOr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-or numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitOr', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) | toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitOr = $bitOr(null as any, null as any);\r\n\r\n\r\nexport const $bitXor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-xor numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitXor', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ^ toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitXor = $bitXor(null as any, null as any);\r\n\r\n\r\nexport const $add = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (+ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$add', args, 1);\r\n\r\n    return args.reduce((prev, curr) => toNumber(prev) + toNumber(curr), 0);\r\n};\r\nexport const $$add = $add(null as any, null as any);\r\n\r\n\r\nexport const $sub = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (- number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sub', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const last = args.slice(1);\r\n    if (last.length === 0) {\r\n        // negate\r\n        return -toNumber(car);\r\n    } else {\r\n        // subtract\r\n        return args.slice(1).reduce((prev, curr) => toNumber(prev) - toNumber(curr), toNumber(car));\r\n    }\r\n};\r\nexport const $$sub = $sub(null as any, null as any);\r\n\r\n\r\nexport const $mul = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (* number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mul', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) * toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mul = $mul(null as any, null as any);\r\n\r\n\r\nexport const $sup = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (** number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sup', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ** toNumber(curr), toNumber(car));\r\n};\r\nexport const $$sup = $sup(null as any, null as any);\r\n\r\n\r\nexport const $div = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (/ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$div', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) / toNumber(curr), toNumber(car));\r\n};\r\nexport const $$div = $div(null as any, null as any);\r\n\r\n\r\nexport const $mod = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (% number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mod', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) % toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mod = $mod(null as any, null as any);\r\n\r\n\r\nexport const $max = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($max val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.max(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$max = $max(null as any, null as any);\r\n\r\n\r\nexport const $min = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($min val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.min(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$min = $min(null as any, null as any);\r\n\r\n\r\nexport const $avg = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($avg val1 ... valN)\r\n    //  -> S expr  : value\r\n    const a = args.map(x => toNumber(x));\r\n    return a.length > 0 ? a.reduce((prev, curr) => prev + curr, 0) / a.length : NaN;\r\n};\r\nexport const $$avg = $avg(null as any, null as any);\r\n\r\n\r\nexport const $floor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($floor number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$floor', args, 1, 1);\r\n\r\n    return Math.floor(toNumber($$first(...args)));\r\n};\r\nexport const $$floor = $floor(null as any, null as any);\r\n\r\n\r\nexport const $ceil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($ceil number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$ceil', args, 1, 1);\r\n\r\n    return Math.ceil(toNumber($$first(...args)));\r\n};\r\nexport const $$ceil = $ceil(null as any, null as any);\r\n\r\n\r\nexport const $round = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($round number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$round', args, 1, 1);\r\n\r\n    return Math.round(toNumber($$first(...args)));\r\n};\r\nexport const $$round = $round(null as any, null as any);\r\n\r\n\r\nexport const $abs = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($abs number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$abs', args, 1, 1);\r\n\r\n    return Math.abs(toNumber($$first(...args)));\r\n};\r\nexport const $$abs = $abs(null as any, null as any);\r\n\r\n\r\nexport const $sign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sign number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sign', args, 1, 1);\r\n\r\n    return Math.sign(toNumber($$first(...args)));\r\n};\r\nexport const $$sign = $sign(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo } from '../../types';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './arithmetic.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '<<',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '$bit-l-shift',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '>>',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '$bit-sr-shift',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '>>>',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-ur-shift',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-not',\r\n    fn: ops.$bitNot,\r\n}, {\r\n    name: '$bit-and',\r\n    fn: ops.$bitAnd,\r\n}, {\r\n    name: '$bit-or',\r\n    fn: ops.$bitOr,\r\n}, {\r\n    name: '$bit-xor',\r\n    fn: ops.$bitXor,\r\n}, {\r\n    name: '+',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$add',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$sum',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '-',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$sub',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$neg',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '*',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '$mul',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '**',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '$sup',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '/',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '$div',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '%',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$mod',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$max',\r\n    fn: ops.$max,\r\n}, {\r\n    name: '$min',\r\n    fn: ops.$min,\r\n}, {\r\n    name: '$avg',\r\n    fn: ops.$avg,\r\n}, {\r\n    name: '$floor',\r\n    fn: ops.$floor,\r\n}, {\r\n    name: '$ceil',\r\n    fn: ops.$ceil,\r\n}, {\r\n    name: '$round',\r\n    fn: ops.$round,\r\n}, {\r\n    name: '$abs',\r\n    fn: ops.$abs,\r\n}, {\r\n    name: '$sign',\r\n    fn: ops.$sign,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './arithmetic.operator';\r\nimport macros             from './arithmetic.macro';\r\nimport symbols            from './arithmetic.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $__let,\r\n         $__set  }           from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__letAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let-async 'nameStrOrSymbol promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__letAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__let(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__letAsync = $__letAsync(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__setAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set-async 'nameOrListOfNameOrIndex promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__setAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__set(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__setAsync = $__setAsync(null as any, null as any);\r\n\r\n\r\nexport const $then = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($then promise (lambda (val) ...) (lambda (err) ...))\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$then', args, 2, 3);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    if (typeof args[2] === 'function') {\r\n        promise = promise.then(args[1], args[2]);\r\n    } else {\r\n        if (typeof args[1] !== 'function') {\r\n            throw new Error(`[SX] $then: Invalid argument(s): args[1] is not function.`);\r\n        }\r\n        promise = promise.then(args[1]);\r\n    }\r\n    return promise;\r\n};\r\nexport const $$then = $then(null as any, null as any);\r\n\r\n\r\nexport const $resolveAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-all promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n    return Promise.all(promises);\r\n};\r\nexport const $$resolveAll = $resolveAll(null as any, null as any);\r\n\r\n\r\nexport const $resolveAny = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-any promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/39940152/get-first-fulfilled-promise\r\n    // firstOf: This will return the value of the first fulfilled promise,\r\n    //          or if all reject, an array of rejection reasons.\r\n    const invert  = (p: Promise<any>) => new Promise((res, rej) => p.then(rej, res));\r\n    const firstOf = (ps: Array<Promise<any>>) => invert(Promise.all(ps.map(invert)));\r\n\r\n    return firstOf(promises);\r\n};\r\nexport const $$resolveAny = $resolveAny(null as any, null as any);\r\n\r\n\r\nexport const $resolvePipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-pipe promise<val1> (lambda (val1) ... promiseOrVal2) (lambda (val2) ... promiseOrVal3) ... (lambda (valN-1) ... promiseOrValN))\r\n    //  -> S expr  : promise\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolvePipe', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n    let p = promise;\r\n    for (const l of lambdas) {\r\n        p = p.then(l);\r\n    }\r\n    return p;\r\n};\r\nexport const $$resolvePipe = $resolvePipe(null as any, null as any);\r\n\r\n\r\nexport const $resolveFork = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-fork promise<val1> (lambda (val1) ... promiseOrVal2a) ... (lambda (val1) ... promiseOrVal2z))\r\n    //  -> S expr  : (promise<val2a> ... promise<val2z>)\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolveFork', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n\r\n    const resolvers = new Array(lambdas.length);\r\n    const rejectors = new Array(lambdas.length);\r\n\r\n    const pa: Array<Promise<any>> = [];\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        pa.push(new Promise<any>((resolve: any, reject: any) => {\r\n            resolvers[i] = (v: any) => {\r\n                let lp: Promise<any> = lambdas[i](v);\r\n                if (typeof lp !== 'object' || typeof lp.then !== 'function') {\r\n                    lp = Promise.resolve(lp);\r\n                }\r\n\r\n                lp\r\n                .then(x => resolve(x))\r\n                .catch(e => reject(e));\r\n            };\r\n            rejectors[i] = reject;\r\n        }));\r\n    }\r\n\r\n    promise.then(\r\n        v => resolvers.forEach(f => f(v)),\r\n        e => rejectors.forEach(f => f(e))\r\n    );\r\n\r\n    return pa;\r\n};\r\nexport const $$resolveFork = $resolveFork(null as any, null as any);\r\n\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$let-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let-async nameStrOrSymbol promise)\r\n        //  -> S expr  : ($__let-async 'nameStrOrSymbol promise)\r\n        checkParamsLength('$let-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__let-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set-async nameOrListOfNameOrIndex promise)\r\n        //  -> S expr  : ($__set-async 'nameOrListOfNameOrIndex promise)\r\n        checkParamsLength('$set-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__set-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './concurrent.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$__let-async',\r\n    fn: ops.$__letAsync,\r\n}, {\r\n    name: '$__set-async',\r\n    fn: ops.$__setAsync,\r\n}, {\r\n    name: '$then',\r\n    fn: ops.$then,\r\n}, {\r\n    name: '$resolve-all',\r\n    fn: ops.$resolveAll,\r\n}, {\r\n    name: '$resolve-any',\r\n    fn: ops.$resolveAny,\r\n}, {\r\n    name: '$resolve-pipe',\r\n    fn: ops.$resolvePipe,\r\n}, {\r\n    name: '$resolve-fork',\r\n    fn: ops.$resolveFork,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './concurrent.operator';\r\nimport macros             from './concurrent.macro';\r\nimport symbols            from './concurrent.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         FatalError,\r\n         CapturedScopes }     from '../../types';\r\nimport { isSymbol,\r\n         quote }              from '../../ast';\r\nimport { evaluate,\r\n         resolveValueSymbolScope,\r\n         collectCapturedVariables,\r\n         getCapturedScopes,\r\n         getScope,\r\n         getGlobalScope,\r\n         installScope,\r\n         uninstallScope,\r\n         optimizeTailCall,\r\n         toNumber }           from '../../evaluate';\r\nimport { compileLambda }      from '../../compile';\r\nimport { checkParamsLength }  from '../../errors';\r\n\r\n\r\n\r\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($car '(first second ... last))\r\n    //  -> S expr  : first\r\n    checkParamsLength('$car', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car[0];\r\n};\r\nexport const $$car = $car(null as any, null as any);\r\n\r\n\r\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cdr '(first second ... last))\r\n    //  -> S expr  : (second ... last)\r\n    checkParamsLength('$cdr', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car.slice(1);\r\n};\r\nexport const $$cdr = $cdr(null as any, null as any);\r\n\r\n\r\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\r\n    //  -> S expr  : (arg1 arg2-item1 ...)\r\n    // S expression: ($cons arg1 nilOrNull ... argN)\r\n    //  -> S expr  : (arg1)\r\n    // S expression: ($cons arg1 arg2 ... argN)\r\n    //  -> S expr  : arg1.arg2\r\n    checkParamsLength('$cons', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (car === null) {\r\n        car = [];\r\n    }\r\n    if (cdr === null) {\r\n        cdr = [];\r\n    }\r\n\r\n    if (Array.isArray(cdr)) {\r\n        cdr = cdr.slice(0);\r\n        cdr.unshift(car);\r\n        return cdr;\r\n    } else {\r\n        return {car, cdr};\r\n    }\r\n};\r\nexport const $$cons = $cons(null as any, null as any);\r\n\r\n\r\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first first second ... last)\r\n    //  -> S expr  : first\r\n    // S expression: ($first)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(0, 1);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$first = $first(null as any, null as any);\r\n\r\n\r\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($second first second ... last)\r\n    //  -> S expr  : second\r\n    // S expression: ($second first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1, 2);\r\n    return (cdr.length === 1) ? cdr[0] : null;\r\n};\r\nexport const $$second = $second(null as any, null as any);\r\n\r\n\r\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($last first second ... last)\r\n    //  -> S expr  : last\r\n    // S expression: ($last)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(args.length - 1, args.length);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$last = $last(null as any, null as any);\r\n\r\n\r\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($rest first second ... last)\r\n    //  -> S expr  : (second ... last)\r\n    // S expression: ($rest first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1);\r\n    return (0 < cdr.length) ? cdr : null;\r\n};\r\nexport const $$rest = $rest(null as any, null as any);\r\n\r\n\r\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first-and-second first second ... last)\r\n    //  -> S expr  : first.second\r\n    let car: any = args.slice(0, 1);\r\n    car = (car.length === 1) ? car[0] : null;\r\n\r\n    let cdr: any = args.slice(1, 2);\r\n    cdr = (cdr.length === 1) ? cdr[0] : null;\r\n\r\n    return {car, cdr};\r\n};\r\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\r\n\r\n\r\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($atom arg1 ...)\r\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\r\n    //  -> (if arg1 is nil or anything else) S expr  : true\r\n    checkParamsLength('$atom', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n\r\n    if (car === null || car === void 0) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(car)) {\r\n        if (car.length === 0) return  true;\r\n        else                  return false;\r\n    }\r\n\r\n    switch (typeof car) {\r\n    case 'number': case 'string': case 'function': case 'boolean':\r\n        return true;\r\n    case 'object':\r\n        return isSymbol(car) ? true : false;\r\n    }\r\n    return false;\r\n};\r\nexport const $$atom = $atom(null as any, null as any);\r\n\r\n\r\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($eq arg1 arg2)\r\n    //  -> (if arg1 === arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$eq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car === cdr;\r\n};\r\nexport const $$eq = $eq(null as any, null as any);\r\n\r\n\r\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not-eq arg1 arg2)\r\n    //  -> (if arg1 !== arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$notEq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car !== cdr;\r\n};\r\nexport const $$notEq = $notEq(null as any, null as any);\r\n\r\n\r\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\r\n    // S expression: ($list arg1 ... argN)\r\n    //  -> S expr  : (arg1 ... argN)\r\n    args.slice(0);\r\nexport const $$list = $list(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\r\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__scope', args, 3);\r\n\r\n    const isBlockLocal = $$first(...args);\r\n    const returnMultiple = $$second(...args);\r\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\r\n    let r: SxToken = null;\r\n\r\n    const scope: any = {};\r\n    if (Array.isArray(car)) {\r\n        for (const x of car) {\r\n            if (Array.isArray(x)) {\r\n                const kv = $$firstAndSecond(...x);\r\n                const kvSym = isSymbol(kv.car);\r\n                scope[kvSym ? kvSym.symbol : String(kv.car)] = evaluate(state, kv.cdr);\r\n            } else {\r\n                const xSym = isSymbol(x);\r\n                scope[xSym ? xSym.symbol : String(x)] = null;\r\n            }\r\n        }\r\n    }\r\n    installScope(state, scope, isBlockLocal, capturedScopes);\r\n\r\n    try {\r\n        if (4 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(3)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(3)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__globalScope', args, 1);\r\n\r\n    const returnMultiple = $$first(...args);\r\n    const cdr = $$second(...args);\r\n    let r: SxToken = null;\r\n\r\n    installScope(state, getGlobalScope(state).scope, true);\r\n    try {\r\n        if (2 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(1)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(1)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : exprN\r\n    checkParamsLength('$__capture', args, 1);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let r: SxToken = null;\r\n\r\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\r\n    installScope(state, {}, true, capturedScopes);\r\n    try {\r\n        for (const x of args.slice(1)) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    let fnBody = args.slice(1);\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (...actualArgs: any[]) => {\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] func call: Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        // TODO: add type checking\r\n        // TODO: pass \"this\" to the $__scope variable.\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(1);\r\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $__lambda(state, name)(...args.slice(1));\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($refun 'name)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__refun', args, 1, 1);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const info = state.funcMap.get(car.symbol);\r\n    if (!info) {\r\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\r\n    }\r\n    return info.fn(state, car.symbol);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defmacro = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defmacro', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    let formalArgs: SxSymbol[] = args[1];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__defmacro: Invalid argument(s): args[1] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(2);\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (...aArgs: any[]) => {\r\n        let actualArgs = aArgs.slice(0);\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] macro call (${car.symbol}): Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        const extra: SxToken[] = [];\r\n        for (let i = formalArgs.length - (lastIsSpread ? 2 : 1); i >= 0; i--) {\r\n            let nm = formalArgs[i].symbol;\r\n            if (nm.startsWith('!')) {\r\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(1);\r\n                nm = formalArgs[i].symbol;\r\n\r\n                if (! isSymbol(actualArgs[i])) {\r\n                    throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not symbol.`);\r\n                }\r\n            } else if (nm.startsWith('<') && nm.endsWith('>')) {\r\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(1, -1);\r\n                nm = formalArgs[i].symbol;\r\n\r\n                if (isSymbol(actualArgs[i], nm)) {\r\n                    formalArgs = formalArgs.slice(0, i).concat(formalArgs.slice(i + 1));\r\n                    actualArgs = actualArgs.slice(0, i).concat(actualArgs.slice(i + 1));\r\n                } else {\r\n                    throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not expected symbol.`);\r\n                }\r\n            } else {\r\n                // TODO: refactor: extract to function.\r\n                const tpos = nm.lastIndexOf(':');\r\n                if (0 < tpos) {\r\n                    const tname = nm.slice(tpos + 1);\r\n                    switch (tname) {\r\n                    case 'number':\r\n                        if (typeof actualArgs[i] !== 'number') {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not number.`);\r\n                        }\r\n                        break;\r\n                    case 'string':\r\n                        if (typeof actualArgs[i] !== 'string') {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not string.`);\r\n                        }\r\n                        break;\r\n                    case 'function':\r\n                        if (! (Array.isArray(actualArgs[i]) && isSymbol(actualArgs[i][0]))) {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not function.`);\r\n                        }\r\n                        break;\r\n                    case 'list':\r\n                        if (! Array.isArray(actualArgs[i])) {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not list.`);\r\n                        }\r\n                        break;\r\n                    case 'symbol':\r\n                        if (! isSymbol(actualArgs[i])) {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not symbol.`);\r\n                        }\r\n                        break;\r\n                    case 'any':\r\n                        break;\r\n                    default:\r\n                        throw new Error(`[SX] macro call (${car.symbol}): Formal arg(${i}: ${nm}) is unknown type ${tname}.`);\r\n                    }\r\n                    formalArgs[i].symbol = formalArgs[i].symbol.slice(0, tpos);\r\n                    nm = formalArgs[i].symbol;\r\n                }\r\n            }\r\n        }\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...extra, ...fnBody);\r\n    };\r\n\r\n    state.macroMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => (list) => fn(...(list.slice(1))),\r\n    });\r\n\r\n    return fn;\r\n};\r\n\r\n\r\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($apply fn arg1 ... argN)\r\n    //  -> S expr  : fn'\r\n    checkParamsLength('$apply', args, 1);\r\n\r\n    const car: () => any = $$first(...args);\r\n    if (typeof car !== 'function') {\r\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\r\n    }\r\n\r\n    return (\r\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\r\n    );\r\n};\r\nexport const $$apply = $apply(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__call', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const sym = isSymbol(cdr);\r\n    return Function.prototype.apply.call(\r\n        car[sym ? sym.symbol : evaluate(state, cdr) as any],\r\n        car,\r\n        args.slice(2)\r\n    );\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__try 'expr 'catch-expr)\r\n    //  ->                               S expr  : expr\r\n    //  -> (if error is raised in expr)  S expr  : catch-expr\r\n    checkParamsLength('$__try', args, 1, 2);\r\n\r\n    let r: SxToken = [];\r\n    try {\r\n        r = evaluate(state, args[0]);\r\n    } catch (e) {\r\n        if (e instanceof FatalError) {\r\n            throw e;\r\n        }\r\n        if (1 < args.length) {\r\n            r = $__scope(state, name)(true, false, [\r\n                ['$error', quote(state, e)],\r\n                ['$parent', quote(state, getScope(state))],\r\n            ], args[1]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($raise 'expr)\r\n    //  -> S expr  : -\r\n    const car = $$first(...args);\r\n    throw car;\r\n};\r\nexport const $$raise = $raise(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if condition 't-expr 'f-expr)\r\n    //  -> (if condition is true ) S expr  : t-expr\r\n    //  -> (if condition is false) S expr  : f-expr\r\n    checkParamsLength('$__if', args, 2, 3);\r\n\r\n    const car = $$first(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        r = evaluate(state, args[1]);\r\n    } else {\r\n        if (2 < args.length) {\r\n            r = evaluate(state, args[2]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if-null condition 'null-expr)\r\n    //  -> (if condition is not null ) S expr  : condition\r\n    //  -> (if condition is null)      S expr  : null-expr\r\n    checkParamsLength('$__ifNull', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if (! $$ambiguousEq(car, null)) {\r\n        r = car;\r\n    } else {\r\n        r = evaluate(state, cdr);\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n    //  -> (if (eval condI) is true ) S expr  : exprI\r\n    //  -> (if no matched)            S expr  : null\r\n    checkParamsLength('$__cond', args, 1);\r\n\r\n    for (let i = 0; i < args.length - 1; i += 2) {\r\n        const c = args[i];\r\n        const x = args[i + 1];\r\n        if ($$boolean(evaluate(state, c))) {\r\n            return evaluate(state, x);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__while', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$boolean(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doWhile', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$boolean(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__until', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$not(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doUntil', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$not(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n    //  -> (if n > 0) S expr  : exprN\r\n    //  -> (else)     S expr  : null\r\n    checkParamsLength('$__repeat', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const n = toNumber($$second(...args));\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (let i = 0; i < n; i++) {\r\n        scope[sym.symbol] = i;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n    //  -> (if list.length > 0) S expr  : exprN\r\n    //  -> (else)               S expr  : null\r\n    checkParamsLength('$__for', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const list = $$second(...args);\r\n    if (! Array.isArray(list)) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\r\n    }\r\n\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (const q of list) {\r\n        scope[sym.symbol] = q;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get v fn1 ... fnN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$pipe', args, 1);\r\n\r\n    let v = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n        v = args[i](v);\r\n    }\r\n    return v;\r\n};\r\nexport const $$pipe = $pipe(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__get', args, 1);\r\n\r\n    let v: any = null;\r\n    let sym = isSymbol(args[0]);\r\n\r\n    if (!sym) {\r\n        switch (typeof args[0]) {\r\n        case 'string': case 'number':\r\n            sym = {symbol: String(args[0])};\r\n            break;\r\n        default:\r\n            v = evaluate(state, args[0]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (sym) {\r\n        const scope = resolveValueSymbolScope(state, sym, true);\r\n        if (! scope) {\r\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\r\n        }\r\n        v = scope[sym.symbol];\r\n    }\r\n\r\n    for (let i = 1; i < args.length; i++) {\r\n        let q: any = args[i];\r\n        let inprog = true;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                v = q(v);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = v.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                v = v[q];\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n            }\r\n        }\r\n    }\r\n    return v;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let 'nameStrOrSymbol expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__let', args, 2, 2);\r\n\r\n    let sym = isSymbol($$first(...args));\r\n\r\n    if (! sym) {\r\n        if (typeof args[0] === 'string') {\r\n            sym = {symbol: args[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n    scope[sym.symbol] = args[1];\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__set', args, 2, 2);\r\n\r\n    let path: any = [];\r\n\r\n    if (Array.isArray(args[0])) {\r\n        path = args[0];\r\n    } else {\r\n        path.push(args[0]);\r\n    }\r\n\r\n    let sym = isSymbol(path[0]);\r\n\r\n    if (! sym) {\r\n        if (typeof path[0] === 'string') {\r\n            sym = {symbol: path[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    let scope = resolveValueSymbolScope(state, sym, true);\r\n    if (scope === null) {\r\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\r\n    }\r\n\r\n    let subst = false;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        let q: any = path[i];\r\n        let inprog = true;\r\n        const last = i === path.length - 1;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                scope = q(scope);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = scope.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                if (last) {\r\n                    scope[q] = args[1];\r\n                    subst = true;\r\n                } else {\r\n                    scope = scope[q];\r\n                }\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (! subst) {\r\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\r\n    }\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($boolean any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$boolean', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car) && car.length === 0) return false;\r\n    else return Boolean(car);\r\n};\r\nexport const $$boolean = $boolean(null as any, null as any);\r\n\r\n\r\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$not', args, 1, 1);\r\n\r\n    return ! $$boolean(...args);\r\n};\r\nexport const $$not = $not(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__and 'expr1 ... 'exprN)\r\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n    //  -> (else)                                                     S expr  : expr-i (false left most)\r\n    checkParamsLength('$__and', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if (! $$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__and = $__and(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__or 'expr1 ... 'exprN)\r\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n    //  -> (else)                                                  S expr  : expr-i (false right most)\r\n    checkParamsLength('$__or', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if ($$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__or = $__or(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (== a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ambiguousEq', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car) && car.length === 0) car = null;\r\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\r\n    if (car === void 0) car = null;\r\n    if (cdr === void 0) cdr = null;\r\n    // tslint:disable-next-line:triple-equals\r\n    return car == cdr;\r\n};\r\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (!= a b)\r\n    //  -> S expr  : boolean\r\n    return ! $$ambiguousEq(...args);\r\n};\r\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\r\n\r\n\r\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (< a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$lt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) < toNumber(cdr);\r\n};\r\nexport const $$lt = $lt(null as any, null as any);\r\n\r\n\r\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$le', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) <= toNumber(cdr);\r\n};\r\nexport const $$le = $le(null as any, null as any);\r\n\r\n\r\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (> a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$gt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) > toNumber(cdr);\r\n};\r\nexport const $$gt = $gt(null as any, null as any);\r\n\r\n\r\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ge', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) >= toNumber(cdr);\r\n};\r\nexport const $$ge = $ge(null as any, null as any);\r\n\r\n\r\nexport const $symbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($symbol)\r\n    // S expression: ($symbol name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$symbol', args, 1, 1);\r\n\r\n    if (typeof args[0] === 'string') {\r\n        return {symbol: args[0]};\r\n    } else {\r\n        throw new Error(`[SX] $symbol: Invalid argument(s): item(s) of args[0] is not string.`);\r\n    }\r\n};\r\nexport const $$symbol = $symbol(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__gensym = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__gensym)\r\n    // S expression: ($__gensym name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$__gensym', args, 0, 1);\r\n\r\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\r\n    if (args.length === 1) {\r\n        const a = isSymbol(args[0]);\r\n        if (a) {\r\n            $__let(state, '')(a, tempVarSym);\r\n        } else if (typeof args[0] === 'string') {\r\n            $__let(state, '')({symbol: args[0]}, tempVarSym);\r\n        } else {\r\n            throw new Error(`[SX] $__gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n        }\r\n    }\r\n    return tempVarSym;\r\n};\r\n\r\n\r\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-symbol x)\r\n    // S expression: ($is-symbol x name)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isSymbol', args, 1, 2);\r\n\r\n    if (args.length === 1) {\r\n        return (isSymbol(args[0]) ? true : false);\r\n    } else {\r\n        if (typeof args[1] === 'string') {\r\n            return (isSymbol(args[0], args[1]) ? true : false);\r\n        } else {\r\n            throw new Error(`[SX] $isSymbol: Invalid argument(s): item(s) of args[1] is not string.`);\r\n        }\r\n    }\r\n};\r\nexport const $$isSymbol = $isSymbol(null as any, null as any);\r\n\r\n\r\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-list x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isList', args, 1, 1);\r\n\r\n    return Array.isArray($$first(...args));\r\n};\r\nexport const $$isList = $isList(null as any, null as any);\r\n\r\n\r\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-string x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isString', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'string';\r\n};\r\nexport const $$isString = $isString(null as any, null as any);\r\n\r\n\r\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-number x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNumber', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'number';\r\n};\r\nexport const $$isNumber = $isNumber(null as any, null as any);\r\n\r\n\r\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-NaN x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNaN', args, 1, 1);\r\n\r\n    return Number.isNaN($$first(...args));\r\n};\r\nexport const $$isNaN = $isNaN(null as any, null as any);\r\n\r\n\r\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-finate x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isFinite', args, 1, 1);\r\n\r\n    return Number.isFinite($$first(...args));\r\n};\r\nexport const $$isFinite = $isFinite(null as any, null as any);\r\n\r\n\r\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-integer x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isInteger', args, 1, 1);\r\n\r\n    return Number.isInteger($$first(...args));\r\n};\r\nexport const $$isInteger = $isInteger(null as any, null as any);\r\n\r\n\r\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-string x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$toString', args, 1, 1);\r\n\r\n    return String($$first(...args));\r\n};\r\nexport const $$toString = $toString(null as any, null as any);\r\n\r\n\r\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-number x)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$toNumber', args, 1, 1);\r\n\r\n    return toNumber($$first(...args));\r\n};\r\nexport const $$toNumber = $toNumber(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__# '(name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n            if (x.length === 1) {\r\n                // S expression: (# ... (keyName) ...)\r\n                //  -> JSON    : {..., keyName: true, ...}\r\n                r[keyName] = true;\r\n            } else if (x.length === 2) {\r\n                // S expression: (# ... (keyName value) ...)\r\n                //  -> JSON    : {..., keyName: value, ...}\r\n                r[keyName] = evaluate(state, x[1]);\r\n            } else {\r\n                // S expression: (# ... (keyName value1 value2 ...) ...)\r\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                r[keyName] =\r\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                    .concat(x.slice(1)));\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($object-assign x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$objectAssign', args, 1);\r\n\r\n    return Object.assign(args[0], ...(args.slice(1)));\r\n};\r\nexport const $$objectAssign = $objectAssign(null as any, null as any);\r\n\r\n\r\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-stringify x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$jsonStringify', args, 1, 1);\r\n\r\n    return JSON.stringify($$first(...args));\r\n};\r\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\r\n\r\n\r\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-parse x)\r\n    //  -> S expr  : object\r\n    checkParamsLength('$jsonParse', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    return JSON.parse(s);\r\n};\r\nexport const $$jsonParse = $jsonParse(null as any, null as any);\r\n\r\n\r\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($now)\r\n    //  -> S expr  : number\r\n    return Date.now();\r\n};\r\nexport const $$now = $now(null as any, null as any);\r\n\r\n\r\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-from-iso str)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\r\n\r\n\r\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime year month1-12 day)\r\n    // S expression: ($datetime year month1-12 day hours)\r\n    // S expression: ($datetime year month1-12 day hours minutes)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetime', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n        s += 'Z';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetime = $datetime(null as any, null as any);\r\n\r\n\r\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-lc year month1-12 day)\r\n    // S expression: ($datetime-lc year month1-12 day hours)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeLc', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n    } else {\r\n        s += 'T00:00:00.000';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-iso-string number)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\r\n    }\r\n    return dt.toISOString();\r\n};\r\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getUTCFullYear(),\r\n        dt.getUTCMonth() + 1,\r\n        dt.getUTCDate(),\r\n        dt.getUTCHours(),\r\n        dt.getUTCMinutes(),\r\n        dt.getUTCSeconds(),\r\n        dt.getUTCMilliseconds(),\r\n        0, // TZ\r\n        dt.getUTCDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components-lc number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getFullYear(),\r\n        dt.getMonth() + 1,\r\n        dt.getDate(),\r\n        dt.getHours(),\r\n        dt.getMinutes(),\r\n        dt.getSeconds(),\r\n        dt.getMilliseconds(),\r\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\r\n                                 // If your time zone is UTC+2:00, +120 will be returned.\r\n        dt.getDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\r\n\r\n\r\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($match pattern-str string)\r\n    // S expression: ($match pattern-str options-str string)\r\n    //  -> S expr  : array\r\n    checkParamsLength('$match', args, 2, 3);\r\n\r\n    if (args.length === 2) {\r\n        const m = new RegExp(args[0]);\r\n        return m.exec(args[1]);\r\n    } else {\r\n        const m = new RegExp(args[0], args[1]);\r\n        return m.exec(args[2]);\r\n    }\r\n};\r\nexport const $$match = $match(null as any, null as any);\r\n\r\n\r\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-log expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.log(...args);\r\n    return null;\r\n};\r\nexport const $$consoleLog = $consoleLog(null as any, null as any);\r\n\r\n\r\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-error expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.error(...args);\r\n    return null;\r\n};\r\nexport const $$consoleError = $consoleError(null as any, null as any);\r\n\r\n\r\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-trace expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.trace(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\r\n\r\n\r\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time)\r\n    // S expression: ($console-time label)\r\n    //  -> S expr  : null\r\n    console.time(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTime = $consoleTime(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-end)\r\n    // S expression: ($console-time-end label)\r\n    //  -> S expr  : null\r\n    console.timeEnd(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-log label)\r\n    // S expression: ($console-time-log label value ... value)\r\n    //  -> S expr  : null\r\n    (console as any).timeLog(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$scope',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            list[1],\r\n            list[2],\r\n            ...(list.slice(3).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$local',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($local ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$global',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($__global expr1 ... exprN)\r\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\r\n        return [{symbol: '$__global'},\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-let', // alias of $local\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$capture',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__capture'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$refun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($refun name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '<-',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (<- name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defmacro',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defmacro name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defmacro'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$call',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($call thisArg symbol arg1 ... argN)\r\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\r\n        checkParamsLength('$call', list, 3);\r\n\r\n        return [{symbol: '$__call'},\r\n            list[1],\r\n            quote(state, list[2]),\r\n            ...(list.slice(3)),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$try',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($try expr catch-expr)\r\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\r\n        return [{symbol: '$__try'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if cond t-expr f-expr)\r\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\r\n        return [{symbol: '$__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if-null',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if-null cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '??',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (?? cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$cond',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($cond cond1 expr1 ... condN exprN)\r\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        return [{symbol: '$__cond'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($while condition expr1 exprN)\r\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-while condition expr1 exprN)\r\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($until condition expr1 exprN)\r\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-until condition expr1 exprN)\r\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$repeat',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($repeat i of n-times expr1 exprN)\r\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__repeat'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($for x of list expr1 exprN)\r\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__for'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$get',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\r\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        return [{symbol: '$__get'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$let',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$let', list, 3, 3);\r\n\r\n        return [{symbol: '$__let'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-defvar',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$clisp-defvar', list, 3, 3);\r\n\r\n        return [{symbol: '$global'},\r\n            [{symbol: '$__let'},\r\n                quote(state, list[1]),\r\n                list[2]\r\n            ],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\r\n        checkParamsLength('$set', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-setq', // alias of $set\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-setq symbol expr)\r\n        //  -> S expr  : ($__set 'symbol expr)\r\n        checkParamsLength('$clisp-setq', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$and',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($and expr1 ... exprN)\r\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\r\n        return [{symbol: '$__and'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$or',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($or expr1 ... exprN)\r\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\r\n        return [{symbol: '$__or'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$gensym',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($gensym)\r\n        // S expression: ($gensym name)\r\n        //  -> S expr  : ($__gensym 'name)\r\n        return [\r\n            {symbol: '$__gensym'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '#',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (# (name value...)...)\r\n        //  -> S expr  : ($__# '(name value...)...)\r\n        return [\r\n            {symbol: '$__#'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './core.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$car',\r\n    fn: ops.$car,\r\n}, {\r\n    name: '$cdr',\r\n    fn: ops.$cdr,\r\n}, {\r\n    name: '$cons',\r\n    fn: ops.$cons,\r\n}, {\r\n    name: '$first',\r\n    fn: ops.$first,\r\n}, {\r\n    name: '$second',\r\n    fn: ops.$second,\r\n}, {\r\n    name: '$last',\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$progn', // alias of $last\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$rest',\r\n    fn: ops.$rest,\r\n}, {\r\n    name: '$first-and-second',\r\n    fn: ops.$firstAndSecond,\r\n}, {\r\n    name: '$atom',\r\n    fn: ops.$atom,\r\n}, {\r\n    name: '$eq',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '===',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '$not-eq',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '!==',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '$list',\r\n    fn: ops.$list,\r\n}, {\r\n    name: '$__scope',\r\n    fn: ops.$__scope,\r\n}, {\r\n    name: '$__global',\r\n    fn: ops.$__globalScope,\r\n}, {\r\n    name: '$__capture',\r\n    fn: ops.$__capture,\r\n}, {\r\n    name: '$__lambda',\r\n    fn: ops.$__lambda,\r\n}, {\r\n    name: '$$__lambda',\r\n    fn: ops.$comp$__lambda,\r\n}, {\r\n    name: '$__defun',\r\n    fn: ops.$__defun,\r\n}, {\r\n    name: '$$__defun',\r\n    fn: ops.$comp$__defun,\r\n}, {\r\n    name: '$__refun',\r\n    fn: ops.$__refun,\r\n}, {\r\n    name: '$__defmacro',\r\n    fn: ops.$__defmacro,\r\n}, {\r\n    name: '$apply',\r\n    fn: ops.$apply,\r\n}, {\r\n    name: '$__call',\r\n    fn: ops.$__call,\r\n}, {\r\n    name: '$__try',\r\n    fn: ops.$__try,\r\n}, {\r\n    name: '$raise',\r\n    fn: ops.$raise,\r\n}, {\r\n    name: '$__if',\r\n    fn: ops.$__if,\r\n}, {\r\n    name: '$__if-null',\r\n    fn: ops.$__ifNull,\r\n}, {\r\n    name: '$__cond',\r\n    fn: ops.$__cond,\r\n}, {\r\n    name: '$__while',\r\n    fn: ops.$__while,\r\n}, {\r\n    name: '$__do-while',\r\n    fn: ops.$__doWhile,\r\n}, {\r\n    name: '$__until',\r\n    fn: ops.$__until,\r\n}, {\r\n    name: '$__do-until',\r\n    fn: ops.$__doUntil,\r\n}, {\r\n    name: '$__repeat',\r\n    fn: ops.$__repeat,\r\n}, {\r\n    name: '$__for',\r\n    fn: ops.$__for,\r\n}, {\r\n    name: '$pipe',\r\n    fn: ops.$pipe,\r\n}, {\r\n    name: '$__get',\r\n    fn: ops.$__get,\r\n}, {\r\n    name: '$__let',\r\n    fn: ops.$__let,\r\n}, {\r\n    name: '$__set',\r\n    fn: ops.$__set,\r\n}, {\r\n    name: '$boolean',\r\n    fn: ops.$boolean,\r\n}, {\r\n    name: '$not',\r\n    fn: ops.$not,\r\n}, {\r\n    name: '$__and',\r\n    fn: ops.$__and,\r\n}, {\r\n    name: '$__or',\r\n    fn: ops.$__or,\r\n}, {\r\n    name: '==',\r\n    fn: ops.$ambiguousEq,\r\n}, {\r\n    name: '!=',\r\n    fn: ops.$ambiguousNotEq,\r\n}, {\r\n    name: '<',\r\n    fn: ops.$lt,\r\n}, {\r\n    name: '<=',\r\n    fn: ops.$le,\r\n}, {\r\n    name: '>',\r\n    fn: ops.$gt,\r\n}, {\r\n    name: '>=',\r\n    fn: ops.$ge,\r\n}, {\r\n    name: '$symbol',\r\n    fn: ops.$symbol,\r\n}, {\r\n    name: '$__gensym',\r\n    fn: ops.$__gensym,\r\n}, {\r\n    name: '$is-symbol',\r\n    fn: ops.$isSymbol,\r\n}, {\r\n    name: '$is-list',\r\n    fn: ops.$isList,\r\n}, {\r\n    name: '$is-string',\r\n    fn: ops.$isString,\r\n}, {\r\n    name: '$is-number',\r\n    fn: ops.$isNumber,\r\n}, {\r\n    name: '$is-NaN',\r\n    fn: ops.$isNaN,\r\n}, {\r\n    name: '$is-finite',\r\n    fn: ops.$isFinite,\r\n}, {\r\n    name: '$is-integer',\r\n    fn: ops.$isInteger,\r\n}, {\r\n    name: '$to-string',\r\n    fn: ops.$toString,\r\n}, {\r\n    name: '$to-number',\r\n    fn: ops.$toNumber,\r\n}, {\r\n    name: '$__#',\r\n    fn: ops.$__toObject,\r\n}, {\r\n    name: '$object-assign',\r\n    fn: ops.$objectAssign,\r\n}, {\r\n    name: '$json-stringify',\r\n    fn: ops.$jsonStringify,\r\n}, {\r\n    name: '$now',\r\n    fn: ops.$now,\r\n}, {\r\n    name: '$datetime-from-iso',\r\n    fn: ops.$datetimeFromIso,\r\n}, {\r\n    name: '$datetime',\r\n    fn: ops.$datetime,\r\n}, {\r\n    name: '$datetime-lc',\r\n    fn: ops.$datetimeLc,\r\n}, {\r\n    name: '$datetime-to-iso-string',\r\n    fn: ops.$datetimeToIsoString,\r\n}, {\r\n    name: '$datetime-to-components',\r\n    fn: ops.$datetimeToComponents,\r\n}, {\r\n    name: '$datetime-to-components-lc',\r\n    fn: ops.$datetimeToComponentsLc,\r\n}, {\r\n    name: '$json-parse',\r\n    fn: ops.$jsonParse,\r\n}, {\r\n    name: '$match',\r\n    fn: ops.$match,\r\n}, {\r\n    name: '$console-log',\r\n    fn: ops.$consoleLog,\r\n}, {\r\n    name: '$console-error',\r\n    fn: ops.$consoleError,\r\n}, {\r\n    name: '$console-trace',\r\n    fn: ops.$consoleTrace,\r\n}, {\r\n    name: '$console-time',\r\n    fn: ops.$consoleTime,\r\n}, {\r\n    name: '$console-time-end',\r\n    fn: ops.$consoleTimeEnd,\r\n}, {\r\n    name: '$console-time-log',\r\n    fn: ops.$consoleTimeLog,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [\r\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\r\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\r\n\r\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\r\n\r\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\r\n\r\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\r\n\r\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\r\n\r\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\r\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\r\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\r\n\r\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\r\n];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './core.operator';\r\nimport macros             from './core.macro';\r\nimport symbols            from './core.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig,\r\n         LsxConfig }        from '../../types';\r\nimport operators            from './jsx.operator';\r\nimport macros               from './jsx.macro';\r\nimport symbols              from './jsx.symbol';\r\n\r\nimport { $jsxStandardTag,\r\n         $jsxComponentTag } from './jsx.fn';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig, lsxConf: LsxConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n\r\n    const components =\r\n        Object.entries(lsxConf.components)\r\n        .map(x => ({name: x[0], fn: $jsxComponentTag(x[1])}));\r\n\r\n    config.funcs = config.funcs.concat(\r\n        {name: config.reservedNames.Template, fn: $jsxComponentTag(lsxConf.jsxFlagment)},\r\n        ...components\r\n    );\r\n\r\n    config.funcSymbolResolverFallback = $jsxStandardTag;\r\n    config.jsx = lsxConf.jsx;\r\n    config.JsxFragment = lsxConf.jsxFlagment;\r\n\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken }           from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { evaluate,\r\n         getScope }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond,\r\n         $__scope,\r\n         $$boolean }         from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputIf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputIf cond 'expr)\r\n    //  -> (if cond is true ) S expr  : expr\r\n    //  -> (if cond is false) S expr  : ()\r\n    checkParamsLength('$__outputIf', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        if (2 < args.length) {\r\n            r.push({symbol: state.config.reservedNames.Template}, ...args.slice(1));\r\n            r = evaluate(state, r);\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputForOf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputForOf list 'expr)\r\n    //  -> S expr  : (Template expr ... expr)\r\n    checkParamsLength('$__outputForOf', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    const r: SxToken[] = [];\r\n    if (Array.isArray(car)) {\r\n        for (let i = 0; i < car.length; i++) {\r\n            const x = car[i];\r\n            const v = $__scope(state, name)(true, true, [\r\n                ['$data', quote(state, x)],\r\n                ['$index', i],\r\n                ['$array', quote(state, car)],\r\n                ['$parent', quote(state, getScope(state).scope)],\r\n            ], ...args.slice(1));\r\n\r\n            if (2 < args.length && Array.isArray(v)) {\r\n                r.push(...v);\r\n            } else {\r\n                r.push(v);\r\n            }\r\n        }\r\n    } else {\r\n        throw new Error(`[SX] $__outputForOf: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    // All of r items are already evaluated.\r\n    return evaluate(state,\r\n        ([{symbol: state.config.reservedNames.Template}] as SxToken[])\r\n        .concat(r.map(z => [{symbol: state.config.reservedNames.quote}, z])));\r\n};\r\n\r\n\r\nexport const $jsxProps = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (@ (name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n            switch (keyName) {\r\n            case 'style':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (style) ...)\r\n                        //  -> JSON    : {..., style: \"\", ...}\r\n                        r[keyName] = \"\";\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (style \"styleName1: styleValue1; ...\" ...) ...)\r\n                        // S expression: (@ ... (style (styleName1 styleValue1) ...) ...)\r\n                        //  -> JSON    : {..., style: {styleName1: styleValue1}, ...}\r\n                        const styles: object = {};\r\n                        for (const s of x.slice(1)) {\r\n                            if (Array.isArray(s) && 1 < s.length) {\r\n                                styles[String(evaluate(state, s[0]))] = String(evaluate(state, s[1]));\r\n                            } else if (typeof s === 'string') {\r\n                                for (const v of s.split(';')) {\r\n                                    const matched = /^\\s*(\\S+)\\s*:\\s*(.*?)\\s*$/.exec(v);\r\n                                    if (matched) {\r\n                                        styles[matched[1]] = matched[2];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        r[keyName] = styles;\r\n                    }\r\n                }\r\n                break;\r\n            case 'class': case 'styleClass':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: [], ...}\r\n                        r[keyName] = [];\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: [className1 className2 ...], ...}\r\n                        let classes: any[] = [];\r\n                        for (const c of x.slice(1)) {\r\n                            if (Array.isArray(c)) {\r\n                                classes = classes.concat(c.map(z => evaluate(state, z)));\r\n                            } else if (typeof c === 'string') {\r\n                                classes = classes.concat(c.split(' '));\r\n                            }\r\n                        }\r\n                        const cs: string[] = [];\r\n                        const fn: (a: any[]) => void = (a) => a\r\n                            .forEach(c => (c === null || c === void 0) ?\r\n                                void 0 :\r\n                                (Array.isArray(c) ? fn(c) : cs.push(String(c))));\r\n                        fn(classes);\r\n                        r[keyName] = cs;\r\n                    }\r\n                }\r\n                break;\r\n            case 'className':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: \"\", ...}\r\n                        r[keyName] = '';\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: \"className1 className2 ...\", ...}\r\n                        let classes: string = '';\r\n                        for (const c of x.slice(1)) {\r\n                            let fragment = '';\r\n                            if (Array.isArray(c)) {\r\n                                const cs: string[] = [];\r\n                                const fn: (a: any[]) => void = (a) => a\r\n                                    .map(z => evaluate(state, z))\r\n                                    .forEach(z => (z === null || z === void 0) ?\r\n                                        void 0 :\r\n                                        (Array.isArray(z) ? fn(z) : cs.push(String(z))));\r\n                                fn(c);\r\n                                fragment = cs.join(' ');\r\n                            } else if (typeof c === 'string') {\r\n                                fragment = c;\r\n                            }\r\n                            if (0 < classes.length) classes += ' ' + fragment;\r\n                            else classes = fragment;\r\n                        }\r\n                        r[keyName] = classes;\r\n                    }\r\n                }\r\n                break;\r\n            case 'dangerouslySetInnerHTML':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__html: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__html: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__html:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            case 'setInnerText':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__text: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__text: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__text:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (keyName) ...)\r\n                        //  -> JSON    : {..., keyName: true, ...}\r\n                        r[keyName] = true;\r\n                    } else if (x.length === 2) {\r\n                        // S expression: (@ ... (keyName value) ...)\r\n                        //  -> JSON    : {..., keyName: value, ...}\r\n                        r[keyName] = evaluate(state, x[1]);\r\n                    } else {\r\n                        // S expression: (@ ... (keyName value1 value2 ...) ...)\r\n                        //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                        r[keyName] =\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $jsxProps: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nfunction getJsxTagsParams(state: SxParserState, ...args: any[]) {\r\n    let children = args;\r\n    let props: any = {};\r\n    if (0 < args.length && Array.isArray(args[0])) {\r\n        const sym = isSymbol(args[0][0], '@');\r\n\r\n        if (sym) {\r\n            props = $jsxProps(state, '')(...args[0].slice(1));\r\n            children = children.slice(1);\r\n        }\r\n    }\r\n    return {props, children};\r\n}\r\n\r\n\r\nexport const $jsxStandardTag = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(name, props, ...children);\r\n};\r\n\r\n\r\nexport const $jsxComponentTag = (component: any) => (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(component, props, ...children);\r\n};\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState } from '../../types';\r\nimport { quote }         from '../../ast';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '@',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        return quote(state, list);\r\n    },\r\n}, {\r\n    name: '$=if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=if cond expr)\r\n        //  -> S expr  : ($=__if cond 'expr)\r\n        return [\r\n            {symbol: '$=__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$=for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=for list expr)\r\n        //  -> S expr  : ($=__for list 'expr)\r\n        return [\r\n            {symbol: '$=__for'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './jsx.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$=__if',\r\n    fn: ops.$__outputIf,\r\n}, {\r\n    name: '$=__for',\r\n    fn: ops.$__outputForOf,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './sequence.operator';\r\nimport macros             from './sequence.macro';\r\nimport symbols            from './sequence.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber,\r\n         evaluate }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\nimport { query }             from '../../../lib/data';\r\n\r\n\r\n\r\nexport const $range = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($range start end)\r\n    // S expression: ($range start end step)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$range', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const start = toNumber(car) || 0;\r\n    const stop = toNumber(cdr) || 0;\r\n\r\n    const step = (args.length > 2 ? toNumber(args[2]) || 0 : 0) || (start <= stop ? 1 : -1);\r\n    const n = Math.sign(stop - start) + Math.sign(step) !== 0 ?\r\n        (Math.floor((Math.abs(stop - start) / Math.abs(step))) + 1) : 0;\r\n\r\n    state.evalCount += n;\r\n    evaluate(state, 0);\r\n    return Array.from({length: n}, (x, i) => start + i * step);\r\n};\r\n\r\n\r\nexport const $length = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($length listOrString)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$length', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('length' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.length;\r\n    }\r\n    throw new Error(`[SX] $length: Invalid argument type: object has no property 'length'.`);\r\n};\r\nexport const $$length = $length(null as any, null as any);\r\n\r\n\r\nexport const $trim = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trim', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trim();\r\n    }\r\n    throw new Error(`[SX] $trim: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trim = $trim(null as any, null as any);\r\n\r\n\r\nexport const $trimHead = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-head string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimHead', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimLeft();\r\n    }\r\n    throw new Error(`[SX] $trimHead: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimHead = $trimHead(null as any, null as any);\r\n\r\n\r\nexport const $trimTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-tail string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimTail', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimRight();\r\n    }\r\n    throw new Error(`[SX] $trimTail: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimTail = $trimTail(null as any, null as any);\r\n\r\n\r\nexport const $replaceAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($replace-all src-string match-string replacement-string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$replaceAll', args, 3, 3);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string' && typeof args[2] === 'string') {\r\n        return args[0].split(args[1]).join(args[2]);\r\n    }\r\n    throw new Error(`[SX] $replaceAll: Invalid argument type: args[0] or [1] or [2] is not string.`);\r\n};\r\nexport const $$replaceAll = $replaceAll(null as any, null as any);\r\n\r\n\r\nexport const $split = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($split src-string match-string)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$split', args, 2, 2);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string') {\r\n        return args[0].split(args[1]);\r\n    }\r\n    throw new Error(`[SX] $split: Invalid argument type: args[0] or [1] is not string.`);\r\n};\r\nexport const $$split = $split(null as any, null as any);\r\n\r\n\r\nexport const $join = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($join '(str1 ... strN) separator)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$join', args, 1, 2);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        if (args.length > 1) {\r\n            if (typeof args[1] === 'string') {\r\n                return args[0].join(args[1]);\r\n            }\r\n            throw new Error(`[SX] $join: Invalid argument type: args[1] is not string.`);\r\n        } else {\r\n            return args[0].join();\r\n        }\r\n    }\r\n    throw new Error(`[SX] $join: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$join = $join(null as any, null as any);\r\n\r\n\r\nexport const $concat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($concat listOrString1 ... listOrStringN)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$concat', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('concat' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.concat(...args.slice(1));\r\n    }\r\n    throw new Error(`[SX] $concat: Invalid argument type: object has no property 'concat'.`);\r\n};\r\nexport const $$concat = $concat(null as any, null as any);\r\n\r\n\r\nexport const $slice = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($slice start end listOrString)\r\n    // S expression: ($slice start listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$slice', args, 2, 3);\r\n\r\n    if (args.length === 3) {\r\n        if (typeof args[2] === 'string' || Array.isArray(args[2])) {\r\n            return args[2].slice(toNumber(args[0]), toNumber(args[1]));\r\n        }\r\n    }\r\n    if (args.length === 2) {\r\n        if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n            return args[1].slice(toNumber(args[0]));\r\n        }\r\n    }\r\n    throw new Error(`[SX] $slice: Invalid argument type: args[${args.length - 1}] is not string or array.`);\r\n};\r\nexport const $$slice = $slice(null as any, null as any);\r\n\r\n\r\nexport const $top = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($top n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$top', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        return args[1].slice(0, toNumber(args[0]));\r\n    }\r\n    throw new Error(`[SX] $top: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$top = $top(null as any, null as any);\r\n\r\n\r\nexport const $tail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($tail n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$tail', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        const n = -toNumber(args[0]);\r\n        return args[1].slice(n >= 0 || Number.isNaN(n) ? args[1].length : n);\r\n    }\r\n    throw new Error(`[SX] $tail: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$tail = $tail(null as any, null as any);\r\n\r\n\r\nexport const $push = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($push list value)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$push', args, 2, 2);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        args[0].push(args[1]);\r\n        return args[0];\r\n    }\r\n    throw new Error(`[SX] $push: Invalid argument type: args[1] is not array.`);\r\n};\r\nexport const $$push = $push(null as any, null as any);\r\n\r\n\r\nexport const $pop = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($pop list)\r\n    //  -> S expr  : value\r\n    checkParamsLength('$pop', args, 1, 1);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        const v = args[0].pop();\r\n        return v;\r\n    }\r\n    throw new Error(`[SX] $pop: Invalid argument type: args[1] is not array.`);\r\n};\r\nexport const $$pop = $pop(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__at = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__at index listOrString)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__at', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return cdr[car];\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__at = $__at(null as any, null as any);\r\n\r\n\r\nexport const $reverse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverse = $reverse(null as any, null as any);\r\n\r\n\r\nexport const $reverseDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse! listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse!', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverseDestructive = $reverseDestructive(null as any, null as any);\r\n\r\n\r\nexport const $find = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($find list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$find', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.find(cdr);\r\n    }\r\n    throw new Error(`[SX] $find: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$find = $find(null as any, null as any);\r\n\r\n\r\nexport const $filter = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($filter list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$filter', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.filter(cdr);\r\n    }\r\n    throw new Error(`[SX] $filter: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$filter = $filter(null as any, null as any);\r\n\r\n\r\nexport const $map = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($map list (lambda (v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$map', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.map(cdr);\r\n    }\r\n    throw new Error(`[SX] $map: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$map = $map(null as any, null as any);\r\n\r\n\r\nexport const $reduce = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduce', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduce(cdr);\r\n        } else {\r\n            return car.reduce(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduce: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduce = $reduce(null as any, null as any);\r\n\r\n\r\nexport const $reduceFromTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduceFromTail', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduceRight(cdr);\r\n        } else {\r\n            return car.reduceRight(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduceFromTail: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduceFromTail = $reduceFromTail(null as any, null as any);\r\n\r\n\r\nexport const $sort = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sort = $sort(null as any, null as any);\r\n\r\n\r\nexport const $sortDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort! list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort!', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sortDestructive = $sortDestructive(null as any, null as any);\r\n\r\n\r\nexport const $groupEvery = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-every optionsOrNumber (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-every', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-every: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupEvery(car).select();\r\n};\r\nexport const $$groupEvery = $groupEvery(null as any, null as any);\r\n\r\n\r\nexport const $groupBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-by conditions (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupBy(car).select();\r\n};\r\nexport const $$groupBy = $groupBy(null as any, null as any);\r\n\r\n\r\nexport const $orderBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($order-by conditions (x1 ... xN))\r\n    //  -> S expr  : (x1 ... xN)\r\n    checkParamsLength('$order-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $order-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).orderBy(car).select();\r\n};\r\nexport const $$orderBy = $orderBy(null as any, null as any);\r\n\r\n\r\nexport const $where = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($where (-> (v index array) ... boolean) (x1 ... xN))\r\n    //  -> S expr  : (x'1 ... x'M)\r\n    checkParamsLength('$where', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (typeof args[0] !== 'function') {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[0] is not function.`);\r\n    }\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).where(car).select();\r\n};\r\nexport const $$where = $where(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState } from '../../types';\r\nimport { isSymbol }      from '../../ast';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$[',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($[ index ] listOrObject)\r\n        //  -> S expr  : ($__at listOrObject)\r\n        const symOf = isSymbol(list[2], ']');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing ']' keyword.`);\r\n        }\r\n        return [{symbol: '$__at'},\r\n            list[1],\r\n            list[3],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './sequence.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$range',\r\n    fn: ops.$range,\r\n}, {\r\n    name: '$length',\r\n    fn: ops.$length,\r\n}, {\r\n    name: '$trim',\r\n    fn: ops.$trim,\r\n}, {\r\n    name: '$trim-head',\r\n    fn: ops.$trimHead,\r\n}, {\r\n    name: '$trim-tail',\r\n    fn: ops.$trimTail,\r\n}, {\r\n    name: '$replace-all',\r\n    fn: ops.$replaceAll,\r\n}, {\r\n    name: '$split',\r\n    fn: ops.$split,\r\n}, {\r\n    name: '$join',\r\n    fn: ops.$join,\r\n}, {\r\n    name: '$concat',\r\n    fn: ops.$concat,\r\n}, {\r\n    name: '$slice',\r\n    fn: ops.$slice,\r\n}, {\r\n    name: '$top',\r\n    fn: ops.$top,\r\n}, {\r\n    name: '$tail',\r\n    fn: ops.$tail,\r\n}, {\r\n    name: '$push',\r\n    fn: ops.$push,\r\n}, {\r\n    name: '$pop',\r\n    fn: ops.$pop,\r\n}, {\r\n    name: '$__at',\r\n    fn: ops.$__at,\r\n}, {\r\n    name: '$reverse',\r\n    fn: ops.$reverse,\r\n}, {\r\n    name: '$reverse!',\r\n    fn: ops.$reverseDestructive,\r\n}, {\r\n    name: '$find',\r\n    fn: ops.$find,\r\n}, {\r\n    name: '$filter',\r\n    fn: ops.$filter,\r\n}, {\r\n    name: '$map',\r\n    fn: ops.$map,\r\n}, {\r\n    name: '$reduce',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-head',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-tail',\r\n    fn: ops.$reduceFromTail,\r\n}, {\r\n    name: '$sort',\r\n    fn: ops.$sort,\r\n}, {\r\n    name: '$sort!',\r\n    fn: ops.$sortDestructive,\r\n}, {\r\n    name: '$group-every',\r\n    fn: ops.$groupEvery,\r\n}, {\r\n    name: '$group-by',\r\n    fn: ops.$groupBy,\r\n}, {\r\n    name: '$order-by',\r\n    fn: ops.$orderBy,\r\n}, {\r\n    name: '$where',\r\n    fn: ops.$where,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxEof,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedFragment,\r\n         SxComment,\r\n         SxToken,\r\n         SxChar,\r\n         ScriptTerminationError } from './types';\r\nimport { quote,\r\n         backquote,\r\n         wrapByUnquote,\r\n         spread,\r\n         splice }                 from './ast';\r\n\r\n\r\n\r\nfunction isEOF(ch: SxChar): boolean {\r\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\r\n}\r\n\r\n\r\nfunction isSpace(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && ch.trim().length === 0;\r\n}\r\n\r\n\r\nfunction isNumberFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isSymbolFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' &&\r\n        !isSpace(ch) &&\r\n        !isNumberFirstChar(ch);\r\n}\r\n\r\n\r\n\r\nfunction lookCurrentLineHint(state: SxParserState): string {\r\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\r\n        state.strings.length > state.index ?\r\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\r\n}\r\n\r\n\r\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    if (state.strings.length <= state.index) {\r\n        return {eof: true};\r\n    }\r\n    if (state.strings[state.index].length <= state.pos) {\r\n        if ((! state.values) || (state.values.length <= state.index)) {\r\n            state.pos = 0;\r\n            state.index++;\r\n            return getChar(state);\r\n        } else {\r\n            const ch = {value: state.values[state.index]};\r\n            state.pos = 0;\r\n            state.index++;\r\n            return ch;\r\n        }\r\n    }\r\n    if (virtualEof) {\r\n        for (const v of virtualEof) {\r\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\r\n            if (ch === v) {\r\n                state.pos += v.length;\r\n                state.line += ch.split('\\n').length - 1;\r\n                return { eof: false , eofSeq: v };\r\n            }\r\n        }\r\n    }\r\n    {\r\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n        state.pos++;\r\n\r\n        if (ch === '\\n') {\r\n            state.line++;\r\n        }\r\n\r\n        if ((! disableEscape) && ch === '\\\\') {\r\n            if (state.strings[state.index].length <= state.pos) {\r\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n            state.pos++;\r\n\r\n            switch (ch) {\r\n            case 'b':\r\n                ch = '\\b';\r\n                break;\r\n            case 't':\r\n                ch = '\\t';\r\n                break;\r\n            case 'n':\r\n                ch = '\\n';\r\n                break;\r\n            case 'v':\r\n                ch = '\\v';\r\n                break;\r\n            case 'f':\r\n                ch = '\\f';\r\n                break;\r\n            case 'r':\r\n                ch = '\\r';\r\n                break;\r\n            case 'U': case 'u':\r\n                {\r\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\r\n                        let ch1 = '';\r\n                        for (let i = 0; i < 6; i++) {\r\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\r\n                            if (ch2 === '}') {\r\n                                if (i === 0) {\r\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                                }\r\n                                state.pos += i;\r\n                                break;\r\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\r\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            ch1 += ch2;\r\n                        }\r\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos++;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    } else {\r\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\r\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos += 4;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return ch;\r\n    }\r\n}\r\n\r\n\r\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    const chs: SxChar[] = [];\r\n\r\n    try {\r\n        for (let i = 0; i < n; i++) {\r\n            chs.push(getChar(state, virtualEof, disableEscape));\r\n        }\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return chs;\r\n}\r\n\r\n\r\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    let ch: SxChar;\r\n\r\n    try {\r\n        ch = getChar(state, virtualEof, disableEscape);\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return ch;\r\n}\r\n\r\n\r\nfunction skipWhitespaces(state: SxParserState): void {\r\n    let ch = lookAhead(state);\r\n    while (!isEOF(ch) && isSpace(ch)) {\r\n        getChar(state);\r\n        ch = lookAhead(state);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\r\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n    }\r\n    return Number(s);\r\n}\r\n\r\n\r\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (isSpace(ch)) {\r\n                break;\r\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\r\n                break;\r\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                getChar(state, virtualEof);\r\n                const v = (ch as SxExternalValue).value;\r\n                s += String(ch);\r\n            } else {\r\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (state.config.enableShorthands) {\r\n        let m: RegExpMatchArray | null = null;\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        if (m = s.match(/^::([^=:][^=]+)=$/)) {\r\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\r\n            const ws = m[1].split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.set},\r\n                        ws\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^::([^@:][^@]+)@([^@:]+)$/)) {\r\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\r\n            const ws = m[1].split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.call},\r\n                        [{symbol: state.config.reservedNames.get}, ...ws],\r\n                        {symbol: m[2]},\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^::([^:].+)$/)) {\r\n            // ::foo:bar:baz -> ($get foo bar baz)\r\n            const ws = m[1].split(':');\r\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\r\n            return z as any;\r\n        }\r\n    }\r\n\r\n    return {symbol: s};\r\n}\r\n\r\n\r\nfunction parseStringOrComment(\r\n        state: SxParserState, eof: string[],\r\n        valuesStartSeq: string | null ,\r\n        valuesStopChar: string,\r\n        disableEscape: boolean\r\n    ): { strings: string[], values: any[] } {\r\n\r\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\r\n    const strings: string[] = [];\r\n    const values: any[] = [];\r\n\r\n    for (;;) {\r\n        let s = '';\r\n        let ch = lookAhead(state, eofSeqs, disableEscape);\r\n\r\n        while (! isEOF(ch)) {\r\n            if (typeof ch === 'string') {\r\n                getChar(state, eofSeqs, disableEscape);\r\n                s += ch;\r\n            } else {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state, eofSeqs, disableEscape);\r\n                    const v = (ch as SxExternalValue).value;\r\n                    s += String(ch);\r\n                } else {\r\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            }\r\n\r\n            ch = lookAhead(state, eofSeqs, disableEscape);\r\n        }\r\n\r\n        getChar(state, eofSeqs, disableEscape);\r\n\r\n        if ((ch as SxEof).eof === true) {\r\n            throw new ScriptTerminationError('parseStringOrComment');\r\n        }\r\n\r\n        strings.push(s);\r\n\r\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\r\n            values.push(parseList(state, valuesStopChar, []));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { strings, values };\r\n}\r\n\r\n\r\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\r\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape).strings[0];\r\n}\r\n\r\n\r\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\r\n    const q: SxToken[] = [symbol];\r\n\r\n    if (attrs) {\r\n        q.push(attrs);\r\n    }\r\n\r\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false);\r\n    for (let i = 0; i < inner.strings.length; i++) {\r\n        q.push(inner.strings[i]);\r\n        if (i < inner.values.length) {\r\n            q.push(inner.values[i]);\r\n        }\r\n    }\r\n\r\n    return q;\r\n}\r\n\r\n\r\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['|#'], null, ')', false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseOneToken(state: SxParserState): SxToken {\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case ')':\r\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n\r\n        case '(':\r\n            getChar(state);\r\n            return parseList(state, ')', []);\r\n\r\n        case \"'\": case \"`\": case ',':\r\n            {\r\n                getChar(state);\r\n                const ahead = lookAhead(state);\r\n                let isSpliceUnquote = false;\r\n                if (ch === ',' && ahead === '@') {\r\n                    getChar(state);\r\n                    isSpliceUnquote = true;\r\n                }\r\n                skipWhitespaces(state);\r\n                const ret = (ch === \"'\" ?\r\n                        quote :\r\n                        (ch === \"`\" ? backquote : wrapByUnquote))\r\n                    (state, parseOneToken(state)\r\n                );\r\n                return (isSpliceUnquote ? splice(state, ret) : ret);\r\n            }\r\n\r\n        case \".\":\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 2);\r\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    skipWhitespaces(state);\r\n                    return spread(state, parseOneToken(state));\r\n                } else {\r\n                    skipWhitespaces(state);\r\n                    return {dotted: parseOneToken(state)};\r\n                }\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            return parseSingleLineComment(state);\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseMultiLineComment(state);\r\n                } else {\r\n                    return parseSymbol(state);\r\n                }\r\n            }\r\n\r\n        case '\"':\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 4);\r\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\r\n                    let isHereDoc = true;\r\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\r\n                        // here doc\r\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\r\n                        if (aheads[2] === '+' || aheads[2] === '-') {\r\n                            if (! isNumberAfterSignChar(aheads[3])) {\r\n                                isHereDoc = false;\r\n                            }\r\n                        }\r\n                        // here doc\r\n                    } else if (isSymbolFirstChar(aheads[2])) {\r\n                        isHereDoc = false;\r\n                    } else {\r\n                        // here doc\r\n                    }\r\n                    getChar(state);\r\n                    getChar(state);\r\n\r\n                    let sym: SxSymbol | number | null = null;\r\n                    let attrs: SxToken[] | null = null;\r\n                    if (isHereDoc) {\r\n                        sym = {symbol: state.config.reservedNames.Template};\r\n                    } else {\r\n                        sym = parseSymbol(state, ['@']);\r\n                        if (sym === null) {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        if (typeof sym === 'number') {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        const ahs = lookAheads(state, 2);\r\n                        if (ahs[0] === '@') {\r\n                            if (ahs[1] !== '{') {\r\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            getChar(state);\r\n                            getChar(state);\r\n                            const a = parseList(state, '}', [{symbol: '@'}]);\r\n                            if (Array.isArray(a)) {\r\n                                attrs = a;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return parseHereDoc(state, sym, attrs);\r\n                } else {\r\n                    return parseString(state, false);\r\n                }\r\n            }\r\n\r\n        case '@':\r\n            if (state.config.enableVerbatimStringLiteral) {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '\"') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseString(state, true);\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            if (typeof ch !== 'string') {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state);\r\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\r\n                } else {\r\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            } else if (isSpace(ch)) {\r\n                break;\r\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\r\n                if (ch === '+' || ch === '-') {\r\n                    const aheads = lookAheads(state, 2);\r\n                    if (! isNumberAfterSignChar(aheads[1])) {\r\n                        return parseSymbol(state);\r\n                    }\r\n                }\r\n                return parseNumber(state);\r\n            } else if (isSymbolFirstChar(ch)) {\r\n                return parseSymbol(state);\r\n            } else {\r\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseOneToken');\r\n}\r\n\r\n\r\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\r\n    const r: SxToken[] = initialList.slice(0);\r\n    let dotted = false;\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case listStopChar:\r\n            getChar(state);\r\n            if (dotted) {\r\n                return r[0];\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        default:\r\n            {\r\n                const t = parseOneToken(state);\r\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\r\n                    if (r.length !== 1) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    dotted = true;\r\n                    if (Array.isArray(t)) {\r\n                        t.unshift(r.pop() as SxToken);\r\n                        r.push(t);\r\n                    } else {\r\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\r\n                    }\r\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                    if (! state.config.stripComments) {\r\n                        r.push(t);\r\n                    }\r\n                } else {\r\n                    if (dotted) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    r.push(t);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseList');\r\n}\r\n\r\n\r\n\r\nexport function parse(state: SxParserState) {\r\n    const r: SxToken[] = [];\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case '(':\r\n            getChar(state);\r\n            r.push(parseList(state, ')', []));\r\n            break;\r\n\r\n        case \"'\": case \"`\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                for (;;) {\r\n                    const t = parseOneToken(state);\r\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                        if (! state.config.stripComments) {\r\n                            r.push(t);\r\n                        }\r\n                    } else {\r\n                        r.push((ch === \"'\" ? quote : backquote)(state, t));\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            if (state.config.stripComments) {\r\n                parseSingleLineComment(state);\r\n            } else {\r\n                r.push(parseSingleLineComment(state));\r\n            }\r\n            break;\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseMultiLineComment(state);\r\n                    } else {\r\n                        r.push(parseMultiLineComment(state));\r\n                    }\r\n                } else {\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseSingleLineComment(state);\r\n                    } else {\r\n                        r.push(parseSingleLineComment(state));\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case '\"':\r\n            {\r\n                const aheads = lookAheads(state, 3);\r\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\r\n                    r.push(parseOneToken(state));\r\n                    break;\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxFuncInfo,\r\n         SxSymbolInfo,\r\n         SxReservedNames,\r\n         SxParserConfig,\r\n         SxParserState,\r\n         SxToken,\r\n         LsxConfig,\r\n         SExpressionTemplateFn,\r\n         SExpressionAsyncTemplateFn } from './types';\r\nimport { parse }            from './parser';\r\nimport { evaluate }         from './evaluate';\r\nimport installCore          from './operators/core';\r\nimport installArithmetic    from './operators/arithmetic';\r\nimport installSequence      from './operators/sequence';\r\nimport installJsx           from './operators/jsx';\r\nimport installConcurrent    from './operators/concurrent';\r\n\r\n\r\n\r\nexport const defaultReservedNames: SxReservedNames = {\r\n    eval: '$eval',\r\n    quote: '$quote',\r\n    backquote: '$backquote',\r\n    unquote: '$unquote',\r\n    spread: '$spread',\r\n    splice: '$splice',\r\n\r\n    car: '$car',\r\n    cdr: '$cdr',\r\n    cons: '$cons',\r\n    atom: '$atom',\r\n    eq: '$eq',\r\n    list: '$list',\r\n\r\n    let: '$clisp-let',\r\n    lambda: '$lambda',\r\n    self: '$self',\r\n    defun: '$defun',\r\n\r\n    if: '$if',\r\n    cond: '$cond',\r\n\r\n    while: '$while',\r\n    doWhile: '$do-while',\r\n    until: '$until',\r\n    doUntil: '$do-until',\r\n\r\n    get: '$get',\r\n    defvar: '$clisp-defvar',\r\n    setq: '$clisp-setq',\r\n    set: '$set',\r\n    call: '$call',\r\n\r\n    not: '$not',\r\n    and: '$and',\r\n    or: '$or',\r\n\r\n    isSymbol: '$is-symbol',\r\n    gensym: '$gensym',\r\n    raise: '$raise',\r\n    catch: '$catch',\r\n\r\n    Template: 'Template',\r\n};\r\n\r\nexport const defaultConfig: SxParserConfig = {\r\n    raiseOnUnresolvedSymbol: false,\r\n    enableEvaluate: true,\r\n    enableHereDoc: true,\r\n    enableSpread: true,\r\n    enableSplice: true,\r\n    enableShorthands: true,\r\n    enableVerbatimStringLiteral: true,\r\n    enableTailCallOptimization: true,\r\n    stripComments: false,\r\n    wrapExternalValue: true,\r\n    returnMultipleRoot: false,\r\n    maxEvalCount: 0,\r\n\r\n    reservedNames: defaultReservedNames,\r\n    symbols: [],\r\n    macros: [],\r\n    funcs: [],\r\n};\r\n\r\n\r\n\r\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\r\n    return {\r\n        strings: typeof strings === 'string' ? [strings] : strings,\r\n        values: values || [],\r\n\r\n        index: 0,\r\n        pos: 0,\r\n        line: 0,\r\n\r\n        evalCount: 0,\r\n\r\n        scopes: [{isBlockLocal: false, scope: globals}],\r\n\r\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\r\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\r\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\r\n\r\n        config,\r\n    };\r\n}\r\n\r\n\r\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\r\n    state.strings = typeof strings === 'string' ? [strings] : strings;\r\n    state.values = values || [];\r\n    state.index = 0;\r\n    state.pos = 0;\r\n    state.line = 0;\r\n    state.evalCount = 0;\r\n    return state;\r\n}\r\n\r\n\r\n\r\n\r\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fRepl;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = async (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n\r\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\r\n                    s[i] = await s[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\r\n            if (config.enableEvaluate) {\r\n                for (let i = 0; i < s.length; i++) {\r\n                    s[i] = evaluate(stat, s[i]);\r\n                }\r\n            }\r\n\r\n            if (config.returnMultipleRoot) {\r\n                return s.length === 1 ? s[0] : s;\r\n            } else {\r\n                return s[s.length - 1];\r\n            }\r\n        };\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return execSync(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fReplSync;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\n\r\nexport const S = (() => {\r\n    const config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config.enableEvaluate = false;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\nexport const L = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\nexport const LS = L;\r\nexport const lisp = L;\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const L_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LS_async = L_async;\r\n// tslint:disable-next-line:variable-name\r\nexport const lisp_async = L_async;\r\n\r\n\r\n\r\nexport const LM = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LM_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n\r\n\r\nexport function LSX<R = SxToken>(lsxConf: LsxConfig): SExpressionTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config) as any;\r\n}\r\n\r\n\r\n\r\nexport function LSX_async<R = SxToken>(lsxConf: LsxConfig): SExpressionAsyncTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config) as any;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport type SxMacro = (state: SxParserState, name: string) => (list: SxToken[]) => SxToken;\r\n\r\nexport interface SxMacroInfo {\r\n    name: string;\r\n    fn: SxMacro;\r\n\r\n    // TODO: overloading\r\n    // formalArgs?: SxToken[];\r\n    // next?: SxMacroInfo;\r\n}\r\n\r\n\r\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\r\n\r\nexport interface SxFuncInfo {\r\n    name: string;\r\n    fn: SxFunc;\r\n\r\n    // TODO: overloading\r\n    // formalArgs?: SxToken[];\r\n    // next?: SxFuncInfo;\r\n}\r\n\r\n\r\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\r\n\r\nexport interface SxSymbolInfo {\r\n    name: string;\r\n    fn: SxSymbolResolver;\r\n}\r\n\r\n\r\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\r\n\r\nexport interface SxScope {\r\n    isBlockLocal: boolean;\r\n    scope: any;           // { [s: string]: any; };\r\n    capturedScopes?: CapturedScopes;\r\n}\r\n\r\n\r\nexport interface SxReservedNames {\r\n    eval: string;\r\n    quote: string;\r\n    backquote: string;\r\n    unquote: string;\r\n    spread: string;\r\n    splice: string;\r\n\r\n    car: string;\r\n    cdr: string;\r\n    cons: string;\r\n    atom: string;\r\n    eq: string;\r\n    list: string;\r\n\r\n    let: string;\r\n    lambda: string;\r\n    self: string;\r\n    defun: string;\r\n\r\n    if: string;\r\n    cond: string;\r\n\r\n    while: string;\r\n    doWhile: string;\r\n    until: string;\r\n    doUntil: string;\r\n\r\n    get: string;\r\n    defvar: string;\r\n    setq: string;\r\n    set: string;\r\n    call: string;\r\n\r\n    not: string;\r\n    and: string;\r\n    or: string;\r\n\r\n    isSymbol: string;\r\n    gensym: string;\r\n    raise: string;\r\n    catch: string;\r\n\r\n    Template: string;\r\n}\r\n\r\nexport interface SxParserConfig {\r\n    raiseOnUnresolvedSymbol: boolean;\r\n    enableEvaluate: boolean;\r\n    enableHereDoc: boolean;\r\n    enableSpread: boolean;\r\n    enableSplice: boolean;\r\n    enableShorthands: boolean;\r\n    enableVerbatimStringLiteral: boolean;\r\n    enableTailCallOptimization: boolean;\r\n    stripComments: boolean;\r\n    wrapExternalValue: boolean;\r\n    reservedNames: SxReservedNames;\r\n    returnMultipleRoot: boolean;\r\n    maxEvalCount: number;\r\n\r\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\r\n    JsxFragment?: any;\r\n\r\n    funcs: SxFuncInfo[];\r\n    macros: SxMacroInfo[];\r\n    symbols: SxSymbolInfo[];\r\n\r\n    funcSymbolResolverFallback?: SxFunc;\r\n    valueSymbolResolverFallback?: SxSymbolResolver;\r\n}\r\n\r\nexport interface SxParserState {\r\n    strings: TemplateStringsArray | string[];\r\n    values: any[];\r\n\r\n    index: number;\r\n    pos: number;\r\n    line: number;\r\n\r\n    evalCount: number;\r\n\r\n    scopes: SxScope[];\r\n\r\n    macroMap: Map<string, SxMacroInfo>;\r\n    funcMap: Map<string, SxFuncInfo>;\r\n    symbolMap: Map<string, SxSymbolInfo>;\r\n\r\n    config: SxParserConfig;\r\n}\r\n\r\nexport interface SxEof {\r\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\r\n    eofSeq?: string;\r\n}\r\n\r\nexport interface SxExternalValue {\r\n    value: any;\r\n}\r\n\r\nexport interface SxSymbol {\r\n    'symbol': string;\r\n}\r\n\r\nexport interface SxComment {\r\n    comment: string;\r\n}\r\n\r\nexport interface SxDottedPair {\r\n    car: SxToken; // left\r\n    cdr: SxToken; // right\r\n}\r\n\r\nexport interface SxDottedFragment {\r\n    dotted: SxToken; // right\r\n}\r\n\r\n\r\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\r\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\r\nexport type SxChar = string | SxEof | SxExternalValue;\r\nexport type SxAtom = SxSymbol | string | number | boolean | null;\r\nexport type SxList = SxDottedPair | SxAtom[];\r\n\r\n\r\n\r\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\r\n\r\n\r\nexport interface CompilerContext {\r\n    _$_vars: any[];\r\n    varsCount: number;\r\n    varNames: Map<string, string>;\r\n    varNamesCount: number;\r\n    varDefs: string;\r\n    ops: Map<string, CompilerOperator>;\r\n    makeScope: (scoped: () => void) => void;\r\n    compileToken: (body: any[], i: number) => string;\r\n}\r\n\r\n\r\nexport interface LsxConfig {\r\n    jsx: (comp: any, props: any, ...children: any[]) => any;\r\n    jsxFlagment: any;\r\n    components: object;\r\n}\r\n\r\n\r\nexport class FatalError extends Error {\r\n    public constructor(message?: string | undefined) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n\r\nexport class MaxEvaluationCountError extends FatalError {\r\n    public constructor() {\r\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\r\n    }\r\n}\r\n\r\n\r\nexport class ScriptTerminationError extends FatalError {\r\n    public constructor(where: string) {\r\n        super(`[SX] ${where}: Unexpected termination of script.`);\r\n    }\r\n}\r\n\r\n\r\nexport interface SExpressionRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\r\n}\r\n\r\n\r\nexport interface SExpressionTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    evaluateAST: (ast: SxToken[]) => R;\r\n    repl: () => SExpressionRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\r\n    repl: () => SExpressionAsyncRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\r\n}\r\n"],"sourceRoot":""}