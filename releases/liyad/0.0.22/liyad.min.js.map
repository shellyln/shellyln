{"version":3,"sources":["webpack://liyad/webpack/universalModuleDefinition","webpack://liyad/webpack/bootstrap","webpack://liyad/./src/s-exp/errors.ts","webpack://liyad/./src/s-exp/evaluate.ts","webpack://liyad/./src/s-exp/types.ts","webpack://liyad/./src/s-exp/compile.ops/helpers.ts","webpack://liyad/./src/s-exp/compile.ts","webpack://liyad/./src/s-exp/compile.ops/index.ts","webpack://liyad/./src/s-exp/parser.ts","webpack://liyad/./src/s-exp/operators/core/core.fn.ts","webpack://liyad/./src/s-exp/operators/core/core.operator.ts","webpack://liyad/./src/s-exp/operators/core/core.macro.ts","webpack://liyad/./src/s-exp/operators/core/core.symbol.ts","webpack://liyad/./src/s-exp/operators/core/index.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.fn.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.operator.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.macro.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.symbol.ts","webpack://liyad/./src/s-exp/operators/arithmetic/index.ts","webpack://liyad/./src/lib/data.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.fn.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.operator.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.macro.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.symbol.ts","webpack://liyad/./src/s-exp/operators/sequence/index.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.fn.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.operator.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.macro.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.symbol.ts","webpack://liyad/./src/s-exp/operators/jsx/index.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.fn.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.operator.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.macro.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.symbol.ts","webpack://liyad/./src/s-exp/operators/concurrent/index.ts","webpack://liyad/./src/s-exp/s-expression.ts","webpack://liyad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","setEvaluationCount","checkParamsLength","_types__WEBPACK_IMPORTED_MODULE_0__","state","evalCount","config","maxEvalCount","args","min","max","length","Error","toNumber","resolveSplice","resolveMacro","resolveValueSymbolScope","resolveValueSymbol","collectCapturedVariables","getCapturedScopes","installScope","uninstallScope","getScope","getGlobalScope","optimizeTailCall","evaluate","_errors__WEBPACK_IMPORTED_MODULE_1__","x","NaN","Number","enableSplice","Array","isArray","reservedNames","splice","slice","concat","macroInfo","macroMap","symbol","fn","nullIfNotDefined","scopes","localScope","scope","capturedScopes","isBlockLocal","globalScope","symInfo","symbolMap","valueSymbolResolverFallback","raiseOnUnresolvedSymbol","names","a","unshift","assign","push","pop","formalArgs","fnBody","front","tail","if","self","varBaseName","tempVarsSyms","map","idx","until","let","set","sym","quote","eval","sprs","spread","reverse","funcInfo","funcMap","v","funcSymbolResolverFallback","resolveFunctionSymbol","JSON","stringify","wrapExternalValue","car","cdr","dotted","wrapByUnquote","unquote","isSymbol","FatalError","MaxEvaluationCountError","ScriptTerminationError","[object Object]","message","super","where","applyMacros","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","_evaluate__WEBPACK_IMPORTED_MODULE_1__","_errors__WEBPACK_IMPORTED_MODULE_2__","tok","compileLambda","_compile_ops_helpers__WEBPACK_IMPORTED_MODULE_2__","_compile_ops__WEBPACK_IMPORTED_MODULE_3__","compileCore","lastIsSpread","_$_vars","compileValue","b","compFnBody","String","ctx","varNames","has","varsCount","compileToken","body","ops","join","arr","Map","varNamesCount","varDefs","makeScope","scoped","varNamesCopy","entries","enableTailCallOptimization","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","code","registerOperators","_helpers__WEBPACK_IMPORTED_MODULE_2__","quoted","vName","symName","regToVars","isEOF","ch","isSpace","trim","isNumberFirstChar","test","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","line","index","pos","strings","getChar","virtualEof","disableEscape","eof","values","split","eofSeq","ch1","ch2","fromCodePoint","parseInt","lookAheads","chs","lookAhead","skipWhitespaces","parseNumber","parseSymbol","enableShorthands","match","ws","parseStringOrComment","valuesStartSeq","valuesStopChar","eofSeqs","types","parseList","parseString","parseHereDoc","attrs","q","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","aheads","enableSpread","enableHereDoc","isHereDoc","Template","ahs","enableVerbatimStringLiteral","listStopChar","initialList","stripComments","parse","$car","errors","$$first","$cdr","$cons","$$firstAndSecond","$first","$second","$$second","$last","$rest","$firstAndSecond","$atom","$eq","$notEq","$list","$__scope","returnMultiple","kv","kvSym","xSym","$__lambda","fa","actualArgs","$comp$__lambda","compile","$apply","apply","$raise","$pipe","$__let","$__set","path","subst","inprog","last","$boolean","Boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$isSymbol","$isList","$isString","$isNumber","$isNaN","isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","$objectAssign","$jsonStringify","$jsonParse","$now","Date","now","$datetimeFromIso","dt","getTime","$datetime","year","padStart","$datetimeLc","$datetimeToIsoString","toISOString","$datetimeToComponents","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getUTCDay","$datetimeToComponentsLc","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","getDay","$match","RegExp","exec","$consoleLog","console","log","$consoleError","error","$consoleTrace","trace","$consoleTime","time","$consoleTimeEnd","timeEnd","$consoleTimeLog","timeLog","core_operator","st","nm","info","Function","e","list","tempVarSym","keyName","core_macro","core_symbol","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","install","funcs","macros","symbols","$bitLShift","$bitSRShift","$bitURShift","$bitNot","$bitAnd","reduce","$bitOr","$bitXor","$add","$sub","$mul","$sup","Math","pow","$div","$mod","$max","$min","$avg","$floor","floor","$ceil","ceil","$round","round","$abs","abs","$sign","sign","arithmetic_operator","arithmetic_macro","arithmetic_symbol","arithmetic_install","Query","data","this","condition","y","desc","sort","start","groupBy","array","w","first","intermediate","single","filter","query","$length","$trim","$trimHead","trimLeft","$trimTail","trimRight","$replaceAll","$split","$join","$concat","$slice","$top","$tail","$push","$pop","$__at","$reverse","$reverseDestructive","$find","find","$filter","$map","$reduce","$reduceFromTail","reduceRight","$sort","$sortDestructive","$groupEvery","groupEvery","select","$groupBy","$orderBy","orderBy","$where","sequence_operator","stop","step","from","sequence_macro","sequence_symbol","sequence_install","$jsxProps","styles","matched","classes","z","cs","forEach","fragment","__html","__text","getJsxTagsParams","children","props","$jsxStandardTag","jsx","$jsxComponentTag","component","jsx_operator","jsx_macro","jsx_symbol","jsx_install","lsxConf","components","jsxFlagment","JsxFragment","$__letAsync","promise","then","Promise","resolve","reject","$__setAsync","$then","$resolveAll","promises","all","$resolveAny","invert","res","rej","ps","firstOf","$resolvePipe","lambdas","$resolveFork","resolvers","rejectors","pa","lp","catch","f","concurrent_operator","concurrent_macro","concurrent_symbol","concurrent_install","defaultReservedNames","cons","atom","eq","lambda","defun","cond","while","doWhile","doUntil","defvar","setq","not","and","or","defaultConfig","enableEvaluate","returnMultipleRoot","initState","globals","resetState","SExpression","conf","startup","evaluateAST","ast","repl","fRepl","sync","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","installer","SExpressionAsync","__awaiter","stat","execSync","S","L","LS","lisp","L_async","LS_async","lisp_async","LM","LM_async","LSX","LSX_async","builtinOperators","builtinMacros","builtinSymbols","core","arithmetic","sequence","concurrent"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,MAAAD,IAEAD,EAAA,MAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,kCClFAjC,EAAAQ,EAAA0B,EAAA,sBAAAC,IAAAnC,EAAAQ,EAAA0B,EAAA,sBAAAE,IAAA,IAAAC,EAAArC,EAAA,GAUM,SAAUmC,EAAmBG,GAE/B,GADAA,EAAMC,YACFD,EAAME,OAAOC,cAAgBH,EAAME,OAAOC,aAAeH,EAAMC,UAC/D,MAAM,IAAIF,EAAA,EAKZ,SAAUD,EAAkB3B,EAAciC,EAAsBC,EAAaC,GAC/E,GAAIF,EAAKG,OAASF,EACd,MAAM,IAAIG,cAAcrC,yCAA4CkC,aAAeD,EAAKG,WAE5F,GAAID,GAAOA,EAAMF,EAAKG,OAClB,MAAM,IAAIC,cAAcrC,yCAA4CmC,aAAeF,EAAKG,WAE5F,OAAO,iCCzBX7C,EAAAQ,EAAA0B,EAAA,sBAAAa,IAAA/C,EAAAQ,EAAA0B,EAAA,sBAAAc,IAAAhD,EAAAQ,EAAA0B,EAAA,sBAAAe,IAAAjD,EAAAQ,EAAA0B,EAAA,sBAAAgB,IAAAlD,EAAAQ,EAAA0B,EAAA,sBAAAiB,IAAAnD,EAAAQ,EAAA0B,EAAA,sBAAAkB,IAAApD,EAAAQ,EAAA0B,EAAA,sBAAAmB,IAAArD,EAAAQ,EAAA0B,EAAA,sBAAAoB,IAAAtD,EAAAQ,EAAA0B,EAAA,sBAAAqB,IAAAvD,EAAAQ,EAAA0B,EAAA,sBAAAsB,IAAAxD,EAAAQ,EAAA0B,EAAA,sBAAAuB,IAAAzD,EAAAQ,EAAA0B,EAAA,sBAAAwB,IAAA1D,EAAAQ,EAAA0B,EAAA,sBAAAyB,IAAA,IAAAtB,EAAArC,EAAA,GAAA4D,EAAA5D,EAAA,GAkBM,SAAU+C,EAASc,GACrB,cAAeA,GACf,IAAK,SAAU,IAAK,SAAU,IAAK,WAC/B,OAAOC,IACX,QACI,OAAOC,OAAOF,IAKhB,SAAUb,EAAcV,EAAsBtB,GAChD,GAAIsB,EAAME,OAAOwB,aACb,IAAK,IAAI9D,EAAIc,EAAE6B,OAAS,EAAG3C,GAAK,EAAGA,IAAK,CAClB+D,MAAMC,QAAQlD,EAAEd,KAAOU,OAAAyB,EAAA,EAAAzB,CAAUI,EAAEd,GAAiB,GAAIoC,EAAME,OAAO2B,cAAcC,UAEjGpD,EAAIA,EAAEqD,MAAM,EAAGnE,GAAGoE,OAAQtD,EAAEd,GAAiB,GAAIc,EAAEqD,MAAMnE,EAAI,KAIzE,OAAOc,EAIL,SAAUiC,EAAaX,EAAsBuB,GAC/C,MAAMU,EAAYjC,EAAMkC,SAASzD,IAAI8C,EAAEY,QACvC,QAAIF,GACOA,EAAUG,GAAGpC,EAAOuB,EAAEY,QA8B/B,SAAUvB,EAAwBZ,EAAsBuB,EAAac,GACvE,IAAK,IAAIzE,EAAIoC,EAAMsC,OAAO/B,OAAS,EAAG3C,EAAI,EAAGA,IAAK,CAC9C,MAAM2E,EAAsBvC,EAAMsC,OAAO1E,GACzC,GAAI2E,GAAcjE,OAAOkB,UAAUC,eAAe1B,KAAKwE,EAAWC,MAAOjB,EAAEY,QACvE,OAAOI,EAAWC,MAEtB,GAAID,EAAWE,gBACXnE,OAAOkB,UAAUC,eAAe1B,KAAKwE,EAAWE,eAAgBlB,EAAEY,QAClE,OAAOI,EAAWE,eAAelB,EAAEY,QAEvC,IAAMI,EAAWG,aACb,MAGR,MAAMC,EAAcxB,EAAenB,GACnC,OAAI1B,OAAOkB,UAAUC,eAAe1B,KAAK4E,EAAYH,MAAOjB,EAAEY,QACnDQ,EAAYH,MAEhBH,EAAmB,KAAOnB,EAASlB,GAAOwC,MAI/C,SAAU3B,EAAmBb,EAAsBuB,GACrD,MAAMiB,EAAQ5B,EAAwBZ,EAAOuB,GAAG,GAChD,GAAIiB,EACA,OAAOA,EAAMjB,EAAEY,QAEnB,MAAMS,EAAU5C,EAAM6C,UAAUpE,IAAI8C,EAAEY,QACtC,GAAIS,EACA,OAAOA,EAAQR,GAAGpC,EAAOuB,EAAEY,QAE3B,GAAInC,EAAME,OAAO4C,4BACb,OAAO9C,EAAME,OAAO4C,4BAA4B9C,EAAOuB,EAAEY,QAE7D,GAAInC,EAAME,OAAO6C,wBACb,MAAM,IAAIvC,qDAAqDe,EAAEY,WAErE,OAAOZ,EAAEY,OAKX,SAAUrB,EAAyBd,EAAsBgD,GAC3D,MAAMP,KACN,IAAK,MAAMpD,KAAK2D,EAAO,CACnB,MAAMR,EAAQ5B,EAAwBZ,EAAOX,GAAG,GAChD,GAAc,OAAVmD,EACA,MAAM,IAAIhC,2DAA2DnB,KAEzEoD,EAAepD,EAAE8C,QAAUK,EAE/B,OAAOC,EAIL,SAAU1B,EAAkBf,GAC9B,MAAMiD,KACN,IAAK,IAAIrF,EAAIoC,EAAMsC,OAAO/B,OAAS,EAAG3C,EAAI,EAAGA,IAAK,CAC9C,MAAM2E,EAAsBvC,EAAMsC,OAAO1E,GAIzC,GAHI2E,EAAWE,gBACXQ,EAAEC,QAAQX,EAAWE,iBAEnBF,EAAWG,aACb,MAGR,OAAOO,EAAE1C,OAAS,EAAIjC,OAAO6E,aAAcF,QAAK,EAI9C,SAAUjC,EAAahB,EAAsBwC,EAAYE,EAAuBD,GAClFzC,EAAMsC,OAAOc,MAAMV,eAAcF,QAAOC,mBAItC,SAAUxB,EAAejB,GAC3B,GAAIA,EAAMsC,OAAO/B,OAAS,EACtB,MAAM,IAAIC,MAAM,6CAEpB,OAAOR,EAAMsC,OAAOe,MAIlB,SAAUnC,EAASlB,GACrB,OAAOA,EAAMsC,OAAOtC,EAAMsC,OAAO/B,OAAS,GAIxC,SAAUY,EAAenB,GAC3B,OAAOA,EAAMsC,OAAO,GAIlB,SAAUlB,EAAiBpB,EAAsBsD,EAAwBC,GAI3E,GAAI5B,MAAMC,QAAQ2B,EAAOA,EAAOhD,OAAS,IAAK,CAC1C,MAAMiD,EAAQD,EAAOxB,MAAM,EAAGwB,EAAOhD,OAAS,GACxCkD,EAAOF,EAAOA,EAAOhD,OAAS,GACpC,GAAIkD,GAAQA,EAAK,GAAGtB,SAAWnC,EAAME,OAAO2B,cAAc6B,IAElDD,EAAK,GAAG,GAAGtB,SAAWnC,EAAME,OAAO2B,cAAc8B,KAAM,CAuBvD,MAAMC,qBAAiC5D,EAAMC,iBACvC4D,EAAeP,EAAWQ,IAAI,CAACb,EAAGc,MAAU5B,UAAWyB,OAAiBG,KAAOd,EAAEd,YAEvF,SACMA,OAAQnC,EAAME,OAAO2B,cAAcmC,OAAQP,EAAK,KAC5CtB,OAAQnC,EAAME,OAAO2B,cAAcoC,SAAUJ,MACxCL,KACEC,EAAK,GAAG1B,MAAM,GAAa+B,IAAI,CAACvC,EAAQwC,MACvC5B,OAAQnC,EAAME,OAAO2B,cAAcqC,KAAML,EAAaE,GAAMxC,OAC9DsC,EAAaC,IAAI,CAACvC,EAAGwC,MACnB5B,OAAQnC,EAAME,OAAO2B,cAAcqC,KAAMZ,EAAWS,GAAMxC,SAGrEiC,EACHC,EAAK,KAKrB,OAAOF,EAIL,SAAUlC,EAASrB,EAAsBuB,GAG3C,GAFAjD,OAAAgD,EAAA,EAAAhD,CAAmB0B,GAET,OAANuB,QAAoB,IAANA,EACd,OAAOA,EAEX,IAAI7C,EAAa6C,EAEjB,KACQI,MAAMC,QAAQlD,IADb,CACiB,CAClB,GAAiB,IAAbA,EAAE6B,OACF,OAAO7B,EAGXA,EAAIgC,EAAcV,EAAOtB,GAEzB,MAAMyF,EAAM7F,OAAAyB,EAAA,EAAAzB,CAASI,EAAE,IACvB,IAAIyF,EASA,MATK,CACL,MAAMnG,EAAI2C,EAAaX,EAAOmE,GAE9B,IAAInG,EAGA,MAFAU,EAAIV,EAAEU,IAWlBJ,OAAAgD,EAAA,EAAAhD,CAAmB0B,GAGvB,GAAI2B,MAAMC,QAAQlD,IAEd,GAAI,GADJA,EAAIA,EAAEqD,MAAM,IACFxB,OAAQ,CACd,MAAM4D,EAAM7F,OAAAyB,EAAA,EAAAzB,CAASI,EAAE,IACvB,GAAIyF,EAAK,CACL,GAAIA,EAAIhC,SAAWnC,EAAME,OAAO2B,cAAcuC,MAC1C,OAAO1F,EAAEqD,MAAM,EAAG,GAAG,GAEzB,GAAIoC,EAAIhC,SAAWnC,EAAME,OAAO2B,cAAcwC,KAC1C,OAAOhD,EAASrB,EAAOtB,EAAE,IAIjC,MAAM4F,KACN,IAAK,IAAI1G,EAAI,EAAGA,EAAIc,EAAE6B,OAAQ3C,IAAK,CAE/B,GADe+D,MAAMC,QAAQlD,EAAEd,KAAOU,OAAAyB,EAAA,EAAAzB,CAAUI,EAAEd,GAAiB,GAAIoC,EAAME,OAAO2B,cAAc0C,QACtF,CACRD,EAAKlB,KAAKxF,GACV,MAAMqF,EAAI5B,EAASrB,EAAQtB,EAAEd,GAAiB,IAC9Cc,EAAEd,GAAK+D,MAAMC,QAAQqB,GAAKA,GAAKA,QAE/BvE,EAAEd,GAAKyD,EAASrB,EAAOtB,EAAEd,IAGjC,IAAK,MAAMA,KAAK0G,EAAKE,UACjB9F,EAAKA,EAAgBqD,MAAM,EAAGnE,GAAGoE,OAAOtD,EAAEd,GAAIc,EAAEqD,MAAMnE,EAAI,IAG9D,IAAIwE,EASJ,GAAkB,mBAPdA,EADgB,mBAAT1D,EAAE,GACJA,EAAE,GACAyF,EA7OjB,SAAgCnE,EAAsBuB,GACxD,GAAiB,mBAANA,EACP,OAAOA,EAEX,MAAMkD,EAAWzE,EAAM0E,QAAQjG,IAAI8C,EAAEY,QACrC,GAAIsC,EACA,OAAOA,EAASrC,GAAGpC,EAAOuB,EAAEY,QACzB,CACH,MAAMwC,EAAI9D,EAAmBb,EAAOuB,GACpC,GAAiB,mBAANoD,EACP,OAAOA,EAEX,GAAI3E,EAAME,OAAO0E,2BACb,OAAO5E,EAAME,OAAO0E,2BAA2B5E,EAAOuB,EAAEY,QAE5D,GAAInC,EAAME,OAAO6C,wBACb,MAAM,IAAIvC,wDAAwDe,EAAEY,WAExE,OAAOZ,EAAEY,QA4NI0C,CAAsB7E,EAAOmE,GAE7B9C,EAASrB,EAAOtB,EAAE,KAMvB,MAAM,IAAI8B,8DAA8DsE,KAAKC,UAAUrG,OAFvFA,EAAK0D,KAAe1D,EAAEqD,MAAM,UAKjC,GAAI/B,EAAME,OAAO8E,mBAAqB1G,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,SACjFA,EAAKA,EAAsBG,WACxB,GAAIP,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,UAC/CA,EAAImC,EAAmBb,EAAOtB,QAC3B,GAAIJ,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,OAAQ,CACvD,MAAMuG,EAAM5D,EAASrB,EAAQtB,EAAmBuG,KAC1CC,EAAM7D,EAASrB,EAAQtB,EAAmBwG,KAChD,GAAIvD,MAAMC,QAAQsD,GAAM,CACpB,MAAMjC,EAAKiC,EAAcnD,MAAM,GAC/BkB,EAAEC,QAAQ+B,GACVvG,EAAIuE,OAEJvE,GAAMuG,MAAKC,YAER5G,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,UAC/CA,GACI2C,EAASrB,EAAQtB,EAAuByG,SAErC7G,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,aAC/CA,MAGJ,OAAOA,iCC9IL,SAAU0F,EAAMpE,EAAsBuB,GACxC,QAASY,OAAQnC,EAAME,OAAO2B,cAAcuC,OAAQ7C,GAelD,SAAU6D,EAAcpF,EAAsBuB,GAChD,QAASY,OAAQnC,EAAME,OAAO2B,cAAcwD,SAAU9D,GAepD,SAAUgD,EAAOvE,EAAsBuB,GACzC,QAASY,OAAQnC,EAAME,OAAO2B,cAAc0C,QAAShD,GAInD,SAAU+D,EAAS/D,EAAQpD,GAC7B,OAAIoD,GAAkB,iBAANA,GAAkBjD,OAAOkB,UAAUC,eAAe1B,KAAKwD,EAAG,eACzD,IAATpD,EACOoD,EAAEY,SAAWhE,EAAOoD,EAAI,KAExBA,EAGR,KA7CX7D,EAAAQ,EAAA0B,EAAA,sBAAAwE,IAAA1G,EAAAQ,EAAA0B,EAAA,sBAAAwF,IAAA1H,EAAAQ,EAAA0B,EAAA,sBAAA2E,IAAA7G,EAAAQ,EAAA0B,EAAA,sBAAA0F,IAAA5H,EAAAQ,EAAA0B,EAAA,sBAAA2F,IAAA7H,EAAAQ,EAAA0B,EAAA,sBAAA4F,IAAA9H,EAAAQ,EAAA0B,EAAA,sBAAA6F,UAiDaF,UAAmB/E,MAC5BkF,YAAmBC,GACfC,MAAMD,UAKDH,UAAgCD,EACzCG,cACIE,MAAM,6EAKDH,UAA+BF,EACxCG,YAAmBG,GACfD,cAAcC,wECrPtBnI,EAAAQ,EAAA0B,EAAA,sBAAAkG,IAAApI,EAAAQ,EAAA0B,EAAA,sBAAAmG,IAAArI,EAAAQ,EAAA0B,EAAA,sBAAAoG,IAAAtI,EAAAQ,EAAA0B,EAAA,sBAAAqG,IAAAvI,EAAAQ,EAAA0B,EAAA,sBAAAsG,IAAA,IAAAnG,EAAArC,EAAA,GAAAyI,EAAAzI,EAAA,GAAA0I,EAAA1I,EAAA,GAgBM,SAAUoI,EAAY9F,EAAsBqG,GAC9C,IAAI3H,EAAa2H,EACjB,KACQ1E,MAAMC,QAAQlD,IADb,CACiB,CAClB,GAAiB,IAAbA,EAAE6B,OACF,MAEJ7B,EAAIJ,OAAA6H,EAAA,EAAA7H,CAAc0B,EAAOtB,GACzB,MAAMyF,EAAM7F,OAAAyB,EAAA,EAAAzB,CAASI,EAAE,IACvB,IAAIyF,EAQA,MARK,CACL,MAAMnG,EAAIM,OAAA6H,EAAA,EAAA7H,CAAa0B,EAAOmE,GAC9B,IAAInG,EAGA,MAFAU,EAAIV,EAAEU,IAUlBJ,OAAA8H,EAAA,EAAA9H,CAAmB0B,GAEvB,OAAOtB,EAIL,SAAUqH,EAAW/F,EAAsBqG,GAC7C,IAAO1E,MAAMC,QAAQyE,KAAQ/H,OAAAyB,EAAA,EAAAzB,CAAU+H,EAAY,GAAIrG,EAAME,OAAO2B,cAAcuC,OAC9E,MAAM,IAAI5D,MAAM,yCAEpB,OAAQ6F,EAAY,GAIlB,SAAUL,EAAiBhG,EAAsBqG,GACnD,OAAI1E,MAAMC,QAAQyE,IAAQ/H,OAAAyB,EAAA,EAAAzB,CAAU+H,EAAY,GAAIrG,EAAME,OAAO2B,cAAcuC,OACnEiC,EAAY,GAEbA,EAKT,SAAUJ,EAAsBjG,GAClC,OAAQ,WAAa,OAAO1B,OAAA6H,EAAA,EAAA7H,CAAS0B,IAInC,SAAUkG,EAA2BlG,EAAsB7B,GAC7D,OAAQ,WAAY,OAAOG,OAAA6H,EAAA,EAAA7H,CAAmB0B,GAAQmC,OAAQhE,6ECnElET,oBAAAQ,EAAA0B,oBAAA,sBAAA0G,gBAAA,IAAAvG,oCAAArC,oBAAA,GAAAyI,uCAAAzI,oBAAA,GAAA6I,kDAAA7I,oBAAA,GAAA8I,0CAAA9I,oBAAA,GAsBA,SAAS+I,YAAYzG,EAAsBsD,EAAwBoD,EAAuBnD,EAAeoD,GAYrG,SAASC,EAAaC,GAClB,IAAIC,EAAa,GACjB,GAAU,OAAND,EACAC,GAAc,cACX,QAAU,IAAND,EACPC,GAAc,gBACX,cAAeD,GACtB,IAAK,UAAW,IAAK,SACjBC,OAAkBC,OAAOF,MACzB,MACJ,IAAK,SACD,GAAIvI,OAAAyB,oCAAA,EAAAzB,CAASuI,GAAI,CACb,MAAM1C,EAAM0C,EACRG,EAAIC,SAASC,IAAI/C,EAAIhC,QACrB2E,OAAkBE,EAAIC,SAASxI,IAAI0F,EAAIhC,YAEvCwE,EAAQK,EAAIG,WAAahD,EAAIhC,OAC7B2E,eAA0BC,OAAOC,EAAIG,kBAEzC,MAGR,QACIR,EAAQK,EAAIG,WAAaN,EACzBC,eAA0BC,OAAOC,EAAIG,iBAGzC,OAAOL,EAIX,SAASM,EAAaC,EAAazJ,GAC/B,IAAIkJ,EAAa,GACjB,MAAMD,EAAIQ,EAAKzJ,GACf,GAAI+D,MAAMC,QAAQiF,GACd,GAAI,EAAIA,EAAEtG,OAAQ,CACd,MAAM7B,EAAaJ,OAAAiI,kDAAA,EAAAjI,CAAY0B,EAAO6G,GACtC,GAAIlF,MAAMC,QAAQlD,GACd,GAAI,EAAIA,EAAE6B,OACN,GAAIjC,OAAAyB,oCAAA,EAAAzB,CAASI,EAAE,IAAK,CAChB,MAAMyF,EAAMzF,EAAE,GACR0B,EAAO1B,EAAEqD,MAAM,GACjBuF,EAAIJ,IAAI/C,EAAIhC,QACZ2E,GAAeQ,EAAI7I,IAAI0F,EAAIhC,OAAZmF,CAAyC5I,EAAG0B,GAExC,YAAf+D,EAAIhC,OACJ2E,UACI1G,EAAK0D,IAAKvC,GAAM6F,GAAc9I,OAAAiI,kDAAA,EAAAjI,CAAiB0B,EAAOuB,IAAK,IAAIgG,KAAK,QACjEvH,EAAM0E,QAAQwC,IAAI/C,EAAIhC,SAC7BwE,EAAQK,EAAIG,WAAcnH,EAAM0E,QAAQjG,IAAI0F,EAAIhC,QAAuBC,GAAGpC,EAAO,IACjF8G,gBAA2BC,OAAOC,EAAIG,kBAClC/G,EAAK0D,IAAKvC,GAAM6F,GAAc9I,OAAAiI,kDAAA,EAAAjI,CAAiB0B,EAAOuB,IAAK,IAAIgG,KAAK,UACjEP,EAAIC,SAASC,IAAI/C,EAAIhC,QAC5B2E,OAAkBC,OAAOC,EAAIC,SAASxI,IAAI0F,EAAIhC,aAC1C/B,EAAK0D,IAAKvC,GAAM6F,GAAc9I,OAAAiI,kDAAA,EAAAjI,CAAiB0B,EAAOuB,IAAK,IAAIgG,KAAK,SAExEZ,EAAQK,EAAIG,WAAa7I,OAAAiI,kDAAA,EAAAjI,CAA2B0B,EAAOmE,EAAIhC,QAC/D2E,gBAA2BC,OAAOC,EAAIG,oBAClC/G,EAAK0D,IAAKvC,GAAM6F,GAAc9I,OAAAiI,kDAAA,EAAAjI,CAAiB0B,EAAOuB,IAAK,IAAIgG,KAAK,eAIhF,cAAe7I,EAAE,IACjB,IAAK,WACDiI,EAAQK,EAAIG,WAAazI,EAAE,GAC3BoI,gBAA2BC,OAAOC,EAAIG,kBAClCzI,EAAEqD,MAAM,GAAG+B,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,GAAc9I,OAAAiI,kDAAA,EAAAjI,CAAiB0B,EAAOuB,IAAK,IAAIgG,KAAK,SACxF,MACJ,QACI,MAAM,IAAI/G,kEAAkEsE,KAAKC,UAAUrG,EAAE,aAIrGoI,GAAc,YAGlBA,GAAcF,EAAaC,QAG/BC,GAAc,YAGlBA,GAAcF,EAAaC,GAE/B,OAAOC,EAIX,MAAME,GACFL,UACAQ,UAAW,EACXF,SAAU,IAAIQ,IACdC,cAAe,EACfC,QAAS,UACTL,IAAK,IAAIG,IACTG,UAzGJ,SAAmBC,GACf,MAAMC,EAAe,IAAIL,IACzB,IAAK,MAAMlG,KAAKyF,EAAIC,SAASc,UACzBD,EAAa5D,IAAI3C,EAAE,GAAIA,EAAE,IAE7BsG,IACAb,EAAIC,SAAWa,GAoGfV,gBAGJ9I,OAAAkI,0CAAA,EAAAlI,CAAkB0B,EAAOgH,GACzB,MAAMM,EAAMN,EAAIM,IAEZtH,EAAME,OAAO8H,6BACbzE,EAASjF,OAAA6H,uCAAA,EAAA7H,CAAiB0B,EAAOsD,EAAYC,IAGjD,MAAMd,EAAiBnE,OAAA6H,uCAAA,EAAA7H,CAAkB0B,GACzC,GAAIyC,EACA,IAAK,MAAMlB,KAAKkB,EACRnE,OAAOmB,eAAe1B,KAAK0E,EAAgBlB,KAC3CoF,EAAQK,EAAIG,aAAe5F,EAC3BoF,EAAQK,EAAIG,WAAa1E,EAAelB,GACxCyF,EAAIC,SAAS/C,IAAI3C,cAAewF,OAAOC,EAAIG,uBAAuBJ,OAAOC,EAAIG,UAAY,SACzFH,EAAIG,aAKhB,MAAMc,KAAoB3E,EAAWQ,IAAI,CAACvC,EAAG3D,KACzCoJ,EAAIC,SAAS/C,IAAIZ,EAAW1F,GAAGuE,OAAQ,IAAMvE,MAClC8I,GAAgB9I,IAAM0F,EAAW/C,OAAS,EAAK,MAAQ,MAAM3C,MACzE2J,KAAK,OAEFW,YAA2B3E,EAAOO,IAAI,CAACvC,EAAG3D,IAAMwJ,EAAa7D,EAAQ3F,IAAI2J,KAAK,QACpF,mBAAoBU,eAA4BjB,EAAIW,UAAUO,MAKlE,SAASC,mBAAmBC,SAAyBzB,QAAgB0B,MAGjE,OADA1B,QAAQ,GAAKtC,KAAKgE,MACX1B,QAAQ,GAIb,SAAUL,cAActG,EAAsBsD,EAAwBoD,EAAuBnD,GAE/F,MAAMoD,KACN,OAAOwB,mBAAmBnI,EAAO2G,EAASF,YAAYzG,EAAOsD,EAAYoD,EAAcnD,EAAQoD,mCC7KnGjJ,EAAAQ,EAAA0B,EAAA,sBAAA0I,IAAA,IAAAvI,EAAArC,EAAA,GAAA4D,EAAA5D,EAAA,GAAA6K,EAAA7K,EAAA,GAkBM,SAAU4K,EAAkBtI,EAAsBgH,GACpD,MAAML,QACFA,EADEW,IAEFA,EAFEM,UAGFA,EAHER,aAIFA,GACAJ,EAGJM,EAAIpD,IAAI,SAAU,SAASxF,EAAc0B,GACrC,IAAI0G,EAAa,GAGjB,OAFAH,EAAQK,EAAIG,WAAazI,EAAE,GAC3BoI,eAA0BC,OAAOC,EAAIG,mBAKzCG,EAAIpD,IAAI,QAAS,SAASxF,EAAc0B,GACpC,IAAI0G,EAAa,GAGjB,OAFAA,oBACI1G,EAAK0D,IAAIvC,GAAK6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAiB0B,EAAOuB,IAAK,IAAIgG,KAAK,WAK1ED,EAAIpD,IAAI,QAAS,SAASxF,EAAc0B,GAIpC,IAAI0G,EAAa,GAKjB,OAJAxI,OAAAgD,EAAA,EAAAhD,CAAkB,qBAAsB8B,EAAM,EAAG,GACjD0G,OAAkBM,EAAa1I,EAAG,OAC9B0I,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,KAAM,QACxC0I,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,KAAM,SAKhD4I,EAAIpD,IAAI,aAAc,SAASxF,EAAc0B,GAIzC,IAAI0G,EAAa,GAIjB,OAHAxI,OAAAgD,EAAA,EAAAhD,CAAkB,0BAA2B8B,EAAM,EAAG,GACtD0G,uBAAkCM,EAAa1I,EAAG,0BAC9C0I,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,KAAM,eAKhD4I,EAAIpD,IAAI,UAAW,SAASxF,EAAc0B,GAItC,IAAI0G,EAAa,GAEbxI,OAAAgD,EAAA,EAAAhD,CAAkB,uBAAwB8B,EAAM,GAChD0G,GAAc,IACd,IAAK,IAAIpH,EAAI,EAAGA,EAAIU,EAAKG,OAAQb,GAAK,EAClCoH,MAAiBM,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOI,EAAKV,KAAM,OACxD0H,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOI,EAAKV,EAAI,KAAM,QAEvDoH,GAAc,OACd,IAAK,IAAIpH,EAAI,EAAGA,EAAIU,EAAKG,OAAQb,GAAK,EAClCoH,GAAc,IAItB,OAFIA,GAAc,MAMtBQ,EAAIpD,IAAI,WAAY,SAASxF,EAAc0B,GAIvC,IAAI0G,EAAa,GAMjB,OALAxI,OAAAgD,EAAA,EAAAhD,CAAkB,wBAAyB8B,EAAM,GACjD0G,kCACIM,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,KAAM,aACxCA,EAAEqD,MAAM,GAAG+B,IAAKvC,GAAM6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOuB,IAAK,IAAIgG,KAAK,2BAM5ED,EAAIpD,IAAI,cAAe,SAASxF,EAAc0B,GAI1C,IAAI0G,EAAa,GAKjB,OAJAxI,OAAAgD,EAAA,EAAAhD,CAAkB,2BAA4B8B,EAAM,GACpD0G,qCACIpI,EAAEqD,MAAM,GAAG+B,IAAKvC,GAAM6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOuB,IAAK,IAAIgG,KAAK,eACpEH,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,KAAM,wBAKhD4I,EAAIpD,IAAI,WAAY,SAASxF,EAAc0B,GAIvC,IAAI0G,EAAa,GAMjB,OALAxI,OAAAgD,EAAA,EAAAhD,CAAkB,wBAAyB8B,EAAM,GACjD0G,mCACIM,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,KAAM,aACxCA,EAAEqD,MAAM,GAAG+B,IAAKvC,GAAM6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOuB,IAAK,IAAIgG,KAAK,2BAM5ED,EAAIpD,IAAI,cAAe,SAASxF,EAAc0B,GAI1C,IAAI0G,EAAa,GAKjB,OAJAxI,OAAAgD,EAAA,EAAAhD,CAAkB,2BAA4B8B,EAAM,GACpD0G,qCACIpI,EAAEqD,MAAM,GAAG+B,IAAKvC,GAAM6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOuB,IAAK,IAAIgG,KAAK,gBACpEH,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,KAAM,wBAKhD4I,EAAIpD,IAAI,YAAa,SAASxF,EAAc0B,GAIxC,IAAI0G,EAAa,GAEjB,GADAxI,OAAAgD,EAAA,EAAAhD,CAAkB,yBAA0B8B,EAAM,IAC5C9B,OAAAyB,EAAA,EAAAzB,CAAS8B,EAAK,IAChB,MAAM,IAAII,MAAM,yDASpB,OAPAoH,EAAU,KACN,MAAMzJ,EAAO,IAAM6I,EAAIU,gBACvBV,EAAIC,SAAS/C,IAAK9D,EAAK,GAAgB+B,OAAQhE,GAC/C2I,wCAAmD3I,OAAUA,UAAaA,cACtEO,EAAEqD,MAAM,GAAG+B,IAAKvC,GAAM6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOuB,IAAK,IAAIgG,KAAK,uBACjDH,EAAahH,EAAM,SAEvC0G,IAIXQ,EAAIpD,IAAI,SAAU,SAASxF,EAAc0B,GAIrC,IAAI0G,EAAa,GAEjB,GADAxI,OAAAgD,EAAA,EAAAhD,CAAkB,sBAAuB8B,EAAM,IACzC9B,OAAAyB,EAAA,EAAAzB,CAAS8B,EAAK,IAChB,MAAM,IAAII,MAAM,sDASpB,OAPAoH,EAAU,KACN,MAAMzJ,EAAO,IAAM6I,EAAIU,gBACvBV,EAAIC,SAAS/C,IAAK9D,EAAK,GAAgB+B,OAAQhE,GAC/C2I,0CAAqD3I,oBACjDO,EAAEqD,MAAM,GAAG+B,IAAKvC,GAAM6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOuB,IAAK,IAAIgG,KAAK,uBACjDH,EAAahH,EAAM,SAEvC0G,IAIXQ,EAAIpD,IAAI,WAAY,SAASxF,EAAc0B,GAIvC,IAAI0G,EAAa,GAIjB,GAHAxI,OAAAgD,EAAA,EAAAhD,CAAkB,wBAAyB8B,EAAM,IAG3CuB,MAAMC,QAAQlD,EAAE,IAClB,MAAM,IAAI8B,MAAM,uDA0BpB,OAxBAoH,EAAU,KACN,IAAK,MAAMrG,KAAKjD,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,IAAc,CAC9C,IAAIP,EAAO,GACX,GAAIwD,MAAMC,QAAQL,GAAI,CAClB,GAAIA,EAAEhB,OAAS,EACX,MAAM,IAAIC,MAAM,0DAEpB,IAAMlC,OAAAyB,EAAA,EAAAzB,CAASiD,EAAE,IACb,MAAM,IAAIf,MAAM,8DAEpBrC,EAAOoD,EAAE,GAAGY,OACZ2E,OAAkB,IAAME,EAAIU,iBAAiBN,EAAa7F,EAAG,UAC1D,CACH,IAAMjD,OAAAyB,EAAA,EAAAzB,CAASiD,GACX,MAAM,IAAIf,MAAM,2DAEpBrC,EAAOoD,EAAEY,OAEb6E,EAAIW,iBAAmBX,EAAIU,wBAC3BV,EAAIC,SAAS/C,IAAI3C,EAAEY,OAAQ,IAAM6E,EAAIU,iBAEzC,MAAM/H,KAAOjB,EAAEqD,MAAM,GAAG+B,IAAKvC,GAAM6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOuB,IAAK,IAAIgG,KAAK,OACjFT,GAAcpI,EAAE,OAASiB,SAAWA,OAEjCmH,IAIXQ,EAAIpD,IAAI,SAAU,SAASxF,EAAc0B,GAIrC,IAAI0G,EAAa,GAYjB,OAXAxI,OAAAgD,EAAA,EAAAhD,CAAkB,sBAAuB8B,EAAM,EAAG,GAClD0G,iBACIM,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,KAAM,aACxCsI,EAAIU,uBAAuBV,EAAIU,cAAgB,cAAcX,OAAOC,EAAIG,kBAC5ER,EAAQK,EAAIG,aAAe7I,OAAAiK,EAAA,EAAAjK,CAAsB0B,GACjD4H,EAAU,KACNZ,EAAIC,SAAS/C,IAAI,SAAU,IAAM8C,EAAIU,iBACrCV,EAAIC,SAAS/C,IAAI,UAAW,IAAM8C,EAAIU,iBACtCZ,MACIM,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,KAAM,aAEzCoI,IAIXQ,EAAIpD,IAAI,SAAU,SAASxF,EAAc0B,GAGrC,IAAI0G,EAAa,GAGjB,OAFAA,mBACIM,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAiB0B,EAAOtB,EAAE,KAAM,YAKtD4I,EAAIpD,IAAI,WAAY,SAASxF,EAAc0B,GAGvC,IAAI0G,EAAa,GAIjB,OAHAxI,OAAAgD,EAAA,EAAAhD,CAAkB,wBAAyB8B,EAAM,EAAG,GACpD0G,WAAsBM,EAAahH,EAAM,8DAM7CkH,EAAIpD,IAAI,SAAU,SAASxF,EAAc0B,GAGrC,IAAI0G,EAAa,GACjBxI,OAAAgD,EAAA,EAAAhD,CAAkB,sBAAuB8B,EAAM,GAC/C,MAAMoI,EAASlK,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,IAC7BP,EAAOG,OAAAyB,EAAA,EAAAzB,CAASkK,GAAUA,EAAOrG,OAA4B,iBAAXqG,EAAsBA,EAAS,KACvF,GAAoB,iBAATrK,EACP,MAAM,IAAIqC,4DAA4DsE,KAAKC,UAAUrG,EAAE,QAE3F,IAAI+J,EAAQ,GACRzB,EAAIC,SAASC,IAAI/I,GACjBsK,EAAQzB,EAAIC,SAASxI,IAAIN,IAEzBwI,EAAQK,EAAIG,WAAa7I,OAAAiK,EAAA,EAAAjK,CAA2B0B,EAAO7B,GAC3DsK,aAAmB1B,OAAOC,EAAIG,iBAUlC,OAJAL,QAAmB2B,KAAS/J,EAAEqD,MAAM,GAAG+B,IAAI,CAACvC,EAAGwC,EAAKyD,QAChDlJ,OAAAyB,EAAA,EAAAzB,CAASkJ,EAAIzD,IALE2E,KACf/B,EAAQK,EAAIG,WAAauB,aACP3B,OAAOC,EAAIG,iBAIzBwB,CAAWnB,EAAYzD,GAAK5B,QAC5BiF,EAAaI,EAAKzD,OAASwD,KAAK,SAK5CD,EAAIpD,IAAI,SAAU,SAASxF,EAAc0B,GAGrC,IAAI0G,EAAa,GACjBxI,OAAAgD,EAAA,EAAAhD,CAAkB,sBAAuB8B,EAAM,EAAG,GAClD,MAAMoI,EAASlK,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,IAC7BP,EAAOG,OAAAyB,EAAA,EAAAzB,CAASkK,GAAUA,EAAOrG,OAA4B,iBAAXqG,EAAsBA,EAAS,KACvF,GAAoB,iBAATrK,EACP,MAAM,IAAIqC,4DAA4DsE,KAAKC,UAAUrG,EAAE,QAO3F,OALMsI,EAAIC,SAASC,IAAI/I,KACnB6I,EAAIW,iBAAmBX,EAAIU,wBAC3BV,EAAIC,SAAS/C,IAAI/F,EAAM,IAAM6I,EAAIU,kBAErCZ,OAAkBE,EAAIC,SAASxI,IAAIN,MAASiJ,EAAa1I,EAAG,QAKhE4I,EAAIpD,IAAI,SAAU,SAASxF,EAAc0B,GAGrC,IAAI0G,EAAa,GACjBxI,OAAAgD,EAAA,EAAAhD,CAAkB,sBAAuB8B,EAAM,EAAG,GAClD,MAAMoI,EAASlK,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOtB,EAAE,IAC7BP,EAAOG,OAAAyB,EAAA,EAAAzB,CAASkK,GAClBA,EAAOrG,OACY,iBAAXqG,EACJA,EACC7G,MAAMC,QAAQ4G,GACVlK,OAAAyB,EAAA,EAAAzB,CAASkK,EAAO,IACbA,EAAO,GAAGrG,OACY,iBAAdqG,EAAO,GAAkBA,EAAO,GAAK,KAEjD,KAGZ,GAAoB,iBAATrK,EACP,MAAM,IAAIqC,4DAA4DsE,KAAKC,UAAUrG,EAAE,QAE3F,IAAI+J,EAAQ,GACRzB,EAAIC,SAASC,IAAI/I,GACjBsK,EAAQzB,EAAIC,SAASxI,IAAIN,IAEzBwI,EAAQK,EAAIG,WAAa7I,OAAAiK,EAAA,EAAAjK,CAA2B0B,EAAO7B,GAC3DsK,aAAmB1B,OAAOC,EAAIG,iBAUlC,OAJAL,QAAmB2B,MAAU9G,MAAMC,QAAQ4G,GAAUA,EAAOzG,MAAM,OAAS+B,IAAI,CAACvC,EAAGwC,EAAKyD,QACpFlJ,OAAAyB,EAAA,EAAAzB,CAASkJ,EAAIzD,IALE2E,KACf/B,EAAQK,EAAIG,WAAauB,aACP3B,OAAOC,EAAIG,iBAIzBwB,CAAWnB,EAAYzD,GAAK5B,QAC5BiF,EAAaI,EAAKzD,OAASwD,KAAK,OAAOH,EAAa1I,EAAG,QAKnE4I,EAAIpD,IAAI,OAAQ,SAASxF,EAAc0B,GAGnC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,oBAAqB8B,EAAM,EAAG,GAChD0G,QAAmBM,EAAahH,EAAM,QAK1CkH,EAAIpD,IAAI,SAAU,SAASxF,EAAc0B,GAIrC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,sBAAuB8B,EAAM,GAC/C0G,OAAkB1G,EAAK0D,IAAKvC,GAAM6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOuB,IAAK,IAAIgG,KAAK,WAKpFD,EAAIpD,IAAI,QAAS,SAASxF,EAAc0B,GAIpC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,qBAAsB8B,EAAM,GAC9C0G,OAAkB1G,EAAK0D,IAAKvC,GAAM6F,GAAc9I,OAAAiK,EAAA,EAAAjK,CAAW0B,EAAOuB,IAAK,IAAIgG,KAAK,WAKpFD,EAAIpD,IAAI,MAAO,SAASxF,EAAc0B,GAIlC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,mBAAoB8B,EAAM,EAAG,GAC/C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,YAK7ED,EAAIpD,IAAI,MAAO,SAASxF,EAAc0B,GAIlC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,mBAAoB8B,EAAM,EAAG,GAC/C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,YAK7ED,EAAIpD,IAAI,KAAM,SAASxF,EAAc0B,GAGjC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,WAK7ED,EAAIpD,IAAI,KAAM,SAASxF,EAAc0B,GAGjC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,WAK7ED,EAAIpD,IAAI,IAAK,SAASxF,EAAc0B,GAGhC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,iBAAkB8B,EAAM,EAAG,GAC7C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,UAK7ED,EAAIpD,IAAI,KAAM,SAASxF,EAAc0B,GAGjC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,WAK7ED,EAAIpD,IAAI,IAAK,SAASxF,EAAc0B,GAGhC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,iBAAkB8B,EAAM,EAAG,GAC7C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,UAK7ED,EAAIpD,IAAI,KAAM,SAASxF,EAAc0B,GAGjC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,WAK7ED,EAAIpD,IAAI,UAAW,SAASxF,EAAc0B,GAGtC,IAAI0G,EAAa,GAKjB,OAJAxI,OAAAgD,EAAA,EAAAhD,CAAkB,iBAAkB8B,EAAM,GAC1CuG,EAAQK,EAAIG,WAAazI,EAAE,GAC3BoI,eAA0BC,OAAOC,EAAIG,wBACjC/G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,WAK/DD,EAAIpD,IAAI,IAAK,SAASxF,EAAc0B,GAGhC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,iBAAkB8B,EAAM,GAC1C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,UAK7ED,EAAIpD,IAAI,IAAK,SAASxF,EAAc0B,GAGhC,IAAI0G,EAAa,GAKjB,OAJAxI,OAAAgD,EAAA,EAAAhD,CAAkB,iBAAkB8B,EAAM,GAC1C0G,OAAkBpI,EAAE6B,OAAS,EACzBH,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,UAClDR,OAAOK,EAAa1I,EAAG,YAKpC4I,EAAIpD,IAAI,IAAK,SAASxF,EAAc0B,GAGhC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,iBAAkB8B,EAAM,GAC1C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,UAK7ED,EAAIpD,IAAI,KAAM,SAASxF,EAAc0B,GAGjC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,kBAAmB8B,EAAM,GAC3C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,WAK7ED,EAAIpD,IAAI,IAAK,SAASxF,EAAc0B,GAGhC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,iBAAkB8B,EAAM,GAC1C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,UAK7ED,EAAIpD,IAAI,IAAK,SAASxF,EAAc0B,GAGhC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,iBAAkB8B,EAAM,GAC1C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,UAK7ED,EAAIpD,IAAI,KAAM,SAASxF,EAAc0B,GAGjC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,WAK7ED,EAAIpD,IAAI,KAAM,SAASxF,EAAc0B,GAGjC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,WAK7ED,EAAIpD,IAAI,MAAO,SAASxF,EAAc0B,GAGlC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,mBAAoB8B,EAAM,EAAG,GAC/C0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,YAK7ED,EAAIpD,IAAI,WAAY,SAASxF,EAAc0B,GAGvC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,wBAAyB8B,EAAM,EAAG,GACpD0G,SAAoBM,EAAa1I,EAAG,SAKxC4I,EAAIpD,IAAI,WAAY,SAASxF,EAAc0B,GAGvC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,wBAAyB8B,EAAM,EAAG,GACpD0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,UAK7ED,EAAIpD,IAAI,UAAW,SAASxF,EAAc0B,GAGtC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,uBAAwB8B,EAAM,EAAG,GACnD0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,UAK7ED,EAAIpD,IAAI,WAAY,SAASxF,EAAc0B,GAGvC,IAAI0G,EAAa,GAGjB,OAFAxI,OAAAgD,EAAA,EAAAhD,CAAkB,wBAAyB8B,EAAM,EAAG,GACpD0G,OAAkB1G,EAAK0D,IAAI,CAACvC,EAAGwC,EAAKyD,IAAQJ,EAAaI,EAAKzD,IAAMwD,KAAK,2FCzkBjF,SAASqB,EAAMC,GACX,MAAqB,iBAAPA,GAAmBvK,OAAOkB,UAAUC,eAAe1B,KAAK8K,EAAI,OAI9E,SAASC,EAAQD,GACb,MAAqB,iBAAPA,GAAwC,IAArBA,EAAGE,OAAOxI,OAI/C,SAASyI,EAAkBH,GACvB,MAAqB,iBAAPA,GAAmB,cAAcI,KAAKJ,GAIxD,SAASK,EAAsBL,GAC3B,MAAqB,iBAAPA,GAAmB,UAAUI,KAAKJ,GAIpD,SAASM,EAAkBN,GACvB,MAAqB,iBAAPA,IACTC,EAAQD,KACRG,EAAkBH,GAK3B,SAASO,EAAoBpJ,GACzB,eAAgBA,EAAMqJ,mBAAmBrJ,EAAMsJ,gBAAgBtJ,EAAMuJ,QACjEvJ,EAAMwJ,QAAQjJ,OAASP,EAAMsJ,MACzBtJ,EAAMwJ,QAAQxJ,EAAMsJ,OAAOvH,MAAM/B,EAAMuJ,IAAKvJ,EAAMuJ,IAAM,IAAM,KAI1E,SAASE,EAAQzJ,EAAsB0J,EAAuBC,GAC1D,GAAI3J,EAAMwJ,QAAQjJ,QAAUP,EAAMsJ,MAC9B,OAAQM,KAAK,GAEjB,GAAI5J,EAAMwJ,QAAQxJ,EAAMsJ,OAAO/I,QAAUP,EAAMuJ,IAAK,CAChD,IAAOvJ,EAAM6J,QAAY7J,EAAM6J,OAAOtJ,QAAUP,EAAMsJ,MAGlD,OAFAtJ,EAAMuJ,IAAM,EACZvJ,EAAMsJ,QACCG,EAAQzJ,GACZ,CACH,MAAM6I,GAAMhK,MAAOmB,EAAM6J,OAAO7J,EAAMsJ,QAGtC,OAFAtJ,EAAMuJ,IAAM,EACZvJ,EAAMsJ,QACCT,GAGf,GAAIa,EACA,IAAK,MAAM/E,KAAK+E,EAAY,CACxB,MAAMb,EAAK7I,EAAMwJ,QAAQxJ,EAAMsJ,OAAOvH,MAAM/B,EAAMuJ,IAAKvJ,EAAMuJ,IAAM5E,EAAEpE,QACrE,GAAIsI,IAAOlE,EAGP,OAFA3E,EAAMuJ,KAAO5E,EAAEpE,OACfP,EAAMqJ,MAAQR,EAAGiB,MAAM,MAAMvJ,OAAS,GAC7BqJ,KAAK,EAAQG,OAAQpF,GAI1C,CACI,IAAIkE,EAAK7I,EAAMwJ,QAAQxJ,EAAMsJ,OAAOvH,MAAM/B,EAAMuJ,IAAKvJ,EAAMuJ,IAAM,GAOjE,GANAvJ,EAAMuJ,MAEK,OAAPV,GACA7I,EAAMqJ,QAGHM,GAAyB,OAAPd,EAAa,CAClC,GAAI7I,EAAMwJ,QAAQxJ,EAAMsJ,OAAO/I,QAAUP,EAAMuJ,IAC3C,MAAM,IAAI/I,0CAA0C4I,EAAoBpJ,OAK5E,OAHA6I,EAAK7I,EAAMwJ,QAAQxJ,EAAMsJ,OAAOvH,MAAM/B,EAAMuJ,IAAKvJ,EAAMuJ,IAAM,GAC7DvJ,EAAMuJ,MAEEV,GACR,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IAAK,IAAK,IAEP,GAAmE,MAA/D7I,EAAMwJ,QAAQxJ,EAAMsJ,OAAOvH,MAAM/B,EAAMuJ,IAAKvJ,EAAMuJ,IAAM,GAAY,CACpE,IAAIS,EAAM,GACV,IAAK,IAAIpM,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMqM,EAAMjK,EAAMwJ,QAAQxJ,EAAMsJ,OAAOvH,MAAM/B,EAAMuJ,IAAM3L,EAAGoC,EAAMuJ,IAAM,EAAI3L,GAC5E,GAAY,MAARqM,EAAa,CACb,GAAU,IAANrM,EACA,MAAM,IAAI4C,0CAA0C4I,EAAoBpJ,OAE5EA,EAAMuJ,KAAO3L,EACb,MACG,IAAM,mBAAmBqL,KAAKe,GACjC,MAAM,IAAIxJ,0CAA0C4I,EAAoBpJ,OAE5EgK,GAAOC,EAEX,GAAmE,MAA/DjK,EAAMwJ,QAAQxJ,EAAMsJ,OAAOvH,MAAM/B,EAAMuJ,IAAKvJ,EAAMuJ,IAAM,GACxD,MAAM,IAAI/I,0CAA0C4I,EAAoBpJ,OAE5EA,EAAMuJ,MACNV,EAAK9B,OAAOmD,cAAczI,OAAO0I,SAASH,EAAK,SAC5C,CACH,MAAMA,EAAMhK,EAAMwJ,QAAQxJ,EAAMsJ,OAAOvH,MAAM/B,EAAMuJ,IAAKvJ,EAAMuJ,IAAM,GACpE,IAAM,mBAAmBN,KAAKe,GAC1B,MAAM,IAAIxJ,0CAA0C4I,EAAoBpJ,OAE5EA,EAAMuJ,KAAO,EACbV,EAAK9B,OAAOmD,cAAczI,OAAO0I,SAASH,EAAK,OAM/D,OAAOnB,GAKf,SAASuB,EAAWpK,EAAsBX,EAAWqK,EAAuBC,GACxE,MAAML,EAAQtJ,EAAMsJ,MACdC,EAAMvJ,EAAMuJ,IACZF,EAAOrJ,EAAMqJ,KACbgB,KAEN,IACI,IAAK,IAAIzM,EAAI,EAAGA,EAAIyB,EAAGzB,IACnByM,EAAIjH,KAAKqG,EAAQzJ,EAAO0J,EAAYC,IAF5C,QAKI3J,EAAMsJ,MAAQA,EACdtJ,EAAMuJ,IAAMA,EACZvJ,EAAMqJ,KAAOA,EAGjB,OAAOgB,EAIX,SAASC,EAAUtK,EAAsB0J,EAAuBC,GAC5D,MAAML,EAAQtJ,EAAMsJ,MACdC,EAAMvJ,EAAMuJ,IACZF,EAAOrJ,EAAMqJ,KACnB,IAAIR,EAEJ,IACIA,EAAKY,EAAQzJ,EAAO0J,EAAYC,GADpC,QAGI3J,EAAMsJ,MAAQA,EACdtJ,EAAMuJ,IAAMA,EACZvJ,EAAMqJ,KAAOA,EAGjB,OAAOR,EAIX,SAAS0B,EAAgBvK,GACrB,IAAI6I,EAAKyB,EAAUtK,GACnB,MAAQ4I,EAAMC,IAAOC,EAAQD,IACzBY,EAAQzJ,GACR6I,EAAKyB,EAAUtK,GAMvB,SAASwK,EAAYxK,EAAsB0J,GACvC,IAAI/J,EAAI,GACJkJ,EAAKyB,EAAUtK,EAAO0J,GAE1B,MAASd,EAAMC,IACO,iBAAPA,GADK,CAEZ,GAAI,oBAAoBI,KAAKtJ,EAAIkJ,GAC7BY,EAAQzJ,EAAO0J,GACf/J,GAAKkJ,MACF,KAAI,8BAA8BI,KAAKtJ,EAAIkJ,GAI9C,MAHAY,EAAQzJ,EAAO0J,GACf/J,GAAKkJ,EAQbA,EAAKyB,EAAUtK,EAAO0J,GAG1B,IAAM,mFAAmFT,KAAKtJ,GAC1F,MAAM,IAAIa,8CAA8C4I,EAAoBpJ,OAEhF,OAAOyB,OAAO9B,GAIlB,SAAS8K,EAAYzK,EAAsB0J,GACvC,IAAI/J,EAAI,GACJkJ,EAAKyB,EAAUtK,EAAO0J,GAE1B,MAASd,EAAMC,IAAK,CAChB,GAAkB,iBAAPA,EAAiB,CACxB,GAAIC,EAAQD,GACR,MACG,GAAW,MAAPA,GAAsD,MAAxCuB,EAAWpK,EAAO,EAAG0J,GAAY,GACtD,MACG,IAAI,cAAcT,KAAKtJ,EAAIkJ,GAI9B,MAHAY,EAAQzJ,EAAO0J,GACf/J,GAAKkJ,MAIN,CACH,GAAkB,iBAAPA,IAAmBvK,OAAOkB,UAAUC,eAAe1B,KAAK8K,EAAI,SAKnE,MAAM,IAAIrI,8CAA8C4I,EAAoBpJ,OAJ5EyJ,EAAQzJ,EAAO0J,GACJb,EAAuBhK,MAClCc,GAAKoH,OAAO8B,GAMpBA,EAAKyB,EAAUtK,EAAO0J,GAG1B,GAAI1J,EAAME,OAAOwK,iBAAkB,CAC/B,IAAI1M,EAA6B,KAEjC,GAAIA,EAAI2B,EAAEgL,MAAM,qBAAsB,CAElC,MAAMC,EAAK5M,EAAE,GAAG8L,MAAM,KAOtB,QALM3H,OAAQnC,EAAME,OAAO2B,cAAcC,UAC/BK,OAAQnC,EAAME,OAAO2B,cAAcqC,KACjC0G,IAMX,GAAI5M,EAAI2B,EAAEgL,MAAM,6BAA8B,CAE/C,MAAMC,EAAK5M,EAAE,GAAG8L,MAAM,KAQtB,QANM3H,OAAQnC,EAAME,OAAO2B,cAAcC,UAC/BK,OAAQnC,EAAME,OAAO2B,cAAc9D,QAC/BoE,OAAQnC,EAAME,OAAO2B,cAAcpD,QAASmM,IAC7CzI,OAAQnE,EAAE,MAMtB,GAAIA,EAAI2B,EAAEgL,MAAM,gBAAiB,CAElC,MAAMC,EAAK5M,EAAE,GAAG8L,MAAM,KAEtB,QADY3H,OAAQnC,EAAME,OAAO2B,cAAcpD,QAASmM,IAKhE,OAAQzI,OAAQxC,GAIpB,SAASkL,EACD7K,EAAsB4J,EACtBkB,EACAC,EACApB,GAGJ,MAAMqB,EAAUF,MAAqBlB,EAAKkB,GAAkBlB,EACtDJ,KACAK,KAEN,OAAS,CACL,IAAIlK,EAAI,GACJkJ,EAAKyB,EAAUtK,EAAOgL,EAASrB,GAEnC,MAASf,EAAMC,IAAK,CAChB,GAAkB,iBAAPA,EACPY,EAAQzJ,EAAOgL,EAASrB,GACxBhK,GAAKkJ,MACF,CACH,GAAkB,iBAAPA,IAAmBvK,OAAOkB,UAAUC,eAAe1B,KAAK8K,EAAI,SAKnE,MAAM,IAAIrI,uDAAuD4I,EAAoBpJ,OAJrFyJ,EAAQzJ,EAAOgL,EAASrB,GACbd,EAAuBhK,MAClCc,GAAKoH,OAAO8B,GAMpBA,EAAKyB,EAAUtK,EAAOgL,EAASrB,GAKnC,GAFAF,EAAQzJ,EAAOgL,EAASrB,IAEE,IAArBd,EAAae,IACd,MAAM,IAAIqB,EAAA,EAAuB,wBAKrC,GAFAzB,EAAQpG,KAAKzD,GAERkJ,EAAakB,SAAWe,EAGzB,MAFAjB,EAAOzG,KAAK8H,EAAUlL,EAAO+K,OAMrC,OAASvB,UAASK,UAItB,SAASsB,EAAYnL,EAAsB2J,GACvC,OAAOkB,EAAqB7K,GAAQ,KAAM,KAAM,IAAK2J,GAAeH,QAAQ,GAIhF,SAAS4B,EAAapL,EAAsBmC,EAAkBkJ,GAC1D,MAAMC,GAAgBnJ,GAElBkJ,GACAC,EAAElI,KAAKiI,GAGX,MAAME,EAAQV,EAAqB7K,GAAQ,OAAQ,OAAQ,KAAK,GAChE,IAAK,IAAIpC,EAAI,EAAGA,EAAI2N,EAAM/B,QAAQjJ,OAAQ3C,IACtC0N,EAAElI,KAAKmI,EAAM/B,QAAQ5L,IACjBA,EAAI2N,EAAM1B,OAAOtJ,QACjB+K,EAAElI,KAAKmI,EAAM1B,OAAOjM,IAI5B,OAAO0N,EAIX,SAASE,EAAuBxL,GAC5B,OACIyL,QAASZ,EAAqB7K,GAAQ,KAAM,MAAO,KAAM,KAAK,GAAOwJ,QAAQ,IAKrF,SAASkC,EAAsB1L,GAC3B,OACIyL,QAASZ,EAAqB7K,GAAQ,MAAO,KAAM,KAAK,GAAOwJ,QAAQ,IAK/E,SAASmC,EAAc3L,GACnBuK,EAAgBvK,GAChB,IAAI6I,EAAKyB,EAAUtK,GAEnB,MAAS4I,EAAMC,IAAK,CAChB,OAAQA,GACR,IAAK,IACD,MAAM,IAAIrI,gDAAgD4I,EAAoBpJ,OAElF,IAAK,IAED,OADAyJ,EAAQzJ,GACDkL,EAAUlL,EAAO,QAE5B,IAAK,IAAK,IAAK,IAIP,OAFAyJ,EAAQzJ,GACRuK,EAAgBvK,IACD,MAAP6I,EAAaoC,EAAA,EAAQA,EAAA,GAAejL,EAAO2L,EAAc3L,IAGzE,IAAK,IACD,CACIyJ,EAAQzJ,GACR,MAAM4L,EAASxB,EAAWpK,EAAO,GACjC,OAAIA,EAAME,OAAO2L,cAA8B,MAAdD,EAAO,IAA4B,MAAdA,EAAO,IACzDnC,EAAQzJ,GACRyJ,EAAQzJ,GACRuK,EAAgBvK,GACT1B,OAAA2M,EAAA,EAAA3M,CAAO0B,EAAO2L,EAAc3L,MAEnCuK,EAAgBvK,IACRmF,OAAQwG,EAAc3L,KAI1C,IAAK,IAED,OADAyJ,EAAQzJ,GACDwL,EAAuBxL,GAElC,IAAK,IAGG,MAAkB,MADHoK,EAAWpK,EAAO,GACtB,IACPyJ,EAAQzJ,GACRyJ,EAAQzJ,GACD0L,EAAsB1L,IAEtByK,EAAYzK,GAI/B,IAAK,IACD,CACIyJ,EAAQzJ,GACR,MAAM4L,EAASxB,EAAWpK,EAAO,GACjC,GAAIA,EAAME,OAAO4L,eAA+B,MAAdF,EAAO,IAA4B,MAAdA,EAAO,GAAY,CACtE,IAAIG,GAAY,EACZnD,EAAMgD,EAAO,KAAO9C,EAAQ8C,EAAO,MAE5B5C,EAAkB4C,EAAO,IACd,MAAdA,EAAO,IAA4B,MAAdA,EAAO,IACtB1C,EAAsB0C,EAAO,MAC/BG,GAAY,GAIb5C,EAAkByC,EAAO,MAChCG,GAAY,IAIhBtC,EAAQzJ,GACRyJ,EAAQzJ,GAER,IAAImE,EAAgC,KAChCkH,EAA0B,KAC9B,GAAIU,EACA5H,GAAOhC,OAAQnC,EAAME,OAAO2B,cAAcmK,cACvC,CAEH,GAAY,QADZ7H,EAAMsG,EAAYzK,GAAQ,OAEtB,MAAM,IAAIQ,gDAAgD4I,EAAoBpJ,OAElF,GAAmB,iBAARmE,EACP,MAAM,IAAI3D,gDAAgD4I,EAAoBpJ,OAElF,MAAMiM,EAAM7B,EAAWpK,EAAO,GAC9B,GAAe,MAAXiM,EAAI,GAAY,CAChB,GAAe,MAAXA,EAAI,GACJ,MAAM,IAAIzL,gDAAgD4I,EAAoBpJ,OAElFyJ,EAAQzJ,GACRyJ,EAAQzJ,GACR,MAAMiD,EAAIiI,EAAUlL,EAAO,MAAOmC,OAAQ,OACtCR,MAAMC,QAAQqB,KACdoI,EAAQpI,IAKpB,OAAOmI,EAAapL,EAAOmE,EAAKkH,GAEhC,OAAOF,EAAYnL,GAAO,GAItC,IAAK,IACD,GAAIA,EAAME,OAAOgM,4BAA6B,CAE1C,GAAkB,MADH9B,EAAWpK,EAAO,GACtB,GAGP,OAFAyJ,EAAQzJ,GACRyJ,EAAQzJ,GACDmL,EAAYnL,GAAO,GAKtC,QACI,GAAkB,iBAAP6I,EAAiB,CACxB,GAAkB,iBAAPA,GAAmBvK,OAAOkB,UAAUC,eAAe1B,KAAK8K,EAAI,SAEnE,OADAY,EAAQzJ,GACDA,EAAME,OAAO8E,kBAAoB6D,EAAMA,EAAuBhK,MAErE,MAAM,IAAI2B,gDAAgD4I,EAAoBpJ,OAE/E,GAAI8I,EAAQD,GACf,MACG,GAAIG,EAAkBH,GAAK,CAC9B,GAAW,MAAPA,GAAqB,MAAPA,EAAY,CAE1B,IAAMK,EADSkB,EAAWpK,EAAO,GACE,IAC/B,OAAOyK,EAAYzK,GAG3B,OAAOwK,EAAYxK,GAChB,GAAImJ,EAAkBN,GACzB,OAAO4B,EAAYzK,GAEnB,MAAM,IAAIQ,gDAAgD4I,EAAoBpJ,OAItFuK,EAAgBvK,GAChB6I,EAAKyB,EAAUtK,GAGnB,MAAM,IAAIiL,EAAA,EAAuB,iBAIrC,SAASC,EAAUlL,EAAsBmM,EAAsBC,GAC3D,MAAM1N,EAAe0N,EAAYrK,MAAM,GACvC,IAAIoD,GAAS,EAEboF,EAAgBvK,GAChB,IAAI6I,EAAKyB,EAAUtK,GAEnB,MAAS4I,EAAMC,IAAK,CAChB,OAAQA,GACR,KAAKsD,EAED,OADA1C,EAAQzJ,GACJmF,EACOzG,EAAE,GAEFA,EAGf,QACI,CACI,MAAMI,EAAI6M,EAAc3L,GACxB,GAAiB,iBAANlB,GAAkBR,OAAOkB,UAAUC,eAAe1B,KAAKe,EAAG,UAAW,CAC5E,GAAiB,IAAbJ,EAAE6B,OACF,MAAM,IAAIC,4CAA4C4I,EAAoBpJ,OAE9EmF,GAAS,EACLxD,MAAMC,QAAQ9C,IACdA,EAAEoE,QAAQxE,EAAE2E,OACZ3E,EAAE0E,KAAKtE,IAEPJ,EAAE0E,MAAM6B,IAAKvG,EAAE2E,MAAkB6B,IAAMpG,EAAuBqG,cAE/D,GAAiB,iBAANrG,GAAkBR,OAAOkB,UAAUC,eAAe1B,KAAKe,EAAG,WAClEkB,EAAME,OAAOmM,eACf3N,EAAE0E,KAAKtE,OAER,CACH,GAAIqG,EACA,MAAM,IAAI3E,4CAA4C4I,EAAoBpJ,OAE9EtB,EAAE0E,KAAKtE,KAMnByL,EAAgBvK,GAChB6I,EAAKyB,EAAUtK,GAGnB,MAAM,IAAIiL,EAAA,EAAuB,aAK/B,SAAUqB,EAAMtM,GAClB,MAAMtB,KAEN6L,EAAgBvK,GAChB,IAAI6I,EAAKyB,EAAUtK,GAEnB,MAAS4I,EAAMC,IAAK,CAChB,OAAQA,GACR,IAAK,IACDY,EAAQzJ,GACRtB,EAAE0E,KAAK8H,EAAUlL,EAAO,SACxB,MAEJ,IAAK,IAAK,IAAK,IAIP,IAFAyJ,EAAQzJ,GACRuK,EAAgBvK,KACP,CACL,MAAMlB,EAAI6M,EAAc3L,GACxB,GAAiB,iBAANlB,IAAkBR,OAAOkB,UAAUC,eAAe1B,KAAKe,EAAG,WAI9D,CACHJ,EAAE0E,MAAa,MAAPyF,EAAaoC,EAAA,EAAQA,EAAA,GAAejL,EAAOlB,IACnD,MALMkB,EAAME,OAAOmM,eACf3N,EAAE0E,KAAKtE,GAOnB,MAGR,IAAK,IACD2K,EAAQzJ,GACJA,EAAME,OAAOmM,cACbb,EAAuBxL,GAEvBtB,EAAE0E,KAAKoI,EAAuBxL,IAElC,MAEJ,IAAK,IAGqB,MADHoK,EAAWpK,EAAO,GACtB,IACPyJ,EAAQzJ,GACRyJ,EAAQzJ,GACJA,EAAME,OAAOmM,cACbX,EAAsB1L,GAEtBtB,EAAE0E,KAAKsI,EAAsB1L,MAGjCyJ,EAAQzJ,GACJA,EAAME,OAAOmM,cACbb,EAAuBxL,GAEvBtB,EAAE0E,KAAKoI,EAAuBxL,KAI1C,MAEJ,IAAK,IACD,CACI,MAAM4L,EAASxB,EAAWpK,EAAO,GACjC,GAAkB,MAAd4L,EAAO,IAA4B,MAAdA,EAAO,GAAY,CACxClN,EAAE0E,KAAKuI,EAAc3L,IACrB,OAKZ,QACI,MAAM,IAAIQ,oDAAoD4I,EAAoBpJ,OAGtFuK,EAAgBvK,GAChB6I,EAAKyB,EAAUtK,GAGnB,OAAOtB,2BCtoBJ,MAAM6N,EAAO,CAACvM,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,EAAG,GAEnC,MAAM6E,EAAMwH,KAAWrM,GACvB,IAAMuB,MAAMC,QAAQqD,GAChB,MAAM,IAAIzE,MAAM,yDAEpB,GAAmB,IAAfyE,EAAI1E,OACJ,MAAM,IAAIC,MAAM,mDAEpB,OAAOyE,EAAI,IAKFyH,GAHQH,IAGD,CAACvM,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,EAAG,GAEnC,MAAM6E,EAAMwH,KAAWrM,GACvB,IAAMuB,MAAMC,QAAQqD,GAChB,MAAM,IAAIzE,MAAM,yDAEpB,GAAmB,IAAfyE,EAAI1E,OACJ,MAAM,IAAIC,MAAM,mDAEpB,OAAOyE,EAAIlD,MAAM,KAKR4K,GAHQD,IAGA,CAAC1M,EAAsB7B,IAAiB,IAAIiC,KAO7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,IAAI6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GAQrC,OAPY,OAAR6E,IACAA,MAEQ,OAARC,IACAA,MAGAvD,MAAMC,QAAQsD,KACdA,EAAMA,EAAInD,MAAM,IACZmB,QAAQ+B,GACLC,IAECD,MAAKC,SAMR2H,GAHSF,IAGA,CAAC3M,EAAsB7B,IAAiB,IAAIiC,KAK9D,MAAM6E,EAAW7E,EAAK2B,MAAM,EAAG,GAC/B,OAAuB,IAAfkD,EAAI1E,OAAgB0E,EAAI,GAAK,OAE5BwH,EARiD,IAAIrM,KAK9D,MAAM6E,EAAW7E,EAAK2B,MAAM,EAAG,GAC/B,OAAuB,IAAfkD,EAAI1E,OAAgB0E,EAAI,GAAK,MAK5B6H,EAAU,CAAC9M,EAAsB7B,IAAiB,IAAIiC,KAK/D,MAAM8E,EAAW9E,EAAK2B,MAAM,EAAG,GAC/B,OAAuB,IAAfmD,EAAI3E,OAAgB2E,EAAI,GAAK,MAE5B6H,EARkD,IAAI3M,KAK/D,MAAM8E,EAAW9E,EAAK2B,MAAM,EAAG,GAC/B,OAAuB,IAAfmD,EAAI3E,OAAgB2E,EAAI,GAAK,MAK5B8H,EAAQ,CAAChN,EAAsB7B,IAAiB,IAAIiC,KAK7D,MAAM6E,EAAW7E,EAAK2B,MAAM3B,EAAKG,OAAS,EAAGH,EAAKG,QAClD,OAAuB,IAAf0E,EAAI1E,OAAgB0E,EAAI,GAAK,MAK5BgI,EAAQ,CAACjN,EAAsB7B,IAAiB,IAAIiC,KAK7D,MAAM8E,EAAW9E,EAAK2B,MAAM,GAC5B,OAAQ,EAAImD,EAAI3E,OAAU2E,EAAM,MAKvBgI,EAAkB,CAAClN,EAAsB7B,IAAiB,IAAIiC,KAGvE,IAAI6E,EAAW7E,EAAK2B,MAAM,EAAG,GAC7BkD,EAAsB,IAAfA,EAAI1E,OAAgB0E,EAAI,GAAK,KAEpC,IAAIC,EAAW9E,EAAK2B,MAAM,EAAG,GAG7B,OAAQkD,MAAKC,IAFbA,EAAsB,IAAfA,EAAI3E,OAAgB2E,EAAI,GAAK,OAI3B0H,EAX0D,IAAIxM,KAGvE,IAAI6E,EAAW7E,EAAK2B,MAAM,EAAG,GAC7BkD,EAAsB,IAAfA,EAAI1E,OAAgB0E,EAAI,GAAK,KAEpC,IAAIC,EAAW9E,EAAK2B,MAAM,EAAG,GAG7B,OAAQkD,MAAKC,IAFbA,EAAsB,IAAfA,EAAI3E,OAAgB2E,EAAI,GAAK,OAO3BiI,EAAQ,CAACnN,EAAsB7B,IAAiB,IAAIiC,KAI7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAM6E,EAAMwH,KAAWrM,GAEvB,GAAY,OAAR6E,QAAwB,IAARA,EAChB,OAAO,EAEX,GAAItD,MAAMC,QAAQqD,GACd,OAAmB,IAAfA,EAAI1E,OAIZ,cAAe0E,GACf,IAAK,SAAU,IAAK,SAAU,IAAK,WAAY,IAAK,UAChD,OAAO,EACX,IAAK,SACD,QAAO3G,OAAA2M,EAAA,EAAA3M,CAAS2G,GAEpB,OAAO,GAKEmI,GAHSD,IAGH,CAACnN,EAAsB7B,IAAiB,IAAIiC,KAI3D9B,OAAAkO,EAAA,EAAAlO,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,OAAO6E,IAAQC,IAKNmI,GAHOD,IAGE,CAACpN,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAErC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,OAAO6E,IAAQC,IAKNoI,GAHUD,IAGF,CAACrN,EAAsB7B,IAAiB,IAAIiC,IAG7DA,EAAK2B,MAAM,IAKFwL,EAAW,CAACvN,EAAsB7B,EAAcsE,IAAoC,IAAIrC,KAIjG9B,OAAAkO,EAAA,EAAAlO,CAAkB,WAAY8B,EAAM,GAEpC,MAAMsC,EAAe+J,KAAWrM,GAC1BoN,EAAiBT,KAAY3M,IAC7B6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,EAAK2B,MAAM,IAClD,IAAIrD,EAAa,KAEjB,MAAM8D,KACN,GAAIb,MAAMC,QAAQqD,GACd,IAAK,MAAM1D,KAAK0D,EACZ,GAAItD,MAAMC,QAAQL,GAAI,CAClB,MAAMkM,EAAKb,KAAoBrL,GACzBmM,EAAQpP,OAAA2M,EAAA,EAAA3M,CAASmP,EAAGxI,KAC1BzC,EAAMkL,EAAQA,EAAMvL,OAAS4E,OAAO0G,EAAGxI,MAAQ3G,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOyN,EAAGvI,SAC/D,CACH,MAAMyI,EAAOrP,OAAA2M,EAAA,EAAA3M,CAASiD,GACtBiB,EAAMmL,EAAOA,EAAKxL,OAAS4E,OAAOxF,IAAM,KAIpDjD,OAAA+C,EAAA,EAAA/C,CAAa0B,EAAOwC,EAAOE,EAAcD,GAEzC,IACI,GAAI,EAAIrC,EAAKG,OACT,GAAIiN,EAAgB,CAChB9O,KACA,IAAK,MAAM6C,KAAKnB,EAAK2B,MAAM,GACvBrD,EAAE0E,KAAK9E,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,SAG3B,IAAK,MAAMA,KAAKnB,EAAK2B,MAAM,GACvBrD,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,QAI5B7C,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOkF,GAb5B,QAgBI5G,OAAA+C,EAAA,EAAA/C,CAAe0B,GAGnB,OAAOtB,GAmEEkP,EAAY,CAAC5N,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,GAErC,MAAMkD,EAAyBlD,EAAK,GACpC,IAAMuB,MAAMC,QAAQ0B,GAChB,MAAM,IAAI9C,MAAM,8DAGpB,IAAIkG,GAAe,EACnB,IAAK,IAAI9I,EAAI,EAAGA,EAAI0F,EAAW/C,OAAQ3C,IAAK,CACxC,MAAMiQ,EAAKvK,EAAW1F,GACtB,GAAIA,IAAM0F,EAAW/C,OAAS,GAAKP,EAAME,OAAO2L,cAC5ClK,MAAMC,QAAQiM,IAAOvP,OAAA2M,EAAA,EAAA3M,CAASuP,EAAG,GAAI7N,EAAME,OAAO2B,cAAc0C,QAAS,CACzE,IAAMjG,OAAA2M,EAAA,EAAA3M,CAASuP,EAAG,IACd,MAAM,IAAIrN,qEAAqE5C,qBAEnF0F,EAAW1F,GAAKiQ,EAAG,GACnBnH,GAAe,OACZ,IAAMpI,OAAA2M,EAAA,EAAA3M,CAASuP,GAClB,MAAM,IAAIrN,qEAAqE5C,qBAIvF,IAAI2F,EAASnD,EAAK2B,MAAM,GACpB/B,EAAME,OAAO8H,6BACbzE,EAASjF,OAAA+C,EAAA,EAAA/C,CAAiB0B,EAAOsD,EAAYC,IAGjD,MAAMd,EAAiBnE,OAAA+C,EAAA,EAAA/C,CAAkB0B,GAEnCoC,EAAK,IAAI0L,KACX,GAAKA,EAAWvN,QAAUmG,EAAe,EAAI,GAAMpD,EAAW/C,OAC1D,MAAM,IAAIC,uDACNsN,EAAWvN,mBAAmB+C,EAAW/C,WAEjD,OAAOgN,EAASvN,EAAO7B,EAAMsE,EAAtB8K,EAAsC,GAAO,IAC/CvN,EAAME,OAAO2B,cAAc8B,KAAMvB,MAC9BkB,EAAWQ,IAAI,CAACvC,EAAa+H,KAC7B/H,EAAEY,OACF7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EACD0G,GAAgB4C,IAAUhG,EAAW/C,OAAS,EAC3CuN,EAAW/L,MAAMuH,GAASwE,EAAWxE,UAG/C/F,IAEV,OAAOnB,GAKE2L,EAAiB,CAAC/N,EAAsB7B,IAAiB,IAAIiC,KAGtE9B,OAAAkO,EAAA,EAAAlO,CAAkB,aAAc8B,EAAM,GAEtC,MAAMkD,EAAyBlD,EAAK,GACpC,IAAMuB,MAAMC,QAAQ0B,GAChB,MAAM,IAAI9C,MAAM,+DAGpB,IAAIkG,GAAe,EACnB,IAAK,IAAI9I,EAAI,EAAGA,EAAI0F,EAAW/C,OAAQ3C,IAAK,CACxC,MAAMiQ,EAAKvK,EAAW1F,GACtB,GAAIA,IAAM0F,EAAW/C,OAAS,GAAKP,EAAME,OAAO2L,cAC5ClK,MAAMC,QAAQiM,IAAOvP,OAAA2M,EAAA,EAAA3M,CAASuP,EAAG,GAAI7N,EAAME,OAAO2B,cAAc0C,QAAS,CACzE,IAAMjG,OAAA2M,EAAA,EAAA3M,CAASuP,EAAG,IACd,MAAM,IAAIrN,sEAAsE5C,qBAEpF0F,EAAW1F,GAAKiQ,EAAG,GACnBnH,GAAe,OACZ,IAAMpI,OAAA2M,EAAA,EAAA3M,CAASuP,GAClB,MAAM,IAAIrN,sEAAsE5C,qBAIxF,MAAM2F,EAASnD,EAAK2B,MAAM,GAC1B,OAAOzD,OAAA0P,EAAA,EAAA1P,CAAc0B,EAAOsD,EAAYoD,EAAcnD,IAmD7C0K,EAAS,CAACjO,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,GAElC,MAAM6E,EAAiBwH,KAAWrM,GAClC,GAAmB,mBAAR6E,EACP,MAAM,IAAIzE,MAAM,8DAGpB,MACI,IAAId,IAAauF,EAAIiJ,MAAM,KAAM9N,EAAK2B,MAAM,GAAGC,OAAOtC,KAiDjDyO,GA9CUF,IA8CD,CAACjO,EAAsB7B,IAAiB,IAAIiC,KAI9D,MADYqM,KAAWrM,KAsMdgO,GAnMUD,IAmMF,CAACnO,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,GAEjC,IAAIuE,EAAIvE,EAAK,GACb,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,EAAKG,OAAQ3C,IAC7B+G,EAAIvE,EAAKxC,GAAG+G,GAEhB,OAAOA,IA2EE0J,GAzESD,IAyEA,CAACpO,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAErC,IAAI+D,EAAM7F,OAAA2M,EAAA,EAAA3M,CAASmO,KAAWrM,IAE9B,IAAM+D,EAAK,CACP,GAAuB,iBAAZ/D,EAAK,GAGZ,MAAM,IAAII,MAAM,mDAFhB2D,GAAOhC,OAAQ/B,EAAK,IAS5B,OAHc9B,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOmE,GAAK,GAC5CA,EAAIhC,QAAU/B,EAAK,GAElBA,EAAK,KAKHkO,EAAS,CAACtO,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAErC,IAAImO,KAEA5M,MAAMC,QAAQxB,EAAK,IACnBmO,EAAOnO,EAAK,GAEZmO,EAAKnL,KAAKhD,EAAK,IAGnB,IAAI+D,EAAM7F,OAAA2M,EAAA,EAAA3M,CAASiQ,EAAK,IAExB,IAAMpK,EAAK,CACP,GAAuB,iBAAZoK,EAAK,GAGZ,MAAM,IAAI/N,MAAM,mDAFhB2D,GAAOhC,OAAQoM,EAAK,IAM5B,IAAI/L,EAAQlE,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOmE,GAAK,GAChD,GAAc,OAAV3B,EACA,MAAM,IAAIhC,yCAAyC2D,EAAIhC,WAG3D,IAAIqM,GAAQ,EAEZ,IAAK,IAAI5Q,EAAI,EAAGA,EAAI2Q,EAAKhO,OAAQ3C,IAAK,CAClC,IAAI0N,EAASiD,EAAK3Q,GACd6Q,GAAS,EACb,MAAMC,EAAO9Q,IAAM2Q,EAAKhO,OAAS,EACjC,KAAOkO,GACH,cAAenD,GACf,IAAK,WACD9I,EAAQ8I,EAAE9I,GACViM,GAAS,EACT,MACJ,IAAK,SACD,GAAI9M,MAAMC,QAAQ0J,GACdA,EAAIhN,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOsL,QAGpB,GADAnH,EAAM7F,OAAA2M,EAAA,EAAA3M,CAASgN,GAEXA,EAAInH,EAAIhC,WACL,KAAI7D,OAAOkB,UAAUC,eAAe1B,KAAKuN,EAAG,SAG/C,MAAM,IAAI9K,MAAM,mDAFhB8K,EAAIhN,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOsL,GAK5B,MACJ,IAAK,SACGA,EAAI,IACJA,EAAI9I,EAAMjC,OAAS+K,GAG3B,IAAK,SACGoD,GACAlM,EAAM8I,GAAKlL,EAAK,GAChBoO,GAAQ,GAERhM,EAAQA,EAAM8I,GAElBmD,GAAS,EACT,MACJ,QACI,MAAM,IAAIjO,MAAM,oDAK5B,IAAMgO,EACF,MAAM,IAAIhO,MAAM,8DAGpB,OAAOJ,EAAK,IAIHuO,EAAW,CAAC3O,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAAkO,EAAA,EAAAlO,CAAkB,WAAY8B,EAAM,EAAG,GAEvC,MAAM6E,EAAMwH,KAAWrM,GACvB,QAAIuB,MAAMC,QAAQqD,IAAuB,IAAfA,EAAI1E,SAClBqO,QAAQ3J,IAEX4J,EAAYF,IAGZG,EAAO,CAAC9O,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,EAAG,IAE1ByO,KAAazO,IAEb2O,EAAQD,IAIRE,GAAS,CAAChP,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,GAElC,IAAI6O,EAAO,KACX,IAAK,IAAIrR,EAAI,EAAGA,EAAIwC,EAAKG,OAAQ3C,IAAK,CAClC,MAAMsR,EAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAKxC,IAClC,IAAMiR,EAAUK,GACZ,OAAOA,EAEXD,EAAOC,EAEX,OAAOD,GAOEE,IAJUH,GAAO,MAIT,CAAChP,EAAsB7B,IAAiB,IAAIiC,KAI7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,GAEjC,IAAI6O,EAAO,KACX,IAAK,IAAIrR,EAAI,EAAGA,EAAIwC,EAAKG,OAAQ3C,IAAK,CAClC,MAAMsR,EAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAKxC,IAClC,GAAIiR,EAAUK,GACV,OAAOA,EAEXD,EAAOC,EAEX,OAAOD,IAMEG,IAHSD,GAAM,MAGA,CAACnP,EAAsB7B,IAAiB,IAAIiC,KAGpE9B,OAAAkO,EAAA,EAAAlO,CAAkB,eAAgB8B,EAAM,EAAG,GAE3C,IAAI6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GAMrC,OALIuB,MAAMC,QAAQqD,IAAuB,IAAfA,EAAI1E,SAAc0E,EAAM,MAC9CtD,MAAMC,QAAQsD,IAAuB,IAAfA,EAAI3E,SAAc2E,EAAM,WACtC,IAARD,IAAgBA,EAAM,WACd,IAARC,IAAgBA,EAAM,MAEnBD,GAAOC,IAELmK,GAAgBD,KAGhBE,GAAkB,CAACtP,EAAsB7B,IAAiB,IAAIiC,KAG9DiP,MAAiBjP,GAKjBmP,IAHmBD,KAGb,CAACtP,EAAsB7B,IAAiB,IAAIiC,KAG3D9B,OAAAkO,EAAA,EAAAlO,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,OAAO9B,OAAA+C,EAAA,EAAA/C,CAAS2G,GAAO3G,OAAA+C,EAAA,EAAA/C,CAAS4G,KAKvBsK,IAHOD,KAGD,CAACvP,EAAsB7B,IAAiB,IAAIiC,KAG3D9B,OAAAkO,EAAA,EAAAlO,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,OAAO9B,OAAA+C,EAAA,EAAA/C,CAAS2G,IAAQ3G,OAAA+C,EAAA,EAAA/C,CAAS4G,KAKxBuK,IAHOD,KAGD,CAACxP,EAAsB7B,IAAiB,IAAIiC,KAG3D9B,OAAAkO,EAAA,EAAAlO,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,OAAO9B,OAAA+C,EAAA,EAAA/C,CAAS2G,GAAO3G,OAAA+C,EAAA,EAAA/C,CAAS4G,KAKvBwK,IAHOD,KAGD,CAACzP,EAAsB7B,IAAiB,IAAIiC,KAG3D9B,OAAAkO,EAAA,EAAAlO,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,OAAO9B,OAAA+C,EAAA,EAAA/C,CAAS2G,IAAQ3G,OAAA+C,EAAA,EAAA/C,CAAS4G,KAyBxByK,IAvBOD,KAuBK,CAAC1P,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,KAEhC9B,OAAA2M,EAAA,EAAA3M,CAAS8B,EAAK,MAKbwP,IAHaD,KAGH,CAAC3P,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,EAAG,GAE/BuB,MAAMC,QAAQ6K,KAAWrM,MAKvByP,IAHWD,KAGC,CAAC5P,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAEL,iBAArBqM,KAAWrM,KAKhB0P,IAHaD,KAGD,CAAC7P,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAEL,iBAArBqM,KAAWrM,KAKhB2P,IAHaD,KAGJ,CAAC9P,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAE9BqB,OAAOuO,MAAMvD,KAAWrM,MAKtB6P,IAHUF,KAGE,CAAC/P,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAEjCqB,OAAOyO,SAASzD,KAAWrM,MAKzB+P,IAHaF,KAGA,CAACjQ,EAAsB7B,IAAiB,IAAIiC,KAGlE9B,OAAAkO,EAAA,EAAAlO,CAAkB,aAAc8B,EAAM,EAAG,GAElCqB,OAAO2O,UAAU3D,KAAWrM,MAK1BiQ,IAHcF,KAGF,CAACnQ,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAEjC2G,OAAO0F,KAAWrM,MAKhBkQ,IAHaD,KAGD,CAACrQ,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAEjC9B,OAAA+C,EAAA,EAAA/C,CAASmO,KAAWrM,MAuClBmQ,IArCaD,KAqCG,CAACtQ,EAAsB7B,IAAiB,IAAIiC,KAGrE9B,OAAAkO,EAAA,EAAAlO,CAAkB,gBAAiB8B,EAAM,GAElC9B,OAAO6E,OAAO/C,EAAK,MAAQA,EAAK2B,MAAM,MAKpCyO,IAHiBD,KAGA,CAACvQ,EAAsB7B,IAAiB,IAAIiC,KAGtE9B,OAAAkO,EAAA,EAAAlO,CAAkB,iBAAkB8B,EAAM,EAAG,GAEtC0E,KAAKC,UAAU0H,KAAWrM,MAKxBqQ,IAHkBD,KAGL,CAACxQ,EAAsB7B,IAAiB,IAAIiC,KAGlE9B,OAAAkO,EAAA,EAAAlO,CAAkB,aAAc8B,EAAM,EAAG,GAEzC,MAAMT,EAAI8M,KAAWrM,GACrB,GAAiB,iBAANT,EACP,MAAM,IAAIa,MAAM,gEAEpB,OAAOsE,KAAKwH,MAAM3M,KAKT+Q,IAHcD,KAGP,CAACzQ,EAAsB7B,IAAiB,IAAIiC,IAGrDuQ,KAAKC,OAKHC,IAHQH,KAGW,CAAC1Q,EAAsB7B,IAAiB,IAAIiC,KAGxE9B,OAAAkO,EAAA,EAAAlO,CAAkB,mBAAoB8B,EAAM,EAAG,GAE/C,MAAMT,EAAI8M,KAAWrM,GACrB,GAAiB,iBAANT,EACP,MAAM,IAAIa,MAAM,sEAEpB,IAAM,oLAAoLyI,KAAKtJ,GAC3L,MAAM,IAAIa,sEAAsEb,MAEpF,MAAMmR,EAAK,IAAIH,KAAKhR,GAAGoR,UACvB,GAAItP,OAAOuO,MAAMc,GACb,MAAM,IAAItQ,kDAAkDb,MAEhE,OAAOmR,IAKEE,IAHoBH,KAGR,CAAC7Q,EAAsB7B,IAAiB,IAAIiC,KAOjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAExC,IAAIT,EAAI,GACR,MAAMsR,EAAOxP,OAAOrB,EAAK,IAErBT,GADAsR,GAAQ,EACHlK,OAAOkK,GAAMC,SAAS,EAAG,KAEzB,IAAMnK,QAAQkK,GAAMC,SAAS,EAAG,KAGzCvR,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAE/CvR,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAE3C9Q,EAAKG,QAAU,IACfZ,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAE3C9Q,EAAKG,QAAU,EACfZ,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAE/CvR,GAAK,MAGLS,EAAKG,QAAU,IACfZ,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,MAG/C9Q,EAAKG,QAAU,IACfZ,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAAKnP,MAAM,EAAG,IAEjEpC,GAAK,KAET,MAAMmR,EAAK,IAAIH,KAAKhR,GAAGoR,UACvB,GAAItP,OAAOuO,MAAMc,GACb,MAAM,IAAItQ,2CAA2Cb,MAEzD,OAAOmR,IAKEK,IAHaH,KAGC,CAAChR,EAAsB7B,IAAiB,IAAIiC,KAOnE9B,OAAAkO,EAAA,EAAAlO,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAIT,EAAI,GACR,MAAMsR,EAAOxP,OAAOrB,EAAK,IAErBT,GADAsR,GAAQ,EACHlK,OAAOkK,GAAMC,SAAS,EAAG,KAEzB,IAAMnK,QAAQkK,GAAMC,SAAS,EAAG,KAGzCvR,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAE/CvR,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAE3C9Q,EAAKG,QAAU,GACfZ,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAE3C9Q,EAAKG,QAAU,EACfZ,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAE/CvR,GAAK,MAGLS,EAAKG,QAAU,IACfZ,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,MAG/C9Q,EAAKG,QAAU,IACfZ,GAAK,IAAMoH,OAAOtF,OAAOrB,EAAK,KAAK8Q,SAAS,EAAG,KAAKnP,MAAM,EAAG,KAGjEpC,GAAK,gBAET,MAAMmR,EAAK,IAAIH,KAAKhR,GAAGoR,UACvB,GAAItP,OAAOuO,MAAMc,GACb,MAAM,IAAItQ,6CAA6Cb,MAE3D,OAAOmR,IAKEM,IAHeD,KAGQ,CAACnR,EAAsB7B,IAAiB,IAAIiC,KAG5E9B,OAAAkO,EAAA,EAAAlO,CAAkB,uBAAwB8B,EAAM,EAAG,GAEnD,MAAMf,EAAIoN,KAAWrM,GACrB,GAAiB,iBAANf,EACP,MAAM,IAAImB,MAAM,0EAEpB,MAAMsQ,EAAK,IAAIH,KAAKtR,GACpB,GAAIoC,OAAOuO,MAAMc,EAAGC,WAChB,MAAM,IAAIvQ,sDAAsDnB,MAEpE,OAAOyR,EAAGO,gBAKDC,IAHwBF,KAGA,CAACpR,EAAsB7B,IAAiB,IAAIiC,KAG7E9B,OAAAkO,EAAA,EAAAlO,CAAkB,wBAAyB8B,EAAM,EAAG,GAEpD,MAAMf,EAAIoN,KAAWrM,GACrB,GAAiB,iBAANf,EACP,MAAM,IAAImB,MAAM,2EAEpB,MAAMsQ,EAAK,IAAIH,KAAKtR,GACpB,GAAIoC,OAAOuO,MAAMc,EAAGC,WAChB,MAAM,IAAIvQ,uDAAuDnB,MAErE,OACIyR,EAAGS,iBACHT,EAAGU,cAAgB,EACnBV,EAAGW,aACHX,EAAGY,cACHZ,EAAGa,gBACHb,EAAGc,gBACHd,EAAGe,qBACH,EACAf,EAAGgB,eAMEC,IAHyBT,KAGC,CAACtR,EAAsB7B,IAAiB,IAAIiC,KAG/E9B,OAAAkO,EAAA,EAAAlO,CAAkB,0BAA2B8B,EAAM,EAAG,GAEtD,MAAMf,EAAIoN,KAAWrM,GACrB,GAAiB,iBAANf,EACP,MAAM,IAAImB,MAAM,6EAEpB,MAAMsQ,EAAK,IAAIH,KAAKtR,GACpB,GAAIoC,OAAOuO,MAAMc,EAAGC,WAChB,MAAM,IAAIvQ,yDAAyDnB,MAEvE,OACIyR,EAAGkB,cACHlB,EAAGmB,WAAa,EAChBnB,EAAGoB,UACHpB,EAAGqB,WACHrB,EAAGsB,aACHtB,EAAGuB,aACHvB,EAAGwB,mBACFxB,EAAGyB,oBAEJzB,EAAG0B,YAMEC,IAH2BV,KAGlB,CAAC/R,EAAsB7B,IAAiB,IAAIiC,KAM9D,GAFA9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAEjB,IAAhBA,EAAKG,OAAc,CAEnB,OADU,IAAImS,OAAOtS,EAAK,IACjBuS,KAAKvS,EAAK,IAGnB,OADU,IAAIsS,OAAOtS,EAAK,GAAIA,EAAK,IAC1BuS,KAAKvS,EAAK,MAMdwS,IAHUH,KAGI,CAACzS,EAAsB7B,IAAiB,IAAIiC,KAGnEyS,QAAQC,OAAO1S,GACR,OAKE2S,IAHeH,KAGC,CAAC5S,EAAsB7B,IAAiB,IAAIiC,KAGrEyS,QAAQG,SAAS5S,GACV,OAKE6S,IAHiBF,KAGD,CAAC/S,EAAsB7B,IAAiB,IAAIiC,KAGrEyS,QAAQK,SAAS9S,GACV,OAKE+S,IAHiBF,KAGF,CAACjT,EAAsB7B,IAAiB,IAAIiC,KAIpEyS,QAAQO,QAAQhT,GACT,OAKEiT,IAHgBF,KAGE,CAACnT,EAAsB7B,IAAiB,IAAIiC,KAIvEyS,QAAQS,WAAWlT,GACZ,OAKEmT,IAHmBF,KAGD,CAACrT,EAAsB7B,IAAiB,IAAIiC,KAItEyS,QAAgBW,WAAWpT,GACrB,OAEqBmT,KCjtCjB,IAAAE,KA5OXtV,KAAM,OACNiE,GAAImK,IAEJpO,KAAM,OACNiE,GAAIsK,IAEJvO,KAAM,QACNiE,GAAIuK,IAEJxO,KAAM,SACNiE,GAAIyK,IAEJ1O,KAAM,UACNiE,GAAI0K,IAEJ3O,KAAM,QACNiE,GAAI4K,IAEJ7O,KAAM,SACNiE,GAAI4K,IAEJ7O,KAAM,QACNiE,GAAI6K,IAEJ9O,KAAM,oBACNiE,GAAI8K,IAEJ/O,KAAM,QACNiE,GAAI+K,IAEJhP,KAAM,MACNiE,GAAIgL,IAEJjP,KAAM,MACNiE,GAAIgL,IAEJjP,KAAM,UACNiE,GAAIiL,IAEJlP,KAAM,MACNiE,GAAIiL,IAEJlP,KAAM,QACNiE,GAAIkL,IAEJnP,KAAM,WACNiE,GAAImL,IAEJpP,KAAM,YACNiE,GDoM0B,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAItE9B,OAAAkO,EAAA,EAAAlO,CAAkB,iBAAkB8B,EAAM,GAE1C,MAAMoN,EAAiBf,KAAWrM,GAC5B8E,EAAM6H,KAAY3M,GACxB,IAAI1B,EAAa,KAEjBJ,OAAA+C,EAAA,EAAA/C,CAAa0B,EAAO1B,OAAA+C,EAAA,EAAA/C,CAAe0B,GAAOwC,OAAO,GACjD,IACI,GAAI,EAAIpC,EAAKG,OACT,GAAIiN,EAAgB,CAChB9O,KACA,IAAK,MAAM6C,KAAKnB,EAAK2B,MAAM,GACvBrD,EAAE0E,KAAK9E,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,SAG3B,IAAK,MAAMA,KAAKnB,EAAK2B,MAAM,GACvBrD,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,QAI5B7C,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOkF,GAb5B,QAgBI5G,OAAA+C,EAAA,EAAA/C,CAAe0B,GAGnB,OAAOtB,KChOPP,KAAM,aACNiE,GDoOsB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAGlE9B,OAAAkO,EAAA,EAAAlO,CAAkB,aAAc8B,EAAM,GAEtC,MAAMkD,EAAyBlD,EAAK,GACpC,IAAMuB,MAAMC,QAAQ0B,GAChB,MAAM,IAAI9C,MAAM,8DAGpB,IAAI9B,EAAa,KAEjB,MAAM+D,EAAiBnE,OAAA+C,EAAA,EAAA/C,CAAyB0B,EAAOsD,GACvDhF,OAAA+C,EAAA,EAAA/C,CAAa0B,MAAW,EAAMyC,GAC9B,IACI,IAAK,MAAMlB,KAAKnB,EAAK2B,MAAM,GACvBrD,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,GAF5B,QAKIjD,OAAA+C,EAAA,EAAA/C,CAAe0B,GAGnB,OAAOtB,KCxPPP,KAAM,YACNiE,GAAIwL,IAEJzP,KAAM,aACNiE,GAAI2L,IAEJ5P,KAAM,WACNiE,GD0UoB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAAkO,EAAA,EAAAlO,CAAkB,WAAY8B,EAAM,GAEpC,MAAM6E,EAAgBwH,KAAWrM,GAC3BgC,EAAKwL,EAAU5N,EAAV4N,IAA0BxN,EAAK2B,MAAM,IAKhD,OAJA/B,EAAM0E,QAAQR,IAAIe,EAAI9C,QAClBhE,KAAM8G,EAAI9C,OACVC,GAAI,CAACsR,EAAIC,IAAOvR,IAEbA,KCnVPjE,KAAM,YACNiE,GDuVyB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAGrE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,GAErC,MAAM6E,EAAgBwH,KAAWrM,GAC3BgC,EAAK2L,EAAe/N,EAAf+N,IAA+B3N,EAAK2B,MAAM,IAKrD,OAJA/B,EAAM0E,QAAQR,IAAIe,EAAI9C,QAClBhE,KAAM8G,EAAI9C,OACVC,GAAI,CAACsR,EAAIC,IAAOvR,IAEbA,KChWPjE,KAAM,WACNiE,GDoWoB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAAkO,EAAA,EAAAlO,CAAkB,WAAY8B,EAAM,EAAG,GAEvC,MAAM6E,EAAgBwH,KAAWrM,GAC3BwT,EAAO5T,EAAM0E,QAAQjG,IAAIwG,EAAI9C,QACnC,IAAKyR,EACD,MAAM,IAAIpT,iCAAiCyE,EAAI9C,0BAEnD,OAAOyR,EAAKxR,GAAGpC,EAAOiF,EAAI9C,WC5W1BhE,KAAM,SACNiE,GAAI6L,IAEJ9P,KAAM,UACNiE,GD8XmB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,GAEnC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACjC+D,EAAM7F,OAAA2M,EAAA,EAAA3M,CAAS4G,GACrB,OAAO2O,SAASrU,UAAU0O,MAAMnQ,KAC5BkH,EAAId,EAAMA,EAAIhC,OAAS7D,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOkF,IACvCD,EACA7E,EAAK2B,MAAM,OCtYf5D,KAAM,SACNiE,GD2YkB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAErC,IAAI1B,KACJ,IACIA,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAK,IAC3B,MAAO0T,GACL,GAAIA,aAAa7I,EAAA,EACb,MAAM6I,EAGNpV,EADA,EAAI0B,EAAKG,OACLgN,EAASvN,EAATuN,EAAsB,GAAM,IAC3B,SAAUjP,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO8T,KACvB,UAAWxV,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO1B,OAAA+C,EAAA,EAAA/C,CAAS0B,MACnCI,EAAK,IAEJ,KAGZ,OAAO1B,KC/ZPP,KAAM,SACNiE,GAAI+L,IAEJhQ,KAAM,QACNiE,GDyaiB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAI7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAM6E,EAAMwH,KAAWrM,GACvB,IAAI1B,KAUJ,OARIA,EADAmQ,EAAU5J,GACN3G,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAK,IAErB,EAAIA,EAAKG,OACLjC,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAK,IAErB,QCrbZjC,KAAM,aACNiE,GD4bqB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAIjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,IAAI1B,KAMJ,OAFIA,EAHE2Q,GAAcpK,EAAK,MAGjB3G,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOkF,GAFhBD,KCncR9G,KAAM,UACNiE,GD2cmB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAI/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,GAEnC,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,EAAKG,OAAS,EAAG3C,GAAK,EAAG,CACzC,MAAMK,EAAImC,EAAKxC,GACT2D,EAAInB,EAAKxC,EAAI,GACnB,GAAIiR,EAAUvQ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO/B,IAC1B,OAAOK,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,GAG/B,OAAO,QCtdPpD,KAAM,WACNiE,GD0doB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAIhE9B,OAAAkO,EAAA,EAAAlO,CAAkB,WAAY8B,EAAM,GAEpC,MAAM6E,EAAMwH,KAAWrM,GACjB8E,EAAM9E,EAAK2B,MAAM,GACvB,IAAIrD,EAAa,KACjB,KAAOmQ,EAAUvQ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOiF,KAC7B,IAAK,MAAM1D,KAAK2D,EACZxG,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,GAG5B,OAAO7C,KCtePP,KAAM,cACNiE,GD0esB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAIlE9B,OAAAkO,EAAA,EAAAlO,CAAkB,aAAc8B,EAAM,GAEtC,MAAM6E,EAAMwH,KAAWrM,GACjB8E,EAAM9E,EAAK2B,MAAM,GACvB,IAAIrD,EAAa,KAEjB,GACI,IAAK,MAAM6C,KAAK2D,EACZxG,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,SAEnBsN,EAAUvQ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOiF,KACnC,OAAOvG,KCvfPP,KAAM,WACNiE,GD2foB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAIhE9B,OAAAkO,EAAA,EAAAlO,CAAkB,WAAY8B,EAAM,GAEpC,MAAM6E,EAAMwH,KAAWrM,GACjB8E,EAAM9E,EAAK2B,MAAM,GACvB,IAAIrD,EAAa,KACjB,KAAOqQ,EAAMzQ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOiF,KACzB,IAAK,MAAM1D,KAAK2D,EACZxG,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,GAG5B,OAAO7C,KCvgBPP,KAAM,cACNiE,GD2gBsB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAIlE9B,OAAAkO,EAAA,EAAAlO,CAAkB,aAAc8B,EAAM,GAEtC,MAAM6E,EAAMwH,KAAWrM,GACjB8E,EAAM9E,EAAK2B,MAAM,GACvB,IAAIrD,EAAa,KACjB,GACI,IAAK,MAAM6C,KAAK2D,EACZxG,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,SAEnBwN,EAAMzQ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOiF,KAC/B,OAAOvG,KCvhBPP,KAAM,YACNiE,GD2hBqB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAIjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,GAErC,MAAM+D,EAAM7F,OAAA2M,EAAA,EAAA3M,CAASmO,KAAWrM,IAChC,IAAM+D,EACF,MAAM,IAAI3D,MAAM,0EAEpB,MAAMgC,EAAQlE,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOmE,GAAK,GAE5C9E,EAAIf,OAAA+C,EAAA,EAAA/C,CAASyO,KAAY3M,IACzB8E,EAAM9E,EAAK2B,MAAM,GACvB,IAAIrD,EAAa,KACjB,IAAK,IAAId,EAAI,EAAGA,EAAIyB,EAAGzB,IAAK,CACxB4E,EAAM2B,EAAIhC,QAAUvE,EACpB,IAAK,MAAM2D,KAAK2D,EACZxG,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,GAG5B,OAAO7C,KC9iBPP,KAAM,SACNiE,GDkjBkB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,GAElC,MAAM+D,EAAM7F,OAAA2M,EAAA,EAAA3M,CAASmO,KAAWrM,IAChC,IAAM+D,EACF,MAAM,IAAI3D,MAAM,uEAEpB,MAAMgC,EAAQlE,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOmE,GAAK,GAE5C4P,EAAOhH,KAAY3M,GACzB,IAAMuB,MAAMC,QAAQmS,GAChB,MAAM,IAAIvT,MAAM,sEAGpB,MAAM0E,EAAM9E,EAAK2B,MAAM,GACvB,IAAIrD,EAAa,KACjB,IAAK,MAAM4M,KAAKyI,EAAM,CAClBvR,EAAM2B,EAAIhC,QAAUmJ,EACpB,IAAK,MAAM/J,KAAK2D,EACZxG,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,GAG5B,OAAO7C,KCzkBPP,KAAM,QACNiE,GAAIgM,IAEJjQ,KAAM,SACNiE,GDylBkB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,GAElC,IAAIuE,EAAS,KACTR,EAAM7F,OAAA2M,EAAA,EAAA3M,CAAS8B,EAAK,IAExB,IAAK+D,EACD,cAAe/D,EAAK,IACpB,IAAK,SAAU,IAAK,SAChB+D,GAAOhC,OAAQ4E,OAAO3G,EAAK,KAC3B,MACJ,QACIuE,EAAIrG,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAK,IAKjC,GAAI+D,EAAK,CACL,MAAM3B,EAAQlE,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOmE,GAAK,GAClD,IAAM3B,EACF,MAAM,IAAIhC,4DAA4D2D,EAAIhC,2BAE9EwC,EAAInC,EAAM2B,EAAIhC,QAGlB,IAAK,IAAIvE,EAAI,EAAGA,EAAIwC,EAAKG,OAAQ3C,IAAK,CAClC,IAAI0N,EAASlL,EAAKxC,GACd6Q,GAAS,EACb,KAAOA,GACH,cAAenD,GACf,IAAK,WACD3G,EAAI2G,EAAE3G,GACN8J,GAAS,EACT,MACJ,IAAK,SACD,GAAI9M,MAAMC,QAAQ0J,GACdA,EAAIhN,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOsL,QAGpB,GADAnH,EAAM7F,OAAA2M,EAAA,EAAA3M,CAASgN,GAEXA,EAAInH,EAAIhC,WACL,KAAI7D,OAAOkB,UAAUC,eAAe1B,KAAKuN,EAAG,SAG/C,MAAM,IAAI9K,MAAM,wDAFhB8K,EAAIhN,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOsL,GAK5B,MACJ,IAAK,SACGA,EAAI,IACJA,EAAI3G,EAAEpE,OAAS+K,GAGvB,IAAK,SACD3G,EAAIA,EAAE2G,GACNmD,GAAS,EACT,MACJ,QACI,MAAM,IAAIjO,MAAM,yDAI5B,OAAOmE,KCvpBPxG,KAAM,SACNiE,GAAIiM,IAEJlQ,KAAM,SACNiE,GAAIkM,IAEJnQ,KAAM,WACNiE,GAAIuM,IAEJxQ,KAAM,OACNiE,GAAI0M,IAEJ3Q,KAAM,SACNiE,GAAI4M,KAEJ7Q,KAAM,QACNiE,GAAI+M,KAEJhR,KAAM,KACNiE,GAAIgN,KAEJjR,KAAM,KACNiE,GAAIkN,KAEJnR,KAAM,IACNiE,GAAImN,KAEJpR,KAAM,KACNiE,GAAIoN,KAEJrR,KAAM,IACNiE,GAAIqN,KAEJtR,KAAM,KACNiE,GAAIsN,KAEJvR,KAAM,UACNiE,GDo2BmB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAI/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,EAAG,GAEtC,MACM4T,GAAe7R,6BADkBnC,EAAMC,4BAE7C,GAAoB,IAAhBG,EAAKG,OAAc,CACnB,MAAM0C,EAAI3E,OAAA2M,EAAA,EAAA3M,CAAS8B,EAAK,IACxB,IAAI6C,EAGA,MAAM,IAAIzC,MAAM,wEAFhB6N,EAAOrO,EAAPqO,CAAkBpL,EAAG+Q,GAK7B,OAAOA,KCl3BP7V,KAAM,aACNiE,GAAIuN,KAEJxR,KAAM,WACNiE,GAAIwN,KAEJzR,KAAM,aACNiE,GAAIyN,KAEJ1R,KAAM,aACNiE,GAAI0N,KAEJ3R,KAAM,UACNiE,GAAI2N,KAEJ5R,KAAM,aACNiE,GAAI6N,KAEJ9R,KAAM,cACNiE,GAAI+N,KAEJhS,KAAM,aACNiE,GAAIiO,KAEJlS,KAAM,aACNiE,GAAIkO,KAEJnS,KAAM,OACNiE,GDq7BuB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAGnE,MAAM1B,KACN,IAAK,MAAM6C,KAAKnB,EAAM,CAClB,KAAIuB,MAAMC,QAAQL,IAAM,EAAIA,EAAEhB,QAqB1B,MAAM,IAAIC,MAAM,gEArBkB,CAClC,MAAM2D,EAAM7F,OAAA2M,EAAA,EAAA3M,CAASiD,EAAE,IACjB0S,EACF9P,EAAMA,EAAIhC,OACV4E,OAAOzI,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,EAAE,KACZ,IAAbA,EAAEhB,OAGF7B,EAAEuV,IAAW,EACO,IAAb1S,EAAEhB,OAGT7B,EAAEuV,GAAW3V,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,EAAE,IAI/B7C,EAAEuV,GACE3V,OAAA+C,EAAA,EAAA/C,CAAS0B,IAAUmC,OAAQnC,EAAME,OAAO2B,cAAckS,OACrD/R,OAAOT,EAAEQ,MAAM,MAMhC,OAAOrD,KCh9BPP,KAAM,iBACNiE,GAAImO,KAEJpS,KAAM,kBACNiE,GAAIoO,KAEJrS,KAAM,OACNiE,GAAIsO,KAEJvS,KAAM,qBACNiE,GAAIyO,KAEJ1S,KAAM,YACNiE,GAAI4O,KAEJ7S,KAAM,eACNiE,GAAI+O,KAEJhT,KAAM,0BACNiE,GAAIgP,KAEJjT,KAAM,0BACNiE,GAAIkP,KAEJnT,KAAM,6BACNiE,GAAI2P,KAEJ5T,KAAM,cACNiE,GAAIqO,KAEJtS,KAAM,SACNiE,GAAIqQ,KAEJtU,KAAM,eACNiE,GAAIwQ,KAEJzU,KAAM,iBACNiE,GAAI2Q,KAEJ5U,KAAM,iBACNiE,GAAI6Q,KAEJ9U,KAAM,gBACNiE,GAAI+Q,KAEJhV,KAAM,oBACNiE,GAAIiR,KAEJlV,KAAM,oBACNiE,GAAImR,KC6JO,IAAAW,KAlYX/V,KAAM,SACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,YACb4R,EAAK,GACLA,EAAK,MACDA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,SACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,aACb,GACA,KACI4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,UACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,cACb,KACI4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,aACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,aACb,GACA,KACI4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,WACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,iBACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,WACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAIzC,IADezV,OAAA2M,EAAA,EAAA3M,CAASyV,EAAK,GAAI,OAE7B,MAAM,IAAIvT,MAAM,yDAEpB,QAAS2B,OAAQ,cAAe7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAAKzV,OAAA2M,EAAA,EAAA3M,CAAM0B,IAASmC,OAAQ,aAC1E7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,OACdA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,UAIhDpD,KAAM,MACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,eACV4R,EAAKhS,MAAM,MAItB5D,KAAM,YACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAIzC,IADezV,OAAA2M,EAAA,EAAA3M,CAASyV,EAAK,GAAI,OAE7B,MAAM,IAAIvT,MAAM,yDAEpB,QAAS2B,OAAQ,cAAe7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAAKzV,OAAA2M,EAAA,EAAA3M,CAAM0B,IAASmC,OAAQ,cAC1E7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,OACdA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,UAIhDpD,KAAM,MACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,gBACV4R,EAAKhS,MAAM,MAItB5D,KAAM,UACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,gBACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,KACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,gBACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,WACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,iBACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,KACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,iBACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,SACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,eACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,UACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,gBACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,SACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,eACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,KACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,eACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,QACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAGzCzV,OAAAkO,EAAA,EAAAlO,CAAkB,QAASyV,EAAM,KAExB5R,OAAQ,WACb4R,EAAK,GACLzV,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,OACdA,EAAKhS,MAAM,OAIvB5D,KAAM,OACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,aACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,MACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,SACb4R,EAAK,MACDA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,WACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,cACb4R,EAAK,MACDA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,KACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,cACb4R,EAAK,MACDA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,QACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,cACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,SACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,eACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,YACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,kBACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,SACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,eACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,YACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,kBACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,UACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAIzC,IADczV,OAAA2M,EAAA,EAAA3M,CAASyV,EAAK,GAAI,MAE5B,MAAM,IAAIvT,MAAM,uDAEpB,QAAS2B,OAAQ,aACb7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAClBA,EAAK,MACDA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,QAIhDpD,KAAM,OACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAIzC,IADczV,OAAA2M,EAAA,EAAA3M,CAASyV,EAAK,GAAI,MAE5B,MAAM,IAAIvT,MAAM,oDAEpB,QAAS2B,OAAQ,UACb7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAClBA,EAAK,MACDA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,QAIhDpD,KAAM,OACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,aACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,OACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAGzCzV,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQyV,EAAM,EAAG,KAE1B5R,OAAQ,UACb7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAClBA,EAAK,OAIb5V,KAAM,gBACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAGzCzV,OAAAkO,EAAA,EAAAlO,CAAkB,gBAAiByV,EAAM,EAAG,KAEnC5R,OAAQ,aACXA,OAAQ,UACN7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAClBA,EAAK,QAKjB5V,KAAM,OACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAGzCzV,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQyV,EAAM,EAAG,KAE1B5R,OAAQ,UACb7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAClBA,EAAK,OAIb5V,KAAM,cACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAGzCzV,OAAAkO,EAAA,EAAAlO,CAAkB,cAAeyV,EAAM,EAAG,KAEjC5R,OAAQ,UACb7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAClBA,EAAK,OAIb5V,KAAM,OACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,aACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,MACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAGhC5R,OAAQ,YACT4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,IACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAIpC5R,OAAQ,WACL4R,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OCpWrC,IAAA4S,KA3BVhW,KAAM,MAAOiE,GAAI,CAACpC,EAAsB7B,SACxCA,KAAM,OAAQiE,GAAI,CAACpC,EAAsB7B,IAAiB,OAE1DA,KAAM,YAAaiE,GAAI,CAACpC,EAAsB7B,SAAiB,IAE/DA,KAAM,OAAQiE,GAAI,CAACpC,EAAsB7B,KAAiB,IAC1DA,KAAM,QAASiE,GAAI,CAACpC,EAAsB7B,KAAiB,IAC3DA,KAAM,KAAMiE,GAAI,CAACpC,EAAsB7B,KAAiB,IAExDA,KAAM,QAASiE,GAAI,CAACpC,EAAsB7B,KAAiB,IAC3DA,KAAM,SAAUiE,GAAI,CAACpC,EAAsB7B,KAAiB,IAC5DA,KAAM,KAAMiE,GAAI,CAACpC,EAAsB7B,KAAiB,IAExDA,KAAM,mBAAoBiE,GAAI,CAACpC,EAAsB7B,IAAiBsD,OAAO2S,oBAC7EjW,KAAM,YAAaiE,GAAI,CAACpC,EAAsB7B,IAAiBsD,OAAO2S,oBACtEjW,KAAM,YAAaiE,GAAI,CAACpC,EAAsB7B,IAAiBsD,OAAO4S,oBAEtElW,KAAM,kBAAmBiE,GAAI,CAACpC,EAAsB7B,IAAiBsD,OAAO6S,UAC5EnW,KAAM,mBAAoBiE,GAAI,CAACpC,EAAsB7B,IAAiBsD,OAAO8S,YAC7EpW,KAAM,mBAAoBiE,GAAI,CAACpC,EAAsB7B,IAAiBsD,OAAO+S,YAC7ErW,KAAM,yBAA0BiE,GAAI,CAACpC,EAAsB7B,IAAiBsD,OAAOgT,mBACnFtW,KAAM,yBAA0BiE,GAAI,CAACpC,EAAsB7B,IAAiBsD,OAAOiT,mBAEnFvW,KAAM,MAAOiE,GAAI,CAACpC,EAAsB7B,IAAiBsD,OAAOD,MCtBvD,SAAUmT,GAAQzU,GAI5B,OAHAA,EAAO0U,OAAS1U,EAAO0U,WAAa5S,OAAOyR,IAC3CvT,EAAO2U,QAAU3U,EAAO2U,YAAc7S,OAAOkS,IAC7ChU,EAAO4U,SAAW5U,EAAO4U,aAAe9S,OAAOmS,IACxCjU,ECHJ,MAAM6U,GAAa,CAAC/U,EAAsB7B,IAAiB,IAAIiC,KAGlE9B,OAAAkO,EAAA,EAAAlO,CAAkB,aAAc8B,EAAM,EAAG,GAEzC,IAAI6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GAIrC,OAHA6E,EAAM3G,OAAA+C,EAAA,EAAA/C,CAAS2G,GAGX,IAFJC,EAAM5G,OAAA+C,EAAA,EAAA/C,CAAS4G,IAGJA,EAAM,GAAKD,GAAOC,EAAM,EAExBA,GAAO,GAAKD,KAAUC,EAAO,GAM/B8P,IAHcD,KAGA,CAAC/U,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAAkO,EAAA,EAAAlO,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAI6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GAIrC,OAHA6E,EAAM3G,OAAA+C,EAAA,EAAA/C,CAAS2G,GAGX,IAFJC,EAAM5G,OAAA+C,EAAA,EAAA/C,CAAS4G,IAGJA,EAAM,GAAKD,GAAOC,EAAa,WAAND,GAAsB,EAAI,EAEnDC,GAAO,GAAKD,IAASC,EAAO,IAM9B+P,IAHeD,KAGD,CAAChV,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAAkO,EAAA,EAAAlO,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAI6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GAIrC,OAHA6E,EAAM3G,OAAA+C,EAAA,EAAA/C,CAAS2G,GAGX,IAFJC,EAAM5G,OAAA+C,EAAA,EAAA/C,CAAS4G,IAGJA,EAAM,GAAKD,IAAQC,EAAM,EAEzBA,GAAO,GAAKD,IAASC,EAAO,IAM9BgQ,IAHeD,KAGL,CAACjV,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,EAAG,GAEtC,MAAM6E,EAAMwH,KAAWrM,GACvB,OAAQ9B,OAAA+C,EAAA,EAAA/C,CAAS2G,KAKRkQ,IAHWD,KAGD,CAAClV,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,GAEnC,MAAM6E,EAAMwH,KAAWrM,GACvB,OAAOA,EAAK2B,MAAM,GAAGqT,OAAO,CAACnG,EAAMC,IAAS5Q,OAAA+C,EAAA,EAAA/C,CAAS2Q,GAAQ3Q,OAAA+C,EAAA,EAAA/C,CAAS4Q,GAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS2G,MAK7EoQ,IAHWF,KAGF,CAACnV,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,GAElC,MAAM6E,EAAMwH,KAAWrM,GACvB,OAAOA,EAAK2B,MAAM,GAAGqT,OAAO,CAACnG,EAAMC,IAAS5Q,OAAA+C,EAAA,EAAA/C,CAAS2Q,GAAQ3Q,OAAA+C,EAAA,EAAA/C,CAAS4Q,GAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS2G,MAK7EqQ,IAHUD,KAGA,CAACrV,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,GAEnC,MAAM6E,EAAMwH,KAAWrM,GACvB,OAAOA,EAAK2B,MAAM,GAAGqT,OAAO,CAACnG,EAAMC,IAAS5Q,OAAA+C,EAAA,EAAA/C,CAAS2Q,GAAQ3Q,OAAA+C,EAAA,EAAA/C,CAAS4Q,GAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS2G,MAK7EsQ,IAHWD,KAGJ,CAACtV,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,GAEzBA,EAAKgV,OAAO,CAACnG,EAAMC,IAAS5Q,OAAA+C,EAAA,EAAA/C,CAAS2Q,GAAQ3Q,OAAA+C,EAAA,EAAA/C,CAAS4Q,GAAO,KAK3DsG,IAHQD,KAGD,CAACvV,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,GAEhC,MAAM6E,EAAMwH,KAAWrM,GAEvB,OAAoB,IADPA,EAAK2B,MAAM,GACfxB,QAEGjC,OAAA+C,EAAA,EAAA/C,CAAS2G,GAGV7E,EAAK2B,MAAM,GAAGqT,OAAO,CAACnG,EAAMC,IAAS5Q,OAAA+C,EAAA,EAAA/C,CAAS2Q,GAAQ3Q,OAAA+C,EAAA,EAAA/C,CAAS4Q,GAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS2G,MAMjFwQ,IAHQD,KAGD,CAACxV,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,GAEhC,MAAM6E,EAAMwH,KAAWrM,GACvB,OAAOA,EAAK2B,MAAM,GAAGqT,OAAO,CAACnG,EAAMC,IAAS5Q,OAAA+C,EAAA,EAAA/C,CAAS2Q,GAAQ3Q,OAAA+C,EAAA,EAAA/C,CAAS4Q,GAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS2G,MAK7EyQ,IAHQD,KAGD,CAACzV,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,GAEhC,MAAM6E,EAAMwH,KAAWrM,GACvB,OAAOA,EAAK2B,MAAM,GAAGqT,OAAO,CAACnG,EAAMC,IAASyG,KAAAC,IAAAtX,OAAA+C,EAAA,EAAA/C,CAAS2Q,GAAS3Q,OAAA+C,EAAA,EAAA/C,CAAS4Q,IAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS2G,MAK9E4Q,IAHQH,KAGD,CAAC1V,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,GAEhC,MAAM6E,EAAMwH,KAAWrM,GACvB,OAAOA,EAAK2B,MAAM,GAAGqT,OAAO,CAACnG,EAAMC,IAAS5Q,OAAA+C,EAAA,EAAA/C,CAAS2Q,GAAQ3Q,OAAA+C,EAAA,EAAA/C,CAAS4Q,GAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS2G,MAK7E6Q,IAHQD,KAGD,CAAC7V,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,GAEhC,MAAM6E,EAAMwH,KAAWrM,GACvB,OAAOA,EAAK2B,MAAM,GAAGqT,OAAO,CAACnG,EAAMC,IAAS5Q,OAAA+C,EAAA,EAAA/C,CAAS2Q,GAAQ3Q,OAAA+C,EAAA,EAAA/C,CAAS4Q,GAAO5Q,OAAA+C,EAAA,EAAA/C,CAAS2G,MAK7E8Q,IAHQD,KAGD,CAAC9V,EAAsB7B,IAAiB,IAAIiC,IAGrDuV,KAAKrV,OAAQF,EAAK0D,IAAIvC,GAAKjD,OAAA+C,EAAA,EAAA/C,CAASiD,MAKlCyU,IAHQD,KAGD,CAAC/V,EAAsB7B,IAAiB,IAAIiC,IAGrDuV,KAAKtV,OAAQD,EAAK0D,IAAIvC,GAAKjD,OAAA+C,EAAA,EAAA/C,CAASiD,MAKlC0U,IAHQD,KAGD,CAAChW,EAAsB7B,IAAiB,IAAIiC,KAG5D,MAAM6C,EAAI7C,EAAK0D,IAAIvC,GAAKjD,OAAA+C,EAAA,EAAA/C,CAASiD,IACjC,OAAO0B,EAAE1C,OAAS,EAAI0C,EAAEmS,OAAO,CAACnG,EAAMC,IAASD,EAAOC,EAAM,GAAKjM,EAAE1C,OAASiB,MAKnE0U,IAHQD,KAGC,CAACjW,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAE9BuV,KAAKQ,MAAM7X,OAAA+C,EAAA,EAAA/C,CAASmO,KAAWrM,OAK7BgW,IAHUF,KAGF,CAAClW,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAE7BuV,KAAKU,KAAK/X,OAAA+C,EAAA,EAAA/C,CAASmO,KAAWrM,OAK5BkW,IAHSF,KAGA,CAACpW,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAE9BuV,KAAKY,MAAMjY,OAAA+C,EAAA,EAAA/C,CAASmO,KAAWrM,OAK7BoW,IAHUF,KAGH,CAACtW,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,EAAG,GAE5BuV,KAAKc,IAAInY,OAAA+C,EAAA,EAAA/C,CAASmO,KAAWrM,OAK3BsW,IAHQF,KAGA,CAACxW,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAE7BuV,KAAKgB,KAAKrY,OAAA+C,EAAA,EAAA/C,CAASmO,KAAWrM,OAEnBsW,KClJP,IAAAE,KAlGXzY,KAAM,KACNiE,GAAI2S,KAEJ5W,KAAM,eACNiE,GAAI2S,KAEJ5W,KAAM,KACNiE,GAAI4S,KAEJ7W,KAAM,gBACNiE,GAAI4S,KAEJ7W,KAAM,MACNiE,GAAI6S,KAEJ9W,KAAM,gBACNiE,GAAI6S,KAEJ9W,KAAM,WACNiE,GAAI8S,KAEJ/W,KAAM,WACNiE,GAAI+S,KAEJhX,KAAM,UACNiE,GAAIiT,KAEJlX,KAAM,WACNiE,GAAIkT,KAEJnX,KAAM,IACNiE,GAAImT,KAEJpX,KAAM,OACNiE,GAAImT,KAEJpX,KAAM,OACNiE,GAAImT,KAEJpX,KAAM,IACNiE,GAAIoT,KAEJrX,KAAM,OACNiE,GAAIoT,KAEJrX,KAAM,OACNiE,GAAIoT,KAEJrX,KAAM,IACNiE,GAAIqT,KAEJtX,KAAM,OACNiE,GAAIqT,KAEJtX,KAAM,KACNiE,GAAIsT,KAEJvX,KAAM,OACNiE,GAAIsT,KAEJvX,KAAM,IACNiE,GAAIyT,KAEJ1X,KAAM,OACNiE,GAAIyT,KAEJ1X,KAAM,IACNiE,GAAI0T,KAEJ3X,KAAM,OACNiE,GAAI0T,KAEJ3X,KAAM,OACNiE,GAAI2T,KAEJ5X,KAAM,OACNiE,GAAI4T,KAEJ7X,KAAM,OACNiE,GAAI6T,KAEJ9X,KAAM,SACNiE,GAAI8T,KAEJ/X,KAAM,QACNiE,GAAIgU,KAEJjY,KAAM,SACNiE,GAAIkU,KAEJnY,KAAM,OACNiE,GAAIoU,KAEJrY,KAAM,QACNiE,GAAIsU,KC7FO,IAAAG,MCAA,IAAAC,MCAD,SAAUC,GAAQ7W,GAI5B,OAHAA,EAAO0U,OAAS1U,EAAO0U,WAAa5S,OAAO4U,IAC3C1W,EAAO2U,QAAU3U,EAAO2U,YAAc7S,OAAO6U,IAC7C3W,EAAO4U,SAAW5U,EAAO4U,aAAe9S,OAAO8U,IACxC5W,QCVE8W,GACTtR,YAA0BuR,GAAAC,KAAAD,OAGnBvR,QAAQyR,GACX,IAAI/U,EAkBJ,OAhBIA,EADAT,MAAMC,QAAQuV,GACT,CAAC5V,EAAM6V,KACR,IAAK,MAAMnZ,KAAKkZ,EACZ,GAAiB,iBAANlZ,EAAgB,CACvB,GAAIsD,EAAEtD,GAAKmZ,EAAEnZ,GAAI,OAAO,EACxB,GAAIsD,EAAEtD,GAAKmZ,EAAEnZ,GAAI,OAAQ,MACtB,CACH,MAAMoZ,EAAgB,SAATpZ,EAAE,IAAiB,EAAI,EACpC,GAAIsD,EAAEtD,EAAE,IAAMmZ,EAAEnZ,EAAE,IAAK,OAAO,EAAIoZ,EAClC,GAAI9V,EAAEtD,EAAE,IAAMmZ,EAAEnZ,EAAE,IAAK,OAAQ,EAAIoZ,EAG3C,OAAO,GAGNF,EAEF,IAAIH,GAAME,KAAKD,KAAKlV,MAAM,GAAGuV,KAAKlV,IAGtCsD,QAAQyR,GACX,IAAI/U,EAEAA,EADAT,MAAMC,QAAQuV,GACT,CAAC5V,EAAM6V,KACR,IAAK,MAAMnZ,KAAKkZ,EACZ,GAAI5V,EAAEtD,KAAOmZ,EAAEnZ,GAAI,OAAO,EAE9B,OAAO,GAGNkZ,EAET,MAAMzY,KACN,IAAI6Y,EAAQ,EACR3Z,EAAI,EACR,KAAOA,EAAIsZ,KAAKD,KAAK1W,OAAQ3C,IACnBwE,EAAG8U,KAAKD,KAAKM,GAAQL,KAAKD,KAAKrZ,GAAIA,EAAGsZ,KAAKD,QAC7CvY,EAAE0E,KAAK8T,KAAKD,KAAKlV,MAAMwV,EAAO3Z,IAC9B2Z,EAAQ3Z,GAIhB,OADAc,EAAE0E,KAAK8T,KAAKD,KAAKlV,MAAMwV,EAAO3Z,IACvB,IAAIoZ,GAAMtY,GAGdgH,WAAWrG,GACd,GAAiB,iBAANA,EACP,OAAO6X,KAAKM,QAAQ,CAACvU,EAAG4D,EAAGyC,EAAOmO,IACzBnO,EAAQjK,GAAO,GAGrB,CACH,MAAMqY,EAAIpZ,OAAO6E,QAAQwU,MAAOtY,EAAEuY,aAAclJ,KAAMrP,EAAEuY,cAAevY,GACjEX,EAAIwY,KAAKM,QAAQ,CAACvU,EAAG4D,EAAGyC,EAAOmO,IAC7BC,EAAEG,QAAUJ,EAAMlX,OACb+I,EAAQoO,EAAEG,QAAY,EAEpBvO,GAASoO,EAAEC,MACbrO,EAAQoO,EAAEC,OAAW,GAGpBrO,EAAQoO,EAAEC,OAASD,EAAEE,cAAkB,GAmBrD,OAfsB,IAAlBlZ,EAAEuY,KAAK1W,OACHmX,EAAEG,OAASnZ,EAAEuY,KAAK,GAAG1W,QACrB7B,EAAEuY,KAAK7T,SAGPsU,EAAEC,MAAQjZ,EAAEuY,KAAK,GAAG1W,QAEpB7B,EAAEuY,KAAK/T,YAGXxE,EAAEuY,KAAK1W,OAAS,GACZ7B,EAAEuY,KAAKvY,EAAEuY,KAAK1W,OAAS,GAAGA,OAASmX,EAAEhJ,MACrChQ,EAAEuY,KAAK7T,SAGR1E,GAIRgH,MAAMtD,GACT,OAAO,IAAI4U,GAAME,KAAKD,KAAKa,OAAO1V,IAK/BsD,OAAUtD,GACb,OAAOA,EAAK8U,KAAKD,KAAKnT,IAAI1B,GAAM8U,KAAKD,MAMvC,SAAUc,GAASd,GACrB,OAAO,IAAID,GAASC,GC/FjB,MAoBMe,GAAU,CAAChY,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,EAAG,GAEtC,MAAM6E,EAAMwH,KAAWrM,GACvB,cAAe6E,GACf,IAAK,SACD,KAAO,WAAYA,GACf,MAGR,IAAK,SACD,OAAOA,EAAI1E,OAEf,MAAM,IAAIC,MAAM,0EAKPyX,IAHWD,KAGH,CAAChY,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAM6E,EAAMwH,KAAWrM,GACvB,GAAmB,iBAAR6E,EACP,OAAOA,EAAI8D,OAEf,MAAM,IAAIvI,MAAM,+DAKP0X,IAHSD,KAGG,CAACjY,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAM6E,EAAMwH,KAAWrM,GACvB,GAAmB,iBAAR6E,EACP,OAAOA,EAAIkT,WAEf,MAAM,IAAI3X,MAAM,mEAKP4X,IAHaF,KAGD,CAAClY,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAM6E,EAAMwH,KAAWrM,GACvB,GAAmB,iBAAR6E,EACP,OAAOA,EAAIoT,YAEf,MAAM,IAAI7X,MAAM,mEAKP8X,IAHaF,KAGC,CAACpY,EAAsB7B,IAAiB,IAAIiC,KAKnE,GAFA9B,OAAAkO,EAAA,EAAAlO,CAAkB,cAAe8B,EAAM,EAAG,GAEnB,iBAAZA,EAAK,IAAsC,iBAAZA,EAAK,IAAsC,iBAAZA,EAAK,GAC1E,OAAOA,EAAK,GAAG0J,MAAM1J,EAAK,IAAImH,KAAKnH,EAAK,IAE5C,MAAM,IAAII,MAAM,mFAKP+X,IAHeD,KAGN,CAACtY,EAAsB7B,IAAiB,IAAIiC,KAK9D,GAFA9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAEd,iBAAZA,EAAK,IAAsC,iBAAZA,EAAK,GAC3C,OAAOA,EAAK,GAAG0J,MAAM1J,EAAK,IAE9B,MAAM,IAAII,MAAM,uEAKPgY,IAHUD,KAGF,CAACvY,EAAsB7B,IAAiB,IAAIiC,KAMzD,GAHJ9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEzBuB,MAAMC,QAAQxB,EAAK,IACtBA,EAAKG,OAAS,EAAG,CACjB,GAAuB,iBAAZH,EAAK,GACZ,OAAOA,EAAK,GAAGmH,KAAKnH,EAAK,IAE7B,MAAM,IAAII,MAAM,6DAEhB,OAAOJ,EAAK,GAAGmH,SAQdkR,IAHSD,KAGC,CAACxY,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,GAEnC,MAAM6E,EAAMwH,KAAWrM,GACvB,cAAe6E,GACf,IAAK,SACD,KAAO,WAAYA,GACf,MAGR,IAAK,SACD,OAAOA,EAAIjD,UAAU5B,EAAK2B,MAAM,IAEpC,MAAM,IAAIvB,MAAM,2EAKPkY,IAHWD,KAGF,CAACzY,EAAsB7B,IAAiB,IAAIiC,KAM9D,GAFA9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAEjB,IAAhBA,EAAKG,SACkB,iBAAZH,EAAK,IAAmBuB,MAAMC,QAAQxB,EAAK,KAClD,OAAOA,EAAK,GAAG2B,MAAMzD,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,IAAK9B,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,KAG9D,GAAoB,IAAhBA,EAAKG,SACkB,iBAAZH,EAAK,IAAmBuB,MAAMC,QAAQxB,EAAK,KAClD,OAAOA,EAAK,GAAG2B,MAAMzD,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,KAG3C,MAAM,IAAII,kDAAkDJ,EAAKG,OAAS,gCAKjEoY,IAHUD,KAGH,CAAC1Y,EAAsB7B,IAAiB,IAAIiC,KAK5D,GAFA9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,EAAG,GAEZ,iBAAZA,EAAK,IAAmBuB,MAAMC,QAAQxB,EAAK,IAClD,OAAOA,EAAK,GAAG2B,MAAM,EAAGzD,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,KAE1C,MAAM,IAAII,MAAM,uEAKPoY,IAHQD,KAGA,CAAC3Y,EAAsB7B,IAAiB,IAAIiC,KAK7D,GAFA9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEb,iBAAZA,EAAK,IAAmBuB,MAAMC,QAAQxB,EAAK,IAAK,CACvD,MAAMf,GAAKf,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,IACzB,OAAOA,EAAK,GAAG2B,MAAM1C,GAAK,GAAKoC,OAAOuO,MAAM3Q,GAAKe,EAAK,GAAGG,OAASlB,GAEtE,MAAM,IAAImB,MAAM,wEAKPqY,IAHSD,KAGD,CAAC5Y,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEzBuB,MAAMC,QAAQxB,EAAK,IAC1BA,EAAK,GAAGgD,KAAKhD,EAAK,IACXA,EAAK,KAOP0Y,IAHSD,KAGF,CAAC7Y,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,EAAG,GAExBuB,MAAMC,QAAQxB,EAAK,IAE1B,OADUA,EAAK,GAAGiD,QASb0V,IAJQD,KAIA,CAAC9Y,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,OAAO8E,EAAID,KAMF+T,IAHSD,KAGE,CAAC/Y,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAAkO,EAAA,EAAAlO,CAAkB,WAAY8B,EAAM,EAAG,GAEvC,MAAM6E,EAAMwH,KAAWrM,GACvB,GAAIuB,MAAMC,QAAQqD,GACd,OAAOA,EAAIlD,MAAM,GAAGyC,UAExB,MAAM,IAAIhE,MAAM,iEAKPyY,IAHYD,KAGU,CAAChZ,EAAsB7B,IAAiB,IAAIiC,KAG3E9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAM6E,EAAMwH,KAAWrM,GACvB,GAAIuB,MAAMC,QAAQqD,GACd,OAAOA,EAAIT,UAEf,MAAM,IAAIhE,MAAM,kEAKP0Y,IAHuBD,KAGf,CAACjZ,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,GAAIuB,MAAMC,QAAQqD,GACd,OAAOA,EAAIkU,KAAKjU,GAEpB,MAAM,IAAI1E,MAAM,8DAKP4Y,IAHSF,KAGC,CAAClZ,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,EAAG,GAEtC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,GAAIuB,MAAMC,QAAQqD,GACd,OAAOA,EAAI6S,OAAO5S,GAEtB,MAAM,IAAI1E,MAAM,gEAKP6Y,IAHWD,KAGJ,CAACpZ,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAAkO,EAAA,EAAAlO,CAAkB,OAAQ8B,EAAM,EAAG,GAEnC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,GAAIuB,MAAMC,QAAQqD,GACd,OAAOA,EAAInB,IAAIoB,GAEnB,MAAM,IAAI1E,MAAM,6DAKP8Y,IAHQD,KAGE,CAACrZ,EAAsB7B,IAAiB,IAAIiC,KAI/D9B,OAAAkO,EAAA,EAAAlO,CAAkB,UAAW8B,EAAM,EAAG,GAEtC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,GAAIuB,MAAMC,QAAQqD,GACd,OAAI7E,EAAKG,OAAS,EACP0E,EAAImQ,OAAOlQ,GAEXD,EAAImQ,OAAOlQ,EAAK9E,EAAK,IAGpC,MAAM,IAAII,MAAM,gEAKP+Y,IAHWD,KAGO,CAACtZ,EAAsB7B,IAAiB,IAAIiC,KAIvE9B,OAAAkO,EAAA,EAAAlO,CAAkB,kBAAmB8B,EAAM,EAAG,GAE9C,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,GAAIuB,MAAMC,QAAQqD,GACd,OAAI7E,EAAKG,OAAS,EACP0E,EAAIuU,YAAYtU,GAEhBD,EAAIuU,YAAYtU,EAAK9E,EAAK,IAGzC,MAAM,IAAII,MAAM,wEAKPiZ,IAHmBF,KAGX,CAACvZ,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,GAAIuB,MAAMC,QAAQqD,GACd,OAAOA,EAAIlD,MAAM,GAAGuV,KAAKpS,GAE7B,MAAM,IAAI1E,MAAM,8DAKPkZ,IAHSD,KAGU,CAACzZ,EAAsB7B,IAAiB,IAAIiC,KAGxE9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAErC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,GAAIuB,MAAMC,QAAQqD,GACd,OAAOA,EAAIqS,KAAKpS,GAEpB,MAAM,IAAI1E,MAAM,+DAKPmZ,IAHoBD,KAGN,CAAC1Z,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAAkO,EAAA,EAAAlO,CAAkB,eAAgB8B,EAAM,EAAG,GAE3C,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,IAAMuB,MAAMC,QAAQsD,GAChB,MAAM,IAAI1E,MAAM,mEAGpB,OAAOuX,GAAM7S,GAAc0U,WAAW3U,GAAK4U,WAKlCC,IAHeH,KAGJ,CAAC3Z,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,IAAMuB,MAAMC,QAAQsD,GAChB,MAAM,IAAI1E,MAAM,gEAGpB,OAAOuX,GAAM7S,GAAcsS,QAAQvS,GAAK4U,WAK/BE,IAHYD,KAGD,CAAC9Z,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAAkO,EAAA,EAAAlO,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,IAAMuB,MAAMC,QAAQsD,GAChB,MAAM,IAAI1E,MAAM,gEAGpB,OAAOuX,GAAM7S,GAAc8U,QAAQ/U,GAAK4U,WAK/BI,IAHYF,KAGH,CAAC/Z,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAErC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,GAAuB,mBAAZA,EAAK,GACZ,MAAM,IAAII,MAAM,gEAEpB,IAAMmB,MAAMC,QAAQsD,GAChB,MAAM,IAAI1E,MAAM,6DAGpB,OAAOuX,GAAM7S,GAAcW,MAAMZ,GAAK4U,WAEnBI,KC5VR,IAAAC,KAzFX/b,KAAM,SACNiE,GDGkB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAAkO,EAAA,EAAAlO,CAAkB,SAAU8B,EAAM,EAAG,GAErC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACjCmX,EAAQjZ,OAAA+C,EAAA,EAAA/C,CAAS2G,IAAQ,EACzBkV,EAAO7b,OAAA+C,EAAA,EAAA/C,CAAS4G,IAAQ,EAExBkV,EAAQha,EAAKG,OAAS,GAAIjC,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,MAAkBmX,GAAS4C,EAAO,GAAK,GAC/E9a,EAAIsW,KAAKgB,KAAKwD,EAAO5C,GAAS5B,KAAKgB,KAAKyD,KAAU,EACnDzE,KAAKQ,MAAOR,KAAKc,IAAI0D,EAAO5C,GAAS5B,KAAKc,IAAI2D,IAAU,EAAK,EAIlE,OAFApa,EAAMC,WAAaZ,EACnBf,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO,GACT2B,MAAM0Y,MAAM9Z,OAAQlB,GAAI,CAACkC,EAAG3D,IAAM2Z,EAAQ3Z,EAAIwc,MCjBrDjc,KAAM,UACNiE,GAAI4V,KAEJ7Z,KAAM,QACNiE,GAAI6V,KAEJ9Z,KAAM,aACNiE,GAAI8V,KAEJ/Z,KAAM,aACNiE,GAAIgW,KAEJja,KAAM,eACNiE,GAAIkW,KAEJna,KAAM,SACNiE,GAAImW,KAEJpa,KAAM,QACNiE,GAAIoW,KAEJra,KAAM,UACNiE,GAAIqW,KAEJta,KAAM,SACNiE,GAAIsW,KAEJva,KAAM,OACNiE,GAAIuW,KAEJxa,KAAM,QACNiE,GAAIwW,KAEJza,KAAM,QACNiE,GAAIyW,KAEJ1a,KAAM,OACNiE,GAAI0W,KAEJ3a,KAAM,QACNiE,GAAI2W,KAEJ5a,KAAM,WACNiE,GAAI4W,KAEJ7a,KAAM,YACNiE,GAAI6W,KAEJ9a,KAAM,QACNiE,GAAI8W,KAEJ/a,KAAM,UACNiE,GAAIgX,KAEJjb,KAAM,OACNiE,GAAIiX,KAEJlb,KAAM,UACNiE,GAAIkX,KAEJnb,KAAM,oBACNiE,GAAIkX,KAEJnb,KAAM,oBACNiE,GAAImX,KAEJpb,KAAM,QACNiE,GAAIqX,KAEJtb,KAAM,SACNiE,GAAIsX,KAEJvb,KAAM,eACNiE,GAAIuX,KAEJxb,KAAM,YACNiE,GAAI0X,KAEJ3b,KAAM,YACNiE,GAAI2X,KAEJ5b,KAAM,SACNiE,GAAI6X,KCpEO,IAAAK,KAhBXnc,KAAM,KACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAIzC,IADczV,OAAA2M,EAAA,EAAA3M,CAASyV,EAAK,GAAI,KAE5B,MAAM,IAAIvT,MAAM,sDAEpB,QAAS2B,OAAQ,SACb4R,EAAK,GACLA,EAAK,OCVF,IAAAwG,MCAD,SAAUC,GAAQta,GAI5B,OAHAA,EAAO0U,OAAS1U,EAAO0U,WAAa5S,OAAOkY,IAC3Cha,EAAO2U,QAAU3U,EAAO2U,YAAc7S,OAAOsY,IAC7Cpa,EAAO4U,SAAW5U,EAAO4U,aAAe9S,OAAOuY,IACxCra,ECIJ,MAsDMua,GAAY,CAACza,EAAsB7B,IAAiB,IAAIiC,KAGjE,MAAM1B,KACN,IAAK,MAAM6C,KAAKnB,EAAM,CAClB,KAAIuB,MAAMC,QAAQL,IAAM,EAAIA,EAAEhB,QA8I1B,MAAM,IAAIC,MAAM,8DA9IkB,CAClC,MAAM2D,EAAM7F,OAAA2M,EAAA,EAAA3M,CAASiD,EAAE,IACjB0S,EACF9P,EAAMA,EAAIhC,OACV4E,OAAOzI,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,EAAE,KAC7B,OAAQ0S,GACR,IAAK,QAEG,GAAiB,IAAb1S,EAAEhB,OAGF7B,EAAEuV,GAAW,QACV,GAAI1S,EAAEhB,QAAU,EAAG,CAItB,MAAMma,KACN,IAAK,MAAM/a,KAAK4B,EAAEQ,MAAM,GACpB,GAAIJ,MAAMC,QAAQjC,IAAM,EAAIA,EAAEY,OAC1Bma,EAAO3T,OAAOzI,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOL,EAAE,MAAQoH,OAAOzI,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOL,EAAE,UAC9D,GAAiB,iBAANA,EACd,IAAK,MAAMgF,KAAKhF,EAAEmK,MAAM,KAAM,CAC1B,MAAM6Q,EAAU,4BAA4BhI,KAAKhO,GAC7CgW,IACAD,EAAOC,EAAQ,IAAMA,EAAQ,IAK7Cjc,EAAEuV,GAAWyG,EAGrB,MACJ,IAAK,QAAS,IAAK,aAEX,GAAiB,IAAbnZ,EAAEhB,OAGF7B,EAAEuV,WACC,GAAI1S,EAAEhB,QAAU,EAAG,CAItB,IAAIqa,KACJ,IAAK,MAAM3c,KAAKsD,EAAEQ,MAAM,GAChBJ,MAAMC,QAAQ3D,GACd2c,EAAUA,EAAQ5Y,OAAO/D,EAAE6F,IAAI+W,GAAKvc,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO6a,KAChC,iBAAN5c,IACd2c,EAAUA,EAAQ5Y,OAAO/D,EAAE6L,MAAM,OAGzC,MAAMgR,KACA1Y,EAA0Ba,GAAMA,EACjC8X,QAAQ9c,GAAY,OAANA,QAAoB,IAANA,OACzB,EACC0D,MAAMC,QAAQ3D,GAAKmE,EAAGnE,GAAK6c,EAAG1X,KAAK2D,OAAO9I,KACnDmE,EAAGwY,GACHlc,EAAEuV,GAAW6G,EAGrB,MACJ,IAAK,YAEG,GAAiB,IAAbvZ,EAAEhB,OAGF7B,EAAEuV,GAAW,QACV,GAAI1S,EAAEhB,QAAU,EAAG,CAItB,IAAIqa,EAAkB,GACtB,IAAK,MAAM3c,KAAKsD,EAAEQ,MAAM,GAAI,CACxB,IAAIiZ,EAAW,GACf,GAAIrZ,MAAMC,QAAQ3D,GAAI,CAClB,MAAM6c,KACA1Y,EAA0Ba,GAAMA,EACjCa,IAAI+W,GAAKvc,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO6a,IACzBE,QAAQF,GAAY,OAANA,QAAoB,IAANA,OACzB,EACClZ,MAAMC,QAAQiZ,GAAKzY,EAAGyY,GAAKC,EAAG1X,KAAK2D,OAAO8T,KACnDzY,EAAGnE,GACH+c,EAAWF,EAAGvT,KAAK,SACC,iBAANtJ,IACd+c,EAAW/c,GAEX,EAAI2c,EAAQra,OAAQqa,GAAW,IAAMI,EACpCJ,EAAUI,EAEnBtc,EAAEuV,GAAW2G,EAGrB,MACJ,IAAK,0BAEoB,IAAbrZ,EAAEhB,OACF7B,EAAEuV,IAAYgH,OAAQ,IACf1Z,EAAEhB,QAAU,EACnB7B,EAAEuV,IAAYgH,OAAQ3c,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,EAAE,KAExC7C,EAAEuV,IAAYgH,OACV3c,OAAA+C,EAAA,EAAA/C,CAAS0B,IAAUmC,OAAQnC,EAAME,OAAO2B,cAAckS,OACrD/R,OAAOT,EAAEQ,MAAM,MAI5B,MACJ,IAAK,eAEoB,IAAbR,EAAEhB,OACF7B,EAAEuV,IAAYiH,OAAQ,IACf3Z,EAAEhB,QAAU,EACnB7B,EAAEuV,IAAYiH,OAAQ5c,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,EAAE,KAExC7C,EAAEuV,IAAYiH,OACV5c,OAAA+C,EAAA,EAAA/C,CAAS0B,IAAUmC,OAAQnC,EAAME,OAAO2B,cAAckS,OACrD/R,OAAOT,EAAEQ,MAAM,MAI5B,MACJ,QAEyB,IAAbR,EAAEhB,OAGF7B,EAAEuV,IAAW,EACO,IAAb1S,EAAEhB,OAGT7B,EAAEuV,GAAW3V,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOuB,EAAE,IAI/B7C,EAAEuV,GACE3V,OAAA+C,EAAA,EAAA/C,CAAS0B,IAAUmC,OAAQnC,EAAME,OAAO2B,cAAckS,OACrD/R,OAAOT,EAAEQ,MAAM,OASxC,OAAOrD,GAIX,SAASyc,GAAiBnb,KAAyBI,GAC/C,IAAIgb,EAAWhb,EACXib,KACJ,GAAI,EAAIjb,EAAKG,QAAUoB,MAAMC,QAAQxB,EAAK,IAAK,CAC/B9B,OAAA2M,EAAA,EAAA3M,CAAS8B,EAAK,GAAG,GAAI,OAG7Bib,EAAQZ,GAAUza,EAAO,GAAjBya,IAAwBra,EAAK,GAAG2B,MAAM,IAC9CqZ,EAAWA,EAASrZ,MAAM,IAGlC,OAAQsZ,QAAOD,YAIZ,MAAME,GAAkB,CAACtb,EAAsB7B,IAAiB,IAAIiC,KACvE,MAAMib,MAACA,EAADD,SAAQA,GAAYD,GAAiBnb,KAAUI,GACrD,OAAQJ,EAAME,OAAOqb,IAAYpd,EAAMkd,KAAUD,IAIxCI,GAAoBC,GAAmB,CAACzb,EAAsB7B,IAAiB,IAAIiC,KAC5F,MAAMib,MAACA,EAADD,SAAQA,GAAYD,GAAiBnb,KAAUI,GACrD,OAAQJ,EAAME,OAAOqb,IAAYE,EAAWJ,KAAUD,ICxO3C,IAAAM,KARXvd,KAAM,SACNiE,GDQuB,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAInE9B,OAAAkO,EAAA,EAAAlO,CAAkB,cAAe8B,EAAM,GAEvC,MAAM6E,IAACA,EAADC,IAAMA,GAAO0H,KAAoBxM,GACvC,IAAI1B,KASJ,OARImQ,EAAU5J,KACN,EAAI7E,EAAKG,QACT7B,EAAE0E,MAAMjB,OAAQnC,EAAME,OAAO2B,cAAcmK,aAAc5L,EAAK2B,MAAM,IACpErD,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOtB,IAEpBA,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOkF,IAGrBxG,KCtBPP,KAAM,UACNiE,GD0B0B,CAACpC,EAAsB7B,IAAiB,IAAIiC,KAGtE9B,OAAAkO,EAAA,EAAAlO,CAAkB,iBAAkB8B,EAAM,GAE1C,MAAM6E,EAAMwH,KAAWrM,GACjB1B,KACN,IAAIiD,MAAMC,QAAQqD,GAiBd,MAAM,IAAIzE,MAAM,mEAhBhB,IAAK,IAAI5C,EAAI,EAAGA,EAAIqH,EAAI1E,OAAQ3C,IAAK,CACjC,MAAM2D,EAAI0D,EAAIrH,GACR+G,EAAI4I,EAASvN,EAATuN,EAAsB,GAAM,IACjC,QAASjP,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,KACtB,SAAU3D,IACV,SAAUU,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOiF,KACvB,UAAW3G,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO1B,OAAA+C,EAAA,EAAA/C,CAAS0B,GAAOwC,YACvCpC,EAAK2B,MAAM,IAEb,EAAI3B,EAAKG,QAAUoB,MAAMC,QAAQ+C,GACjCjG,EAAE0E,QAAQuB,GAEVjG,EAAE0E,KAAKuB,GAOnB,OAAOrG,OAAA+C,EAAA,EAAA/C,CAAS0B,IACTmC,OAAQnC,EAAME,OAAO2B,cAAcmK,WACrChK,OAAOtD,EAAEoF,IAAI+W,KAAO1Y,OAAQnC,EAAME,OAAO2B,cAAcuC,OAAQyW,SE7BzD,IAAAc,KA7BXxd,KAAM,IACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,GAClCzV,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,KAGxB5V,KAAM,OACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAIpC5R,OAAQ,UACT4R,EAAK,MACDA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OAIhDpD,KAAM,QACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,KAIpC5R,OAAQ,WACT4R,EAAK,MACDA,EAAKhS,MAAM,GAAG+B,IAAIvC,GAAKjD,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAOuB,OCvBrC,IAAAqa,MCID,SAAUC,GAAQ3b,EAAwB4b,GACpD5b,EAAO0U,OAAS1U,EAAO0U,WAAa5S,OAAO0Z,IAC3Cxb,EAAO2U,QAAU3U,EAAO2U,YAAc7S,OAAO2Z,IAC7Czb,EAAO4U,SAAW5U,EAAO4U,aAAe9S,OAAO4Z,IAE/C,MAAMG,EACFzd,OAAOyJ,QAAQ+T,EAAQC,YACtBjY,IAAIvC,KAAOpD,KAAMoD,EAAE,GAAIa,GAAIoZ,GAAiBja,EAAE,OAWnD,OATArB,EAAO0U,MAAQ1U,EAAO0U,MAAM5S,QACvB7D,KAAM+B,EAAO2B,cAAcmK,SAAU5J,GAAIoZ,GAAiBM,EAAQE,iBAChED,GAGP7b,EAAO0E,2BAA6B0W,GACpCpb,EAAOqb,IAAMO,EAAQP,IACrBrb,EAAO+b,YAAcH,EAAQE,YAEtB9b,ECrBJ,MAAMgc,GAAc,CAAClc,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAAkO,EAAA,EAAAlO,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAI+b,EAAwB/b,EAAK,GAYjC,MAXuB,iBAAZ+b,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAE9BA,EAAUA,EAAQC,KAAKzX,IACnB,IAEI,OADA0J,EAAOrO,EAAPqO,CAAkBjO,EAAK,GAAIuE,GACpBA,EACT,MAAOmP,GACL,OAAOuI,QAAQE,OAAOzI,OAUrB0I,IAJeN,GAAY,MAIb,CAAClc,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAAkO,EAAA,EAAAlO,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAI+b,EAAwB/b,EAAK,GAYjC,MAXuB,iBAAZ+b,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAE9BA,EAAUA,EAAQC,KAAKzX,IACnB,IAEI,OADA2J,EAAOtO,EAAPsO,CAAkBlO,EAAK,GAAIuE,GACpBA,EACT,MAAOmP,GACL,OAAOuI,QAAQE,OAAOzI,QASrB2I,IAHeD,GAAY,MAGnB,CAACxc,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAAkO,EAAA,EAAAlO,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,IAAI+b,EAAwB/b,EAAK,GAIjC,GAHuB,iBAAZ+b,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAEP,mBAAZ/b,EAAK,GACZ+b,EAAUA,EAAQC,KAAKhc,EAAK,GAAIA,EAAK,QAClC,CACH,GAAuB,mBAAZA,EAAK,GACZ,MAAM,IAAII,MAAM,6DAEpB2b,EAAUA,EAAQC,KAAKhc,EAAK,IAEhC,OAAO+b,IAKEO,IAHSD,KAGK,CAACzc,EAAsB7B,IAAiB,IAAIiC,KAGnE,MAAMuc,EAAgCvc,EAAK2B,MAAM,GACjD,IAAK,IAAInE,EAAI,EAAGA,EAAI+e,EAASpc,OAAQ3C,IACN,iBAAhB+e,EAAS/e,IAAwD,mBAA7B+e,EAAS/e,GAAWwe,OAC/DO,EAAS/e,GAAKye,QAAQC,QAAQK,EAAS/e,KAG/C,OAAOye,QAAQO,IAAID,KAKVE,IAHeH,KAGD,CAAC1c,EAAsB7B,IAAiB,IAAIiC,KAGnE,MAAMuc,EAAgCvc,EAAK2B,MAAM,GACjD,IAAK,IAAInE,EAAI,EAAGA,EAAI+e,EAASpc,OAAQ3C,IACN,iBAAhB+e,EAAS/e,IAAwD,mBAA7B+e,EAAS/e,GAAWwe,OAC/DO,EAAS/e,GAAKye,QAAQC,QAAQK,EAAS/e,KAO/C,MAAMkf,EAAWpd,GAAoB,IAAI2c,QAAQ,CAACU,EAAKC,IAAQtd,EAAE0c,KAAKY,EAAKD,IAG3E,MAFiBE,IAA4BH,EAAOT,QAAQO,IAAIK,EAAGnZ,IAAIgZ,KAEhEI,CAAQP,KAKNQ,IAHeN,KAGA,CAAC7c,EAAsB7B,IAAiB,IAAIiC,KAIpE9B,OAAAkO,EAAA,EAAAlO,CAAkB,eAAgB8B,EAAM,GAExC,IAAI+b,EAAwB/b,EAAK,GACV,iBAAZ+b,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAE9B,MAAMiB,EAAUhd,EAAK2B,MAAM,GAC3B,IAAK,IAAInE,EAAI,EAAGA,EAAIwf,EAAQ7c,OAAQ3C,IAChC,GAA0B,mBAAfwf,EAAQxf,GAAmB,CAClC,MAAM+G,EAAIyY,EAAQxf,GAClBwf,EAAQxf,GAAK,KAAM+G,GAG3B,IAAIjF,EAAIyc,EACR,IAAK,MAAMte,KAAKuf,EACZ1d,EAAIA,EAAE0c,KAAKve,GAEf,OAAO6B,IAKE2d,IAHgBF,KAGD,CAACnd,EAAsB7B,IAAiB,IAAIiC,KAIpE9B,OAAAkO,EAAA,EAAAlO,CAAkB,eAAgB8B,EAAM,GAExC,IAAI+b,EAAwB/b,EAAK,GACV,iBAAZ+b,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAE9B,MAAMiB,EAAUhd,EAAK2B,MAAM,GAC3B,IAAK,IAAInE,EAAI,EAAGA,EAAIwf,EAAQ7c,OAAQ3C,IAChC,GAA0B,mBAAfwf,EAAQxf,GAAmB,CAClC,MAAM+G,EAAIyY,EAAQxf,GAClBwf,EAAQxf,GAAK,KAAM+G,GAI3B,MAAM2Y,EAAY,IAAI3b,MAAMyb,EAAQ7c,QAC9Bgd,EAAY,IAAI5b,MAAMyb,EAAQ7c,QAE9Bid,KACN,IAAK,IAAI5f,EAAI,EAAGA,EAAIwf,EAAQ7c,OAAQ3C,IAChC4f,EAAGpa,KAAK,IAAIiZ,QAAa,CAACC,EAAcC,KACpCe,EAAU1f,GAAM+G,KACZ,IAAI8Y,EAAmBL,EAAQxf,GAAG+G,GAChB,iBAAP8Y,GAAsC,mBAAZA,EAAGrB,OACpCqB,EAAKpB,QAAQC,QAAQmB,IAGzBA,EACCrB,KAAK7a,GAAK+a,EAAQ/a,IAClBmc,MAAM5J,GAAKyI,EAAOzI,MAEvByJ,EAAU3f,GAAK2e,KASvB,OALAJ,EAAQC,KACJzX,GAAK2Y,EAAUvC,QAAQ4C,GAAKA,EAAEhZ,IAC9BmP,GAAKyJ,EAAUxC,QAAQ4C,GAAKA,EAAE7J,KAG3B0J,IAEkBH,KC1Jd,IAAAO,KAvBXzf,KAAM,eACNiE,GAAI8Z,KAEJ/d,KAAM,eACNiE,GAAIoa,KAEJre,KAAM,QACNiE,GAAIqa,KAEJte,KAAM,eACNiE,GAAIsa,KAEJve,KAAM,eACNiE,GAAIya,KAEJ1e,KAAM,gBACNiE,GAAI+a,KAEJhf,KAAM,gBACNiE,GAAIib,KCSO,IAAAQ,KA1BX1f,KAAM,aACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAGzCzV,OAAAkO,EAAA,EAAAlO,CAAkB,aAAcyV,EAAM,EAAG,KAEhC5R,OAAQ,gBACb7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAClBA,EAAK,OAIb5V,KAAM,aACNiE,GAAI,CAACpC,EAAsB7B,IAAkB4V,IAGzCzV,OAAAkO,EAAA,EAAAlO,CAAkB,aAAcyV,EAAM,EAAG,KAEhC5R,OAAQ,gBACb7D,OAAA2M,EAAA,EAAA3M,CAAM0B,EAAO+T,EAAK,IAClBA,EAAK,OCrBF,IAAA+J,MCAD,SAAUC,GAAQ7d,GAI5B,OAHAA,EAAO0U,OAAS1U,EAAO0U,WAAa5S,OAAO4b,IAC3C1d,EAAO2U,QAAU3U,EAAO2U,YAAc7S,OAAO6b,IAC7C3d,EAAO4U,SAAW5U,EAAO4U,aAAe9S,OAAO8b,IACxC5d,4QCOJ,MAAM8d,IACT3Z,KAAM,QACND,MAAO,SACPiB,QAAS,WACTd,OAAQ,UACRzC,OAAQ,UAERmD,IAAK,OACLC,IAAK,OACL+Y,KAAM,QACNC,KAAM,QACNC,GAAI,MACJpK,KAAM,QAEN9P,IAAK,aACLma,OAAQ,UACRza,KAAM,QACN0a,MAAO,SAEP3a,GAAI,MACJ4a,KAAM,QAENC,MAAO,SACPC,QAAS,YACTxa,MAAO,SACPya,QAAS,YAEThgB,IAAK,OACLigB,OAAQ,gBACRC,KAAM,cACNza,IAAK,OACLnG,KAAM,QAEN6gB,IAAK,OACLC,IAAK,OACLC,GAAI,MAEJ9S,SAAU,YAGD+S,IACThc,yBAAyB,EACzBic,gBAAgB,EAChBlT,eAAe,EACfD,cAAc,EACdnK,cAAc,EACdgJ,kBAAkB,EAClBwB,6BAA6B,EAC7BlE,4BAA4B,EAC5BqE,eAAe,EACfrH,mBAAmB,EACnBia,oBAAoB,EACpB9e,aAAc,EAEd0B,cAAemc,GACflJ,WACAD,UACAD,UAKJ,SAASsK,GAAUhf,EAAwBif,EAAc3V,EAAwCK,GAC7F,OACIL,QAA4B,iBAAZA,GAAwBA,GAAWA,EACnDK,OAAQA,MAERP,MAAO,EACPC,IAAK,EACLF,KAAM,EAENpJ,UAAW,EAEXqC,SAAUI,cAAc,EAAOF,MAAO2c,IAEtCjd,SAAU,IAAIuF,IAAyBvH,EAAO2U,OAAO/Q,IAAIvC,IAAMA,EAAEpD,KAAMoD,KACvEmD,QAAS,IAAI+C,IAAwBvH,EAAO0U,MAAM9Q,IAAIvC,IAAMA,EAAEpD,KAAMoD,KACpEsB,UAAW,IAAI4E,IAA0BvH,EAAO4U,QAAQhR,IAAIvC,IAAMA,EAAEpD,KAAMoD,KAE1ErB,UAKR,SAASkf,GAAWpf,EAAsBwJ,EAAwCK,GAO9E,OANA7J,EAAMwJ,QAA6B,iBAAZA,GAAwBA,GAAWA,EAC1DxJ,EAAM6J,OAASA,MACf7J,EAAMsJ,MAAQ,EACdtJ,EAAMuJ,IAAM,EACZvJ,EAAMqJ,KAAO,EACbrJ,EAAMC,UAAY,EACXD,EAuBL,SAAUqf,GAAYC,GACxB,IAAIpf,EAASof,GAAQhhB,OAAO6E,UAAW4b,IACnCpc,KACA4c,KAEJ,MAAM5M,EAAO,CAAC3S,EAAsBL,KAChC,GAAIO,EAAO8e,eACP,IAAK,IAAIphB,EAAI,EAAGA,EAAI+B,EAAEY,OAAQ3C,IAC1B+B,EAAE/B,GAAKU,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOL,EAAE/B,IAIjC,OAAIsC,EAAO+e,mBACa,IAAbtf,EAAEY,OAAeZ,EAAE,GAAKA,EAExBA,EAAEA,EAAEY,OAAS,IAItBod,EAA4B,CAACnU,KAA2CK,KAC1E,MAAM7J,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc6G,EAASK,GACzE,OAAO8I,EAAK3S,EAAOuf,EAAQvd,OAAOsK,EAAMtM,MAgD5C,OA7CA2d,EAAE6B,YAAeC,KACb,MAAMzf,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc,IAChE,OAAOgQ,EAAK3S,EAAOuf,EAAQvd,OAAOyd,MAErC9B,EAAU+B,KAAO,MACd,MAAM1f,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc,IAChEgQ,EAAK3S,EAAOuf,EAAQxd,MAAM,IAC1B,MAAM4d,EAAgC,CAACnW,KAA2CK,KAC9EuV,GAAWpf,EAAOwJ,EAASK,GACpB8I,EAAK3S,EAAOsM,EAAMtM,KAG7B,OADC2f,EAAcC,KAAOD,EACfA,IAEXhC,EAAEkC,WAAcV,KACZxc,EAAcrE,OAAO6E,UAAWgc,OACzBxB,IAEXA,EAAEmC,cAAiBX,KACfxc,EAAcrE,OAAO6E,UAAWR,EAAawc,OACtCxB,IAEXA,EAAEoC,WAAa,EAACvW,KAA2CK,KACvD,MAAM7J,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc6G,EAASK,GAEzE,OADA0V,EAAUjT,EAAMtM,GACT2d,IAEXA,EAAEqC,cAAiBP,KACfF,EAAUE,EACH9B,IAEXA,EAAEsC,cAAgB,EAACzW,KAA2CK,KAC1D,MAAM7J,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc6G,EAASK,GAEzE,OADA0V,EAAUA,EAAQvd,OAAOsK,EAAMtM,IACxB2d,IAEXA,EAAEuC,iBAAoBT,KAClBF,EAAUA,EAAQvd,OAAOyd,GAClB9B,IAEXA,EAAEhJ,QAAWwL,KACTjgB,EAASigB,EAAUjgB,GACZyd,IAGJA,EAsBL,SAAUyC,GAAiBd,GAC7B,IAAIpf,EAASof,GAAQhhB,OAAO6E,UAAW4b,IACnCpc,KACA4c,KAEJ,MAAM5M,EAAO,CAAO3S,EAAsBL,IAAgB0gB,GAAAnJ,UAAA,qBACtD,GAAIhX,EAAO8e,eACP,IAAK,IAAIphB,EAAI,EAAGA,EAAI+B,EAAEY,OAAQ3C,IAC1B+B,EAAE/B,GAAKU,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOL,EAAE/B,IAEL,iBAAT+B,EAAE/B,IAA4B,OAAT+B,EAAE/B,IAA6C,mBAAtB+B,EAAE/B,GAAWwe,OAClEzc,EAAE/B,SAAW+B,EAAE/B,IAK3B,OAAIsC,EAAO+e,mBACa,IAAbtf,EAAEY,OAAeZ,EAAE,GAAKA,EAExBA,EAAEA,EAAEY,OAAS,KAItBod,EAAiC,CAAOnU,KAA2CK,IAAiBwW,GAAAnJ,UAAA,qBACtG,MAAMlX,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc6G,EAASK,GACzE,OAAO8I,EAAK3S,EAAOuf,EAAQvd,OAAOsK,EAAMtM,OAiE5C,OA9DA2d,EAAE6B,YAAeC,KACb,MAAMzf,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc,IAChE,OAAOgQ,EAAK3S,EAAOuf,EAAQvd,OAAOyd,MAErC9B,EAAU+B,KAAO,MACd,MAaM1f,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc,IAChEgQ,EAAK3S,EAAOuf,EAAQxd,MAAM,IAC1B,MAAM4d,EAAqC,CAAOnW,KAA2CK,IAAiBwW,GAAAnJ,UAAA,qBAE1G,OADAkI,GAAWpf,EAAOwJ,EAASK,GACpB8I,EAAK3S,EAAOsM,EAAMtM,MAO7B,OADC2f,EAAcC,KAJ2B,EAACpW,KAA2CK,KAClFuV,GAAWpf,EAAOwJ,EAASK,GApBd,EAACyW,EAAqB3gB,KACnC,GAAIO,EAAO8e,eACP,IAAK,IAAIphB,EAAI,EAAGA,EAAI+B,EAAEY,OAAQ3C,IAC1B+B,EAAE/B,GAAKU,OAAA+C,EAAA,EAAA/C,CAASgiB,EAAM3gB,EAAE/B,IAIhC,OAAIsC,EAAO+e,mBACa,IAAbtf,EAAEY,OAAeZ,EAAE,GAAKA,EAExBA,EAAEA,EAAEY,OAAS,IAWjBggB,CAASvgB,EAAOsM,EAAMtM,MAG1B2f,IAEXhC,EAAEkC,WAAcV,KACZxc,EAAcrE,OAAO6E,UAAWgc,OACzBxB,IAEXA,EAAEmC,cAAiBX,KACfxc,EAAcrE,OAAO6E,UAAWR,EAAawc,OACtCxB,IAEXA,EAAEoC,WAAa,EAACvW,KAA2CK,KACvD,MAAM7J,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc6G,EAASK,GAEzE,OADA0V,EAAUjT,EAAMtM,GACT2d,IAEXA,EAAEqC,cAAiBP,KACfF,EAAUE,EACH9B,IAEXA,EAAEsC,cAAgB,EAACzW,KAA2CK,KAC1D,MAAM7J,EAAQkf,GAAUhf,EAAQ5B,OAAO6E,UAAWR,GAAc6G,EAASK,GAEzE,OADA0V,EAAUA,EAAQvd,OAAOsK,EAAMtM,IACxB2d,IAEXA,EAAEuC,iBAAoBT,KAClBF,EAAUA,EAAQvd,OAAOyd,GAClB9B,IAEXA,EAAEhJ,QAAWwL,KACTjgB,EAASigB,EAAUjgB,GACZyd,IAGJA,EAKJ,MAAM6C,GAAI,MACb,MAAMtgB,EAAyB5B,OAAO6E,UAAW4b,IAKjD,OAHA7e,EAAO8e,gBAAiB,EACxB9e,EAAO+e,oBAAqB,EAErBI,GAAYnf,IANN,GAWJugB,GAAI,MACb,IAAIvgB,EAAyB5B,OAAO6E,UAAW4b,IAW/C,OAVA7e,EAAO2B,cAAgBvD,OAAO6E,UAAWjD,EAAO2B,eAC5CmK,SAAU,aAKd9L,EAASsa,GADTta,EAAS6W,GADT7W,EAASyU,GAAYzU,MAIdmM,eAAgB,EAEhBgT,GAAYnf,IAZN,GAeJwgB,GAAKD,GACLE,GAAOF,GAKPG,GAAU,MACnB,IAAI1gB,EAAyB5B,OAAO6E,UAAW4b,IAY/C,OAXA7e,EAAO2B,cAAgBvD,OAAO6E,UAAWjD,EAAO2B,eAC5CmK,SAAU,aAMd9L,EAAS6d,GADT7d,EAASsa,GADTta,EAAS6W,GADT7W,EAASyU,GAAYzU,OAKdmM,eAAgB,EAEhB+T,GAAiBlgB,IAbL,GAiBV2gB,GAAWD,GAEXE,GAAaF,GAIbG,GAAK,MACd,IAAI7gB,EAAyB5B,OAAO6E,UAAW4b,IAY/C,OAXA7e,EAAO2B,cAAgBvD,OAAO6E,UAAWjD,EAAO2B,eAC5CmK,SAAU,aAKd9L,EAASsa,GADTta,EAAS6W,GADT7W,EAASyU,GAAYzU,MAIdmM,eAAgB,EACvBnM,EAAO+e,oBAAqB,EAErBI,GAAYnf,IAbL,GAmBL8gB,GAAW,MACpB,IAAI9gB,EAAyB5B,OAAO6E,UAAW4b,IAa/C,OAZA7e,EAAO2B,cAAgBvD,OAAO6E,UAAWjD,EAAO2B,eAC5CmK,SAAU,aAMd9L,EAAS6d,GADT7d,EAASsa,GADTta,EAAS6W,GADT7W,EAASyU,GAAYzU,OAKdmM,eAAgB,EACvBnM,EAAO+e,oBAAqB,EAErBmB,GAAiBlgB,IAdJ,GAmBlB,SAAU+gB,GAAiBnF,GAC7B,IAAI5b,EAAyB5B,OAAO6E,UAAW4b,IAS/C,OAJA7e,EAAS2b,GADT3b,EAASsa,GADTta,EAAS6W,GADT7W,EAASyU,GAAYzU,KAGO4b,IAErBzP,eAAgB,EAEhBgT,GAAYnf,GAKjB,SAAUghB,GAAuBpF,GACnC,IAAI5b,EAAyB5B,OAAO6E,UAAW4b,IAU/C,OAJA7e,EAAS2b,GADT3b,EAAS6d,GADT7d,EAASsa,GADTta,EAAS6W,GADT7W,EAASyU,GAAYzU,MAIO4b,IAErBzP,eAAgB,EAEhB+T,GAAiBlgB,GC1b5BxC,EAAAQ,EAAA0B,EAAA,qCAAAuhB,KAAAzjB,EAAAQ,EAAA0B,EAAA,kCAAAwhB,KAAA1jB,EAAAQ,EAAA0B,EAAA,mCAAAyhB,KAAA3jB,EAAAQ,EAAA0B,EAAA,yCAAAoe,KAAAtgB,EAAAQ,EAAA0B,EAAA,kCAAAmf,KAAArhB,EAAAQ,EAAA0B,EAAA,gCAAAyf,KAAA3hB,EAAAQ,EAAA0B,EAAA,qCAAAwgB,KAAA1iB,EAAAQ,EAAA0B,EAAA,sBAAA4gB,KAAA9iB,EAAAQ,EAAA0B,EAAA,sBAAA6gB,KAAA/iB,EAAAQ,EAAA0B,EAAA,uBAAA8gB,KAAAhjB,EAAAQ,EAAA0B,EAAA,yBAAA+gB,KAAAjjB,EAAAQ,EAAA0B,EAAA,4BAAAghB,KAAAljB,EAAAQ,EAAA0B,EAAA,6BAAAihB,KAAAnjB,EAAAQ,EAAA0B,EAAA,+BAAAkhB,KAAApjB,EAAAQ,EAAA0B,EAAA,uBAAAmhB,KAAArjB,EAAAQ,EAAA0B,EAAA,6BAAAohB,KAAAtjB,EAAAQ,EAAA0B,EAAA,wBAAAqhB,KAAAvjB,EAAAQ,EAAA0B,EAAA,8BAAAshB,KAAAxjB,EAAAQ,EAAA0B,EAAA,gCAAA+U,KAAAjX,EAAAQ,EAAA0B,EAAA,sCAAAmX,KAAArZ,EAAAQ,EAAA0B,EAAA,oCAAA4a,KAAA9c,EAAAQ,EAAA0B,EAAA,+BAAAic,KAAAne,EAAAQ,EAAA0B,EAAA,sCAAAme,KAoCO,MAAMoD,IACTG,KAAM7N,GACN8N,WAAY3K,GACZ4K,SAAUtH,GACVqB,IAAKG,GACL+F,WAAY7D,IAGHwD,IACTE,KAAMpN,GACNqN,WAAY1K,GACZ2K,SAAUlH,GACViB,IAAKI,GACL8F,WAAY5D,IAGHwD,IACTC,KAAMnN,GACNoN,WAAYzK,GACZ0K,SAAUjH,GACVgB,IAAKK,GACL6F,WAAY3D","file":"liyad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"liyad\"] = factory();\n\telse\n\t\troot[\"liyad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         MaxEvaluationCountError } from './types';\r\n\r\n\r\n\r\nexport function setEvaluationCount(state: SxParserState) {\r\n    state.evalCount++;\r\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\r\n        throw new MaxEvaluationCountError();\r\n    }\r\n}\r\n\r\n\r\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\r\n    if (args.length < min) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\r\n    }\r\n    if (max && max < args.length) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\r\n    }\r\n    return true;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedPair,\r\n         SxDottedFragment,\r\n         SxToken,\r\n         SxScope,\r\n         isSymbol,\r\n         CapturedScopes }     from './types';\r\nimport { setEvaluationCount } from './errors';\r\n\r\n\r\n\r\nexport function toNumber(x: any) {\r\n    switch (typeof x) {\r\n    case 'object': case 'symbol': case 'function':\r\n        return NaN;\r\n    default:\r\n        return Number(x);\r\n    }\r\n}\r\n\r\n\r\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\r\n    if (state.config.enableSplice) {\r\n        for (let i = r.length - 1; i >= 0; i--) {\r\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\r\n            if (symSplice) {\r\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function resolveMacro(state: SxParserState, x: SxSymbol): ((list: SxToken[]) => SxToken) | false {\r\n    const macroInfo = state.macroMap.get(x.symbol);\r\n    if (macroInfo) {\r\n        return macroInfo.fn(state, x.symbol);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\r\n    if (typeof x === 'function') {\r\n        return x;\r\n    }\r\n    const funcInfo = state.funcMap.get(x.symbol);\r\n    if (funcInfo) {\r\n        return funcInfo.fn(state, x.symbol);\r\n    } else {\r\n        const v = resolveValueSymbol(state, x);\r\n        if (typeof v === 'function') {\r\n            return v;\r\n        }\r\n        if (state.config.funcSymbolResolverFallback) {\r\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\r\n            return localScope.scope;\r\n        }\r\n        if (localScope.capturedScopes &&\r\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\r\n            return localScope.capturedScopes[x.symbol];\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    const globalScope = getGlobalScope(state);\r\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\r\n        return globalScope.scope;\r\n    }\r\n    return nullIfNotDefined ? null : getScope(state).scope;\r\n}\r\n\r\n\r\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\r\n    const scope = resolveValueSymbolScope(state, x, true);\r\n    if (scope) {\r\n        return scope[x.symbol];\r\n    }\r\n    const symInfo = state.symbolMap.get(x.symbol);\r\n    if (symInfo) {\r\n        return symInfo.fn(state, x.symbol);\r\n    } else {\r\n        if (state.config.valueSymbolResolverFallback) {\r\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\r\n    const capturedScopes: CapturedScopes = {};\r\n    for (const n of names) {\r\n        const scope = resolveValueSymbolScope(state, n, true);\r\n        if (scope === null) {\r\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\r\n        }\r\n        capturedScopes[n.symbol] = scope;\r\n    }\r\n    return capturedScopes;\r\n}\r\n\r\n\r\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\r\n    const a: CapturedScopes[] = [];\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope.capturedScopes) {\r\n            a.unshift(localScope.capturedScopes);\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\r\n}\r\n\r\n\r\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\r\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\r\n}\r\n\r\n\r\nexport function uninstallScope(state: SxParserState): any {\r\n    if (state.scopes.length < 2) {\r\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\r\n    }\r\n    return state.scopes.pop();\r\n}\r\n\r\n\r\nexport function getScope(state: SxParserState) {\r\n    return state.scopes[state.scopes.length - 1];\r\n}\r\n\r\n\r\nexport function getGlobalScope(state: SxParserState) {\r\n    return state.scopes[0];\r\n}\r\n\r\n\r\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //    formalArgs: 'sym1 ... 'symN\r\n    //        fnBody: 'expr1 ... 'exprN\r\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\r\n        const front = fnBody.slice(0, fnBody.length - 1);\r\n        const tail = fnBody[fnBody.length - 1];\r\n        if (tail && tail[0].symbol === state.config.reservedNames.if) {\r\n            // S expression: ($if cond t-expr f-expr)\r\n            if (tail[3][0].symbol === state.config.reservedNames.self) {\r\n                // S expression (recursive):\r\n                //     (                                 ;; fnBody\r\n                //         expr1 ... exprN-1             ;; front\r\n                //         ($if cond                     ;; tail[0] [1]\r\n                //             t-expr                    ;;     [2]\r\n                //             ($self                    ;;     [3]\r\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\r\n                //     )\r\n                //\r\n                //  -> S exp (tail call optimization):\r\n                //     (                                                                  ;; fnBody\r\n                //         ($until cond                                                   ;; tail[1]\r\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\r\n                //                 expr1 ... exprN-1                                      ;; front\r\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\r\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\r\n                //             )                                                          ;;\r\n                //         )                                                              ;;\r\n                //         expr1 ... exprN-1                                              ;; front\r\n                //         t-expr                                                         ;; tail[2]\r\n                //     )\r\n\r\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\r\n\r\n                return [\r\n                    [{symbol: state.config.reservedNames.until}, tail[1],\r\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\r\n                            ...front,\r\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\r\n                            ...(tempVarsSyms.map((x, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\r\n                        ],\r\n                    ],\r\n                    ...front,\r\n                    tail[2],\r\n                ];\r\n            }\r\n        }\r\n    }\r\n    return fnBody;\r\n}\r\n\r\n\r\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\r\n    setEvaluationCount(state);\r\n\r\n    if (x === null || x === void 0) {\r\n        return x;\r\n    }\r\n    let r: SxToken = x;\r\n\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                return r;\r\n            }\r\n\r\n            r = resolveSplice(state, r);\r\n\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym);\r\n\r\n                if (m) {\r\n                    r = m(r);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        setEvaluationCount(state);\r\n    }\r\n\r\n    if (Array.isArray(r)) {\r\n        r = r.slice(0);\r\n        if (0 < r.length) {\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                if (sym.symbol === state.config.reservedNames.quote) {\r\n                    return r.slice(1, 2)[0];\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.eval) {\r\n                    return evaluate(state, r[1]);\r\n                }\r\n            }\r\n\r\n            const sprs = [];\r\n            for (let i = 1; i < r.length; i++) {\r\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\r\n                if (symSpr) {\r\n                    sprs.push(i);\r\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\r\n                    r[i] = Array.isArray(a) ? a : [a];\r\n                } else {\r\n                    r[i] = evaluate(state, r[i]);\r\n                }\r\n            }\r\n            for (const i of sprs.reverse()) {\r\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\r\n            }\r\n\r\n            let fn: any;\r\n            if (typeof r[0] === 'function') {\r\n                fn = r[0];\r\n            } else if (sym) {\r\n                fn = resolveFunctionSymbol(state, sym);\r\n            } else {\r\n                fn = evaluate(state, r[0]);\r\n            }\r\n\r\n            if (typeof fn === 'function') {\r\n                r = (fn as any)(...(r.slice(1)));\r\n            } else {\r\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\r\n            }\r\n        }\r\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\r\n        r = (r as SxExternalValue).value;\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\r\n        r = resolveValueSymbol(state, r as SxSymbol);\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\r\n        const car = evaluate(state, (r as SxDottedPair).car);\r\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\r\n        if (Array.isArray(cdr)) {\r\n            const a = (cdr as any[]).slice(0);\r\n            a.unshift(car);\r\n            r = a;\r\n        } else {\r\n            r = { car, cdr };\r\n        }\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\r\n        r = [\r\n            evaluate(state, (r as SxDottedFragment).dotted),\r\n        ];\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\r\n        r = [];\r\n    }\r\n\r\n    return r;\r\n}\r\n","\r\n\r\n\r\nexport type SxMacro = (state: SxParserState, name: string) => (list: SxToken[]) => SxToken;\r\n\r\nexport interface SxMacroInfo {\r\n    name: string;\r\n    fn: SxMacro;\r\n}\r\n\r\n\r\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\r\n\r\nexport interface SxFuncInfo {\r\n    name: string;\r\n    fn: SxFunc;\r\n}\r\n\r\n\r\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\r\n\r\nexport interface SxSymbolInfo {\r\n    name: string;\r\n    fn: SxSymbolResolver;\r\n}\r\n\r\n\r\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\r\n\r\nexport interface SxScope {\r\n    isBlockLocal: boolean;\r\n    scope: any;           // { [s: string]: any; };\r\n    capturedScopes?: CapturedScopes;\r\n}\r\n\r\n\r\nexport interface SxReservedNames {\r\n    eval: string;\r\n    quote: string;\r\n    unquote: string;\r\n    spread: string;\r\n    splice: string;\r\n\r\n    car: string;\r\n    cdr: string;\r\n    cons: string;\r\n    atom: string;\r\n    eq: string;\r\n    list: string;\r\n\r\n    let: string;\r\n    lambda: string;\r\n    self: string;\r\n    defun: string;\r\n\r\n    if: string;\r\n    cond: string;\r\n\r\n    while: string;\r\n    doWhile: string;\r\n    until: string;\r\n    doUntil: string;\r\n\r\n    get: string;\r\n    defvar: string;\r\n    setq: string;\r\n    set: string;\r\n    call: string;\r\n\r\n    not: string;\r\n    and: string;\r\n    or: string;\r\n\r\n    Template: string;\r\n}\r\n\r\nexport interface SxParserConfig {\r\n    raiseOnUnresolvedSymbol: boolean;\r\n    enableEvaluate: boolean;\r\n    enableHereDoc: boolean;\r\n    enableSpread: boolean;\r\n    enableSplice: boolean;\r\n    enableShorthands: boolean;\r\n    enableVerbatimStringLiteral: boolean;\r\n    enableTailCallOptimization: boolean;\r\n    stripComments: boolean;\r\n    wrapExternalValue: boolean;\r\n    reservedNames: SxReservedNames;\r\n    returnMultipleRoot: boolean;\r\n    maxEvalCount: number;\r\n\r\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\r\n    JsxFragment?: any;\r\n\r\n    funcs: SxFuncInfo[];\r\n    macros: SxMacroInfo[];\r\n    symbols: SxSymbolInfo[];\r\n\r\n    funcSymbolResolverFallback?: SxFunc;\r\n    valueSymbolResolverFallback?: SxSymbolResolver;\r\n}\r\n\r\nexport interface SxParserState {\r\n    strings: TemplateStringsArray | string[];\r\n    values: any[];\r\n\r\n    index: number;\r\n    pos: number;\r\n    line: number;\r\n\r\n    evalCount: number;\r\n\r\n    scopes: SxScope[];\r\n\r\n    macroMap: Map<string, SxMacroInfo>;\r\n    funcMap: Map<string, SxFuncInfo>;\r\n    symbolMap: Map<string, SxSymbolInfo>;\r\n\r\n    config: SxParserConfig;\r\n}\r\n\r\nexport interface SxEof {\r\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\r\n    eofSeq?: string;\r\n}\r\n\r\nexport interface SxExternalValue {\r\n    value: any;\r\n}\r\n\r\nexport interface SxSymbol {\r\n    'symbol': string;\r\n}\r\n\r\nexport interface SxComment {\r\n    comment: string;\r\n}\r\n\r\nexport interface SxDottedPair {\r\n    car: SxToken; // left\r\n    cdr: SxToken; // right\r\n}\r\n\r\nexport interface SxDottedFragment {\r\n    dotted: SxToken; // right\r\n}\r\n\r\n\r\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\r\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\r\nexport type SxChar = string | SxEof | SxExternalValue;\r\nexport type SxAtom = SxSymbol | string | number | boolean | null;\r\nexport type SxList = SxDottedPair | SxAtom[];\r\n\r\n\r\n\r\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\r\n\r\n\r\nexport interface CompilerContext {\r\n    _$_vars: any[];\r\n    varsCount: number;\r\n    varNames: Map<string, string>;\r\n    varNamesCount: number;\r\n    varDefs: string;\r\n    ops: Map<string, CompilerOperator>;\r\n    makeScope: (scoped: () => void) => void;\r\n    compileToken: (body: any[], i: number) => string;\r\n}\r\n\r\n\r\n\r\nexport interface LsxConfig {\r\n    jsx: (comp: any, props: any, ...children: any[]) => any;\r\n    jsxFlagment: any;\r\n    components: object;\r\n}\r\n\r\n\r\n\r\nexport function quote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.quote}, x];\r\n}\r\n\r\n\r\nexport function isQuoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.quote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function wrapByUnquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.unquote}, x];\r\n}\r\n\r\n\r\nexport function isUnquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.unquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function spread(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.spread}, x];\r\n}\r\n\r\n\r\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\r\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\r\n        if (name !== void 0) {\r\n            return x.symbol === name ? x : null;\r\n        } else {\r\n            return x;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport class FatalError extends Error {\r\n    public constructor(message?: string | undefined) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n\r\nexport class MaxEvaluationCountError extends FatalError {\r\n    public constructor() {\r\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\r\n    }\r\n}\r\n\r\n\r\nexport class ScriptTerminationError extends FatalError {\r\n    public constructor(where: string) {\r\n        super(`[SX] ${where}: Unexpected termination of script.`);\r\n    }\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken,\r\n         isSymbol }           from '../types';\r\nimport { resolveSplice,\r\n         resolveMacro,\r\n         resolveValueSymbol,\r\n         getScope }           from '../evaluate';\r\nimport { setEvaluationCount } from '../errors';\r\n\r\n\r\n\r\nexport function applyMacros(state: SxParserState, tok: SxToken) {\r\n    let r: SxToken = tok;\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                break;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym);\r\n                if (m) {\r\n                    r = m(r);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function stripQuote(state: SxParserState, tok: SxToken) {\r\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\r\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\r\n    }\r\n    return (tok as any)[1];\r\n}\r\n\r\n\r\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\r\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\r\n        return (tok as any)[1];\r\n    } else {\r\n        return tok;\r\n    }\r\n}\r\n\r\n\r\nexport function getScope_stateApplied(state: SxParserState) {\r\n    return (function() { return getScope(state); });\r\n}\r\n\r\n\r\nexport function resolveValueSymbol_dynamic(state: SxParserState, name: string) {\r\n    return (function(){ return resolveValueSymbol(state, {symbol: name}); });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         SxFuncInfo,\r\n         CompilerOperator,\r\n         CompilerContext,\r\n         isSymbol }                   from './types';\r\nimport { getCapturedScopes,\r\n         optimizeTailCall }           from './evaluate';\r\nimport { applyMacros,\r\n         stripQuoteOrPass,\r\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\r\nimport { registerOperators }          from './compile.ops';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\r\n\r\n    function makeScope(scoped: () => void) {\r\n        const varNamesCopy = new Map<string, string>();\r\n        for (const x of ctx.varNames.entries()) {\r\n            varNamesCopy.set(x[0], x[1]);\r\n        }\r\n        scoped();\r\n        ctx.varNames = varNamesCopy;\r\n    }\r\n\r\n\r\n    function compileValue(b: any) {\r\n        let compFnBody = '';\r\n        if (b === null) {\r\n            compFnBody += '(null)';\r\n        } else if (b === void 0) {\r\n            compFnBody += '(void 0)';\r\n        } else switch (typeof b) {\r\n        case 'boolean': case 'number':\r\n            compFnBody += `(${String(b)})`;\r\n            break;\r\n        case 'object':\r\n            if (isSymbol(b)) {\r\n                const sym = b as SxSymbol;\r\n                if (ctx.varNames.has(sym.symbol)) {\r\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\r\n                } else {\r\n                    _$_vars[ctx.varsCount] = sym.symbol;\r\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n                }\r\n                break;\r\n            } else {}\r\n            // FALL_THRU\r\n        default:\r\n            _$_vars[ctx.varsCount] = b;\r\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n            break;\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    function compileToken(body: any[], i: number) {\r\n        let compFnBody = '';\r\n        const b = body[i];\r\n        if (Array.isArray(b)) {\r\n            if (0 < b.length) {\r\n                const r: SxToken = applyMacros(state, b);\r\n                if (Array.isArray(r)) {\r\n                    if (0 < r.length) {\r\n                        if (isSymbol(r[0])) {\r\n                            const sym = r[0] as SxSymbol;\r\n                            const args = r.slice(1);\r\n                            if (ops.has(sym.symbol)) {\r\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\r\n                            } else {\r\n                                if (sym.symbol === '$spread') {\r\n                                    compFnBody += `...(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else if (state.funcMap.has(sym.symbol)) {\r\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                } else if (ctx.varNames.has(sym.symbol)) {\r\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else {\r\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            switch (typeof r[0]) {\r\n                            case 'function':\r\n                                _$_vars[ctx.varsCount] = r[0];\r\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                break;\r\n                            default:\r\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        compFnBody += '([])';\r\n                    }\r\n                } else {\r\n                    compFnBody += compileValue(b);\r\n                }\r\n            } else {\r\n                compFnBody += '([])';\r\n            }\r\n        } else {\r\n            compFnBody += compileValue(b);\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    const ctx: CompilerContext = {\r\n        _$_vars,\r\n        varsCount: 1,\r\n        varNames: new Map<string, string>(),\r\n        varNamesCount: 0,\r\n        varDefs: 'var x0;',\r\n        ops: new Map<string, CompilerOperator>(),\r\n        makeScope,\r\n        compileToken,\r\n    };\r\n\r\n    registerOperators(state, ctx);\r\n    const ops = ctx.ops;\r\n\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n    if (capturedScopes) {\r\n        for (const x in capturedScopes) {\r\n            if (Object.hasOwnProperty.call(capturedScopes, x)) {\r\n                _$_vars[ctx.varsCount++] = x;\r\n                _$_vars[ctx.varsCount] = capturedScopes[x];\r\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\r\n                ctx.varsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const compFormalArgs = `${formalArgs.map((x, i) => {\r\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\r\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\r\n    }).join(',')}`;\r\n\r\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\r\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\r\n}\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\r\n    // tslint:disable-next-line:no-eval\r\n    _$_vars[0] = eval(code);\r\n    return _$_vars[0];\r\n}\r\n\r\n\r\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\r\n    // tslint:disable-next-line:variable-name\r\n    const _$_vars: any[] = [];\r\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         CompilerContext,\r\n         isSymbol }                   from '../types';\r\nimport { checkParamsLength }          from '../errors';\r\nimport { stripQuote,\r\n         stripQuoteOrPass,\r\n         getScope_stateApplied,\r\n         resolveValueSymbol_dynamic } from './helpers';\r\n\r\n\r\n\r\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\r\n    const {\r\n        _$_vars,\r\n        ops,\r\n        makeScope,\r\n        compileToken,\r\n    } = ctx;\r\n\r\n\r\n    ops.set('$quote', function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$self', function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        compFnBody += `((_$_vars[0])(${\r\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if condition 't-expr 'f-expr)\r\n        //  -> (if condition is true ) S expr  : t-expr\r\n        //  -> (if condition is false) S expr  : f-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if', args, 2, 3);\r\n        compFnBody += `(${compileToken(r, 1)}?(${\r\n            compileToken([stripQuote(state, r[2])], 0)}):(${\r\n            compileToken([stripQuote(state, r[3])], 0)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if-null condition 'null-expr)\r\n        //  -> (if condition is not null ) S expr  : condition\r\n        //  -> (if condition is null)      S expr  : null-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\r\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\r\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        //  -> (if (eval condI) is true ) S expr  : exprI\r\n        //  -> (if no matched)            S expr  : null\r\n        let compFnBody = '';\r\n        {\r\n            checkParamsLength('compileToken:$__cond', args, 1);\r\n            compFnBody += `(`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\r\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\r\n            }\r\n            compFnBody += `null`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `)`;\r\n            }\r\n            compFnBody += `)`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__while', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n        //  -> (if n > 0) S expr  : exprN\r\n        //  -> (else)     S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__repeat', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n        //  -> (if list.length > 0) S expr  : exprN\r\n        //  -> (else)               S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__for', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n        //  -> (else)               S expr  : exprN\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__scope', args, 2);\r\n        // r[1]: isBlockLocal\r\n        // r[2]: returnMultiple\r\n        if (! Array.isArray(r[3])) {\r\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\r\n        }\r\n        makeScope(() => {\r\n            for (const x of stripQuote(state, r[3]) as any[]) {\r\n                let name = '';\r\n                if (Array.isArray(x)) {\r\n                    if (x.length < 1) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\r\n                    }\r\n                    if (! isSymbol(x[0])) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\r\n                    }\r\n                    name = x[0].symbol;\r\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\r\n                } else {\r\n                    if (! isSymbol(x)) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\r\n                    }\r\n                    name = x.symbol;\r\n                }\r\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n                ctx.varNames.set(x.symbol, 'v' + ctx.varNamesCount++);\r\n            }\r\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\r\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__try 'expr 'catch-expr)\r\n        //  ->                               S expr  : expr\r\n        //  -> (if error is raised in expr)  S expr  : catch-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__try', args, 1, 2);\r\n        compFnBody += `((()=>{try{${\r\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\r\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\r\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\r\n        makeScope(() => {\r\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\r\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\r\n            compFnBody += `${\r\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$raise', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($raise 'expr)\r\n        //  -> S expr  : -\r\n        let compFnBody = '';\r\n        compFnBody += `((()=>{throw ${\r\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($boolean any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\r\n        compFnBody += `((x0=${compileToken(args, 0)\r\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__get', args, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__let 'nameStrOrSymbol expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__let', args, 1, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        if (! ctx.varNames.has(name)) {\r\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n        }\r\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__set', args, 2, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ?\r\n            quoted.symbol :\r\n            (typeof quoted === 'string' ?\r\n                quoted :\r\n                (Array.isArray(quoted) ?\r\n                    (isSymbol(quoted[0]) ?\r\n                        quoted[0].symbol :\r\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\r\n                    ) :\r\n                    null\r\n                )\r\n            );\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$not', args, 1, 1);\r\n        compFnBody += `(!${compileToken(args, 0)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__and 'expr1 ... 'exprN)\r\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n        //  -> (else)                                                     S expr  : expr-i (false left most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__and', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__or 'expr1 ... 'exprN)\r\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n        //  -> (else)                                                  S expr  : expr-i (false right most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__or', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($eq arg1 arg2)\r\n        //  -> (if arg1 === arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:===', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not-eq arg1 arg2)\r\n        //  -> (if arg1 !== arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (== a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (!= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (< a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (> a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($concat listOrString1 ... listOrStringN)\r\n        //  -> S expr  : listOrString\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}].concat(${\r\n            args.map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (+ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (- number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:-', args, 1);\r\n        compFnBody += `(${r.length > 2 ?\r\n            args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\r\n            `-(${String(compileToken(r, 1))})`})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (* number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:*', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (** number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:**', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (/ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:/', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (% number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:%', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<< number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-not number)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\r\n        compFnBody += `(~(${compileToken(r, 1)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-and numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-or numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-xor numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\r\n        return compFnBody;\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxEof,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedFragment,\r\n         SxComment,\r\n         SxToken,\r\n         SxChar,\r\n         quote,\r\n         wrapByUnquote,\r\n         spread,\r\n         ScriptTerminationError } from './types';\r\n\r\n\r\n\r\nfunction isEOF(ch: SxChar): boolean {\r\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\r\n}\r\n\r\n\r\nfunction isSpace(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && ch.trim().length === 0;\r\n}\r\n\r\n\r\nfunction isNumberFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isSymbolFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' &&\r\n        !isSpace(ch) &&\r\n        !isNumberFirstChar(ch);\r\n}\r\n\r\n\r\n\r\nfunction lookCurrentLineHint(state: SxParserState): string {\r\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\r\n        state.strings.length > state.index ?\r\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\r\n}\r\n\r\n\r\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    if (state.strings.length <= state.index) {\r\n        return {eof: true};\r\n    }\r\n    if (state.strings[state.index].length <= state.pos) {\r\n        if ((! state.values) || (state.values.length <= state.index)) {\r\n            state.pos = 0;\r\n            state.index++;\r\n            return getChar(state);\r\n        } else {\r\n            const ch = {value: state.values[state.index]};\r\n            state.pos = 0;\r\n            state.index++;\r\n            return ch;\r\n        }\r\n    }\r\n    if (virtualEof) {\r\n        for (const v of virtualEof) {\r\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\r\n            if (ch === v) {\r\n                state.pos += v.length;\r\n                state.line += ch.split('\\n').length - 1;\r\n                return { eof: false , eofSeq: v };\r\n            }\r\n        }\r\n    }\r\n    {\r\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n        state.pos++;\r\n\r\n        if (ch === '\\n') {\r\n            state.line++;\r\n        }\r\n\r\n        if ((! disableEscape) && ch === '\\\\') {\r\n            if (state.strings[state.index].length <= state.pos) {\r\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n            state.pos++;\r\n\r\n            switch (ch) {\r\n            case 'b':\r\n                ch = '\\b';\r\n                break;\r\n            case 't':\r\n                ch = '\\t';\r\n                break;\r\n            case 'n':\r\n                ch = '\\n';\r\n                break;\r\n            case 'v':\r\n                ch = '\\v';\r\n                break;\r\n            case 'f':\r\n                ch = '\\f';\r\n                break;\r\n            case 'r':\r\n                ch = '\\r';\r\n                break;\r\n            case 'U': case 'u':\r\n                {\r\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\r\n                        let ch1 = '';\r\n                        for (let i = 0; i < 6; i++) {\r\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\r\n                            if (ch2 === '}') {\r\n                                if (i === 0) {\r\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                                }\r\n                                state.pos += i;\r\n                                break;\r\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\r\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            ch1 += ch2;\r\n                        }\r\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos++;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    } else {\r\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\r\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos += 4;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return ch;\r\n    }\r\n}\r\n\r\n\r\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    const chs: SxChar[] = [];\r\n\r\n    try {\r\n        for (let i = 0; i < n; i++) {\r\n            chs.push(getChar(state, virtualEof, disableEscape));\r\n        }\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return chs;\r\n}\r\n\r\n\r\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    let ch: SxChar;\r\n\r\n    try {\r\n        ch = getChar(state, virtualEof, disableEscape);\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return ch;\r\n}\r\n\r\n\r\nfunction skipWhitespaces(state: SxParserState): void {\r\n    let ch = lookAhead(state);\r\n    while (!isEOF(ch) && isSpace(ch)) {\r\n        getChar(state);\r\n        ch = lookAhead(state);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\r\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n    }\r\n    return Number(s);\r\n}\r\n\r\n\r\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (isSpace(ch)) {\r\n                break;\r\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\r\n                break;\r\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                getChar(state, virtualEof);\r\n                const v = (ch as SxExternalValue).value;\r\n                s += String(ch);\r\n            } else {\r\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (state.config.enableShorthands) {\r\n        let m: RegExpMatchArray | null = null;\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        if (m = s.match(/^::([^=:][^=]+)=$/)) {\r\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\r\n            const ws = m[1].split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.set},\r\n                        ws\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^::([^@:][^@]+)@([^@:]+)$/)) {\r\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\r\n            const ws = m[1].split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.call},\r\n                        [{symbol: state.config.reservedNames.get}, ...ws],\r\n                        {symbol: m[2]},\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^::([^:].+)$/)) {\r\n            // ::foo:bar:baz -> ($get foo bar baz)\r\n            const ws = m[1].split(':');\r\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\r\n            return z as any;\r\n        }\r\n    }\r\n\r\n    return {symbol: s};\r\n}\r\n\r\n\r\nfunction parseStringOrComment(\r\n        state: SxParserState, eof: string[],\r\n        valuesStartSeq: string | null ,\r\n        valuesStopChar: string,\r\n        disableEscape: boolean\r\n    ): { strings: string[], values: any[] } {\r\n\r\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\r\n    const strings: string[] = [];\r\n    const values: any[] = [];\r\n\r\n    for (;;) {\r\n        let s = '';\r\n        let ch = lookAhead(state, eofSeqs, disableEscape);\r\n\r\n        while (! isEOF(ch)) {\r\n            if (typeof ch === 'string') {\r\n                getChar(state, eofSeqs, disableEscape);\r\n                s += ch;\r\n            } else {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state, eofSeqs, disableEscape);\r\n                    const v = (ch as SxExternalValue).value;\r\n                    s += String(ch);\r\n                } else {\r\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            }\r\n\r\n            ch = lookAhead(state, eofSeqs, disableEscape);\r\n        }\r\n\r\n        getChar(state, eofSeqs, disableEscape);\r\n\r\n        if ((ch as SxEof).eof === true) {\r\n            throw new ScriptTerminationError('parseStringOrComment');\r\n        }\r\n\r\n        strings.push(s);\r\n\r\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\r\n            values.push(parseList(state, valuesStopChar, []));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { strings, values };\r\n}\r\n\r\n\r\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\r\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape).strings[0];\r\n}\r\n\r\n\r\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\r\n    const q: SxToken[] = [symbol];\r\n\r\n    if (attrs) {\r\n        q.push(attrs);\r\n    }\r\n\r\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false);\r\n    for (let i = 0; i < inner.strings.length; i++) {\r\n        q.push(inner.strings[i]);\r\n        if (i < inner.values.length) {\r\n            q.push(inner.values[i]);\r\n        }\r\n    }\r\n\r\n    return q;\r\n}\r\n\r\n\r\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['|#'], null, ')', false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseOneToken(state: SxParserState): SxToken {\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case ')':\r\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n\r\n        case '(':\r\n            getChar(state);\r\n            return parseList(state, ')', []);\r\n\r\n        case \"'\": case \"`\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                return (ch === \"'\" ? quote : wrapByUnquote)(state, parseOneToken(state));\r\n            }\r\n\r\n        case \".\":\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 2);\r\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    skipWhitespaces(state);\r\n                    return spread(state, parseOneToken(state));\r\n                } else {\r\n                    skipWhitespaces(state);\r\n                    return {dotted: parseOneToken(state)};\r\n                }\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            return parseSingleLineComment(state);\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseMultiLineComment(state);\r\n                } else {\r\n                    return parseSymbol(state);\r\n                }\r\n            }\r\n\r\n        case '\"':\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 4);\r\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\r\n                    let isHereDoc = true;\r\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\r\n                        // here doc\r\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\r\n                        if (aheads[2] === '+' || aheads[2] === '-') {\r\n                            if (! isNumberAfterSignChar(aheads[3])) {\r\n                                isHereDoc = false;\r\n                            }\r\n                        }\r\n                        // here doc\r\n                    } else if (isSymbolFirstChar(aheads[2])) {\r\n                        isHereDoc = false;\r\n                    } else {\r\n                        // here doc\r\n                    }\r\n                    getChar(state);\r\n                    getChar(state);\r\n\r\n                    let sym: SxSymbol | number | null = null;\r\n                    let attrs: SxToken[] | null = null;\r\n                    if (isHereDoc) {\r\n                        sym = {symbol: state.config.reservedNames.Template};\r\n                    } else {\r\n                        sym = parseSymbol(state, ['@']);\r\n                        if (sym === null) {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        if (typeof sym === 'number') {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        const ahs = lookAheads(state, 2);\r\n                        if (ahs[0] === '@') {\r\n                            if (ahs[1] !== '{') {\r\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            getChar(state);\r\n                            getChar(state);\r\n                            const a = parseList(state, '}', [{symbol: '@'}]);\r\n                            if (Array.isArray(a)) {\r\n                                attrs = a;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return parseHereDoc(state, sym, attrs);\r\n                } else {\r\n                    return parseString(state, false);\r\n                }\r\n            }\r\n\r\n        case '@':\r\n            if (state.config.enableVerbatimStringLiteral) {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '\"') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseString(state, true);\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            if (typeof ch !== 'string') {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state);\r\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\r\n                } else {\r\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            } else if (isSpace(ch)) {\r\n                break;\r\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\r\n                if (ch === '+' || ch === '-') {\r\n                    const aheads = lookAheads(state, 2);\r\n                    if (! isNumberAfterSignChar(aheads[1])) {\r\n                        return parseSymbol(state);\r\n                    }\r\n                }\r\n                return parseNumber(state);\r\n            } else if (isSymbolFirstChar(ch)) {\r\n                return parseSymbol(state);\r\n            } else {\r\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseOneToken');\r\n}\r\n\r\n\r\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\r\n    const r: SxToken[] = initialList.slice(0);\r\n    let dotted = false;\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case listStopChar:\r\n            getChar(state);\r\n            if (dotted) {\r\n                return r[0];\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        default:\r\n            {\r\n                const t = parseOneToken(state);\r\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\r\n                    if (r.length !== 1) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    dotted = true;\r\n                    if (Array.isArray(t)) {\r\n                        t.unshift(r.pop() as SxToken);\r\n                        r.push(t);\r\n                    } else {\r\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\r\n                    }\r\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                    if (! state.config.stripComments) {\r\n                        r.push(t);\r\n                    }\r\n                } else {\r\n                    if (dotted) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    r.push(t);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseList');\r\n}\r\n\r\n\r\n\r\nexport function parse(state: SxParserState) {\r\n    const r: SxToken[] = [];\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case '(':\r\n            getChar(state);\r\n            r.push(parseList(state, ')', []));\r\n            break;\r\n\r\n        case \"'\": case \"`\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                for (;;) {\r\n                    const t = parseOneToken(state);\r\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                        if (! state.config.stripComments) {\r\n                            r.push(t);\r\n                        }\r\n                    } else {\r\n                        r.push((ch === \"'\" ? quote : wrapByUnquote)(state, t));\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            if (state.config.stripComments) {\r\n                parseSingleLineComment(state);\r\n            } else {\r\n                r.push(parseSingleLineComment(state));\r\n            }\r\n            break;\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseMultiLineComment(state);\r\n                    } else {\r\n                        r.push(parseMultiLineComment(state));\r\n                    }\r\n                } else {\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseSingleLineComment(state);\r\n                    } else {\r\n                        r.push(parseSingleLineComment(state));\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case '\"':\r\n            {\r\n                const aheads = lookAheads(state, 3);\r\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\r\n                    r.push(parseOneToken(state));\r\n                    break;\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         isSymbol,\r\n         quote,\r\n         FatalError,\r\n         CapturedScopes }     from '../../types';\r\nimport { evaluate,\r\n         resolveValueSymbolScope,\r\n         collectCapturedVariables,\r\n         getCapturedScopes,\r\n         getScope,\r\n         getGlobalScope,\r\n         installScope,\r\n         uninstallScope,\r\n         optimizeTailCall,\r\n         toNumber }           from '../../evaluate';\r\nimport { compileLambda }      from '../../compile';\r\nimport { checkParamsLength }  from '../../errors';\r\n\r\n\r\n\r\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($car '(first second ... last))\r\n    //  -> S expr  : first\r\n    checkParamsLength('$car', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car[0];\r\n};\r\nexport const $$car = $car(null as any, null as any);\r\n\r\n\r\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cdr '(first second ... last))\r\n    //  -> S expr  : (second ... last)\r\n    checkParamsLength('$cdr', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car.slice(1);\r\n};\r\nexport const $$cdr = $cdr(null as any, null as any);\r\n\r\n\r\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\r\n    //  -> S expr  : (arg1 arg2-item1 ...)\r\n    // S expression: ($cons arg1 nilOrNull ... argN)\r\n    //  -> S expr  : (arg1)\r\n    // S expression: ($cons arg1 arg2 ... argN)\r\n    //  -> S expr  : arg1.arg2\r\n    checkParamsLength('$cons', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (car === null) {\r\n        car = [];\r\n    }\r\n    if (cdr === null) {\r\n        cdr = [];\r\n    }\r\n\r\n    if (Array.isArray(cdr)) {\r\n        cdr = cdr.slice(0);\r\n        cdr.unshift(car);\r\n        return cdr;\r\n    } else {\r\n        return {car, cdr};\r\n    }\r\n};\r\nexport const $$cons = $cons(null as any, null as any);\r\n\r\n\r\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first first second ... last)\r\n    //  -> S expr  : first\r\n    // S expression: ($first)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(0, 1);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$first = $first(null as any, null as any);\r\n\r\n\r\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($second first second ... last)\r\n    //  -> S expr  : second\r\n    // S expression: ($second first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1, 2);\r\n    return (cdr.length === 1) ? cdr[0] : null;\r\n};\r\nexport const $$second = $second(null as any, null as any);\r\n\r\n\r\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($last first second ... last)\r\n    //  -> S expr  : last\r\n    // S expression: ($last)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(args.length - 1, args.length);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$last = $last(null as any, null as any);\r\n\r\n\r\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($rest first second ... last)\r\n    //  -> S expr  : (second ... last)\r\n    // S expression: ($rest first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1);\r\n    return (0 < cdr.length) ? cdr : null;\r\n};\r\nexport const $$rest = $rest(null as any, null as any);\r\n\r\n\r\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first-and-second first second ... last)\r\n    //  -> S expr  : first.second\r\n    let car: any = args.slice(0, 1);\r\n    car = (car.length === 1) ? car[0] : null;\r\n\r\n    let cdr: any = args.slice(1, 2);\r\n    cdr = (cdr.length === 1) ? cdr[0] : null;\r\n\r\n    return {car, cdr};\r\n};\r\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\r\n\r\n\r\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($atom arg1 ...)\r\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\r\n    //  -> (if arg1 is nil or anything else) S expr  : true\r\n    checkParamsLength('$atom', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n\r\n    if (car === null || car === void 0) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(car)) {\r\n        if (car.length === 0) return  true;\r\n        else                  return false;\r\n    }\r\n\r\n    switch (typeof car) {\r\n    case 'number': case 'string': case 'function': case 'boolean':\r\n        return true;\r\n    case 'object':\r\n        return isSymbol(car) ? true : false;\r\n    }\r\n    return false;\r\n};\r\nexport const $$atom = $atom(null as any, null as any);\r\n\r\n\r\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($eq arg1 arg2)\r\n    //  -> (if arg1 === arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$eq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car === cdr;\r\n};\r\nexport const $$eq = $eq(null as any, null as any);\r\n\r\n\r\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not-eq arg1 arg2)\r\n    //  -> (if arg1 !== arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$notEq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car !== cdr;\r\n};\r\nexport const $$notEq = $notEq(null as any, null as any);\r\n\r\n\r\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\r\n    // S expression: ($list arg1 ... argN)\r\n    //  -> S expr  : (arg1 ... argN)\r\n    args.slice(0);\r\nexport const $$list = $list(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\r\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__scope', args, 3);\r\n\r\n    const isBlockLocal = $$first(...args);\r\n    const returnMultiple = $$second(...args);\r\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\r\n    let r: SxToken = null;\r\n\r\n    const scope: any = {};\r\n    if (Array.isArray(car)) {\r\n        for (const x of car) {\r\n            if (Array.isArray(x)) {\r\n                const kv = $$firstAndSecond(...x);\r\n                const kvSym = isSymbol(kv.car);\r\n                scope[kvSym ? kvSym.symbol : String(kv.car)] = evaluate(state, kv.cdr);\r\n            } else {\r\n                const xSym = isSymbol(x);\r\n                scope[xSym ? xSym.symbol : String(x)] = null;\r\n            }\r\n        }\r\n    }\r\n    installScope(state, scope, isBlockLocal, capturedScopes);\r\n\r\n    try {\r\n        if (4 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(3)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(3)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__globalScope', args, 1);\r\n\r\n    const returnMultiple = $$first(...args);\r\n    const cdr = $$second(...args);\r\n    let r: SxToken = null;\r\n\r\n    installScope(state, getGlobalScope(state).scope, true);\r\n    try {\r\n        if (2 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(1)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(1)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : exprN\r\n    checkParamsLength('$__capture', args, 1);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let r: SxToken = null;\r\n\r\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\r\n    installScope(state, {}, true, capturedScopes);\r\n    try {\r\n        for (const x of args.slice(1)) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    let fnBody = args.slice(1);\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (...actualArgs: any[]) => {\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] func call: Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(1);\r\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $__lambda(state, name)(...args.slice(1));\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($refun 'name)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__refun', args, 1, 1);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const info = state.funcMap.get(car.symbol);\r\n    if (!info) {\r\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\r\n    }\r\n    return info.fn(state, car.symbol);\r\n};\r\n\r\n\r\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($apply fn arg1 ... argN)\r\n    //  -> S expr  : fn'\r\n    checkParamsLength('$apply', args, 1);\r\n\r\n    const car: () => any = $$first(...args);\r\n    if (typeof car !== 'function') {\r\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\r\n    }\r\n\r\n    return (\r\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\r\n    );\r\n};\r\nexport const $$apply = $apply(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__call', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const sym = isSymbol(cdr);\r\n    return Function.prototype.apply.call(\r\n        car[sym ? sym.symbol : evaluate(state, cdr) as any],\r\n        car,\r\n        args.slice(2)\r\n    );\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__try 'expr 'catch-expr)\r\n    //  ->                               S expr  : expr\r\n    //  -> (if error is raised in expr)  S expr  : catch-expr\r\n    checkParamsLength('$__try', args, 1, 2);\r\n\r\n    let r: SxToken = [];\r\n    try {\r\n        r = evaluate(state, args[0]);\r\n    } catch (e) {\r\n        if (e instanceof FatalError) {\r\n            throw e;\r\n        }\r\n        if (1 < args.length) {\r\n            r = $__scope(state, name)(true, false, [\r\n                ['$error', quote(state, e)],\r\n                ['$parent', quote(state, getScope(state))],\r\n            ], args[1]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($raise 'expr)\r\n    //  -> S expr  : -\r\n    const car = $$first(...args);\r\n    throw car;\r\n};\r\nexport const $$raise = $raise(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if condition 't-expr 'f-expr)\r\n    //  -> (if condition is true ) S expr  : t-expr\r\n    //  -> (if condition is false) S expr  : f-expr\r\n    checkParamsLength('$__if', args, 2, 3);\r\n\r\n    const car = $$first(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        r = evaluate(state, args[1]);\r\n    } else {\r\n        if (2 < args.length) {\r\n            r = evaluate(state, args[2]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if-null condition 'null-expr)\r\n    //  -> (if condition is not null ) S expr  : condition\r\n    //  -> (if condition is null)      S expr  : null-expr\r\n    checkParamsLength('$__ifNull', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if (! $$ambiguousEq(car, null)) {\r\n        r = car;\r\n    } else {\r\n        r = evaluate(state, cdr);\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n    //  -> (if (eval condI) is true ) S expr  : exprI\r\n    //  -> (if no matched)            S expr  : null\r\n    checkParamsLength('$__cond', args, 1);\r\n\r\n    for (let i = 0; i < args.length - 1; i += 2) {\r\n        const c = args[i];\r\n        const x = args[i + 1];\r\n        if ($$boolean(evaluate(state, c))) {\r\n            return evaluate(state, x);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__while', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$boolean(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doWhile', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$boolean(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__until', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$not(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doUntil', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$not(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n    //  -> (if n > 0) S expr  : exprN\r\n    //  -> (else)     S expr  : null\r\n    checkParamsLength('$__repeat', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const n = toNumber($$second(...args));\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (let i = 0; i < n; i++) {\r\n        scope[sym.symbol] = i;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n    //  -> (if list.length > 0) S expr  : exprN\r\n    //  -> (else)               S expr  : null\r\n    checkParamsLength('$__for', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const list = $$second(...args);\r\n    if (! Array.isArray(list)) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\r\n    }\r\n\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (const q of list) {\r\n        scope[sym.symbol] = q;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get v fn1 ... fnN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$pipe', args, 1);\r\n\r\n    let v = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n        v = args[i](v);\r\n    }\r\n    return v;\r\n};\r\nexport const $$pipe = $pipe(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__get', args, 1);\r\n\r\n    let v: any = null;\r\n    let sym = isSymbol(args[0]);\r\n\r\n    if (!sym) {\r\n        switch (typeof args[0]) {\r\n        case 'string': case 'number':\r\n            sym = {symbol: String(args[0])};\r\n            break;\r\n        default:\r\n            v = evaluate(state, args[0]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (sym) {\r\n        const scope = resolveValueSymbolScope(state, sym, true);\r\n        if (! scope) {\r\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\r\n        }\r\n        v = scope[sym.symbol];\r\n    }\r\n\r\n    for (let i = 1; i < args.length; i++) {\r\n        let q: any = args[i];\r\n        let inprog = true;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                v = q(v);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = v.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                v = v[q];\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n            }\r\n        }\r\n    }\r\n    return v;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let 'nameStrOrSymbol expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__let', args, 2, 2);\r\n\r\n    let sym = isSymbol($$first(...args));\r\n\r\n    if (! sym) {\r\n        if (typeof args[0] === 'string') {\r\n            sym = {symbol: args[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n    scope[sym.symbol] = args[1];\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__set', args, 2, 2);\r\n\r\n    let path: any = [];\r\n\r\n    if (Array.isArray(args[0])) {\r\n        path = args[0];\r\n    } else {\r\n        path.push(args[0]);\r\n    }\r\n\r\n    let sym = isSymbol(path[0]);\r\n\r\n    if (! sym) {\r\n        if (typeof path[0] === 'string') {\r\n            sym = {symbol: path[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    let scope = resolveValueSymbolScope(state, sym, true);\r\n    if (scope === null) {\r\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\r\n    }\r\n\r\n    let subst = false;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        let q: any = path[i];\r\n        let inprog = true;\r\n        const last = i === path.length - 1;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                scope = q(scope);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = scope.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                if (last) {\r\n                    scope[q] = args[1];\r\n                    subst = true;\r\n                } else {\r\n                    scope = scope[q];\r\n                }\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (! subst) {\r\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\r\n    }\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($boolean any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$boolean', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car) && car.length === 0) return false;\r\n    else return Boolean(car);\r\n};\r\nexport const $$boolean = $boolean(null as any, null as any);\r\n\r\n\r\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$not', args, 1, 1);\r\n\r\n    return ! $$boolean(...args);\r\n};\r\nexport const $$not = $not(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__and 'expr1 ... 'exprN)\r\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n    //  -> (else)                                                     S expr  : expr-i (false left most)\r\n    checkParamsLength('$__and', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if (! $$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__and = $__and(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__or 'expr1 ... 'exprN)\r\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n    //  -> (else)                                                  S expr  : expr-i (false right most)\r\n    checkParamsLength('$__or', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if ($$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__or = $__or(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (== a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ambiguousEq', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car) && car.length === 0) car = null;\r\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\r\n    if (car === void 0) car = null;\r\n    if (cdr === void 0) cdr = null;\r\n    // tslint:disable-next-line:triple-equals\r\n    return car == cdr;\r\n};\r\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (!= a b)\r\n    //  -> S expr  : boolean\r\n    return ! $$ambiguousEq(...args);\r\n};\r\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\r\n\r\n\r\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (< a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$lt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) < toNumber(cdr);\r\n};\r\nexport const $$lt = $lt(null as any, null as any);\r\n\r\n\r\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$le', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) <= toNumber(cdr);\r\n};\r\nexport const $$le = $le(null as any, null as any);\r\n\r\n\r\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (> a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$gt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) > toNumber(cdr);\r\n};\r\nexport const $$gt = $gt(null as any, null as any);\r\n\r\n\r\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ge', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) >= toNumber(cdr);\r\n};\r\nexport const $$ge = $ge(null as any, null as any);\r\n\r\n\r\nexport const $gensym = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($gensym)\r\n    // S expression: ($gensym symbol)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$gensym', args, 0, 1);\r\n\r\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\r\n    if (args.length === 1) {\r\n        const a = isSymbol(args[0]);\r\n        if (a) {\r\n            $__let(state, '')(a, tempVarSym);\r\n        } else {\r\n            throw new Error(`[SX] $gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n        }\r\n    }\r\n    return tempVarSym;\r\n};\r\n\r\n\r\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-symbol x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isSymbol', args, 1, 1);\r\n\r\n    return (isSymbol(args[0]) ? true : false);\r\n};\r\nexport const $$isSymbol = $isSymbol(null as any, null as any);\r\n\r\n\r\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-list x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isList', args, 1, 1);\r\n\r\n    return Array.isArray($$first(...args));\r\n};\r\nexport const $$isList = $isList(null as any, null as any);\r\n\r\n\r\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-string x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isString', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'string';\r\n};\r\nexport const $$isString = $isString(null as any, null as any);\r\n\r\n\r\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-number x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNumber', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'number';\r\n};\r\nexport const $$isNumber = $isNumber(null as any, null as any);\r\n\r\n\r\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-NaN x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNaN', args, 1, 1);\r\n\r\n    return Number.isNaN($$first(...args));\r\n};\r\nexport const $$isNaN = $isNaN(null as any, null as any);\r\n\r\n\r\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-finate x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isFinite', args, 1, 1);\r\n\r\n    return Number.isFinite($$first(...args));\r\n};\r\nexport const $$isFinite = $isFinite(null as any, null as any);\r\n\r\n\r\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-integer x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isInteger', args, 1, 1);\r\n\r\n    return Number.isInteger($$first(...args));\r\n};\r\nexport const $$isInteger = $isInteger(null as any, null as any);\r\n\r\n\r\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-string x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$toString', args, 1, 1);\r\n\r\n    return String($$first(...args));\r\n};\r\nexport const $$toString = $toString(null as any, null as any);\r\n\r\n\r\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-number x)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$toNumber', args, 1, 1);\r\n\r\n    return toNumber($$first(...args));\r\n};\r\nexport const $$toNumber = $toNumber(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__# '(name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n            if (x.length === 1) {\r\n                // S expression: (# ... (keyName) ...)\r\n                //  -> JSON    : {..., keyName: true, ...}\r\n                r[keyName] = true;\r\n            } else if (x.length === 2) {\r\n                // S expression: (# ... (keyName value) ...)\r\n                //  -> JSON    : {..., keyName: value, ...}\r\n                r[keyName] = evaluate(state, x[1]);\r\n            } else {\r\n                // S expression: (# ... (keyName value1 value2 ...) ...)\r\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                r[keyName] =\r\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                    .concat(x.slice(1)));\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($object-assign x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$objectAssign', args, 1);\r\n\r\n    return Object.assign(args[0], ...(args.slice(1)));\r\n};\r\nexport const $$objectAssign = $objectAssign(null as any, null as any);\r\n\r\n\r\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-stringify x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$jsonStringify', args, 1, 1);\r\n\r\n    return JSON.stringify($$first(...args));\r\n};\r\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\r\n\r\n\r\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-parse x)\r\n    //  -> S expr  : object\r\n    checkParamsLength('$jsonParse', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    return JSON.parse(s);\r\n};\r\nexport const $$jsonParse = $jsonParse(null as any, null as any);\r\n\r\n\r\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($now)\r\n    //  -> S expr  : number\r\n    return Date.now();\r\n};\r\nexport const $$now = $now(null as any, null as any);\r\n\r\n\r\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-from-iso str)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\r\n\r\n\r\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime year month1-12 day)\r\n    // S expression: ($datetime year month1-12 day hours)\r\n    // S expression: ($datetime year month1-12 day hours minutes)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetime', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n        s += 'Z';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetime = $datetime(null as any, null as any);\r\n\r\n\r\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-lc year month1-12 day)\r\n    // S expression: ($datetime-lc year month1-12 day hours)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeLc', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n    } else {\r\n        s += 'T00:00:00.000';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-iso-string number)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\r\n    }\r\n    return dt.toISOString();\r\n};\r\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getUTCFullYear(),\r\n        dt.getUTCMonth() + 1,\r\n        dt.getUTCDate(),\r\n        dt.getUTCHours(),\r\n        dt.getUTCMinutes(),\r\n        dt.getUTCSeconds(),\r\n        dt.getUTCMilliseconds(),\r\n        0, // TZ\r\n        dt.getUTCDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components-lc number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getFullYear(),\r\n        dt.getMonth() + 1,\r\n        dt.getDate(),\r\n        dt.getHours(),\r\n        dt.getMinutes(),\r\n        dt.getSeconds(),\r\n        dt.getMilliseconds(),\r\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\r\n                                 // If your time zone is UTC+2:00, +120 will be returned.\r\n        dt.getDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\r\n\r\n\r\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($match pattern-str string)\r\n    // S expression: ($match pattern-str options-str string)\r\n    //  -> S expr  : array\r\n    checkParamsLength('$match', args, 2, 3);\r\n\r\n    if (args.length === 2) {\r\n        const m = new RegExp(args[0]);\r\n        return m.exec(args[1]);\r\n    } else {\r\n        const m = new RegExp(args[0], args[1]);\r\n        return m.exec(args[2]);\r\n    }\r\n};\r\nexport const $$match = $match(null as any, null as any);\r\n\r\n\r\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-log expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.log(...args);\r\n    return null;\r\n};\r\nexport const $$consoleLog = $consoleLog(null as any, null as any);\r\n\r\n\r\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-error expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.error(...args);\r\n    return null;\r\n};\r\nexport const $$consoleError = $consoleError(null as any, null as any);\r\n\r\n\r\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-trace expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.trace(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\r\n\r\n\r\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time)\r\n    // S expression: ($console-time label)\r\n    //  -> S expr  : null\r\n    console.time(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTime = $consoleTime(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-end)\r\n    // S expression: ($console-time-end label)\r\n    //  -> S expr  : null\r\n    console.timeEnd(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-log label)\r\n    // S expression: ($console-time-log label value ... value)\r\n    //  -> S expr  : null\r\n    (console as any).timeLog(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './core.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$car',\r\n    fn: ops.$car,\r\n}, {\r\n    name: '$cdr',\r\n    fn: ops.$cdr,\r\n}, {\r\n    name: '$cons',\r\n    fn: ops.$cons,\r\n}, {\r\n    name: '$first',\r\n    fn: ops.$first,\r\n}, {\r\n    name: '$second',\r\n    fn: ops.$second,\r\n}, {\r\n    name: '$last',\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$progn', // alias of $last\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$rest',\r\n    fn: ops.$rest,\r\n}, {\r\n    name: '$first-and-second',\r\n    fn: ops.$firstAndSecond,\r\n}, {\r\n    name: '$atom',\r\n    fn: ops.$atom,\r\n}, {\r\n    name: '$eq',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '===',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '$not-eq',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '!==',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '$list',\r\n    fn: ops.$list,\r\n}, {\r\n    name: '$__scope',\r\n    fn: ops.$__scope,\r\n}, {\r\n    name: '$__global',\r\n    fn: ops.$__globalScope,\r\n}, {\r\n    name: '$__capture',\r\n    fn: ops.$__capture,\r\n}, {\r\n    name: '$__lambda',\r\n    fn: ops.$__lambda,\r\n}, {\r\n    name: '$$__lambda',\r\n    fn: ops.$comp$__lambda,\r\n}, {\r\n    name: '$__defun',\r\n    fn: ops.$__defun,\r\n}, {\r\n    name: '$$__defun',\r\n    fn: ops.$comp$__defun,\r\n}, {\r\n    name: '$__refun',\r\n    fn: ops.$__refun,\r\n}, {\r\n    name: '$apply',\r\n    fn: ops.$apply,\r\n}, {\r\n    name: '$__call',\r\n    fn: ops.$__call,\r\n}, {\r\n    name: '$__try',\r\n    fn: ops.$__try,\r\n}, {\r\n    name: '$raise',\r\n    fn: ops.$raise,\r\n}, {\r\n    name: '$__if',\r\n    fn: ops.$__if,\r\n}, {\r\n    name: '$__if-null',\r\n    fn: ops.$__ifNull,\r\n}, {\r\n    name: '$__cond',\r\n    fn: ops.$__cond,\r\n}, {\r\n    name: '$__while',\r\n    fn: ops.$__while,\r\n}, {\r\n    name: '$__do-while',\r\n    fn: ops.$__doWhile,\r\n}, {\r\n    name: '$__until',\r\n    fn: ops.$__until,\r\n}, {\r\n    name: '$__do-until',\r\n    fn: ops.$__doUntil,\r\n}, {\r\n    name: '$__repeat',\r\n    fn: ops.$__repeat,\r\n}, {\r\n    name: '$__for',\r\n    fn: ops.$__for,\r\n}, {\r\n    name: '$pipe',\r\n    fn: ops.$pipe,\r\n}, {\r\n    name: '$__get',\r\n    fn: ops.$__get,\r\n}, {\r\n    name: '$__let',\r\n    fn: ops.$__let,\r\n}, {\r\n    name: '$__set',\r\n    fn: ops.$__set,\r\n}, {\r\n    name: '$boolean',\r\n    fn: ops.$boolean,\r\n}, {\r\n    name: '$not',\r\n    fn: ops.$not,\r\n}, {\r\n    name: '$__and',\r\n    fn: ops.$__and,\r\n}, {\r\n    name: '$__or',\r\n    fn: ops.$__or,\r\n}, {\r\n    name: '==',\r\n    fn: ops.$ambiguousEq,\r\n}, {\r\n    name: '!=',\r\n    fn: ops.$ambiguousNotEq,\r\n}, {\r\n    name: '<',\r\n    fn: ops.$lt,\r\n}, {\r\n    name: '<=',\r\n    fn: ops.$le,\r\n}, {\r\n    name: '>',\r\n    fn: ops.$gt,\r\n}, {\r\n    name: '>=',\r\n    fn: ops.$ge,\r\n}, {\r\n    name: '$gensym',\r\n    fn: ops.$gensym,\r\n}, {\r\n    name: '$is-symbol',\r\n    fn: ops.$isSymbol,\r\n}, {\r\n    name: '$is-list',\r\n    fn: ops.$isList,\r\n}, {\r\n    name: '$is-string',\r\n    fn: ops.$isString,\r\n}, {\r\n    name: '$is-number',\r\n    fn: ops.$isNumber,\r\n}, {\r\n    name: '$is-NaN',\r\n    fn: ops.$isNaN,\r\n}, {\r\n    name: '$is-finite',\r\n    fn: ops.$isFinite,\r\n}, {\r\n    name: '$is-integer',\r\n    fn: ops.$isInteger,\r\n}, {\r\n    name: '$to-string',\r\n    fn: ops.$toString,\r\n}, {\r\n    name: '$to-number',\r\n    fn: ops.$toNumber,\r\n}, {\r\n    name: '$__#',\r\n    fn: ops.$__toObject,\r\n}, {\r\n    name: '$object-assign',\r\n    fn: ops.$objectAssign,\r\n}, {\r\n    name: '$json-stringify',\r\n    fn: ops.$jsonStringify,\r\n}, {\r\n    name: '$now',\r\n    fn: ops.$now,\r\n}, {\r\n    name: '$datetime-from-iso',\r\n    fn: ops.$datetimeFromIso,\r\n}, {\r\n    name: '$datetime',\r\n    fn: ops.$datetime,\r\n}, {\r\n    name: '$datetime-lc',\r\n    fn: ops.$datetimeLc,\r\n}, {\r\n    name: '$datetime-to-iso-string',\r\n    fn: ops.$datetimeToIsoString,\r\n}, {\r\n    name: '$datetime-to-components',\r\n    fn: ops.$datetimeToComponents,\r\n}, {\r\n    name: '$datetime-to-components-lc',\r\n    fn: ops.$datetimeToComponentsLc,\r\n}, {\r\n    name: '$json-parse',\r\n    fn: ops.$jsonParse,\r\n}, {\r\n    name: '$match',\r\n    fn: ops.$match,\r\n}, {\r\n    name: '$console-log',\r\n    fn: ops.$consoleLog,\r\n}, {\r\n    name: '$console-error',\r\n    fn: ops.$consoleError,\r\n}, {\r\n    name: '$console-trace',\r\n    fn: ops.$consoleTrace,\r\n}, {\r\n    name: '$console-time',\r\n    fn: ops.$consoleTime,\r\n}, {\r\n    name: '$console-time-end',\r\n    fn: ops.$consoleTimeEnd,\r\n}, {\r\n    name: '$console-time-log',\r\n    fn: ops.$consoleTimeLog,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState,\r\n         quote,\r\n         isSymbol }          from '../../types';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$scope',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            list[1],\r\n            list[2],\r\n            ...(list.slice(3).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$local',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($local ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$global',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($__global expr1 ... exprN)\r\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\r\n        return [{symbol: '$__global'},\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-let', // alias of $local\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$capture',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__capture'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$refun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($refun name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '<-',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (<- name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$call',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($call thisArg symbol arg1 ... argN)\r\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\r\n        checkParamsLength('$call', list, 3);\r\n\r\n        return [{symbol: '$__call'},\r\n            list[1],\r\n            quote(state, list[2]),\r\n            ...(list.slice(3)),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$try',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($try expr catch-expr)\r\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\r\n        return [{symbol: '$__try'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if cond t-expr f-expr)\r\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\r\n        return [{symbol: '$__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if-null',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if-null cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '??',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (?? cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$cond',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($cond cond1 expr1 ... condN exprN)\r\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        return [{symbol: '$__cond'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($while condition expr1 exprN)\r\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-while condition expr1 exprN)\r\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($until condition expr1 exprN)\r\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-until condition expr1 exprN)\r\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$repeat',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($repeat i of n-times expr1 exprN)\r\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__repeat'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($for x of list expr1 exprN)\r\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__for'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$get',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\r\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        return [{symbol: '$__get'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$let',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$let', list, 3, 3);\r\n\r\n        return [{symbol: '$__let'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-defvar',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$clisp-defvar', list, 3, 3);\r\n\r\n        return [{symbol: '$global'},\r\n            [{symbol: '$__let'},\r\n                quote(state, list[1]),\r\n                list[2]\r\n            ],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\r\n        checkParamsLength('$set', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-setq', // alias of $set\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-setq symbol expr)\r\n        //  -> S expr  : ($__set 'symbol expr)\r\n        checkParamsLength('$clisp-setq', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$and',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($and expr1 ... exprN)\r\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\r\n        return [{symbol: '$__and'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$or',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($or expr1 ... exprN)\r\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\r\n        return [{symbol: '$__or'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '#',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (# (name value...)...)\r\n        //  -> S expr  : ($__# '(name value...)...)\r\n        return [\r\n            {symbol: '$__#'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [\r\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\r\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\r\n\r\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\r\n\r\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\r\n\r\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\r\n\r\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\r\n\r\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\r\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\r\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\r\n\r\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\r\n];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './core.operator';\r\nimport macros             from './core.macro';\r\nimport symbols            from './core.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\n\r\n\r\n\r\nexport const $bitLShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<< number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitLShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car << cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car >>> (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitLShift = $bitLShift(null as any, null as any);\r\n\r\n\r\nexport const $bitSRShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitSRShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >> cdr : (car & 0x080000000) ? -1 : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitSRShift = $bitSRShift(null as any, null as any);\r\n\r\n\r\nexport const $bitURShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitURShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >>> cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitURShift = $bitURShift(null as any, null as any);\r\n\r\n\r\nexport const $bitNot = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-not number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitNot', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    return ~toNumber(car);\r\n};\r\nexport const $$bitNot = $bitNot(null as any, null as any);\r\n\r\n\r\nexport const $bitAnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-and numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitAnd', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) & toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitAnd = $bitAnd(null as any, null as any);\r\n\r\n\r\nexport const $bitOr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-or numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitOr', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) | toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitOr = $bitOr(null as any, null as any);\r\n\r\n\r\nexport const $bitXor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-xor numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitXor', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ^ toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitXor = $bitXor(null as any, null as any);\r\n\r\n\r\nexport const $add = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (+ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$add', args, 1);\r\n\r\n    return args.reduce((prev, curr) => toNumber(prev) + toNumber(curr), 0);\r\n};\r\nexport const $$add = $add(null as any, null as any);\r\n\r\n\r\nexport const $sub = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (- number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sub', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const last = args.slice(1);\r\n    if (last.length === 0) {\r\n        // negate\r\n        return -toNumber(car);\r\n    } else {\r\n        // subtract\r\n        return args.slice(1).reduce((prev, curr) => toNumber(prev) - toNumber(curr), toNumber(car));\r\n    }\r\n};\r\nexport const $$sub = $sub(null as any, null as any);\r\n\r\n\r\nexport const $mul = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (* number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mul', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) * toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mul = $mul(null as any, null as any);\r\n\r\n\r\nexport const $sup = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (** number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sup', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ** toNumber(curr), toNumber(car));\r\n};\r\nexport const $$sup = $sup(null as any, null as any);\r\n\r\n\r\nexport const $div = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (/ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$div', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) / toNumber(curr), toNumber(car));\r\n};\r\nexport const $$div = $div(null as any, null as any);\r\n\r\n\r\nexport const $mod = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (% number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mod', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) % toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mod = $mod(null as any, null as any);\r\n\r\n\r\nexport const $max = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($max val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.max(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$max = $max(null as any, null as any);\r\n\r\n\r\nexport const $min = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($min val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.min(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$min = $min(null as any, null as any);\r\n\r\n\r\nexport const $avg = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($avg val1 ... valN)\r\n    //  -> S expr  : value\r\n    const a = args.map(x => toNumber(x));\r\n    return a.length > 0 ? a.reduce((prev, curr) => prev + curr, 0) / a.length : NaN;\r\n};\r\nexport const $$avg = $avg(null as any, null as any);\r\n\r\n\r\nexport const $floor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($floor number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$floor', args, 1, 1);\r\n\r\n    return Math.floor(toNumber($$first(...args)));\r\n};\r\nexport const $$floor = $floor(null as any, null as any);\r\n\r\n\r\nexport const $ceil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($ceil number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$ceil', args, 1, 1);\r\n\r\n    return Math.ceil(toNumber($$first(...args)));\r\n};\r\nexport const $$ceil = $ceil(null as any, null as any);\r\n\r\n\r\nexport const $round = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($round number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$round', args, 1, 1);\r\n\r\n    return Math.round(toNumber($$first(...args)));\r\n};\r\nexport const $$round = $round(null as any, null as any);\r\n\r\n\r\nexport const $abs = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($abs number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$abs', args, 1, 1);\r\n\r\n    return Math.abs(toNumber($$first(...args)));\r\n};\r\nexport const $$abs = $abs(null as any, null as any);\r\n\r\n\r\nexport const $sign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sign number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sign', args, 1, 1);\r\n\r\n    return Math.sign(toNumber($$first(...args)));\r\n};\r\nexport const $$sign = $sign(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './arithmetic.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '<<',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '$bit-l-shift',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '>>',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '$bit-sr-shift',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '>>>',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-ur-shift',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-not',\r\n    fn: ops.$bitNot,\r\n}, {\r\n    name: '$bit-and',\r\n    fn: ops.$bitAnd,\r\n}, {\r\n    name: '$bit-or',\r\n    fn: ops.$bitOr,\r\n}, {\r\n    name: '$bit-xor',\r\n    fn: ops.$bitXor,\r\n}, {\r\n    name: '+',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$add',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$sum',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '-',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$sub',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$neg',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '*',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '$mul',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '**',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '$sup',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '/',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '$div',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '%',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$mod',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$max',\r\n    fn: ops.$max,\r\n}, {\r\n    name: '$min',\r\n    fn: ops.$min,\r\n}, {\r\n    name: '$avg',\r\n    fn: ops.$avg,\r\n}, {\r\n    name: '$floor',\r\n    fn: ops.$floor,\r\n}, {\r\n    name: '$ceil',\r\n    fn: ops.$ceil,\r\n}, {\r\n    name: '$round',\r\n    fn: ops.$round,\r\n}, {\r\n    name: '$abs',\r\n    fn: ops.$abs,\r\n}, {\r\n    name: '$sign',\r\n    fn: ops.$sign,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo } from '../../types';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './arithmetic.operator';\r\nimport macros             from './arithmetic.macro';\r\nimport symbols            from './arithmetic.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2017, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport class Query<T> {\r\n    public constructor(public data: T[]) {\r\n    }\r\n\r\n    public orderBy(condition: Array<string | string[/* colName: string, ('asc' | 'desc') */]> | ((a: T, b: T) => number)): Query<T> {\r\n        let fn: (a: T, b: T) => number;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (typeof c === 'string') {\r\n                        if (x[c] > y[c]) return 1;\r\n                        if (x[c] < y[c]) return -1;\r\n                    } else {\r\n                        const desc = c[1] === 'desc' ? -1 : 1;\r\n                        if (x[c[0]] > y[c[0]]) return 1 * desc;\r\n                        if (x[c[0]] < y[c[0]]) return -1 * desc;\r\n                    }\r\n                }\r\n                return 0;\r\n            };\r\n        } else {\r\n            fn = condition;\r\n        }\r\n        return new Query(this.data.slice(0).sort(fn));\r\n    }\r\n\r\n    public groupBy(condition: string[/* colName: string */] | ((a: T, b: T, index: number, array: T[]) => boolean)): Query<T[]> {\r\n        let fn: (a: T, b: T, index: number, array: T[]) => boolean;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (x[c] !== y[c]) return false;\r\n                }\r\n                return true;\r\n            };\r\n        } else{\r\n            fn = condition;\r\n        }\r\n        const r: T[][] = [];\r\n        let start = 0;\r\n        let i = 1;\r\n        for (; i < this.data.length; i++) {\r\n            if (! fn(this.data[start], this.data[i], i, this.data)) {\r\n                r.push(this.data.slice(start, i));\r\n                start = i;\r\n            }\r\n        }\r\n        r.push(this.data.slice(start, i));\r\n        return new Query(r);\r\n    }\r\n\r\n    public groupEvery(n: number | {single: number, first?: number, intermediate: number, last?: number}): Query<T[]> {\r\n        if (typeof n === 'number') {\r\n            return this.groupBy((a, b, index, array) => {\r\n                if ((index % n) === 0) return false;\r\n                return true;\r\n            });\r\n        } else {\r\n            const w = Object.assign({first: n.intermediate, last: n.intermediate}, n);\r\n            const r = this.groupBy((a, b, index, array) => {\r\n                if (w.single >= array.length) {\r\n                    if ((index % w.single) === 0) return false;\r\n                    return true;\r\n                } else if (index <= w.first) {\r\n                    if ((index % w.first) === 0) return false;\r\n                    return true;\r\n                } else {\r\n                    if (((index - w.first) % w.intermediate) === 0) return false;\r\n                    return true;\r\n                }\r\n            });\r\n            if (r.data.length === 1) {\r\n                if (w.single < r.data[0].length) {\r\n                    r.data.push([]);\r\n                }\r\n            } else {\r\n                if (w.first < r.data[0].length) {\r\n                    // case of w.first === 0\r\n                    r.data.unshift([]);\r\n                }\r\n            }\r\n            if (r.data.length > 1) {\r\n                if (r.data[r.data.length - 1].length > w.last) {\r\n                    r.data.push([]);\r\n                }\r\n            }\r\n            return r;\r\n        }\r\n    }\r\n\r\n    public where(fn: (value: T, index: number, array: T[]) => boolean): Query<T> {\r\n        return new Query(this.data.filter(fn));\r\n    }\r\n\r\n    public select(): T[];\r\n    public select<R>(fn: (value: T, index: number, array: T[]) => R): R[];\r\n    public select<R>(fn?: (value: T, index: number, array: T[]) => R): Array<R | T> {\r\n        return fn ? this.data.map(fn) : this.data as any;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function query<T>(data: T[]): Query<T> {\r\n    return new Query<T>(data);\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber,\r\n         evaluate }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\nimport { query }             from '../../../lib/data';\r\n\r\n\r\n\r\nexport const $range = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($range start end)\r\n    // S expression: ($range start end step)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$range', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const start = toNumber(car) || 0;\r\n    const stop = toNumber(cdr) || 0;\r\n\r\n    const step = (args.length > 2 ? toNumber(args[2]) || 0 : 0) || (start <= stop ? 1 : -1);\r\n    const n = Math.sign(stop - start) + Math.sign(step) !== 0 ?\r\n        (Math.floor((Math.abs(stop - start) / Math.abs(step))) + 1) : 0;\r\n\r\n    state.evalCount += n;\r\n    evaluate(state, 0);\r\n    return Array.from({length: n}, (x, i) => start + i * step);\r\n};\r\n\r\n\r\nexport const $length = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($length listOrString)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$length', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('length' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.length;\r\n    }\r\n    throw new Error(`[SX] $length: Invalid argument type: object has no property 'length'.`);\r\n};\r\nexport const $$length = $length(null as any, null as any);\r\n\r\n\r\nexport const $trim = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trim', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trim();\r\n    }\r\n    throw new Error(`[SX] $trim: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trim = $trim(null as any, null as any);\r\n\r\n\r\nexport const $trimHead = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-head string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimHead', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimLeft();\r\n    }\r\n    throw new Error(`[SX] $trimHead: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimHead = $trimHead(null as any, null as any);\r\n\r\n\r\nexport const $trimTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-tail string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimTail', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimRight();\r\n    }\r\n    throw new Error(`[SX] $trimTail: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimTail = $trimTail(null as any, null as any);\r\n\r\n\r\nexport const $replaceAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($replace-all src-string match-string replacement-string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$replaceAll', args, 3, 3);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string' && typeof args[2] === 'string') {\r\n        return args[0].split(args[1]).join(args[2]);\r\n    }\r\n    throw new Error(`[SX] $replaceAll: Invalid argument type: args[0] or [1] or [2] is not string.`);\r\n};\r\nexport const $$replaceAll = $replaceAll(null as any, null as any);\r\n\r\n\r\nexport const $split = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($split src-string match-string)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$split', args, 2, 2);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string') {\r\n        return args[0].split(args[1]);\r\n    }\r\n    throw new Error(`[SX] $split: Invalid argument type: args[0] or [1] is not string.`);\r\n};\r\nexport const $$split = $split(null as any, null as any);\r\n\r\n\r\nexport const $join = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($join '(str1 ... strN) separator)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$join', args, 1, 2);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        if (args.length > 1) {\r\n            if (typeof args[1] === 'string') {\r\n                return args[0].join(args[1]);\r\n            }\r\n            throw new Error(`[SX] $join: Invalid argument type: args[1] is not string.`);\r\n        } else {\r\n            return args[0].join();\r\n        }\r\n    }\r\n    throw new Error(`[SX] $join: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$join = $join(null as any, null as any);\r\n\r\n\r\nexport const $concat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($concat listOrString1 ... listOrStringN)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$concat', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('concat' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.concat(...args.slice(1));\r\n    }\r\n    throw new Error(`[SX] $concat: Invalid argument type: object has no property 'concat'.`);\r\n};\r\nexport const $$concat = $concat(null as any, null as any);\r\n\r\n\r\nexport const $slice = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($slice start end listOrString)\r\n    // S expression: ($slice start listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$slice', args, 2, 3);\r\n\r\n    if (args.length === 3) {\r\n        if (typeof args[2] === 'string' || Array.isArray(args[2])) {\r\n            return args[2].slice(toNumber(args[0]), toNumber(args[1]));\r\n        }\r\n    }\r\n    if (args.length === 2) {\r\n        if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n            return args[1].slice(toNumber(args[0]));\r\n        }\r\n    }\r\n    throw new Error(`[SX] $slice: Invalid argument type: args[${args.length - 1}] is not string or array.`);\r\n};\r\nexport const $$slice = $slice(null as any, null as any);\r\n\r\n\r\nexport const $top = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($top n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$top', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        return args[1].slice(0, toNumber(args[0]));\r\n    }\r\n    throw new Error(`[SX] $top: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$top = $top(null as any, null as any);\r\n\r\n\r\nexport const $tail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($tail n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$tail', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        const n = -toNumber(args[0]);\r\n        return args[1].slice(n >= 0 || Number.isNaN(n) ? args[1].length : n);\r\n    }\r\n    throw new Error(`[SX] $tail: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$tail = $tail(null as any, null as any);\r\n\r\n\r\nexport const $push = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($push list value)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$push', args, 2, 2);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        args[0].push(args[1]);\r\n        return args[0];\r\n    }\r\n    throw new Error(`[SX] $push: Invalid argument type: args[1] is not array.`);\r\n};\r\nexport const $$push = $push(null as any, null as any);\r\n\r\n\r\nexport const $pop = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($pop list)\r\n    //  -> S expr  : value\r\n    checkParamsLength('$pop', args, 1, 1);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        const v = args[0].pop();\r\n        return v;\r\n    }\r\n    throw new Error(`[SX] $pop: Invalid argument type: args[1] is not array.`);\r\n};\r\nexport const $$pop = $pop(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__at = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__at index listOrString)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__at', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return cdr[car];\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__at = $__at(null as any, null as any);\r\n\r\n\r\nexport const $reverse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverse = $reverse(null as any, null as any);\r\n\r\n\r\nexport const $reverseDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse! listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse!', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverseDestructive = $reverseDestructive(null as any, null as any);\r\n\r\n\r\nexport const $find = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($find list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$find', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.find(cdr);\r\n    }\r\n    throw new Error(`[SX] $find: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$find = $find(null as any, null as any);\r\n\r\n\r\nexport const $filter = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($filter list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$filter', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.filter(cdr);\r\n    }\r\n    throw new Error(`[SX] $filter: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$filter = $filter(null as any, null as any);\r\n\r\n\r\nexport const $map = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($map list (lambda (v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$map', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.map(cdr);\r\n    }\r\n    throw new Error(`[SX] $map: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$map = $map(null as any, null as any);\r\n\r\n\r\nexport const $reduce = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduce', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduce(cdr);\r\n        } else {\r\n            return car.reduce(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduce: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduce = $reduce(null as any, null as any);\r\n\r\n\r\nexport const $reduceFromTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduceFromTail', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduceRight(cdr);\r\n        } else {\r\n            return car.reduceRight(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduceFromTail: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduceFromTail = $reduceFromTail(null as any, null as any);\r\n\r\n\r\nexport const $sort = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sort = $sort(null as any, null as any);\r\n\r\n\r\nexport const $sortDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort! list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort!', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sortDestructive = $sortDestructive(null as any, null as any);\r\n\r\n\r\nexport const $groupEvery = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-every optionsOrNumber (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-every', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-every: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupEvery(car).select();\r\n};\r\nexport const $$groupEvery = $groupEvery(null as any, null as any);\r\n\r\n\r\nexport const $groupBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-by conditions (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupBy(car).select();\r\n};\r\nexport const $$groupBy = $groupBy(null as any, null as any);\r\n\r\n\r\nexport const $orderBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($order-by conditions (x1 ... xN))\r\n    //  -> S expr  : (x1 ... xN)\r\n    checkParamsLength('$order-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $order-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).orderBy(car).select();\r\n};\r\nexport const $$orderBy = $orderBy(null as any, null as any);\r\n\r\n\r\nexport const $where = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($where (-> (v index array) ... boolean) (x1 ... xN))\r\n    //  -> S expr  : (x'1 ... x'M)\r\n    checkParamsLength('$where', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (typeof args[0] !== 'function') {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[0] is not function.`);\r\n    }\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).where(car).select();\r\n};\r\nexport const $$where = $where(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './sequence.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$range',\r\n    fn: ops.$range,\r\n}, {\r\n    name: '$length',\r\n    fn: ops.$length,\r\n}, {\r\n    name: '$trim',\r\n    fn: ops.$trim,\r\n}, {\r\n    name: '$trim-head',\r\n    fn: ops.$trimHead,\r\n}, {\r\n    name: '$trim-tail',\r\n    fn: ops.$trimTail,\r\n}, {\r\n    name: '$replace-all',\r\n    fn: ops.$replaceAll,\r\n}, {\r\n    name: '$split',\r\n    fn: ops.$split,\r\n}, {\r\n    name: '$join',\r\n    fn: ops.$join,\r\n}, {\r\n    name: '$concat',\r\n    fn: ops.$concat,\r\n}, {\r\n    name: '$slice',\r\n    fn: ops.$slice,\r\n}, {\r\n    name: '$top',\r\n    fn: ops.$top,\r\n}, {\r\n    name: '$tail',\r\n    fn: ops.$tail,\r\n}, {\r\n    name: '$push',\r\n    fn: ops.$push,\r\n}, {\r\n    name: '$pop',\r\n    fn: ops.$pop,\r\n}, {\r\n    name: '$__at',\r\n    fn: ops.$__at,\r\n}, {\r\n    name: '$reverse',\r\n    fn: ops.$reverse,\r\n}, {\r\n    name: '$reverse!',\r\n    fn: ops.$reverseDestructive,\r\n}, {\r\n    name: '$find',\r\n    fn: ops.$find,\r\n}, {\r\n    name: '$filter',\r\n    fn: ops.$filter,\r\n}, {\r\n    name: '$map',\r\n    fn: ops.$map,\r\n}, {\r\n    name: '$reduce',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-head',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-tail',\r\n    fn: ops.$reduceFromTail,\r\n}, {\r\n    name: '$sort',\r\n    fn: ops.$sort,\r\n}, {\r\n    name: '$sort!',\r\n    fn: ops.$sortDestructive,\r\n}, {\r\n    name: '$group-every',\r\n    fn: ops.$groupEvery,\r\n}, {\r\n    name: '$group-by',\r\n    fn: ops.$groupBy,\r\n}, {\r\n    name: '$order-by',\r\n    fn: ops.$orderBy,\r\n}, {\r\n    name: '$where',\r\n    fn: ops.$where,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState,\r\n         isSymbol } from '../../types';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$[',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($[ index ] listOrObject)\r\n        //  -> S expr  : ($__at listOrObject)\r\n        const symOf = isSymbol(list[2], ']');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing ']' keyword.`);\r\n        }\r\n        return [{symbol: '$__at'},\r\n            list[1],\r\n            list[3],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './sequence.operator';\r\nimport macros             from './sequence.macro';\r\nimport symbols            from './sequence.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken,\r\n         quote,\r\n         isSymbol }          from '../../types';\r\nimport { evaluate,\r\n         getScope }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond,\r\n         $__scope,\r\n         $$boolean }         from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputIf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputIf cond 'expr)\r\n    //  -> (if cond is true ) S expr  : expr\r\n    //  -> (if cond is false) S expr  : ()\r\n    checkParamsLength('$__outputIf', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        if (2 < args.length) {\r\n            r.push({symbol: state.config.reservedNames.Template}, ...args.slice(1));\r\n            r = evaluate(state, r);\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputForOf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputForOf list 'expr)\r\n    //  -> S expr  : (Template expr ... expr)\r\n    checkParamsLength('$__outputForOf', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    const r: SxToken[] = [];\r\n    if (Array.isArray(car)) {\r\n        for (let i = 0; i < car.length; i++) {\r\n            const x = car[i];\r\n            const v = $__scope(state, name)(true, true, [\r\n                ['$data', quote(state, x)],\r\n                ['$index', i],\r\n                ['$array', quote(state, car)],\r\n                ['$parent', quote(state, getScope(state).scope)],\r\n            ], ...args.slice(1));\r\n\r\n            if (2 < args.length && Array.isArray(v)) {\r\n                r.push(...v);\r\n            } else {\r\n                r.push(v);\r\n            }\r\n        }\r\n    } else {\r\n        throw new Error(`[SX] $__outputForOf: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    // All of r items are already evaluated.\r\n    return evaluate(state,\r\n        ([{symbol: state.config.reservedNames.Template}] as SxToken[])\r\n        .concat(r.map(z => [{symbol: state.config.reservedNames.quote}, z])));\r\n};\r\n\r\n\r\nexport const $jsxProps = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (@ (name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n            switch (keyName) {\r\n            case 'style':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (style) ...)\r\n                        //  -> JSON    : {..., style: \"\", ...}\r\n                        r[keyName] = \"\";\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (style \"styleName1: styleValue1; ...\" ...) ...)\r\n                        // S expression: (@ ... (style (styleName1 styleValue1) ...) ...)\r\n                        //  -> JSON    : {..., style: {styleName1: styleValue1}, ...}\r\n                        const styles: object = {};\r\n                        for (const s of x.slice(1)) {\r\n                            if (Array.isArray(s) && 1 < s.length) {\r\n                                styles[String(evaluate(state, s[0]))] = String(evaluate(state, s[1]));\r\n                            } else if (typeof s === 'string') {\r\n                                for (const v of s.split(';')) {\r\n                                    const matched = /^\\s*(\\S+)\\s*:\\s*(.*?)\\s*$/.exec(v);\r\n                                    if (matched) {\r\n                                        styles[matched[1]] = matched[2];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        r[keyName] = styles;\r\n                    }\r\n                }\r\n                break;\r\n            case 'class': case 'styleClass':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: [], ...}\r\n                        r[keyName] = [];\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: [className1 className2 ...], ...}\r\n                        let classes: any[] = [];\r\n                        for (const c of x.slice(1)) {\r\n                            if (Array.isArray(c)) {\r\n                                classes = classes.concat(c.map(z => evaluate(state, z)));\r\n                            } else if (typeof c === 'string') {\r\n                                classes = classes.concat(c.split(' '));\r\n                            }\r\n                        }\r\n                        const cs: string[] = [];\r\n                        const fn: (a: any[]) => void = (a) => a\r\n                            .forEach(c => (c === null || c === void 0) ?\r\n                                void 0 :\r\n                                (Array.isArray(c) ? fn(c) : cs.push(String(c))));\r\n                        fn(classes);\r\n                        r[keyName] = cs;\r\n                    }\r\n                }\r\n                break;\r\n            case 'className':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: \"\", ...}\r\n                        r[keyName] = '';\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: \"className1 className2 ...\", ...}\r\n                        let classes: string = '';\r\n                        for (const c of x.slice(1)) {\r\n                            let fragment = '';\r\n                            if (Array.isArray(c)) {\r\n                                const cs: string[] = [];\r\n                                const fn: (a: any[]) => void = (a) => a\r\n                                    .map(z => evaluate(state, z))\r\n                                    .forEach(z => (z === null || z === void 0) ?\r\n                                        void 0 :\r\n                                        (Array.isArray(z) ? fn(z) : cs.push(String(z))));\r\n                                fn(c);\r\n                                fragment = cs.join(' ');\r\n                            } else if (typeof c === 'string') {\r\n                                fragment = c;\r\n                            }\r\n                            if (0 < classes.length) classes += ' ' + fragment;\r\n                            else classes = fragment;\r\n                        }\r\n                        r[keyName] = classes;\r\n                    }\r\n                }\r\n                break;\r\n            case 'dangerouslySetInnerHTML':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__html: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__html: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__html:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            case 'setInnerText':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__text: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__text: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__text:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (keyName) ...)\r\n                        //  -> JSON    : {..., keyName: true, ...}\r\n                        r[keyName] = true;\r\n                    } else if (x.length === 2) {\r\n                        // S expression: (@ ... (keyName value) ...)\r\n                        //  -> JSON    : {..., keyName: value, ...}\r\n                        r[keyName] = evaluate(state, x[1]);\r\n                    } else {\r\n                        // S expression: (@ ... (keyName value1 value2 ...) ...)\r\n                        //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                        r[keyName] =\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $jsxProps: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nfunction getJsxTagsParams(state: SxParserState, ...args: any[]) {\r\n    let children = args;\r\n    let props: any = {};\r\n    if (0 < args.length && Array.isArray(args[0])) {\r\n        const sym = isSymbol(args[0][0], '@');\r\n\r\n        if (sym) {\r\n            props = $jsxProps(state, '')(...args[0].slice(1));\r\n            children = children.slice(1);\r\n        }\r\n    }\r\n    return {props, children};\r\n}\r\n\r\n\r\nexport const $jsxStandardTag = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(name, props, ...children);\r\n};\r\n\r\n\r\nexport const $jsxComponentTag = (component: any) => (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(component, props, ...children);\r\n};\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './jsx.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$=__if',\r\n    fn: ops.$__outputIf,\r\n}, {\r\n    name: '$=__for',\r\n    fn: ops.$__outputForOf,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState,\r\n         quote } from '../../types';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '@',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        return quote(state, list);\r\n    },\r\n}, {\r\n    name: '$=if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=if cond expr)\r\n        //  -> S expr  : ($=__if cond 'expr)\r\n        return [\r\n            {symbol: '$=__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$=for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=for list expr)\r\n        //  -> S expr  : ($=__for list 'expr)\r\n        return [\r\n            {symbol: '$=__for'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig,\r\n         LsxConfig }        from '../../types';\r\nimport operators            from './jsx.operator';\r\nimport macros               from './jsx.macro';\r\nimport symbols              from './jsx.symbol';\r\n\r\nimport { $jsxStandardTag,\r\n         $jsxComponentTag } from './jsx.fn';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig, lsxConf: LsxConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n\r\n    const components =\r\n        Object.entries(lsxConf.components)\r\n        .map(x => ({name: x[0], fn: $jsxComponentTag(x[1])}));\r\n\r\n    config.funcs = config.funcs.concat(\r\n        {name: config.reservedNames.Template, fn: $jsxComponentTag(lsxConf.jsxFlagment)},\r\n        ...components\r\n    );\r\n\r\n    config.funcSymbolResolverFallback = $jsxStandardTag;\r\n    config.jsx = lsxConf.jsx;\r\n    config.JsxFragment = lsxConf.jsxFlagment;\r\n\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $__let,\r\n         $__set  }           from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__letAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let-async 'nameStrOrSymbol promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__letAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__let(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__letAsync = $__letAsync(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__setAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set-async 'nameOrListOfNameOrIndex promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__setAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__set(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__setAsync = $__setAsync(null as any, null as any);\r\n\r\n\r\nexport const $then = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($then promise (lambda (val) ...) (lambda (err) ...))\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$then', args, 2, 3);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    if (typeof args[2] === 'function') {\r\n        promise = promise.then(args[1], args[2]);\r\n    } else {\r\n        if (typeof args[1] !== 'function') {\r\n            throw new Error(`[SX] $then: Invalid argument(s): args[1] is not function.`);\r\n        }\r\n        promise = promise.then(args[1]);\r\n    }\r\n    return promise;\r\n};\r\nexport const $$then = $then(null as any, null as any);\r\n\r\n\r\nexport const $resolveAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-all promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n    return Promise.all(promises);\r\n};\r\nexport const $$resolveAll = $resolveAll(null as any, null as any);\r\n\r\n\r\nexport const $resolveAny = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-any promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/39940152/get-first-fulfilled-promise\r\n    // firstOf: This will return the value of the first fulfilled promise,\r\n    //          or if all reject, an array of rejection reasons.\r\n    const invert  = (p: Promise<any>) => new Promise((res, rej) => p.then(rej, res));\r\n    const firstOf = (ps: Array<Promise<any>>) => invert(Promise.all(ps.map(invert)));\r\n\r\n    return firstOf(promises);\r\n};\r\nexport const $$resolveAny = $resolveAny(null as any, null as any);\r\n\r\n\r\nexport const $resolvePipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-pipe promise<val1> (lambda (val1) ... promiseOrVal2) (lambda (val2) ... promiseOrVal3) ... (lambda (valN-1) ... promiseOrValN))\r\n    //  -> S expr  : promise\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolvePipe', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n    let p = promise;\r\n    for (const l of lambdas) {\r\n        p = p.then(l);\r\n    }\r\n    return p;\r\n};\r\nexport const $$resolvePipe = $resolvePipe(null as any, null as any);\r\n\r\n\r\nexport const $resolveFork = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-fork promise<val1> (lambda (val1) ... promiseOrVal2a) ... (lambda (val1) ... promiseOrVal2z))\r\n    //  -> S expr  : (promise<val2a> ... promise<val2z>)\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolveFork', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n\r\n    const resolvers = new Array(lambdas.length);\r\n    const rejectors = new Array(lambdas.length);\r\n\r\n    const pa: Array<Promise<any>> = [];\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        pa.push(new Promise<any>((resolve: any, reject: any) => {\r\n            resolvers[i] = (v: any) => {\r\n                let lp: Promise<any> = lambdas[i](v);\r\n                if (typeof lp !== 'object' || typeof lp.then !== 'function') {\r\n                    lp = Promise.resolve(lp);\r\n                }\r\n\r\n                lp\r\n                .then(x => resolve(x))\r\n                .catch(e => reject(e));\r\n            };\r\n            rejectors[i] = reject;\r\n        }));\r\n    }\r\n\r\n    promise.then(\r\n        v => resolvers.forEach(f => f(v)),\r\n        e => rejectors.forEach(f => f(e))\r\n    );\r\n\r\n    return pa;\r\n};\r\nexport const $$resolveFork = $resolveFork(null as any, null as any);\r\n\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './concurrent.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$__let-async',\r\n    fn: ops.$__letAsync,\r\n}, {\r\n    name: '$__set-async',\r\n    fn: ops.$__setAsync,\r\n}, {\r\n    name: '$then',\r\n    fn: ops.$then,\r\n}, {\r\n    name: '$resolve-all',\r\n    fn: ops.$resolveAll,\r\n}, {\r\n    name: '$resolve-any',\r\n    fn: ops.$resolveAny,\r\n}, {\r\n    name: '$resolve-pipe',\r\n    fn: ops.$resolvePipe,\r\n}, {\r\n    name: '$resolve-fork',\r\n    fn: ops.$resolveFork,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState,\r\n         quote }             from '../../types';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$let-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let-async nameStrOrSymbol promise)\r\n        //  -> S expr  : ($__let-async 'nameStrOrSymbol promise)\r\n        checkParamsLength('$let-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__let-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set-async nameOrListOfNameOrIndex promise)\r\n        //  -> S expr  : ($__set-async 'nameOrListOfNameOrIndex promise)\r\n        checkParamsLength('$set-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__set-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './concurrent.operator';\r\nimport macros             from './concurrent.macro';\r\nimport symbols            from './concurrent.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxFuncInfo,\r\n         SxSymbolInfo,\r\n         SxReservedNames,\r\n         SxParserConfig,\r\n         SxParserState,\r\n         SxToken,\r\n         LsxConfig }        from './types';\r\nimport { parse }            from './parser';\r\nimport { evaluate }         from './evaluate';\r\nimport installCore          from './operators/core';\r\nimport installArithmetic    from './operators/arithmetic';\r\nimport installSequence      from './operators/sequence';\r\nimport installJsx           from './operators/jsx';\r\nimport installConcurrent    from './operators/concurrent';\r\n\r\n\r\n\r\nexport const defaultReservedNames: SxReservedNames = {\r\n    eval: '$eval',\r\n    quote: '$quote',\r\n    unquote: '$unquote',\r\n    spread: '$spread',\r\n    splice: '$splice',\r\n\r\n    car: '$car',\r\n    cdr: '$cdr',\r\n    cons: '$cons',\r\n    atom: '$atom',\r\n    eq: '$eq',\r\n    list: '$list',\r\n\r\n    let: '$clisp-let',\r\n    lambda: '$lambda',\r\n    self: '$self',\r\n    defun: '$defun',\r\n\r\n    if: '$if',\r\n    cond: '$cond',\r\n\r\n    while: '$while',\r\n    doWhile: '$do-while',\r\n    until: '$until',\r\n    doUntil: '$do-until',\r\n\r\n    get: '$get',\r\n    defvar: '$clisp-defvar',\r\n    setq: '$clisp-setq',\r\n    set: '$set',\r\n    call: '$call',\r\n\r\n    not: '$not',\r\n    and: '$and',\r\n    or: '$or',\r\n\r\n    Template: 'Template',\r\n};\r\n\r\nexport const defaultConfig: SxParserConfig = {\r\n    raiseOnUnresolvedSymbol: false,\r\n    enableEvaluate: true,\r\n    enableHereDoc: true,\r\n    enableSpread: true,\r\n    enableSplice: true,\r\n    enableShorthands: true,\r\n    enableVerbatimStringLiteral: true,\r\n    enableTailCallOptimization: true,\r\n    stripComments: false,\r\n    wrapExternalValue: true,\r\n    returnMultipleRoot: false,\r\n    maxEvalCount: 0,\r\n\r\n    reservedNames: defaultReservedNames,\r\n    symbols: [],\r\n    macros: [],\r\n    funcs: [],\r\n};\r\n\r\n\r\n\r\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\r\n    return {\r\n        strings: typeof strings === 'string' ? [strings] : strings,\r\n        values: values || [],\r\n\r\n        index: 0,\r\n        pos: 0,\r\n        line: 0,\r\n\r\n        evalCount: 0,\r\n\r\n        scopes: [{isBlockLocal: false, scope: globals}],\r\n\r\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\r\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\r\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\r\n\r\n        config,\r\n    };\r\n}\r\n\r\n\r\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\r\n    state.strings = typeof strings === 'string' ? [strings] : strings;\r\n    state.values = values || [];\r\n    state.index = 0;\r\n    state.pos = 0;\r\n    state.line = 0;\r\n    state.evalCount = 0;\r\n    return state;\r\n}\r\n\r\n\r\n\r\ninterface SExpressionRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\r\n}\r\n\r\ninterface SExpressionTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    evaluateAST: (ast: SxToken[]) => R;\r\n    repl: () => SExpressionRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\r\n}\r\n\r\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fRepl;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\ninterface SExpressionAsyncRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\r\n}\r\n\r\ninterface SExpressionAsyncTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\r\n    repl: () => SExpressionAsyncRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\r\n}\r\n\r\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = async (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n\r\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\r\n                    s[i] = await s[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\r\n            if (config.enableEvaluate) {\r\n                for (let i = 0; i < s.length; i++) {\r\n                    s[i] = evaluate(stat, s[i]);\r\n                }\r\n            }\r\n\r\n            if (config.returnMultipleRoot) {\r\n                return s.length === 1 ? s[0] : s;\r\n            } else {\r\n                return s[s.length - 1];\r\n            }\r\n        };\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return execSync(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fReplSync;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\n\r\nexport const S = (() => {\r\n    const config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config.enableEvaluate = false;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\nexport const L = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\nexport const LS = L;\r\nexport const lisp = L;\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const L_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LS_async = L_async;\r\n// tslint:disable-next-line:variable-name\r\nexport const lisp_async = L_async;\r\n\r\n\r\n\r\nexport const LM = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LM_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n\r\n\r\nexport function LSX<R = SxToken>(lsxConf: LsxConfig): SExpressionTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config) as any;\r\n}\r\n\r\n\r\n\r\nexport function LSX_async<R = SxToken>(lsxConf: LsxConfig): SExpressionAsyncTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config) as any;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nexport * from './s-exp/s-expression';\r\n\r\n\r\nexport { default as installCore }         from './s-exp/operators/core';\r\nexport { default as installArithmetic }   from './s-exp/operators/arithmetic';\r\nexport { default as installSequence }     from './s-exp/operators/sequence';\r\nexport { default as installJsx }          from './s-exp/operators/jsx';\r\nexport { default as installConcurrent }   from './s-exp/operators/concurrent';\r\n\r\n\r\nimport { default as coreOperators }       from './s-exp/operators/core/core.operator';\r\nimport { default as coreMacros }          from './s-exp/operators/core/core.macro';\r\nimport { default as coreSymbols }         from './s-exp/operators/core/core.symbol';\r\n\r\nimport { default as arithmeticOperators } from './s-exp/operators/arithmetic/arithmetic.operator';\r\nimport { default as arithmeticMacros }    from './s-exp/operators/arithmetic/arithmetic.macro';\r\nimport { default as arithmeticSymbols }   from './s-exp/operators/arithmetic/arithmetic.symbol';\r\n\r\nimport { default as sequenceOperators }   from './s-exp/operators/sequence/sequence.operator';\r\nimport { default as sequenceMacros }      from './s-exp/operators/sequence/sequence.macro';\r\nimport { default as sequenceSymbols }     from './s-exp/operators/sequence/sequence.symbol';\r\n\r\nimport { default as jsxOperators }        from './s-exp/operators/jsx/jsx.operator';\r\nimport { default as jsxMacros }           from './s-exp/operators/jsx/jsx.macro';\r\nimport { default as jsxSymbols }          from './s-exp/operators/jsx/jsx.symbol';\r\n\r\nimport { default as concurrentOperators } from './s-exp/operators/concurrent/concurrent.operator';\r\nimport { default as concurrentMacros }    from './s-exp/operators/concurrent/concurrent.macro';\r\nimport { default as concurrentSymbols }   from './s-exp/operators/concurrent/concurrent.symbol';\r\n\r\n\r\nexport const builtinOperators = {\r\n    core: coreOperators,\r\n    arithmetic: arithmeticOperators,\r\n    sequence: sequenceOperators,\r\n    jsx: jsxOperators,\r\n    concurrent: concurrentOperators,\r\n};\r\n\r\nexport const builtinMacros = {\r\n    core: coreMacros,\r\n    arithmetic: arithmeticMacros,\r\n    sequence: sequenceMacros,\r\n    jsx: jsxMacros,\r\n    concurrent: concurrentMacros,\r\n};\r\n\r\nexport const builtinSymbols = {\r\n    core: coreSymbols,\r\n    arithmetic: arithmeticSymbols,\r\n    sequence: sequenceSymbols,\r\n    jsx: jsxSymbols,\r\n    concurrent: concurrentSymbols,\r\n};\r\n"],"sourceRoot":""}