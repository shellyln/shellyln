{"version":3,"sources":["webpack://liyad/webpack/universalModuleDefinition","webpack://liyad/webpack/bootstrap","webpack://liyad/./src/s-exp/errors.ts","webpack://liyad/./src/s-exp/evaluate.ts","webpack://liyad/./src/s-exp/types.ts","webpack://liyad/./src/s-exp/compile.ops/helpers.ts","webpack://liyad/./src/s-exp/compile.ts","webpack://liyad/./src/s-exp/compile.ops/index.ts","webpack://liyad/./src/s-exp/parser.ts","webpack://liyad/./src/s-exp/operators/core/core.fn.ts","webpack://liyad/./src/s-exp/operators/core/core.operator.ts","webpack://liyad/./src/s-exp/operators/core/core.macro.ts","webpack://liyad/./src/s-exp/operators/core/core.symbol.ts","webpack://liyad/./src/s-exp/operators/core/index.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.fn.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.operator.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.macro.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.symbol.ts","webpack://liyad/./src/s-exp/operators/arithmetic/index.ts","webpack://liyad/./src/lib/data.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.fn.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.operator.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.macro.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.symbol.ts","webpack://liyad/./src/s-exp/operators/sequence/index.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.fn.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.operator.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.macro.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.symbol.ts","webpack://liyad/./src/s-exp/operators/jsx/index.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.fn.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.operator.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.macro.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.symbol.ts","webpack://liyad/./src/s-exp/operators/concurrent/index.ts","webpack://liyad/./src/s-exp/s-expression.ts","webpack://liyad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","setEvaluationCount","checkParamsLength","_types__WEBPACK_IMPORTED_MODULE_0__","state","evalCount","config","maxEvalCount","args","min","max","length","Error","toNumber","resolveMacro","resolveValueSymbolScope","resolveValueSymbol","collectCapturedVariables","getCapturedScopes","installScope","uninstallScope","getScope","getGlobalScope","optimizeTailCall","evaluate","_errors__WEBPACK_IMPORTED_MODULE_1__","x","NaN","Number","macroInfo","macroMap","symbol","fn","nullIfNotDefined","scopes","localScope","scope","capturedScopes","isBlockLocal","globalScope","symInfo","symbolMap","valueSymbolResolverFallback","raiseOnUnresolvedSymbol","names","a","unshift","assign","push","pop","formalArgs","fnBody","Array","isArray","front","slice","tail","reservedNames","if","self","varBaseName","tempVarsSyms","map","idx","until","let","set","sym","quote","eval","sprs","spread","reverse","concat","funcInfo","funcMap","v","funcSymbolResolverFallback","resolveFunctionSymbol","JSON","stringify","wrapExternalValue","car","cdr","dotted","isSymbol","FatalError","MaxEvaluationCountError","ScriptTerminationError","[object Object]","message","super","where","applyMacros","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","_evaluate__WEBPACK_IMPORTED_MODULE_1__","_errors__WEBPACK_IMPORTED_MODULE_2__","tok","compileLambda","_compile_ops_helpers__WEBPACK_IMPORTED_MODULE_2__","_compile_ops__WEBPACK_IMPORTED_MODULE_3__","compileCore","lastIsSpread","_$_vars","compileValue","b","compFnBody","String","ctx","varNames","has","varsCount","compileToken","body","ops","join","arr","Map","varNamesCount","varDefs","makeScope","scoped","varNamesCopy","entries","enableTailCallOptimization","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","code","registerOperators","_helpers__WEBPACK_IMPORTED_MODULE_2__","quoted","vName","symName","regToVars","isEOF","ch","isSpace","trim","isNumberFirstChar","test","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","line","index","pos","strings","getChar","virtualEof","eof","values","split","eofSeq","ch1","ch2","fromCodePoint","parseInt","lookAheads","chs","lookAhead","skipWhitespaces","parseNumber","parseSymbol","parseStringOrComment","valuesStartSeq","valuesStopChar","eofSeqs","types","parseList","parseString","parseHereDoc","attrs","q","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","aheads","enableSpread","enableHereDoc","isHereDoc","Template","ahs","listStopChar","initialList","stripComments","parse","$car","errors","$$first","$cdr","$cons","$$firstAndSecond","$first","$second","$$second","$last","$rest","$firstAndSecond","$atom","$eq","$notEq","$list","$__scope","returnMultiple","kv","kvSym","xSym","$__lambda","fa","actualArgs","$comp$__lambda","compile","$apply","apply","$raise","$pipe","$__let","$__set","path","subst","inprog","last","$boolean","Boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$isList","$isString","$isNumber","$isNaN","isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","$objectAssign","$jsonStringify","$jsonParse","$consoleLog","console","log","$consoleError","error","core_operator","st","nm","info","Function","e","list","keyName","core_macro","core_symbol","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","install","funcs","macros","symbols","$bitLShift","$bitSRShift","$bitURShift","$bitNot","$bitAnd","reduce","$bitOr","$bitXor","$add","$sub","$mul","$sup","Math","pow","$div","$mod","$max","$min","$avg","$floor","floor","$ceil","ceil","$round","round","$abs","abs","$sign","sign","arithmetic_operator","arithmetic_macro","arithmetic_symbol","arithmetic_install","Query","data","this","condition","y","desc","sort","start","groupBy","array","w","first","intermediate","single","filter","query","$length","$trim","$trimHead","trimLeft","$trimTail","trimRight","$replaceAll","$split","$join","$concat","$slice","$top","$tail","$__at","$reverse","$reverseDestructive","$find","find","$filter","$map","$reduce","$reduceFromTail","reduceRight","$sort","$sortDestructive","$groupEvery","groupEvery","select","$groupBy","$orderBy","orderBy","$where","sequence_operator","stop","step","from","sequence_macro","sequence_symbol","sequence_install","$jsxProps","styles","matched","exec","classes","z","cs","forEach","fragment","__html","__text","getJsxTagsParams","children","props","$jsxStandardTag","jsx","$jsxComponentTag","component","jsx_operator","jsx_macro","jsx_symbol","jsx_install","lsxConf","components","jsxFlagment","JsxFragment","$__letAsync","promise","then","Promise","resolve","reject","$__setAsync","$then","$resolveAll","promises","all","$resolveAny","invert","res","rej","ps","firstOf","$resolvePipe","lambdas","$resolveFork","resolvers","rejectors","pa","lp","catch","f","concurrent_operator","concurrent_macro","concurrent_symbol","concurrent_install","defaultReservedNames","cons","atom","eq","lambda","defun","cond","while","doWhile","doUntil","defvar","setq","not","and","or","defaultConfig","enableEvaluate","returnMultipleRoot","initState","globals","resetState","SExpression","conf","startup","evaluateAST","ast","repl","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","installer","SExpressionAsync","__awaiter","S","L","LS","lisp","L_async","LS_async","lisp_async","LM","LM_async","LSX","LSX_async","builtinOperators","builtinMacros","builtinSymbols","core","arithmetic","sequence","concurrent"],"mappings":"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","file":"liyad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"liyad\"] = factory();\n\telse\n\t\troot[\"liyad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         MaxEvaluationCountError } from './types';\r\n\r\n\r\n\r\nexport function setEvaluationCount(state: SxParserState) {\r\n    state.evalCount++;\r\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\r\n        throw new MaxEvaluationCountError();\r\n    }\r\n}\r\n\r\n\r\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\r\n    if (args.length < min) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\r\n    }\r\n    if (max && max < args.length) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\r\n    }\r\n    return true;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedPair,\r\n         SxDottedFragment,\r\n         SxToken,\r\n         SxScope,\r\n         isSymbol,\r\n         CapturedScopes }     from './types';\r\nimport { setEvaluationCount } from './errors';\r\n\r\n\r\n\r\nexport function toNumber(x: any) {\r\n    switch (typeof x) {\r\n    case 'object': case 'symbol': case 'function':\r\n        return NaN;\r\n    default:\r\n        return Number(x);\r\n    }\r\n}\r\n\r\n\r\nexport function resolveMacro(state: SxParserState, x: SxSymbol): ((list: SxToken[]) => SxToken) | false {\r\n    const macroInfo = state.macroMap.get(x.symbol);\r\n    if (macroInfo) {\r\n        return macroInfo.fn(state, x.symbol);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\r\n    if (typeof x === 'function') {\r\n        return x;\r\n    }\r\n    const funcInfo = state.funcMap.get(x.symbol);\r\n    if (funcInfo) {\r\n        return funcInfo.fn(state, x.symbol);\r\n    } else {\r\n        const v = resolveValueSymbol(state, x);\r\n        if (typeof v === 'function') {\r\n            return v;\r\n        }\r\n        if (state.config.funcSymbolResolverFallback) {\r\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\r\n            return localScope.scope;\r\n        }\r\n        if (localScope.capturedScopes &&\r\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\r\n            return localScope.capturedScopes[x.symbol];\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    const globalScope = getGlobalScope(state);\r\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\r\n        return globalScope.scope;\r\n    }\r\n    return nullIfNotDefined ? null : getScope(state).scope;\r\n}\r\n\r\n\r\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\r\n    const scope = resolveValueSymbolScope(state, x, true);\r\n    if (scope) {\r\n        return scope[x.symbol];\r\n    }\r\n    const symInfo = state.symbolMap.get(x.symbol);\r\n    if (symInfo) {\r\n        return symInfo.fn(state, x.symbol);\r\n    } else {\r\n        if (state.config.valueSymbolResolverFallback) {\r\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\r\n    const capturedScopes: CapturedScopes = {};\r\n    for (const n of names) {\r\n        const scope = resolveValueSymbolScope(state, n, true);\r\n        if (scope === null) {\r\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\r\n        }\r\n        capturedScopes[n.symbol] = scope;\r\n    }\r\n    return capturedScopes;\r\n}\r\n\r\n\r\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\r\n    const a: CapturedScopes[] = [];\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope.capturedScopes) {\r\n            a.unshift(localScope.capturedScopes);\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\r\n}\r\n\r\n\r\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\r\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\r\n}\r\n\r\n\r\nexport function uninstallScope(state: SxParserState): any {\r\n    if (state.scopes.length < 2) {\r\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\r\n    }\r\n    return state.scopes.pop();\r\n}\r\n\r\n\r\nexport function getScope(state: SxParserState) {\r\n    return state.scopes[state.scopes.length - 1];\r\n}\r\n\r\n\r\nexport function getGlobalScope(state: SxParserState) {\r\n    return state.scopes[0];\r\n}\r\n\r\n\r\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //    formalArgs: 'sym1 ... 'symN\r\n    //        fnBody: 'expr1 ... 'exprN\r\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\r\n        const front = fnBody.slice(0, fnBody.length - 1);\r\n        const tail = fnBody[fnBody.length - 1];\r\n        if (tail && tail[0].symbol === state.config.reservedNames.if) {\r\n            // S expression: ($if cond t-expr f-expr)\r\n            if (tail[3][0].symbol === state.config.reservedNames.self) {\r\n                // S expression (recursive):\r\n                //     (                                 ;; fnBody\r\n                //         expr1 ... exprN-1             ;; front\r\n                //         ($if cond                     ;; tail[0] [1]\r\n                //             t-expr                    ;;     [2]\r\n                //             ($self                    ;;     [3]\r\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\r\n                //     )\r\n                //\r\n                //  -> S exp (tail call optimization):\r\n                //     (                                                                  ;; fnBody\r\n                //         ($until cond                                                   ;; tail[1]\r\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\r\n                //                 expr1 ... exprN-1                                      ;; front\r\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\r\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\r\n                //             )                                                          ;;\r\n                //         )                                                              ;;\r\n                //         expr1 ... exprN-1                                              ;; front\r\n                //         t-expr                                                         ;; tail[2]\r\n                //     )\r\n\r\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\r\n\r\n                return [\r\n                    [{symbol: state.config.reservedNames.until}, tail[1],\r\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\r\n                            ...front,\r\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\r\n                            ...(tempVarsSyms.map((x, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\r\n                        ],\r\n                    ],\r\n                    ...front,\r\n                    tail[2],\r\n                ];\r\n            }\r\n        }\r\n    }\r\n    return fnBody;\r\n}\r\n\r\n\r\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\r\n    setEvaluationCount(state);\r\n\r\n    if (x === null || x === void 0) {\r\n        return x;\r\n    }\r\n    let r: SxToken = x;\r\n\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                return r;\r\n            }\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym);\r\n\r\n                if (m) {\r\n                    r = m(r);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        setEvaluationCount(state);\r\n    }\r\n\r\n    if (Array.isArray(r)) {\r\n        r = r.slice(0);\r\n        if (0 < r.length) {\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                if (sym.symbol === state.config.reservedNames.quote) {\r\n                    return r.slice(1, 2)[0];\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.eval) {\r\n                    return evaluate(state, r[1]);\r\n                }\r\n            }\r\n\r\n            const sprs = [];\r\n            for (let i = 1; i < r.length; i++) {\r\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\r\n                if (symSpr) {\r\n                    sprs.push(i);\r\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\r\n                    r[i] = Array.isArray(a) ? a : [a];\r\n                } else {\r\n                    r[i] = evaluate(state, r[i]);\r\n                }\r\n            }\r\n            for (const i of sprs.reverse()) {\r\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\r\n            }\r\n\r\n            let fn: any;\r\n            if (typeof r[0] === 'function') {\r\n                fn = r[0];\r\n            } else if (sym) {\r\n                fn = resolveFunctionSymbol(state, sym);\r\n            } else {\r\n                fn = evaluate(state, r[0]);\r\n            }\r\n\r\n            if (typeof fn === 'function') {\r\n                r = (fn as any)(...(r.slice(1)));\r\n            } else {\r\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\r\n            }\r\n        }\r\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\r\n        r = (r as SxExternalValue).value;\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\r\n        r = resolveValueSymbol(state, r as SxSymbol);\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\r\n        const car = evaluate(state, (r as SxDottedPair).car);\r\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\r\n        if (Array.isArray(cdr)) {\r\n            const a = (cdr as any[]).slice(0);\r\n            a.unshift(car);\r\n            r = a;\r\n        } else {\r\n            r = { car, cdr };\r\n        }\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\r\n        r = [\r\n            evaluate(state, (r as SxDottedFragment).dotted),\r\n        ];\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\r\n        r = [];\r\n    }\r\n\r\n    return r;\r\n}\r\n","\r\n\r\n\r\nexport type SxMacro = (state: SxParserState, name: string) => (list: SxToken[]) => SxToken;\r\n\r\nexport interface SxMacroInfo {\r\n    name: string;\r\n    fn: SxMacro;\r\n}\r\n\r\n\r\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\r\n\r\nexport interface SxFuncInfo {\r\n    name: string;\r\n    fn: SxFunc;\r\n}\r\n\r\n\r\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\r\n\r\nexport interface SxSymbolInfo {\r\n    name: string;\r\n    fn: SxSymbolResolver;\r\n}\r\n\r\n\r\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\r\n\r\nexport interface SxScope {\r\n    isBlockLocal: boolean;\r\n    scope: any;           // { [s: string]: any; };\r\n    capturedScopes?: CapturedScopes;\r\n}\r\n\r\n\r\nexport interface SxReservedNames {\r\n    eval: string;\r\n    quote: string;\r\n    spread: string;\r\n\r\n    car: string;\r\n    cdr: string;\r\n    cons: string;\r\n    atom: string;\r\n    eq: string;\r\n    list: string;\r\n\r\n    let: string;\r\n    lambda: string;\r\n    self: string;\r\n    defun: string;\r\n\r\n    if: string;\r\n    cond: string;\r\n\r\n    while: string;\r\n    doWhile: string;\r\n    until: string;\r\n    doUntil: string;\r\n\r\n    get: string;\r\n    defvar: string;\r\n    setq: string;\r\n    set: string;\r\n\r\n    not: string;\r\n    and: string;\r\n    or: string;\r\n\r\n    Template: string;\r\n}\r\n\r\nexport interface SxParserConfig {\r\n    raiseOnUnresolvedSymbol: boolean;\r\n    enableEvaluate: boolean;\r\n    enableHereDoc: boolean;\r\n    enableSpread: boolean;\r\n    enableTailCallOptimization: boolean;\r\n    stripComments: boolean;\r\n    wrapExternalValue: boolean;\r\n    reservedNames: SxReservedNames;\r\n    returnMultipleRoot: boolean;\r\n    maxEvalCount: number;\r\n\r\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\r\n    JsxFragment?: any;\r\n\r\n    funcs: SxFuncInfo[];\r\n    macros: SxMacroInfo[];\r\n    symbols: SxSymbolInfo[];\r\n\r\n    funcSymbolResolverFallback?: SxFunc;\r\n    valueSymbolResolverFallback?: SxSymbolResolver;\r\n}\r\n\r\nexport interface SxParserState {\r\n    strings: TemplateStringsArray | string[];\r\n    values: any[];\r\n\r\n    index: number;\r\n    pos: number;\r\n    line: number;\r\n\r\n    evalCount: number;\r\n\r\n    scopes: SxScope[];\r\n\r\n    macroMap: Map<string, SxMacroInfo>;\r\n    funcMap: Map<string, SxFuncInfo>;\r\n    symbolMap: Map<string, SxSymbolInfo>;\r\n\r\n    config: SxParserConfig;\r\n}\r\n\r\nexport interface SxEof {\r\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\r\n    eofSeq?: string;\r\n}\r\n\r\nexport interface SxExternalValue {\r\n    value: any;\r\n}\r\n\r\nexport interface SxSymbol {\r\n    'symbol': string;\r\n}\r\n\r\nexport interface SxComment {\r\n    comment: string;\r\n}\r\n\r\nexport interface SxDottedPair {\r\n    car: SxToken; // left\r\n    cdr: SxToken; // right\r\n}\r\n\r\nexport interface SxDottedFragment {\r\n    dotted: SxToken; // right\r\n}\r\n\r\n\r\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\r\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\r\nexport type SxChar = string | SxEof | SxExternalValue;\r\nexport type SxAtom = SxSymbol | string | number | boolean | null;\r\nexport type SxList = SxDottedPair | SxAtom[];\r\n\r\n\r\n\r\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\r\n\r\n\r\nexport interface CompilerContext {\r\n    _$_vars: any[];\r\n    varsCount: number;\r\n    varNames: Map<string, string>;\r\n    varNamesCount: number;\r\n    varDefs: string;\r\n    ops: Map<string, CompilerOperator>;\r\n    makeScope: (scoped: () => void) => void;\r\n    compileToken: (body: any[], i: number) => string;\r\n}\r\n\r\n\r\n\r\nexport interface LsxConfig {\r\n    jsx: (comp: any, props: any, ...children: any[]) => any;\r\n    jsxFlagment: any;\r\n    components: object;\r\n}\r\n\r\n\r\n\r\nexport function quote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.quote}, x];\r\n}\r\n\r\n\r\nexport function isQuoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.quote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function spread(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.spread}, x];\r\n}\r\n\r\n\r\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\r\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\r\n        if (name !== void 0) {\r\n            return x.symbol === name ? x : null;\r\n        } else {\r\n            return x;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\nexport class FatalError extends Error {\r\n    public constructor(message?: string | undefined) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n\r\nexport class MaxEvaluationCountError extends FatalError {\r\n    public constructor() {\r\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\r\n    }\r\n}\r\n\r\n\r\nexport class ScriptTerminationError extends FatalError {\r\n    public constructor(where: string) {\r\n        super(`[SX] ${where}: Unexpected termination of script.`);\r\n    }\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken,\r\n         isSymbol }           from '../types';\r\nimport { resolveMacro,\r\n         resolveValueSymbol,\r\n         getScope }           from '../evaluate';\r\nimport { setEvaluationCount } from '../errors';\r\n\r\n\r\n\r\nexport function applyMacros(state: SxParserState, tok: SxToken) {\r\n    let r: SxToken = tok;\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                break;\r\n            }\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym);\r\n                if (m) {\r\n                    r = m(r);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function stripQuote(state: SxParserState, tok: SxToken) {\r\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\r\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\r\n    }\r\n    return (tok as any)[1];\r\n}\r\n\r\n\r\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\r\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\r\n        return (tok as any)[1];\r\n    } else {\r\n        return tok;\r\n    }\r\n}\r\n\r\n\r\nexport function getScope_stateApplied(state: SxParserState) {\r\n    return (function() { return getScope(state); });\r\n}\r\n\r\n\r\nexport function resolveValueSymbol_dynamic(state: SxParserState, name: string) {\r\n    return (function(){ return resolveValueSymbol(state, {symbol: name}); });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         SxFuncInfo,\r\n         CompilerOperator,\r\n         CompilerContext,\r\n         isSymbol }                   from './types';\r\nimport { getCapturedScopes,\r\n         optimizeTailCall }           from './evaluate';\r\nimport { applyMacros,\r\n         stripQuoteOrPass,\r\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\r\nimport { registerOperators }          from './compile.ops';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\r\n\r\n    function makeScope(scoped: () => void) {\r\n        const varNamesCopy = new Map<string, string>();\r\n        for (const x of ctx.varNames.entries()) {\r\n            varNamesCopy.set(x[0], x[1]);\r\n        }\r\n        scoped();\r\n        ctx.varNames = varNamesCopy;\r\n    }\r\n\r\n\r\n    function compileValue(b: any) {\r\n        let compFnBody = '';\r\n        if (b === null) {\r\n            compFnBody += '(null)';\r\n        } else if (b === void 0) {\r\n            compFnBody += '(void 0)';\r\n        } else switch (typeof b) {\r\n        case 'boolean': case 'number':\r\n            compFnBody += `(${String(b)})`;\r\n            break;\r\n        case 'object':\r\n            if (isSymbol(b)) {\r\n                const sym = b as SxSymbol;\r\n                if (ctx.varNames.has(sym.symbol)) {\r\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\r\n                } else {\r\n                    _$_vars[ctx.varsCount] = sym.symbol;\r\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n                }\r\n                break;\r\n            } else {}\r\n            // FALL_THRU\r\n        default:\r\n            _$_vars[ctx.varsCount] = b;\r\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n            break;\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    function compileToken(body: any[], i: number) {\r\n        let compFnBody = '';\r\n        const b = body[i];\r\n        if (Array.isArray(b)) {\r\n            if (0 < b.length) {\r\n                const r: SxToken = applyMacros(state, b);\r\n                if (Array.isArray(r)) {\r\n                    if (0 < r.length) {\r\n                        if (isSymbol(r[0])) {\r\n                            const sym = r[0] as SxSymbol;\r\n                            const args = r.slice(1);\r\n                            if (ops.has(sym.symbol)) {\r\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\r\n                            } else {\r\n                                if (state.funcMap.has(sym.symbol)) {\r\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                } else if (ctx.varNames.has(sym.symbol)) {\r\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else {\r\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            switch (typeof r[0]) {\r\n                            case 'function':\r\n                                _$_vars[ctx.varsCount] = r[0];\r\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                break;\r\n                            default:\r\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        compFnBody += '([])';\r\n                    }\r\n                } else {\r\n                    compFnBody += compileValue(b);\r\n                }\r\n            } else {\r\n                compFnBody += '([])';\r\n            }\r\n        } else {\r\n            compFnBody += compileValue(b);\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    const ctx: CompilerContext = {\r\n        _$_vars,\r\n        varsCount: 1,\r\n        varNames: new Map<string, string>(),\r\n        varNamesCount: 0,\r\n        varDefs: 'var x0;',\r\n        ops: new Map<string, CompilerOperator>(),\r\n        makeScope,\r\n        compileToken,\r\n    };\r\n\r\n    registerOperators(state, ctx);\r\n    const ops = ctx.ops;\r\n\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n    if (capturedScopes) {\r\n        for (const x in capturedScopes) {\r\n            if (Object.hasOwnProperty.call(capturedScopes, x)) {\r\n                _$_vars[ctx.varsCount++] = x;\r\n                _$_vars[ctx.varsCount] = capturedScopes[x];\r\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\r\n                ctx.varsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const compFormalArgs = `${formalArgs.map((x, i) => {\r\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\r\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\r\n    }).join(',')}`;\r\n\r\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\r\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\r\n}\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\r\n    // tslint:disable-next-line:no-eval\r\n    _$_vars[0] = eval(code);\r\n    return _$_vars[0];\r\n}\r\n\r\n\r\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\r\n    // tslint:disable-next-line:variable-name\r\n    const _$_vars: any[] = [];\r\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         CompilerContext,\r\n         isSymbol }                   from '../types';\r\nimport { checkParamsLength }          from '../errors';\r\nimport { stripQuote,\r\n         stripQuoteOrPass,\r\n         getScope_stateApplied,\r\n         resolveValueSymbol_dynamic } from './helpers';\r\n\r\n\r\n\r\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\r\n    const {\r\n        _$_vars,\r\n        ops,\r\n        makeScope,\r\n        compileToken,\r\n    } = ctx;\r\n\r\n\r\n    ops.set('$quote', function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$self', function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        compFnBody += `((_$_vars[0])(${\r\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if condition 't-expr 'f-expr)\r\n        //  -> (if condition is true ) S expr  : t-expr\r\n        //  -> (if condition is false) S expr  : f-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if', args, 2, 3);\r\n        compFnBody += `(${compileToken(r, 1)}?(${\r\n            compileToken([stripQuote(state, r[2])], 0)}):(${\r\n            compileToken([stripQuote(state, r[3])], 0)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if-null condition 'null-expr)\r\n        //  -> (if condition is not null ) S expr  : condition\r\n        //  -> (if condition is null)      S expr  : null-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\r\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\r\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        //  -> (if (eval condI) is true ) S expr  : exprI\r\n        //  -> (if no matched)            S expr  : null\r\n        let compFnBody = '';\r\n        {\r\n            checkParamsLength('compileToken:$__cond', args, 1);\r\n            compFnBody += `(`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\r\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\r\n            }\r\n            compFnBody += `null`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `)`;\r\n            }\r\n            compFnBody += `)`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__while', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n        //  -> (if n > 0) S expr  : exprN\r\n        //  -> (else)     S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__repeat', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n        //  -> (if list.length > 0) S expr  : exprN\r\n        //  -> (else)               S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__for', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n        //  -> (else)               S expr  : exprN\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__scope', args, 2);\r\n        // r[1]: isBlockLocal\r\n        // r[2]: returnMultiple\r\n        if (! Array.isArray(r[3])) {\r\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\r\n        }\r\n        makeScope(() => {\r\n            for (const x of stripQuote(state, r[3]) as any[]) {\r\n                let name = '';\r\n                if (Array.isArray(x)) {\r\n                    if (x.length < 1) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\r\n                    }\r\n                    if (! isSymbol(x[0])) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\r\n                    }\r\n                    name = x[0].symbol;\r\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\r\n                } else {\r\n                    if (! isSymbol(x)) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\r\n                    }\r\n                    name = x.symbol;\r\n                }\r\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n                ctx.varNames.set(x.symbol, 'v' + ctx.varNamesCount++);\r\n            }\r\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\r\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__try 'expr 'catch-expr)\r\n        //  ->                               S expr  : expr\r\n        //  -> (if error is raised in expr)  S expr  : catch-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__try', args, 1, 2);\r\n        compFnBody += `((()=>{try{${\r\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\r\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\r\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\r\n        makeScope(() => {\r\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\r\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\r\n            compFnBody += `${\r\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$raise', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($raise 'expr)\r\n        //  -> S expr  : -\r\n        let compFnBody = '';\r\n        compFnBody += `((()=>{throw ${\r\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($boolean any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\r\n        compFnBody += `((x0=${compileToken(args, 0)\r\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__get', args, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__let 'nameStrOrSymbol expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__let', args, 1, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        if (! ctx.varNames.has(name)) {\r\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n        }\r\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__set', args, 2, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ?\r\n            quoted.symbol :\r\n            (typeof quoted === 'string' ?\r\n                quoted :\r\n                (Array.isArray(quoted) ?\r\n                    (isSymbol(quoted[0]) ?\r\n                        quoted[0].symbol :\r\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\r\n                    ) :\r\n                    null\r\n                )\r\n            );\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$not', args, 1, 1);\r\n        compFnBody += `(!${compileToken(args, 0)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__and 'expr1 ... 'exprN)\r\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n        //  -> (else)                                                     S expr  : expr-i (false left most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__and', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__or 'expr1 ... 'exprN)\r\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n        //  -> (else)                                                  S expr  : expr-i (false right most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__or', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($eq arg1 arg2)\r\n        //  -> (if arg1 === arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:===', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not-eq arg1 arg2)\r\n        //  -> (if arg1 !== arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (== a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (!= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (< a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (> a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($concat listOrString1 ... listOrStringN)\r\n        //  -> S expr  : listOrString\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}].concat(\r\n            ${args.map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (+ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (- number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:-', args, 1);\r\n        compFnBody += `(${r.length > 2 ?\r\n            args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\r\n            `-(${String(compileToken(r, 1))})`})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (* number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:*', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (** number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:**', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (/ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:/', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (% number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:%', args, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<< number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-not number)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\r\n        compFnBody += `(~(${compileToken(r, 1)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-and numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-or numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-xor numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\r\n        return compFnBody;\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxEof,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedFragment,\r\n         SxComment,\r\n         SxToken,\r\n         SxChar,\r\n         quote,\r\n         spread,\r\n         ScriptTerminationError } from './types';\r\n\r\n\r\n\r\nfunction isEOF(ch: SxChar): boolean {\r\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\r\n}\r\n\r\n\r\nfunction isSpace(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && ch.trim().length === 0;\r\n}\r\n\r\n\r\nfunction isNumberFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isSymbolFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' &&\r\n        !isSpace(ch) &&\r\n        !isNumberFirstChar(ch);\r\n}\r\n\r\n\r\n\r\nfunction lookCurrentLineHint(state: SxParserState): string {\r\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\r\n        state.strings.length > state.index ?\r\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\r\n}\r\n\r\n\r\nfunction getChar(state: SxParserState, virtualEof?: string[]): SxChar {\r\n    if (state.strings.length <= state.index) {\r\n        return {eof: true};\r\n    }\r\n    if (state.strings[state.index].length <= state.pos) {\r\n        if ((! state.values) || (state.values.length <= state.index)) {\r\n            state.pos = 0;\r\n            state.index++;\r\n            return getChar(state);\r\n        } else {\r\n            const ch = {value: state.values[state.index]};\r\n            state.pos = 0;\r\n            state.index++;\r\n            return ch;\r\n        }\r\n    }\r\n    if (virtualEof) {\r\n        for (const v of virtualEof) {\r\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\r\n            if (ch === v) {\r\n                state.pos += v.length;\r\n                state.line += ch.split('\\n').length - 1;\r\n                return { eof: false , eofSeq: v };\r\n            }\r\n        }\r\n    }\r\n    {\r\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n        state.pos++;\r\n\r\n        if (ch === '\\n') {\r\n            state.line++;\r\n        }\r\n\r\n        if (ch === '\\\\') {\r\n            if (state.strings[state.index].length <= state.pos) {\r\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n            state.pos++;\r\n\r\n            switch (ch) {\r\n            case 'b':\r\n                ch = '\\b';\r\n                break;\r\n            case 't':\r\n                ch = '\\t';\r\n                break;\r\n            case 'n':\r\n                ch = '\\n';\r\n                break;\r\n            case 'v':\r\n                ch = '\\v';\r\n                break;\r\n            case 'f':\r\n                ch = '\\f';\r\n                break;\r\n            case 'r':\r\n                ch = '\\r';\r\n                break;\r\n            case 'U': case 'u':\r\n                {\r\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\r\n                        let ch1 = '';\r\n                        for (let i = 0; i < 6; i++) {\r\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\r\n                            if (ch2 === '}') {\r\n                                if (i === 0) {\r\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                                }\r\n                                state.pos += i;\r\n                                break;\r\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\r\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            ch1 += ch2;\r\n                        }\r\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos++;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    } else {\r\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\r\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos += 4;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return ch;\r\n    }\r\n}\r\n\r\n\r\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[]): SxChar[] {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    const chs: SxChar[] = [];\r\n\r\n    try {\r\n        for (let i = 0; i < n; i++) {\r\n            chs.push(getChar(state, virtualEof));\r\n        }\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return chs;\r\n}\r\n\r\n\r\nfunction lookAhead(state: SxParserState, virtualEof?: string[]): SxChar {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    let ch: SxChar;\r\n\r\n    try {\r\n        ch = getChar(state, virtualEof);\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return ch;\r\n}\r\n\r\n\r\nfunction skipWhitespaces(state: SxParserState): void {\r\n    let ch = lookAhead(state);\r\n    while (!isEOF(ch) && isSpace(ch)) {\r\n        getChar(state);\r\n        ch = lookAhead(state);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\r\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n    }\r\n    return Number(s);\r\n}\r\n\r\n\r\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (isSpace(ch)) {\r\n                break;\r\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\r\n                break;\r\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                getChar(state, virtualEof);\r\n                const v = (ch as SxExternalValue).value;\r\n                s += String(ch);\r\n            } else {\r\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    return {symbol: s};\r\n}\r\n\r\n\r\nfunction parseStringOrComment(\r\n        state: SxParserState, eof: string[],\r\n        valuesStartSeq: string | null ,\r\n        valuesStopChar: string\r\n    ): { strings: string[], values: any[] } {\r\n\r\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\r\n    const strings: string[] = [];\r\n    const values: any[] = [];\r\n\r\n    for (;;) {\r\n        let s = '';\r\n        let ch = lookAhead(state, eofSeqs);\r\n\r\n        while (! isEOF(ch)) {\r\n            if (typeof ch === 'string') {\r\n                getChar(state, eofSeqs);\r\n                s += ch;\r\n            } else {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state, eofSeqs);\r\n                    const v = (ch as SxExternalValue).value;\r\n                    s += String(ch);\r\n                } else {\r\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            }\r\n\r\n            ch = lookAhead(state, eofSeqs);\r\n        }\r\n\r\n        getChar(state, eofSeqs);\r\n\r\n        if ((ch as SxEof).eof === true) {\r\n            throw new ScriptTerminationError('parseStringOrComment');\r\n        }\r\n\r\n        strings.push(s);\r\n\r\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\r\n            values.push(parseList(state, valuesStopChar, []));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { strings, values };\r\n}\r\n\r\n\r\nfunction parseString(state: SxParserState): string {\r\n    return parseStringOrComment(state, ['\"'], null, ')').strings[0];\r\n}\r\n\r\n\r\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\r\n    const q: SxToken[] = [symbol];\r\n\r\n    if (attrs) {\r\n        q.push(attrs);\r\n    }\r\n\r\n    const inner =  parseStringOrComment(state, ['\"\"\"'], '%%%(', ')');\r\n    for (let i = 0; i < inner.strings.length; i++) {\r\n        q.push(inner.strings[i]);\r\n        if (i < inner.values.length) {\r\n            q.push(inner.values[i]);\r\n        }\r\n    }\r\n\r\n    return q;\r\n}\r\n\r\n\r\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')').strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['|#'], null, ')').strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseOneToken(state: SxParserState): SxToken {\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case ')':\r\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n\r\n        case '(':\r\n            getChar(state);\r\n            return parseList(state, ')', []);\r\n\r\n        case \"'\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                return quote(state, parseOneToken(state));\r\n            }\r\n\r\n        case \".\":\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 2);\r\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    skipWhitespaces(state);\r\n                    return spread(state, parseOneToken(state));\r\n                } else {\r\n                    skipWhitespaces(state);\r\n                    return {dotted: parseOneToken(state)};\r\n                }\r\n            }\r\n\r\n        case '\"':\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 4);\r\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\r\n                    let isHereDoc = true;\r\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\r\n                        // here doc\r\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\r\n                        if (aheads[2] === '+' || aheads[2] === '-') {\r\n                            if (! isNumberAfterSignChar(aheads[3])) {\r\n                                isHereDoc = false;\r\n                            }\r\n                        }\r\n                        // here doc\r\n                    } else if (isSymbolFirstChar(aheads[2])) {\r\n                        isHereDoc = false;\r\n                    } else {\r\n                        // here doc\r\n                    }\r\n                    getChar(state);\r\n                    getChar(state);\r\n\r\n                    let sym: SxSymbol | number | null = null;\r\n                    let attrs: SxToken[] | null = null;\r\n                    if (isHereDoc) {\r\n                        sym = {symbol: state.config.reservedNames.Template};\r\n                    } else {\r\n                        sym = parseSymbol(state, ['@']);\r\n                        if (sym === null) {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        if (typeof sym === 'number') {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        const ahs = lookAheads(state, 2);\r\n                        if (ahs[0] === '@') {\r\n                            if (ahs[1] !== '{') {\r\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            getChar(state);\r\n                            getChar(state);\r\n                            const a = parseList(state, '}', [{symbol: '@'}]);\r\n                            if (Array.isArray(a)) {\r\n                                attrs = a;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return parseHereDoc(state, sym, attrs);\r\n                } else {\r\n                    return parseString(state);\r\n                }\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            return parseSingleLineComment(state);\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseMultiLineComment(state);\r\n                } else {\r\n                    return parseSymbol(state);\r\n                }\r\n            }\r\n\r\n        default:\r\n            if (typeof ch !== 'string') {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state);\r\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\r\n                } else {\r\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            } else if (isSpace(ch)) {\r\n                break;\r\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\r\n                if (ch === '+' || ch === '-') {\r\n                    const aheads = lookAheads(state, 2);\r\n                    if (! isNumberAfterSignChar(aheads[1])) {\r\n                        return parseSymbol(state);\r\n                    }\r\n                }\r\n                return parseNumber(state);\r\n            } else if (isSymbolFirstChar(ch)) {\r\n                return parseSymbol(state);\r\n            } else {\r\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseOneToken');\r\n}\r\n\r\n\r\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\r\n    const r: SxToken[] = initialList.slice(0);\r\n    let dotted = false;\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case listStopChar:\r\n            getChar(state);\r\n            if (dotted) {\r\n                return r[0];\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        default:\r\n            {\r\n                const t = parseOneToken(state);\r\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\r\n                    if (r.length !== 1) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    dotted = true;\r\n                    if (Array.isArray(t)) {\r\n                        t.unshift(r.pop() as SxToken);\r\n                        r.push(t);\r\n                    } else {\r\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\r\n                    }\r\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                    if (! state.config.stripComments) {\r\n                        r.push(t);\r\n                    }\r\n                } else {\r\n                    if (dotted) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    r.push(t);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseList');\r\n}\r\n\r\n\r\n\r\nexport function parse(state: SxParserState) {\r\n    const r: SxToken[] = [];\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case '(':\r\n            getChar(state);\r\n            r.push(parseList(state, ')', []));\r\n            break;\r\n\r\n        case \"'\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                for (;;) {\r\n                    const t = parseOneToken(state);\r\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                        if (! state.config.stripComments) {\r\n                            r.push(t);\r\n                        }\r\n                    } else {\r\n                        r.push(quote(state, t));\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            if (state.config.stripComments) {\r\n                parseSingleLineComment(state);\r\n            } else {\r\n                r.push(parseSingleLineComment(state));\r\n            }\r\n            break;\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseMultiLineComment(state);\r\n                    } else {\r\n                        r.push(parseMultiLineComment(state));\r\n                    }\r\n                } else {\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseSingleLineComment(state);\r\n                    } else {\r\n                        r.push(parseSingleLineComment(state));\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case '\"':\r\n            {\r\n                const aheads = lookAheads(state, 3);\r\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\r\n                    r.push(parseOneToken(state));\r\n                    break;\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         isSymbol,\r\n         quote,\r\n         FatalError,\r\n         CapturedScopes }     from '../../types';\r\nimport { evaluate,\r\n         resolveValueSymbolScope,\r\n         collectCapturedVariables,\r\n         getCapturedScopes,\r\n         getScope,\r\n         getGlobalScope,\r\n         installScope,\r\n         uninstallScope,\r\n         optimizeTailCall,\r\n         toNumber }           from '../../evaluate';\r\nimport { compileLambda }      from '../../compile';\r\nimport { checkParamsLength }  from '../../errors';\r\n\r\n\r\n\r\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($car '(first second ... last))\r\n    //  -> S expr  : first\r\n    checkParamsLength('$car', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car[0];\r\n};\r\nexport const $$car = $car(null as any, null as any);\r\n\r\n\r\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cdr '(first second ... last))\r\n    //  -> S expr  : (second ... last)\r\n    checkParamsLength('$cdr', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car.slice(1);\r\n};\r\nexport const $$cdr = $cdr(null as any, null as any);\r\n\r\n\r\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\r\n    //  -> S expr  : (arg1 arg2-item1 ...)\r\n    // S expression: ($cons arg1 nilOrNull ... argN)\r\n    //  -> S expr  : (arg1)\r\n    // S expression: ($cons arg1 arg2 ... argN)\r\n    //  -> S expr  : arg1.arg2\r\n    checkParamsLength('$cons', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (car === null) {\r\n        car = [];\r\n    }\r\n    if (cdr === null) {\r\n        cdr = [];\r\n    }\r\n\r\n    if (Array.isArray(cdr)) {\r\n        cdr.unshift(car);\r\n        return cdr;\r\n    } else {\r\n        return {car, cdr};\r\n    }\r\n};\r\nexport const $$cons = $cons(null as any, null as any);\r\n\r\n\r\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first first second ... last)\r\n    //  -> S expr  : first\r\n    // S expression: ($first)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(0, 1);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$first = $first(null as any, null as any);\r\n\r\n\r\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($second first second ... last)\r\n    //  -> S expr  : second\r\n    // S expression: ($second first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1, 2);\r\n    return (cdr.length === 1) ? cdr[0] : null;\r\n};\r\nexport const $$second = $second(null as any, null as any);\r\n\r\n\r\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($last first second ... last)\r\n    //  -> S expr  : last\r\n    // S expression: ($last)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(args.length - 1, args.length);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$last = $last(null as any, null as any);\r\n\r\n\r\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($rest first second ... last)\r\n    //  -> S expr  : (second ... last)\r\n    // S expression: ($rest first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1);\r\n    return (0 < cdr.length) ? cdr : null;\r\n};\r\nexport const $$rest = $rest(null as any, null as any);\r\n\r\n\r\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first-and-second first second ... last)\r\n    //  -> S expr  : first.second\r\n    let car: any = args.slice(0, 1);\r\n    car = (car.length === 1) ? car[0] : null;\r\n\r\n    let cdr: any = args.slice(1, 2);\r\n    cdr = (cdr.length === 1) ? cdr[0] : null;\r\n\r\n    return {car, cdr};\r\n};\r\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\r\n\r\n\r\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($atom arg1 ...)\r\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\r\n    //  -> (if arg1 is nil or anything else) S expr  : true\r\n    checkParamsLength('$atom', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n\r\n    if (car === null || car === void 0) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(car)) {\r\n        if (car.length === 0) return  true;\r\n        else                  return false;\r\n    }\r\n\r\n    switch (typeof car) {\r\n    case 'number': case 'string': case 'function': case 'boolean':\r\n        return true;\r\n    case 'object':\r\n        return isSymbol(car) ? true : false;\r\n    }\r\n    return false;\r\n};\r\nexport const $$atom = $atom(null as any, null as any);\r\n\r\n\r\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($eq arg1 arg2)\r\n    //  -> (if arg1 === arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$eq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car === cdr;\r\n};\r\nexport const $$eq = $eq(null as any, null as any);\r\n\r\n\r\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not-eq arg1 arg2)\r\n    //  -> (if arg1 !== arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$notEq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car !== cdr;\r\n};\r\nexport const $$notEq = $notEq(null as any, null as any);\r\n\r\n\r\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\r\n    // S expression: ($list arg1 ... argN)\r\n    //  -> S expr  : (arg1 ... argN)\r\n    args.slice(0);\r\nexport const $$list = $list(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\r\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__scope', args, 3);\r\n\r\n    const isBlockLocal = $$first(...args);\r\n    const returnMultiple = $$second(...args);\r\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\r\n    let r: SxToken = null;\r\n\r\n    const scope: any = {};\r\n    if (Array.isArray(car)) {\r\n        for (const x of car) {\r\n            if (Array.isArray(x)) {\r\n                const kv = $$firstAndSecond(...x);\r\n                const kvSym = isSymbol(kv.car);\r\n                scope[kvSym ? kvSym.symbol : String(kv.car)] = evaluate(state, kv.cdr);\r\n            } else {\r\n                const xSym = isSymbol(x);\r\n                scope[xSym ? xSym.symbol : String(x)] = null;\r\n            }\r\n        }\r\n    }\r\n    installScope(state, scope, isBlockLocal, capturedScopes);\r\n\r\n    try {\r\n        if (4 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(3)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(3)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__globalScope', args, 1);\r\n\r\n    const returnMultiple = $$first(...args);\r\n    const cdr = $$second(...args);\r\n    let r: SxToken = null;\r\n\r\n    installScope(state, getGlobalScope(state).scope, true);\r\n    try {\r\n        if (2 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(1)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(1)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : exprN\r\n    checkParamsLength('$__capture', args, 1);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let r: SxToken = null;\r\n\r\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\r\n    installScope(state, {}, true, capturedScopes);\r\n    try {\r\n        for (const x of args.slice(1)) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    let fnBody = args.slice(1);\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (...actualArgs: any[]) => {\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] func call: Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(1);\r\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $__lambda(state, name)(...args.slice(1));\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($refun 'name)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__refun', args, 1, 1);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const info = state.funcMap.get(car.symbol);\r\n    if (!info) {\r\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\r\n    }\r\n    return info.fn(state, car.symbol);\r\n};\r\n\r\n\r\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($apply fn arg1 ... argN)\r\n    //  -> S expr  : fn'\r\n    checkParamsLength('$apply', args, 1);\r\n\r\n    const car: () => any = $$first(...args);\r\n    if (typeof car !== 'function') {\r\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\r\n    }\r\n\r\n    return (\r\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\r\n    );\r\n};\r\nexport const $$apply = $apply(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__call', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const sym = isSymbol(cdr);\r\n    return Function.prototype.apply.call(\r\n        car[sym ? sym.symbol : evaluate(state, cdr) as any],\r\n        car,\r\n        args.slice(2)\r\n    );\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__try 'expr 'catch-expr)\r\n    //  ->                               S expr  : expr\r\n    //  -> (if error is raised in expr)  S expr  : catch-expr\r\n    checkParamsLength('$__try', args, 1, 2);\r\n\r\n    let r: SxToken = [];\r\n    try {\r\n        r = evaluate(state, args[0]);\r\n    } catch (e) {\r\n        if (e instanceof FatalError) {\r\n            throw e;\r\n        }\r\n        if (1 < args.length) {\r\n            r = $__scope(state, name)(true, false, [\r\n                ['$error', quote(state, e)],\r\n                ['$parent', quote(state, getScope(state))],\r\n            ], args[1]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($raise 'expr)\r\n    //  -> S expr  : -\r\n    const car = $$first(...args);\r\n    throw car;\r\n};\r\nexport const $$raise = $raise(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if condition 't-expr 'f-expr)\r\n    //  -> (if condition is true ) S expr  : t-expr\r\n    //  -> (if condition is false) S expr  : f-expr\r\n    checkParamsLength('$__if', args, 2, 3);\r\n\r\n    const car = $$first(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        r = evaluate(state, args[1]);\r\n    } else {\r\n        if (2 < args.length) {\r\n            r = evaluate(state, args[2]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if-null condition 'null-expr)\r\n    //  -> (if condition is not null ) S expr  : condition\r\n    //  -> (if condition is null)      S expr  : null-expr\r\n    checkParamsLength('$__ifNull', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if (! $$ambiguousEq(car, null)) {\r\n        r = car;\r\n    } else {\r\n        r = evaluate(state, cdr);\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n    //  -> (if (eval condI) is true ) S expr  : exprI\r\n    //  -> (if no matched)            S expr  : null\r\n    checkParamsLength('$__cond', args, 1);\r\n\r\n    for (let i = 0; i < args.length - 1; i += 2) {\r\n        const c = args[i];\r\n        const x = args[i + 1];\r\n        if ($$boolean(evaluate(state, c))) {\r\n            return evaluate(state, x);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__while', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$boolean(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doWhile', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$boolean(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__until', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$not(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doUntil', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$not(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n    //  -> (if n > 0) S expr  : exprN\r\n    //  -> (else)     S expr  : null\r\n    checkParamsLength('$__repeat', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const n = toNumber($$second(...args));\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (let i = 0; i < n; i++) {\r\n        scope[sym.symbol] = i;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n    //  -> (if list.length > 0) S expr  : exprN\r\n    //  -> (else)               S expr  : null\r\n    checkParamsLength('$__for', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const list = $$second(...args);\r\n    if (! Array.isArray(list)) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\r\n    }\r\n\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (const q of list) {\r\n        scope[sym.symbol] = q;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get v fn1 ... fnN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$pipe', args, 1);\r\n\r\n    let v = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n        v = args[i](v);\r\n    }\r\n    return v;\r\n};\r\nexport const $$pipe = $pipe(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__get', args, 1);\r\n\r\n    let v: any = null;\r\n    let sym = isSymbol(args[0]);\r\n\r\n    if (!sym) {\r\n        switch (typeof args[0]) {\r\n        case 'string': case 'number':\r\n            sym = {symbol: String(args[0])};\r\n            break;\r\n        default:\r\n            v = evaluate(state, args[0]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (sym) {\r\n        const scope = resolveValueSymbolScope(state, sym, true);\r\n        if (! scope) {\r\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\r\n        }\r\n        v = scope[sym.symbol];\r\n    }\r\n\r\n    for (let i = 1; i < args.length; i++) {\r\n        let q: any = args[i];\r\n        let inprog = true;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                v = q(v);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = v.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                v = v[q];\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n            }\r\n        }\r\n    }\r\n    return v;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let 'nameStrOrSymbol expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__let', args, 2, 2);\r\n\r\n    let sym = isSymbol($$first(...args));\r\n\r\n    if (! sym) {\r\n        if (typeof args[0] === 'string') {\r\n            sym = {symbol: args[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n    scope[sym.symbol] = args[1];\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__set', args, 2, 2);\r\n\r\n    let path: any = [];\r\n\r\n    if (Array.isArray(args[0])) {\r\n        path = args[0];\r\n    } else {\r\n        path.push(args[0]);\r\n    }\r\n\r\n    let sym = isSymbol(path[0]);\r\n\r\n    if (! sym) {\r\n        if (typeof path[0] === 'string') {\r\n            sym = {symbol: path[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    let scope = resolveValueSymbolScope(state, sym, true);\r\n    if (scope === null) {\r\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\r\n    }\r\n\r\n    let subst = false;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        let q: any = path[i];\r\n        let inprog = true;\r\n        const last = i === path.length - 1;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                scope = q(scope);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = scope.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                if (last) {\r\n                    scope[q] = args[1];\r\n                    subst = true;\r\n                } else {\r\n                    scope = scope[q];\r\n                }\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (! subst) {\r\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\r\n    }\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($boolean any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$boolean', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car) && car.length === 0) return false;\r\n    else return Boolean(car);\r\n};\r\nexport const $$boolean = $boolean(null as any, null as any);\r\n\r\n\r\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$not', args, 1, 1);\r\n\r\n    return ! $$boolean(...args);\r\n};\r\nexport const $$not = $not(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__and 'expr1 ... 'exprN)\r\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n    //  -> (else)                                                     S expr  : expr-i (false left most)\r\n    checkParamsLength('$__and', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if (! $$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__and = $__and(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__or 'expr1 ... 'exprN)\r\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n    //  -> (else)                                                  S expr  : expr-i (false right most)\r\n    checkParamsLength('$__or', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if ($$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__or = $__or(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (== a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ambiguousEq', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car) && car.length === 0) car = null;\r\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\r\n    if (car === void 0) car = null;\r\n    if (cdr === void 0) cdr = null;\r\n    // tslint:disable-next-line:triple-equals\r\n    return car == cdr;\r\n};\r\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (!= a b)\r\n    //  -> S expr  : boolean\r\n    return ! $$ambiguousEq(...args);\r\n};\r\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\r\n\r\n\r\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (< a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$lt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) < toNumber(cdr);\r\n};\r\nexport const $$lt = $lt(null as any, null as any);\r\n\r\n\r\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$le', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) <= toNumber(cdr);\r\n};\r\nexport const $$le = $le(null as any, null as any);\r\n\r\n\r\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (> a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$gt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) > toNumber(cdr);\r\n};\r\nexport const $$gt = $gt(null as any, null as any);\r\n\r\n\r\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ge', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) >= toNumber(cdr);\r\n};\r\nexport const $$ge = $ge(null as any, null as any);\r\n\r\n\r\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-list x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isList', args, 1, 1);\r\n\r\n    return Array.isArray($$first(...args));\r\n};\r\nexport const $$isList = $isList(null as any, null as any);\r\n\r\n\r\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-string x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isString', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'string';\r\n};\r\nexport const $$isString = $isString(null as any, null as any);\r\n\r\n\r\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-number x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNumber', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'number';\r\n};\r\nexport const $$isNumber = $isNumber(null as any, null as any);\r\n\r\n\r\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-NaN x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNaN', args, 1, 1);\r\n\r\n    return Number.isNaN($$first(...args));\r\n};\r\nexport const $$isNaN = $isNaN(null as any, null as any);\r\n\r\n\r\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-finate x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isFinite', args, 1, 1);\r\n\r\n    return Number.isFinite($$first(...args));\r\n};\r\nexport const $$isFinite = $isFinite(null as any, null as any);\r\n\r\n\r\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-integer x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isInteger', args, 1, 1);\r\n\r\n    return Number.isInteger($$first(...args));\r\n};\r\nexport const $$isInteger = $isInteger(null as any, null as any);\r\n\r\n\r\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-string x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$toString', args, 1, 1);\r\n\r\n    return String($$first(...args));\r\n};\r\nexport const $$toString = $toString(null as any, null as any);\r\n\r\n\r\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-number x)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$toNumber', args, 1, 1);\r\n\r\n    return toNumber($$first(...args));\r\n};\r\nexport const $$toNumber = $toNumber(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__# '(name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n            if (x.length === 1) {\r\n                // S expression: (# ... (keyName) ...)\r\n                //  -> JSON    : {..., keyName: true, ...}\r\n                r[keyName] = true;\r\n            } else if (x.length === 2) {\r\n                // S expression: (# ... (keyName value) ...)\r\n                //  -> JSON    : {..., keyName: value, ...}\r\n                r[keyName] = evaluate(state, x[1]);\r\n            } else {\r\n                // S expression: (# ... (keyName value1 value2 ...) ...)\r\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                r[keyName] =\r\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                    .concat(x.slice(1)));\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($object-assign x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$objectAssign', args, 1);\r\n\r\n    return Object.assign(args[0], ...(args.slice(1)));\r\n};\r\nexport const $$objectAssign = $objectAssign(null as any, null as any);\r\n\r\n\r\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-stringify x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$jsonStringify', args, 1, 1);\r\n\r\n    return JSON.stringify($$first(...args));\r\n};\r\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\r\n\r\n\r\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-parse x)\r\n    //  -> S expr  : object\r\n    checkParamsLength('$jsonParse', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    return JSON.parse(s);\r\n};\r\nexport const $$jsonParse = $jsonParse(null as any, null as any);\r\n\r\n\r\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-log expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.log(...args);\r\n    return null;\r\n};\r\nexport const $$consoleLog = $consoleLog(null as any, null as any);\r\n\r\n\r\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-error expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.error(...args);\r\n    return null;\r\n};\r\nexport const $$consoleError = $consoleError(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './core.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$car',\r\n    fn: ops.$car,\r\n}, {\r\n    name: '$cdr',\r\n    fn: ops.$cdr,\r\n}, {\r\n    name: '$cons',\r\n    fn: ops.$cons,\r\n}, {\r\n    name: '$first',\r\n    fn: ops.$first,\r\n}, {\r\n    name: '$second',\r\n    fn: ops.$second,\r\n}, {\r\n    name: '$last',\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$progn', // alias of $last\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$rest',\r\n    fn: ops.$rest,\r\n}, {\r\n    name: '$first-and-second',\r\n    fn: ops.$firstAndSecond,\r\n}, {\r\n    name: '$atom',\r\n    fn: ops.$atom,\r\n}, {\r\n    name: '$eq',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '===',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '$not-eq',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '!==',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '$list',\r\n    fn: ops.$list,\r\n}, {\r\n    name: '$__scope',\r\n    fn: ops.$__scope,\r\n}, {\r\n    name: '$__global',\r\n    fn: ops.$__globalScope,\r\n}, {\r\n    name: '$__capture',\r\n    fn: ops.$__capture,\r\n}, {\r\n    name: '$__lambda',\r\n    fn: ops.$__lambda,\r\n}, {\r\n    name: '$$__lambda',\r\n    fn: ops.$comp$__lambda,\r\n}, {\r\n    name: '$__defun',\r\n    fn: ops.$__defun,\r\n}, {\r\n    name: '$$__defun',\r\n    fn: ops.$comp$__defun,\r\n}, {\r\n    name: '$__refun',\r\n    fn: ops.$__refun,\r\n}, {\r\n    name: '$apply',\r\n    fn: ops.$apply,\r\n}, {\r\n    name: '$__call',\r\n    fn: ops.$__call,\r\n}, {\r\n    name: '$__try',\r\n    fn: ops.$__try,\r\n}, {\r\n    name: '$raise',\r\n    fn: ops.$raise,\r\n}, {\r\n    name: '$__if',\r\n    fn: ops.$__if,\r\n}, {\r\n    name: '$__if-null',\r\n    fn: ops.$__ifNull,\r\n}, {\r\n    name: '$__cond',\r\n    fn: ops.$__cond,\r\n}, {\r\n    name: '$__while',\r\n    fn: ops.$__while,\r\n}, {\r\n    name: '$__do-while',\r\n    fn: ops.$__doWhile,\r\n}, {\r\n    name: '$__until',\r\n    fn: ops.$__until,\r\n}, {\r\n    name: '$__do-until',\r\n    fn: ops.$__doUntil,\r\n}, {\r\n    name: '$__repeat',\r\n    fn: ops.$__repeat,\r\n}, {\r\n    name: '$__for',\r\n    fn: ops.$__for,\r\n}, {\r\n    name: '$pipe',\r\n    fn: ops.$pipe,\r\n}, {\r\n    name: '$__get',\r\n    fn: ops.$__get,\r\n}, {\r\n    name: '$__let',\r\n    fn: ops.$__let,\r\n}, {\r\n    name: '$__set',\r\n    fn: ops.$__set,\r\n}, {\r\n    name: '$boolean',\r\n    fn: ops.$boolean,\r\n}, {\r\n    name: '$not',\r\n    fn: ops.$not,\r\n}, {\r\n    name: '$__and',\r\n    fn: ops.$__and,\r\n}, {\r\n    name: '$__or',\r\n    fn: ops.$__or,\r\n}, {\r\n    name: '==',\r\n    fn: ops.$ambiguousEq,\r\n}, {\r\n    name: '!=',\r\n    fn: ops.$ambiguousNotEq,\r\n}, {\r\n    name: '<',\r\n    fn: ops.$lt,\r\n}, {\r\n    name: '<=',\r\n    fn: ops.$le,\r\n}, {\r\n    name: '>',\r\n    fn: ops.$gt,\r\n}, {\r\n    name: '>=',\r\n    fn: ops.$ge,\r\n}, {\r\n    name: '$is-list',\r\n    fn: ops.$isList,\r\n}, {\r\n    name: '$is-string',\r\n    fn: ops.$isString,\r\n}, {\r\n    name: '$is-number',\r\n    fn: ops.$isNumber,\r\n}, {\r\n    name: '$is-NaN',\r\n    fn: ops.$isNaN,\r\n}, {\r\n    name: '$is-finite',\r\n    fn: ops.$isFinite,\r\n}, {\r\n    name: '$is-integer',\r\n    fn: ops.$isInteger,\r\n}, {\r\n    name: '$to-string',\r\n    fn: ops.$toString,\r\n}, {\r\n    name: '$to-number',\r\n    fn: ops.$toNumber,\r\n}, {\r\n    name: '$__#',\r\n    fn: ops.$__toObject,\r\n}, {\r\n    name: '$object-assign',\r\n    fn: ops.$objectAssign,\r\n}, {\r\n    name: '$json-stringify',\r\n    fn: ops.$jsonStringify,\r\n}, {\r\n    name: '$json-parse',\r\n    fn: ops.$jsonParse,\r\n}, {\r\n    name: '$console-log',\r\n    fn: ops.$consoleLog,\r\n}, {\r\n    name: '$console-error',\r\n    fn: ops.$consoleError,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState,\r\n         quote,\r\n         isSymbol }          from '../../types';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$scope',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            list[1],\r\n            list[2],\r\n            ...(list.slice(3).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$local',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($local ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$global',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($__global expr1 ... exprN)\r\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\r\n        return [{symbol: '$__global'},\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-let', // alias of $local\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$capture',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__capture'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$refun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($refun name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '<-',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (<- name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$call',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($call thisArg symbol arg1 ... argN)\r\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\r\n        checkParamsLength('$call', list, 3);\r\n\r\n        return [{symbol: '$__call'},\r\n            list[1],\r\n            quote(state, list[2]),\r\n            ...(list.slice(3)),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$try',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($try expr catch-expr)\r\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\r\n        return [{symbol: '$__try'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if cond t-expr f-expr)\r\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\r\n        return [{symbol: '$__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if-null',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if-null cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '??',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (?? cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$cond',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($cond cond1 expr1 ... condN exprN)\r\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        return [{symbol: '$__cond'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($while condition expr1 exprN)\r\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-while condition expr1 exprN)\r\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($until condition expr1 exprN)\r\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-until condition expr1 exprN)\r\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$repeat',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($repeat i of n-times expr1 exprN)\r\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__repeat'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($for x of list expr1 exprN)\r\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__for'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$get',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\r\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        return [{symbol: '$__get'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$let',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$let', list, 3, 3);\r\n\r\n        return [{symbol: '$__let'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-defvar',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$clisp-defvar', list, 3, 3);\r\n\r\n        return [{symbol: '$global'},\r\n            [{symbol: '$__let'},\r\n                quote(state, list[1]),\r\n                list[2]\r\n            ],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\r\n        checkParamsLength('$set', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-setq', // alias of $set\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-setq symbol expr)\r\n        //  -> S expr  : ($__set 'symbol expr)\r\n        checkParamsLength('$clisp-setq', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$and',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($and expr1 ... exprN)\r\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\r\n        return [{symbol: '$__and'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$or',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($or expr1 ... exprN)\r\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\r\n        return [{symbol: '$__or'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '#',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (# (name value...)...)\r\n        //  -> S expr  : ($__# '(name value...)...)\r\n        return [\r\n            {symbol: '$__#'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [\r\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\r\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\r\n\r\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\r\n\r\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\r\n\r\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\r\n\r\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\r\n\r\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\r\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\r\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\r\n\r\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\r\n];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './core.operator';\r\nimport macros             from './core.macro';\r\nimport symbols            from './core.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\n\r\n\r\n\r\nexport const $bitLShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<< number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitLShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car << cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car >>> (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitLShift = $bitLShift(null as any, null as any);\r\n\r\n\r\nexport const $bitSRShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitSRShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >> cdr : (car & 0x080000000) ? -1 : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitSRShift = $bitSRShift(null as any, null as any);\r\n\r\n\r\nexport const $bitURShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitURShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >>> cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitURShift = $bitURShift(null as any, null as any);\r\n\r\n\r\nexport const $bitNot = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-not number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitNot', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    return ~toNumber(car);\r\n};\r\nexport const $$bitNot = $bitNot(null as any, null as any);\r\n\r\n\r\nexport const $bitAnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-and numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitAnd', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) & toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitAnd = $bitAnd(null as any, null as any);\r\n\r\n\r\nexport const $bitOr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-or numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitOr', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) | toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitOr = $bitOr(null as any, null as any);\r\n\r\n\r\nexport const $bitXor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-xor numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitXor', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ^ toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitXor = $bitXor(null as any, null as any);\r\n\r\n\r\nexport const $add = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (+ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$add', args, 1);\r\n\r\n    return args.reduce((prev, curr) => toNumber(prev) + toNumber(curr), 0);\r\n};\r\nexport const $$add = $add(null as any, null as any);\r\n\r\n\r\nexport const $sub = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (- number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sub', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const last = args.slice(1);\r\n    if (last.length === 0) {\r\n        // negate\r\n        return -toNumber(car);\r\n    } else {\r\n        // subtract\r\n        return args.slice(1).reduce((prev, curr) => toNumber(prev) - toNumber(curr), toNumber(car));\r\n    }\r\n};\r\nexport const $$sub = $sub(null as any, null as any);\r\n\r\n\r\nexport const $mul = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (* number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mul', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) * toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mul = $mul(null as any, null as any);\r\n\r\n\r\nexport const $sup = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (** number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sup', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ** toNumber(curr), toNumber(car));\r\n};\r\nexport const $$sup = $sup(null as any, null as any);\r\n\r\n\r\nexport const $div = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (/ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$div', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) / toNumber(curr), toNumber(car));\r\n};\r\nexport const $$div = $div(null as any, null as any);\r\n\r\n\r\nexport const $mod = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (% number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mod', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) % toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mod = $mod(null as any, null as any);\r\n\r\n\r\nexport const $max = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($max val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.max(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$max = $max(null as any, null as any);\r\n\r\n\r\nexport const $min = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($min val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.min(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$min = $min(null as any, null as any);\r\n\r\n\r\nexport const $avg = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($avg val1 ... valN)\r\n    //  -> S expr  : value\r\n    const a = args.map(x => toNumber(x));\r\n    return a.length > 0 ? a.reduce((prev, curr) => prev + curr, 0) / a.length : NaN;\r\n};\r\nexport const $$avg = $avg(null as any, null as any);\r\n\r\n\r\nexport const $floor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($floor number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$floor', args, 1, 1);\r\n\r\n    return Math.floor(toNumber($$first(...args)));\r\n};\r\nexport const $$floor = $floor(null as any, null as any);\r\n\r\n\r\nexport const $ceil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($ceil number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$ceil', args, 1, 1);\r\n\r\n    return Math.ceil(toNumber($$first(...args)));\r\n};\r\nexport const $$ceil = $ceil(null as any, null as any);\r\n\r\n\r\nexport const $round = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($round number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$round', args, 1, 1);\r\n\r\n    return Math.round(toNumber($$first(...args)));\r\n};\r\nexport const $$round = $round(null as any, null as any);\r\n\r\n\r\nexport const $abs = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($abs number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$abs', args, 1, 1);\r\n\r\n    return Math.abs(toNumber($$first(...args)));\r\n};\r\nexport const $$abs = $abs(null as any, null as any);\r\n\r\n\r\nexport const $sign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sign number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sign', args, 1, 1);\r\n\r\n    return Math.sign(toNumber($$first(...args)));\r\n};\r\nexport const $$sign = $sign(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './arithmetic.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '<<',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '$bit-l-shift',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '>>',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '$bit-sr-shift',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '>>>',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-ur-shift',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-not',\r\n    fn: ops.$bitNot,\r\n}, {\r\n    name: '$bit-and',\r\n    fn: ops.$bitAnd,\r\n}, {\r\n    name: '$bit-or',\r\n    fn: ops.$bitOr,\r\n}, {\r\n    name: '$bit-xor',\r\n    fn: ops.$bitXor,\r\n}, {\r\n    name: '+',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$add',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$sum',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '-',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$sub',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$neg',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '*',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '$mul',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '**',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '$sup',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '/',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '$div',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '%',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$mod',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$max',\r\n    fn: ops.$max,\r\n}, {\r\n    name: '$min',\r\n    fn: ops.$min,\r\n}, {\r\n    name: '$avg',\r\n    fn: ops.$avg,\r\n}, {\r\n    name: '$floor',\r\n    fn: ops.$floor,\r\n}, {\r\n    name: '$ceil',\r\n    fn: ops.$ceil,\r\n}, {\r\n    name: '$round',\r\n    fn: ops.$round,\r\n}, {\r\n    name: '$abs',\r\n    fn: ops.$abs,\r\n}, {\r\n    name: '$sign',\r\n    fn: ops.$sign,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo } from '../../types';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './arithmetic.operator';\r\nimport macros             from './arithmetic.macro';\r\nimport symbols            from './arithmetic.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2017, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport class Query<T> {\r\n    public constructor(public data: T[]) {\r\n    }\r\n\r\n    public orderBy(condition: Array<string | string[/* colName: string, ('asc' | 'desc') */]> | ((a: T, b: T) => number)): Query<T> {\r\n        let fn: (a: T, b: T) => number;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (typeof c === 'string') {\r\n                        if (x[c] > y[c]) return 1;\r\n                        if (x[c] < y[c]) return -1;\r\n                    } else {\r\n                        const desc = c[1] === 'desc' ? -1 : 1;\r\n                        if (x[c[0]] > y[c[0]]) return 1 * desc;\r\n                        if (x[c[0]] < y[c[0]]) return -1 * desc;\r\n                    }\r\n                }\r\n                return 0;\r\n            };\r\n        } else {\r\n            fn = condition;\r\n        }\r\n        return new Query(this.data.slice(0).sort(fn));\r\n    }\r\n\r\n    public groupBy(condition: string[/* colName: string */] | ((a: T, b: T, index: number, array: T[]) => boolean)): Query<T[]> {\r\n        let fn: (a: T, b: T, index: number, array: T[]) => boolean;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (x[c] !== y[c]) return false;\r\n                }\r\n                return true;\r\n            };\r\n        } else{\r\n            fn = condition;\r\n        }\r\n        const r: T[][] = [];\r\n        let start = 0;\r\n        let i = 1;\r\n        for (; i < this.data.length; i++) {\r\n            if (! fn(this.data[start], this.data[i], i, this.data)) {\r\n                r.push(this.data.slice(start, i));\r\n                start = i;\r\n            }\r\n        }\r\n        r.push(this.data.slice(start, i));\r\n        return new Query(r);\r\n    }\r\n\r\n    public groupEvery(n: number | {single: number, first?: number, intermediate: number, last?: number}): Query<T[]> {\r\n        if (typeof n === 'number') {\r\n            return this.groupBy((a, b, index, array) => {\r\n                if ((index % n) === 0) return false;\r\n                return true;\r\n            });\r\n        } else {\r\n            const w = Object.assign({first: n.intermediate, last: n.intermediate}, n);\r\n            const r = this.groupBy((a, b, index, array) => {\r\n                if (w.single >= array.length) {\r\n                    if ((index % w.single) === 0) return false;\r\n                    return true;\r\n                } else if (index <= w.first) {\r\n                    if ((index % w.first) === 0) return false;\r\n                    return true;\r\n                } else {\r\n                    if (((index - w.first) % w.intermediate) === 0) return false;\r\n                    return true;\r\n                }\r\n            });\r\n            if (r.data.length === 1) {\r\n                if (w.single < r.data[0].length) {\r\n                    r.data.push([]);\r\n                }\r\n            } else {\r\n                if (w.first < r.data[0].length) {\r\n                    // case of w.first === 0\r\n                    r.data.unshift([]);\r\n                }\r\n            }\r\n            if (r.data.length > 1) {\r\n                if (r.data[r.data.length - 1].length > w.last) {\r\n                    r.data.push([]);\r\n                }\r\n            }\r\n            return r;\r\n        }\r\n    }\r\n\r\n    public where(fn: (value: T, index: number, array: T[]) => boolean): Query<T> {\r\n        return new Query(this.data.filter(fn));\r\n    }\r\n\r\n    public select(): T[];\r\n    public select<R>(fn: (value: T, index: number, array: T[]) => R): R[];\r\n    public select<R>(fn?: (value: T, index: number, array: T[]) => R): Array<R | T> {\r\n        return fn ? this.data.map(fn) : this.data as any;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function query<T>(data: T[]): Query<T> {\r\n    return new Query<T>(data);\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber,\r\n         evaluate }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\nimport { query }             from '../../../lib/data';\r\n\r\n\r\n\r\nexport const $range = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($range start end)\r\n    // S expression: ($range start end step)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$range', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const start = toNumber(car) || 0;\r\n    const stop = toNumber(cdr) || 0;\r\n\r\n    const step = (args.length > 2 ? toNumber(args[2]) || 0 : 0) || (start <= stop ? 1 : -1);\r\n    const n = Math.sign(stop - start) + Math.sign(step) !== 0 ?\r\n        (Math.floor((Math.abs(stop - start) / Math.abs(step))) + 1) : 0;\r\n\r\n    state.evalCount += n;\r\n    evaluate(state, 0);\r\n    return Array.from({length: n}, (x, i) => start + i * step);\r\n};\r\n\r\n\r\nexport const $length = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($length listOrString)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$length', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('length' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.length;\r\n    }\r\n    throw new Error(`[SX] $length: Invalid argument type: object has no property 'length'.`);\r\n};\r\nexport const $$length = $length(null as any, null as any);\r\n\r\n\r\nexport const $trim = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trim', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trim();\r\n    }\r\n    throw new Error(`[SX] $trim: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trim = $trim(null as any, null as any);\r\n\r\n\r\nexport const $trimHead = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-head string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimHead', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimLeft();\r\n    }\r\n    throw new Error(`[SX] $trimHead: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimHead = $trimHead(null as any, null as any);\r\n\r\n\r\nexport const $trimTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-tail string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimTail', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimRight();\r\n    }\r\n    throw new Error(`[SX] $trimTail: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimTail = $trimTail(null as any, null as any);\r\n\r\n\r\nexport const $replaceAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($replace-all src-string match-string replacement-string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$replaceAll', args, 3, 3);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string' && typeof args[2] === 'string') {\r\n        return args[0].split(args[1]).join(args[2]);\r\n    }\r\n    throw new Error(`[SX] $replaceAll: Invalid argument type: args[0] or [1] or [2] is not string.`);\r\n};\r\nexport const $$replaceAll = $replaceAll(null as any, null as any);\r\n\r\n\r\nexport const $split = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($split src-string match-string)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$split', args, 2, 2);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string') {\r\n        return args[0].split(args[1]);\r\n    }\r\n    throw new Error(`[SX] $split: Invalid argument type: args[0] or [1] is not string.`);\r\n};\r\nexport const $$split = $split(null as any, null as any);\r\n\r\n\r\nexport const $join = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($join '(str1 ... strN) separator)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$join', args, 1, 2);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        if (args.length > 1) {\r\n            if (typeof args[1] === 'string') {\r\n                return args[0].join(args[1]);\r\n            }\r\n            throw new Error(`[SX] $join: Invalid argument type: args[1] is not string.`);\r\n        } else {\r\n            return args[0].join();\r\n        }\r\n    }\r\n    throw new Error(`[SX] $join: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$join = $join(null as any, null as any);\r\n\r\n\r\nexport const $concat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($concat listOrString1 ... listOrStringN)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$concat', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('concat' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.concat(...args.slice(1));\r\n    }\r\n    throw new Error(`[SX] $concat: Invalid argument type: object has no property 'concat'.`);\r\n};\r\nexport const $$concat = $concat(null as any, null as any);\r\n\r\n\r\nexport const $slice = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($slice start end listOrString)\r\n    // S expression: ($slice start listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$slice', args, 2, 3);\r\n\r\n    if (args.length === 3) {\r\n        if (typeof args[2] === 'string' || Array.isArray(args[2])) {\r\n            return args[2].slice(toNumber(args[0]), toNumber(args[1]));\r\n        }\r\n    }\r\n    if (args.length === 2) {\r\n        if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n            return args[1].slice(toNumber(args[0]));\r\n        }\r\n    }\r\n    throw new Error(`[SX] $slice: Invalid argument type: args[${args.length - 1}] is not string or array.`);\r\n};\r\nexport const $$slice = $slice(null as any, null as any);\r\n\r\n\r\nexport const $top = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($top n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$top', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        return args[1].slice(0, toNumber(args[0]));\r\n    }\r\n    throw new Error(`[SX] $top: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$top = $top(null as any, null as any);\r\n\r\n\r\nexport const $tail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($tail n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$tail', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        const n = -toNumber(args[0]);\r\n        return args[1].slice(n >= 0 || Number.isNaN(n) ? args[1].length : n);\r\n    }\r\n    throw new Error(`[SX] $tail: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$tail = $tail(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__at = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__at index listOrString)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__at', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return cdr[car];\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__at = $__at(null as any, null as any);\r\n\r\n\r\nexport const $reverse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverse = $reverse(null as any, null as any);\r\n\r\n\r\nexport const $reverseDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse! listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse!', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverseDestructive = $reverseDestructive(null as any, null as any);\r\n\r\n\r\nexport const $find = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($find list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$find', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.find(cdr);\r\n    }\r\n    throw new Error(`[SX] $find: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$find = $find(null as any, null as any);\r\n\r\n\r\nexport const $filter = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($filter list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$filter', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.filter(cdr);\r\n    }\r\n    throw new Error(`[SX] $filter: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$filter = $filter(null as any, null as any);\r\n\r\n\r\nexport const $map = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($map list (lambda (v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$map', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.map(cdr);\r\n    }\r\n    throw new Error(`[SX] $map: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$map = $map(null as any, null as any);\r\n\r\n\r\nexport const $reduce = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduce', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduce(cdr);\r\n        } else {\r\n            return car.reduce(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduce: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduce = $reduce(null as any, null as any);\r\n\r\n\r\nexport const $reduceFromTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduceFromTail', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduceRight(cdr);\r\n        } else {\r\n            return car.reduceRight(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduceFromTail: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduceFromTail = $reduceFromTail(null as any, null as any);\r\n\r\n\r\nexport const $sort = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sort = $sort(null as any, null as any);\r\n\r\n\r\nexport const $sortDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort! list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort!', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sortDestructive = $sortDestructive(null as any, null as any);\r\n\r\n\r\nexport const $groupEvery = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-every optionsOrNumber (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-every', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-every: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupEvery(car).select();\r\n};\r\nexport const $$groupEvery = $groupEvery(null as any, null as any);\r\n\r\n\r\nexport const $groupBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-by conditions (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupBy(car).select();\r\n};\r\nexport const $$groupBy = $groupBy(null as any, null as any);\r\n\r\n\r\nexport const $orderBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($order-by conditions (x1 ... xN))\r\n    //  -> S expr  : (x1 ... xN)\r\n    checkParamsLength('$order-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $order-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).orderBy(car).select();\r\n};\r\nexport const $$orderBy = $orderBy(null as any, null as any);\r\n\r\n\r\nexport const $where = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($where (-> (v index array) ... boolean) (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$where', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (typeof args[0] !== 'function') {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[0] is not function.`);\r\n    }\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).where(car).select();\r\n};\r\nexport const $$where = $where(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './sequence.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$range',\r\n    fn: ops.$range,\r\n}, {\r\n    name: '$length',\r\n    fn: ops.$length,\r\n}, {\r\n    name: '$trim',\r\n    fn: ops.$trim,\r\n}, {\r\n    name: '$trim-head',\r\n    fn: ops.$trimHead,\r\n}, {\r\n    name: '$trim-tail',\r\n    fn: ops.$trimTail,\r\n}, {\r\n    name: '$replace-all',\r\n    fn: ops.$replaceAll,\r\n}, {\r\n    name: '$split',\r\n    fn: ops.$split,\r\n}, {\r\n    name: '$join',\r\n    fn: ops.$join,\r\n}, {\r\n    name: '$concat',\r\n    fn: ops.$concat,\r\n}, {\r\n    name: '$slice',\r\n    fn: ops.$slice,\r\n}, {\r\n    name: '$top',\r\n    fn: ops.$top,\r\n}, {\r\n    name: '$tail',\r\n    fn: ops.$tail,\r\n}, {\r\n    name: '$__at',\r\n    fn: ops.$__at,\r\n}, {\r\n    name: '$reverse',\r\n    fn: ops.$reverse,\r\n}, {\r\n    name: '$reverse!',\r\n    fn: ops.$reverseDestructive,\r\n}, {\r\n    name: '$find',\r\n    fn: ops.$find,\r\n}, {\r\n    name: '$filter',\r\n    fn: ops.$filter,\r\n}, {\r\n    name: '$map',\r\n    fn: ops.$map,\r\n}, {\r\n    name: '$reduce',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-head',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-tail',\r\n    fn: ops.$reduceFromTail,\r\n}, {\r\n    name: '$sort',\r\n    fn: ops.$sort,\r\n}, {\r\n    name: '$sort!',\r\n    fn: ops.$sortDestructive,\r\n}, {\r\n    name: '$group-every',\r\n    fn: ops.$groupEvery,\r\n}, {\r\n    name: '$group-by',\r\n    fn: ops.$groupBy,\r\n}, {\r\n    name: '$order-by',\r\n    fn: ops.$orderBy,\r\n}, {\r\n    name: '$where',\r\n    fn: ops.$where,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState,\r\n         isSymbol } from '../../types';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$[',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($[ index ] listOrObject)\r\n        //  -> S expr  : ($__at listOrObject)\r\n        const symOf = isSymbol(list[2], ']');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing ']' keyword.`);\r\n        }\r\n        return [{symbol: '$__at'},\r\n            list[1],\r\n            list[3],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './sequence.operator';\r\nimport macros             from './sequence.macro';\r\nimport symbols            from './sequence.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken,\r\n         quote,\r\n         isSymbol }          from '../../types';\r\nimport { evaluate,\r\n         getScope }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond,\r\n         $__scope,\r\n         $$boolean }         from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputIf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputIf cond 'expr)\r\n    //  -> (if cond is true ) S expr  : expr\r\n    //  -> (if cond is false) S expr  : ()\r\n    checkParamsLength('$__outputIf', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        if (2 < args.length) {\r\n            r.push({symbol: state.config.reservedNames.Template}, ...args.slice(1));\r\n            r = evaluate(state, r);\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputForOf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputForOf list 'expr)\r\n    //  -> S expr  : (Template expr ... expr)\r\n    checkParamsLength('$__outputForOf', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    const r: SxToken[] = [];\r\n    if (Array.isArray(car)) {\r\n        for (let i = 0; i < car.length; i++) {\r\n            const x = car[i];\r\n            const v = $__scope(state, name)(true, true, [\r\n                ['$data', quote(state, x)],\r\n                ['$index', i],\r\n                ['$array', quote(state, car)],\r\n                ['$parent', quote(state, getScope(state).scope)],\r\n            ], ...args.slice(1));\r\n\r\n            if (2 < args.length && Array.isArray(v)) {\r\n                r.push(...v);\r\n            } else {\r\n                r.push(v);\r\n            }\r\n        }\r\n    } else {\r\n        throw new Error(`[SX] $__outputForOf: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    // All of r items are already evaluated.\r\n    return evaluate(state,\r\n        ([{symbol: state.config.reservedNames.Template}] as SxToken[])\r\n        .concat(r.map(z => [{symbol: state.config.reservedNames.quote}, z])));\r\n};\r\n\r\n\r\nexport const $jsxProps = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (@ (name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n            switch (keyName) {\r\n            case 'style':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (style) ...)\r\n                        //  -> JSON    : {..., style: \"\", ...}\r\n                        r[keyName] = \"\";\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (style \"styleName1: styleValue1; ...\" ...) ...)\r\n                        // S expression: (@ ... (style (styleName1 styleValue1) ...) ...)\r\n                        //  -> JSON    : {..., style: {styleName1: styleValue1}, ...}\r\n                        const styles: object = {};\r\n                        for (const s of x.slice(1)) {\r\n                            if (Array.isArray(s) && 1 < s.length) {\r\n                                styles[String(evaluate(state, s[0]))] = String(evaluate(state, s[1]));\r\n                            } else if (typeof s === 'string') {\r\n                                for (const v of s.split(';')) {\r\n                                    const matched = /^\\s*(\\S+)\\s*:\\s*(.*?)\\s*$/.exec(v);\r\n                                    if (matched) {\r\n                                        styles[matched[1]] = matched[2];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        r[keyName] = styles;\r\n                    }\r\n                }\r\n                break;\r\n            case 'class': case 'styleClass':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: [], ...}\r\n                        r[keyName] = [];\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: [className1 className2 ...], ...}\r\n                        let classes: any[] = [];\r\n                        for (const c of x.slice(1)) {\r\n                            if (Array.isArray(c)) {\r\n                                classes = classes.concat(c.map(z => evaluate(state, z)));\r\n                            } else if (typeof c === 'string') {\r\n                                classes = classes.concat(c.split(' '));\r\n                            }\r\n                        }\r\n                        const cs: string[] = [];\r\n                        const fn: (a: any[]) => void = (a) => a\r\n                            .forEach(c => (c === null || c === void 0) ?\r\n                                void 0 :\r\n                                (Array.isArray(c) ? fn(c) : cs.push(String(c))));\r\n                        fn(classes);\r\n                        r[keyName] = cs;\r\n                    }\r\n                }\r\n                break;\r\n            case 'className':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: \"\", ...}\r\n                        r[keyName] = '';\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: \"className1 className2 ...\", ...}\r\n                        let classes: string = '';\r\n                        for (const c of x.slice(1)) {\r\n                            let fragment = '';\r\n                            if (Array.isArray(c)) {\r\n                                const cs: string[] = [];\r\n                                const fn: (a: any[]) => void = (a) => a\r\n                                    .map(z => evaluate(state, z))\r\n                                    .forEach(z => (z === null || z === void 0) ?\r\n                                        void 0 :\r\n                                        (Array.isArray(z) ? fn(z) : cs.push(String(z))));\r\n                                fn(c);\r\n                                fragment = cs.join(' ');\r\n                            } else if (typeof c === 'string') {\r\n                                fragment = c;\r\n                            }\r\n                            if (0 < classes.length) classes += ' ' + fragment;\r\n                            else classes = fragment;\r\n                        }\r\n                        r[keyName] = classes;\r\n                    }\r\n                }\r\n                break;\r\n            case 'dangerouslySetInnerHTML':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__html: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__html: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__html:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            case 'setInnerText':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__text: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__text: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__text:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (keyName) ...)\r\n                        //  -> JSON    : {..., keyName: true, ...}\r\n                        r[keyName] = true;\r\n                    } else if (x.length === 2) {\r\n                        // S expression: (@ ... (keyName value) ...)\r\n                        //  -> JSON    : {..., keyName: value, ...}\r\n                        r[keyName] = evaluate(state, x[1]);\r\n                    } else {\r\n                        // S expression: (@ ... (keyName value1 value2 ...) ...)\r\n                        //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                        r[keyName] =\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $jsxProps: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nfunction getJsxTagsParams(state: SxParserState, ...args: any[]) {\r\n    let children = args;\r\n    let props: any = {};\r\n    if (0 < args.length && Array.isArray(args[0])) {\r\n        const sym = isSymbol(args[0][0], '@');\r\n\r\n        if (sym) {\r\n            props = $jsxProps(state, '')(...args[0].slice(1));\r\n            children = children.slice(1);\r\n        }\r\n    }\r\n    return {props, children};\r\n}\r\n\r\n\r\nexport const $jsxStandardTag = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(name, props, ...children);\r\n};\r\n\r\n\r\nexport const $jsxComponentTag = (component: any) => (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(component, props, ...children);\r\n};\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './jsx.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$=__if',\r\n    fn: ops.$__outputIf,\r\n}, {\r\n    name: '$=__for',\r\n    fn: ops.$__outputForOf,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState,\r\n         quote } from '../../types';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '@',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        return quote(state, list);\r\n    },\r\n}, {\r\n    name: '$=if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=if cond expr)\r\n        //  -> S expr  : ($=__if cond 'expr)\r\n        return [\r\n            {symbol: '$=__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$=for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=for list expr)\r\n        //  -> S expr  : ($=__for list 'expr)\r\n        return [\r\n            {symbol: '$=__for'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig,\r\n         LsxConfig }        from '../../types';\r\nimport operators            from './jsx.operator';\r\nimport macros               from './jsx.macro';\r\nimport symbols              from './jsx.symbol';\r\n\r\nimport { $jsxStandardTag,\r\n         $jsxComponentTag } from './jsx.fn';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig, lsxConf: LsxConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n\r\n    const components =\r\n        Object.entries(lsxConf.components)\r\n        .map(x => ({name: x[0], fn: $jsxComponentTag(x[1])}));\r\n\r\n    config.funcs = config.funcs.concat(\r\n        {name: config.reservedNames.Template, fn: $jsxComponentTag(lsxConf.jsxFlagment)},\r\n        ...components\r\n    );\r\n\r\n    config.funcSymbolResolverFallback = $jsxStandardTag;\r\n    config.jsx = lsxConf.jsx;\r\n    config.JsxFragment = lsxConf.jsxFlagment;\r\n\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $__let,\r\n         $__set  }           from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__letAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let-async 'nameStrOrSymbol promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__letAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__let(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__letAsync = $__letAsync(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__setAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set-async 'nameOrListOfNameOrIndex promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__setAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__set(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__setAsync = $__setAsync(null as any, null as any);\r\n\r\n\r\nexport const $then = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($then promise (lambda (val) ...) (lambda (err) ...))\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$then', args, 2, 3);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    if (typeof args[2] === 'function') {\r\n        promise = promise.then(args[1], args[2]);\r\n    } else {\r\n        if (typeof args[1] !== 'function') {\r\n            throw new Error(`[SX] $then: Invalid argument(s): args[1] is not function.`);\r\n        }\r\n        promise = promise.then(args[1]);\r\n    }\r\n    return promise;\r\n};\r\nexport const $$then = $then(null as any, null as any);\r\n\r\n\r\nexport const $resolveAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-all promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n    return Promise.all(promises);\r\n};\r\nexport const $$resolveAll = $resolveAll(null as any, null as any);\r\n\r\n\r\nexport const $resolveAny = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-any promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/39940152/get-first-fulfilled-promise\r\n    // firstOf: This will return the value of the first fulfilled promise,\r\n    //          or if all reject, an array of rejection reasons.\r\n    const invert  = (p: Promise<any>) => new Promise((res, rej) => p.then(rej, res));\r\n    const firstOf = (ps: Array<Promise<any>>) => invert(Promise.all(ps.map(invert)));\r\n\r\n    return firstOf(promises);\r\n};\r\nexport const $$resolveAny = $resolveAny(null as any, null as any);\r\n\r\n\r\nexport const $resolvePipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-pipe promise<val1> (lambda (val1) ... promiseOrVal2) (lambda (val2) ... promiseOrVal3) ... (lambda (valN-1) ... promiseOrValN))\r\n    //  -> S expr  : promise\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolvePipe', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n    let p = promise;\r\n    for (const l of lambdas) {\r\n        p = p.then(l);\r\n    }\r\n    return p;\r\n};\r\nexport const $$resolvePipe = $resolvePipe(null as any, null as any);\r\n\r\n\r\nexport const $resolveFork = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-fork promise<val1> (lambda (val1) ... promiseOrVal2a) ... (lambda (val1) ... promiseOrVal2z))\r\n    //  -> S expr  : (promise<val2a> ... promise<val2z>)\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolveFork', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n\r\n    const resolvers = new Array(lambdas.length);\r\n    const rejectors = new Array(lambdas.length);\r\n\r\n    const pa: Array<Promise<any>> = [];\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        pa.push(new Promise<any>((resolve: any, reject: any) => {\r\n            resolvers[i] = (v: any) => {\r\n                let lp: Promise<any> = lambdas[i](v);\r\n                if (typeof lp !== 'object' || typeof lp.then !== 'function') {\r\n                    lp = Promise.resolve(lp);\r\n                }\r\n\r\n                lp\r\n                .then(x => resolve(x))\r\n                .catch(e => reject(e));\r\n            };\r\n            rejectors[i] = reject;\r\n        }));\r\n    }\r\n\r\n    promise.then(\r\n        v => resolvers.forEach(f => f(v)),\r\n        e => rejectors.forEach(f => f(e))\r\n    );\r\n\r\n    return pa;\r\n};\r\nexport const $$resolveFork = $resolveFork(null as any, null as any);\r\n\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './concurrent.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$__let-async',\r\n    fn: ops.$__letAsync,\r\n}, {\r\n    name: '$__set-async',\r\n    fn: ops.$__setAsync,\r\n}, {\r\n    name: '$then',\r\n    fn: ops.$then,\r\n}, {\r\n    name: '$resolve-all',\r\n    fn: ops.$resolveAll,\r\n}, {\r\n    name: '$resolve-any',\r\n    fn: ops.$resolveAny,\r\n}, {\r\n    name: '$resolve-pipe',\r\n    fn: ops.$resolvePipe,\r\n}, {\r\n    name: '$resolve-fork',\r\n    fn: ops.$resolveFork,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState,\r\n         quote }             from '../../types';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$let-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let-async nameStrOrSymbol promise)\r\n        //  -> S expr  : ($__let-async 'nameStrOrSymbol promise)\r\n        checkParamsLength('$let-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__let-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set-async nameOrListOfNameOrIndex promise)\r\n        //  -> S expr  : ($__set-async 'nameOrListOfNameOrIndex promise)\r\n        checkParamsLength('$set-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__set-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './concurrent.operator';\r\nimport macros             from './concurrent.macro';\r\nimport symbols            from './concurrent.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxFuncInfo,\r\n         SxSymbolInfo,\r\n         SxReservedNames,\r\n         SxParserConfig,\r\n         SxParserState,\r\n         SxToken,\r\n         LsxConfig }        from './types';\r\nimport { parse }            from './parser';\r\nimport { evaluate }         from './evaluate';\r\nimport installCore          from './operators/core';\r\nimport installArithmetic    from './operators/arithmetic';\r\nimport installSequence      from './operators/sequence';\r\nimport installJsx           from './operators/jsx';\r\nimport installConcurrent    from './operators/concurrent';\r\n\r\n\r\n\r\nexport const defaultReservedNames: SxReservedNames = {\r\n    eval: '$eval',\r\n    quote: '$quote',\r\n    spread: '$spread',\r\n\r\n    car: '$car',\r\n    cdr: '$cdr',\r\n    cons: '$cons',\r\n    atom: '$atom',\r\n    eq: '$eq',\r\n    list: '$list',\r\n\r\n    let: '$clisp-let',\r\n    lambda: '$lambda',\r\n    self: '$self',\r\n    defun: '$defun',\r\n\r\n    if: '$if',\r\n    cond: '$cond',\r\n\r\n    while: '$while',\r\n    doWhile: '$do-while',\r\n    until: '$until',\r\n    doUntil: '$do-until',\r\n\r\n    get: '$get',\r\n    defvar: '$clisp-defvar',\r\n    setq: '$clisp-setq',\r\n    set: '$set',\r\n\r\n    not: '$not',\r\n    and: '$and',\r\n    or: '$or',\r\n\r\n    Template: 'Template',\r\n};\r\n\r\nexport const defaultConfig: SxParserConfig = {\r\n    raiseOnUnresolvedSymbol: false,\r\n    enableEvaluate: true,\r\n    enableHereDoc: true,\r\n    enableSpread: true,\r\n    enableTailCallOptimization: true,\r\n    stripComments: false,\r\n    wrapExternalValue: true,\r\n    returnMultipleRoot: false,\r\n    maxEvalCount: 0,\r\n\r\n    reservedNames: defaultReservedNames,\r\n    symbols: [],\r\n    macros: [],\r\n    funcs: [],\r\n};\r\n\r\n\r\n\r\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\r\n    return {\r\n        strings: typeof strings === 'string' ? [strings] : strings,\r\n        values: values || [],\r\n\r\n        index: 0,\r\n        pos: 0,\r\n        line: 0,\r\n\r\n        evalCount: 0,\r\n\r\n        scopes: [{isBlockLocal: false, scope: globals}],\r\n\r\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\r\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\r\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\r\n\r\n        config,\r\n    };\r\n}\r\n\r\n\r\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\r\n    state.strings = typeof strings === 'string' ? [strings] : strings;\r\n    state.values = values || [];\r\n    state.index = 0;\r\n    state.pos = 0;\r\n    state.line = 0;\r\n    state.evalCount = 0;\r\n    return state;\r\n}\r\n\r\n\r\n\r\ninterface SExpressionTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    evaluateAST: (ast: SxToken[]) => R;\r\n    repl: () => (strings: TemplateStringsArray | string, ...values: any[]) => R;\r\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\r\n}\r\n\r\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    f.repl = () => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\n\r\ninterface SExpressionAsyncTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\r\n    repl: () => (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\r\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\r\n}\r\n\r\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = async (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n\r\n                if (typeof s[i] === 'object' && typeof (s[i] as any).then === 'function') {\r\n                    s[i] = await s[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    f.repl = () => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\n\r\nexport const S = (() => {\r\n    const config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config.enableEvaluate = false;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\nexport const L = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\nexport const LS = L;\r\nexport const lisp = L;\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const L_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LS_async = L_async;\r\n// tslint:disable-next-line:variable-name\r\nexport const lisp_async = L_async;\r\n\r\n\r\n\r\nexport const LM = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LM_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n\r\n\r\nexport function LSX<R = SxToken>(lsxConf: LsxConfig): SExpressionTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config) as any;\r\n}\r\n\r\n\r\n\r\nexport function LSX_async<R = SxToken>(lsxConf: LsxConfig): SExpressionAsyncTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config) as any;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nexport * from './s-exp/s-expression';\r\n\r\n\r\nexport { default as installCore }         from './s-exp/operators/core';\r\nexport { default as installArithmetic }   from './s-exp/operators/arithmetic';\r\nexport { default as installSequence }     from './s-exp/operators/sequence';\r\nexport { default as installJsx }          from './s-exp/operators/jsx';\r\nexport { default as installConcurrent }   from './s-exp/operators/concurrent';\r\n\r\n\r\nimport { default as coreOperators }       from './s-exp/operators/core/core.operator';\r\nimport { default as coreMacros }          from './s-exp/operators/core/core.macro';\r\nimport { default as coreSymbols }         from './s-exp/operators/core/core.symbol';\r\n\r\nimport { default as arithmeticOperators } from './s-exp/operators/arithmetic/arithmetic.operator';\r\nimport { default as arithmeticMacros }    from './s-exp/operators/arithmetic/arithmetic.macro';\r\nimport { default as arithmeticSymbols }   from './s-exp/operators/arithmetic/arithmetic.symbol';\r\n\r\nimport { default as sequenceOperators }   from './s-exp/operators/sequence/sequence.operator';\r\nimport { default as sequenceMacros }      from './s-exp/operators/sequence/sequence.macro';\r\nimport { default as sequenceSymbols }     from './s-exp/operators/sequence/sequence.symbol';\r\n\r\nimport { default as jsxOperators }        from './s-exp/operators/jsx/jsx.operator';\r\nimport { default as jsxMacros }           from './s-exp/operators/jsx/jsx.macro';\r\nimport { default as jsxSymbols }          from './s-exp/operators/jsx/jsx.symbol';\r\n\r\nimport { default as concurrentOperators } from './s-exp/operators/concurrent/concurrent.operator';\r\nimport { default as concurrentMacros }    from './s-exp/operators/concurrent/concurrent.macro';\r\nimport { default as concurrentSymbols }   from './s-exp/operators/concurrent/concurrent.symbol';\r\n\r\n\r\nexport const builtinOperators = {\r\n    core: coreOperators,\r\n    arithmetic: arithmeticOperators,\r\n    sequence: sequenceOperators,\r\n    jsx: jsxOperators,\r\n    concurrent: concurrentOperators,\r\n};\r\n\r\nexport const builtinMacros = {\r\n    core: coreMacros,\r\n    arithmetic: arithmeticMacros,\r\n    sequence: sequenceMacros,\r\n    jsx: jsxMacros,\r\n    concurrent: concurrentMacros,\r\n};\r\n\r\nexport const builtinSymbols = {\r\n    core: coreSymbols,\r\n    arithmetic: arithmeticSymbols,\r\n    sequence: sequenceSymbols,\r\n    jsx: jsxSymbols,\r\n    concurrent: concurrentSymbols,\r\n};\r\n"],"sourceRoot":""}