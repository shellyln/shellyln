{"version":3,"sources":["webpack://liyad/webpack/universalModuleDefinition","webpack://liyad/webpack/bootstrap","webpack://liyad/./src/s-exp/errors.ts","webpack://liyad/./src/s-exp/evaluate.ts","webpack://liyad/./src/s-exp/ast.ts","webpack://liyad/./src/s-exp/compile.ops/helpers.ts","webpack://liyad/./src/s-exp/types.ts","webpack://liyad/./src/s-exp/compile.ts","webpack://liyad/./src/s-exp/compile.ops/index.ts","webpack://liyad/./src/s-exp/parser.ts","webpack://liyad/./src/s-exp/operators/core/core.fn.ts","webpack://liyad/./src/s-exp/operators/core/core.operator.ts","webpack://liyad/./src/s-exp/operators/core/core.macro.ts","webpack://liyad/./src/s-exp/operators/core/core.symbol.ts","webpack://liyad/./src/s-exp/operators/core/index.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.fn.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.operator.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.macro.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.symbol.ts","webpack://liyad/./src/s-exp/operators/arithmetic/index.ts","webpack://liyad/./src/lib/data.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.fn.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.operator.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.macro.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.symbol.ts","webpack://liyad/./src/s-exp/operators/sequence/index.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.fn.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.operator.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.macro.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.symbol.ts","webpack://liyad/./src/s-exp/operators/jsx/index.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.fn.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.operator.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.macro.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.symbol.ts","webpack://liyad/./src/s-exp/operators/concurrent/index.ts","webpack://liyad/./src/s-exp/s-expression.ts","webpack://liyad/./src/s-exp/browser.ts","webpack://liyad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","setEvaluationCount","checkParamsLength","_types__WEBPACK_IMPORTED_MODULE_0__","state","evalCount","config","maxEvalCount","args","min","max","length","Error","toNumber","resolveSplice","resolveMacro","resolveValueSymbolScope","resolveValueSymbol","collectCapturedVariables","getCapturedScopes","installScope","uninstallScope","getScope","getGlobalScope","optimizeTailCall","evaluate","_ast__WEBPACK_IMPORTED_MODULE_0__","_errors__WEBPACK_IMPORTED_MODULE_1__","x","NaN","Number","enableSplice","Array","isArray","reservedNames","splice","slice","concat","macroInfo","macroMap","symbol","fn","nullIfNotDefined","scopes","localScope","scope","capturedScopes","isBlockLocal","globalScope","symInfo","symbolMap","valueSymbolResolverFallback","raiseOnUnresolvedSymbol","names","a","unshift","assign","push","pop","formalArgs","fnBody","front","tail","if","self","varBaseName","tempVarsSyms","map","idx","until","let","set","sym","quote","backquote","resolveUnquote","unquote","eval","sprs","spread","reverse","funcInfo","funcMap","v","funcSymbolResolverFallback","resolveFunctionSymbol","JSON","stringify","wrapExternalValue","car","cdr","dotted","wrapByUnquote","isSymbol","applyMacros","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","_evaluate__WEBPACK_IMPORTED_MODULE_1__","_errors__WEBPACK_IMPORTED_MODULE_2__","tok","FatalError","MaxEvaluationCountError","ScriptTerminationError","[object Object]","message","super","where","compileLambda","_compile_ops_helpers__WEBPACK_IMPORTED_MODULE_2__","_compile_ops__WEBPACK_IMPORTED_MODULE_3__","compileCore","lastIsSpread","_$_vars","compileValue","b","compFnBody","String","ctx","varNames","has","varsCount","compileToken","body","ops","join","arr","Map","varNamesCount","varDefs","makeScope","scoped","varNamesCopy","entries","enableTailCallOptimization","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","code","registerOperators","_helpers__WEBPACK_IMPORTED_MODULE_2__","raise","quoted","vName","symName","regToVars","not","w1","w0","hasSpread","isEOF","ch","isSpace","trim","isNumberFirstChar","test","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","line","index","pos","strings","getChar","virtualEof","disableEscape","eof","values","split","eofSeq","ch1","ch2","fromCodePoint","parseInt","lookAheads","chs","lookAhead","skipWhitespaces","parseNumber","parseSymbol","enableShorthands","match","ws","parseStringOrComment","valuesStartSeq","valuesStopChar","eofSeqs","types","parseList","parseString","parseHereDoc","attrs","q","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","ahead","isSpliceUnquote","ret","ast","aheads","enableSpread","enableHereDoc","isHereDoc","Template","ahs","enableVerbatimStringLiteral","listStopChar","initialList","stripComments","parse","$car","errors","$$first","$cdr","$cons","$$firstAndSecond","$first","$second","$$second","$last","$rest","$firstAndSecond","$atom","$eq","$notEq","$list","$__scope","returnMultiple","kv","kvSym","xSym","$__lambda","fa","actualArgs","$comp$__lambda","compile","$apply","apply","$raise","$pipe","$__let","$__set","path","subst","inprog","last","$boolean","Boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$symbol","$isSymbol","$isList","$isString","$isNumber","$isNaN","isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","$objectAssign","$jsonStringify","$jsonParse","$now","Date","now","$datetimeFromIso","dt","getTime","$datetime","year","padStart","$datetimeLc","$datetimeToIsoString","toISOString","$datetimeToComponents","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getUTCDay","$datetimeToComponentsLc","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","getDay","$match","RegExp","exec","$consoleLog","console","log","$consoleError","error","$consoleTrace","trace","$consoleTime","time","$consoleTimeEnd","timeEnd","$consoleTimeLog","timeLog","core_operator","st","nm","info","aArgs","startsWith","endsWith","tpos","lastIndexOf","tname","list","Function","e","tempVarSym","keyName","core_macro","core_symbol","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","install","funcs","macros","symbols","$bitLShift","$bitSRShift","$bitURShift","$bitNot","$bitAnd","reduce","$bitOr","$bitXor","$add","$sub","$mul","$sup","Math","pow","$div","$mod","$max","$min","$avg","$floor","floor","$ceil","ceil","$round","round","$abs","abs","$sign","sign","arithmetic_operator","arithmetic_macro","arithmetic_symbol","arithmetic_install","Query","data","this","condition","y","desc","sort","start","groupBy","array","w","first","intermediate","single","filter","query","$length","$trim","$trimHead","trimLeft","$trimTail","trimRight","$replaceAll","$split","$join","$concat","$slice","$top","$tail","$push","$pop","$__at","$reverse","$reverseDestructive","$find","find","$filter","$map","$reduce","$reduceFromTail","reduceRight","$sort","$sortDestructive","$groupEvery","groupEvery","select","$groupBy","$orderBy","orderBy","$where","sequence_operator","stop","step","from","sequence_macro","sequence_symbol","sequence_install","$jsxProps","styles","matched","classes","z","cs","forEach","fragment","__html","__text","getJsxTagsParams","children","props","$jsxStandardTag","jsx","$jsxComponentTag","component","jsx_operator","jsx_macro","jsx_symbol","jsx_install","lsxConf","components","jsxFlagment","JsxFragment","$__letAsync","promise","then","Promise","resolve","reject","$__setAsync","$then","$resolveAll","promises","all","$resolveAny","invert","res","rej","ps","firstOf","$resolvePipe","lambdas","$resolveFork","resolvers","rejectors","pa","lp","catch","f","concurrent_operator","concurrent_macro","concurrent_symbol","concurrent_install","defaultReservedNames","cons","atom","eq","lambda","defun","cond","while","doWhile","doUntil","defvar","setq","and","or","gensym","defaultConfig","enableEvaluate","returnMultipleRoot","initState","globals","resetState","SExpression","conf","startup","evaluateAST","repl","fRepl","sync","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","installer","SExpressionAsync","__awaiter","stat","execSync","S","L","LS","lisp","L_async","LS_async","lisp_async","LM","LM_async","LSX","LSX_async","runScriptTags","contentType","codes","document","querySelectorAll","innerHTML","builtinOperators","builtinMacros","builtinSymbols","core","arithmetic","sequence","concurrent"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,GAAAH,GACA,iBAAAC,QACAA,QAAA,MAAAD,IAEAD,EAAA,MAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,kCClFAjC,EAAAQ,EAAA0B,EAAA,sBAAAC,IAAAnC,EAAAQ,EAAA0B,EAAA,sBAAAE,IAAA,IAAAC,EAAArC,EAAA,GAUM,SAAUmC,EAAmBG,GAE/B,GADAA,EAAMC,YACFD,EAAME,OAAOC,cAAgBH,EAAME,OAAOC,aAAeH,EAAMC,UAC/D,MAAM,IAAIF,EAAA,EAKZ,SAAUD,EAAkB3B,EAAciC,EAAsBC,EAAaC,GAC/E,GAAIF,EAAKG,OAASF,EACd,MAAM,IAAIG,cAAcrC,yCAA4CkC,aAAeD,EAAKG,WAE5F,GAAID,GAAOA,EAAMF,EAAKG,OAClB,MAAM,IAAIC,cAAcrC,yCAA4CmC,aAAeF,EAAKG,WAE5F,OAAO,iCCzBX7C,EAAAQ,EAAA0B,EAAA,sBAAAa,IAAA/C,EAAAQ,EAAA0B,EAAA,sBAAAc,IAAAhD,EAAAQ,EAAA0B,EAAA,sBAAAe,IAAAjD,EAAAQ,EAAA0B,EAAA,sBAAAgB,IAAAlD,EAAAQ,EAAA0B,EAAA,sBAAAiB,IAAAnD,EAAAQ,EAAA0B,EAAA,sBAAAkB,IAAApD,EAAAQ,EAAA0B,EAAA,sBAAAmB,IAAArD,EAAAQ,EAAA0B,EAAA,sBAAAoB,IAAAtD,EAAAQ,EAAA0B,EAAA,sBAAAqB,IAAAvD,EAAAQ,EAAA0B,EAAA,sBAAAsB,IAAAxD,EAAAQ,EAAA0B,EAAA,sBAAAuB,IAAAzD,EAAAQ,EAAA0B,EAAA,sBAAAwB,IAAA1D,EAAAQ,EAAA0B,EAAA,sBAAAyB,IAAA,IAAAC,EAAA5D,EAAA,GAAA6D,EAAA7D,EAAA,GAkBM,SAAU+C,EAASe,GACrB,cAAeA,GACf,IAAK,SAAU,IAAK,SAAU,IAAK,WAC/B,OAAOC,IACX,QACI,OAAOC,OAAOF,IAoBhB,SAAUd,EAAcV,EAAsBtB,GAChD,GAAIsB,EAAME,OAAOyB,aACb,IAAK,IAAI/D,EAAIc,EAAE6B,OAAS,EAAG3C,GAAK,EAAGA,IAAK,CAClBgE,MAAMC,QAAQnD,EAAEd,KAAOU,OAAAgD,EAAA,EAAAhD,CAAUI,EAAEd,GAAiB,GAAIoC,EAAME,OAAO4B,cAAcC,UAEjGrD,EAAIA,EAAEsD,MAAM,EAAGpE,GAAGqE,OAAQvD,EAAEd,GAAiB,GAAIc,EAAEsD,MAAMpE,EAAI,KAIzE,OAAOc,EAIL,SAAUiC,EAAaX,EAAsBwB,GAC/C,MAAMU,EAAYlC,EAAMmC,SAAS1D,IAAI+C,EAAEY,QACvC,QAAIF,GACOA,EAAUG,GAAGrC,EAAOwB,EAAEY,QA8B/B,SAAUxB,EAAwBZ,EAAsBwB,EAAac,GACvE,IAAK,IAAI1E,EAAIoC,EAAMuC,OAAOhC,OAAS,EAAG3C,EAAI,EAAGA,IAAK,CAC9C,MAAM4E,EAAsBxC,EAAMuC,OAAO3E,GACzC,GAAI4E,GAAclE,OAAOkB,UAAUC,eAAe1B,KAAKyE,EAAWC,MAAOjB,EAAEY,QACvE,OAAOI,EAAWC,MAEtB,GAAID,EAAWE,gBACXpE,OAAOkB,UAAUC,eAAe1B,KAAKyE,EAAWE,eAAgBlB,EAAEY,QAClE,OAAOI,EAAWE,eAAelB,EAAEY,QAEvC,IAAMI,EAAWG,aACb,MAGR,MAAMC,EAAczB,EAAenB,GACnC,OAAI1B,OAAOkB,UAAUC,eAAe1B,KAAK6E,EAAYH,MAAOjB,EAAEY,QACnDQ,EAAYH,MAEhBH,EAAmB,KAAOpB,EAASlB,GAAOyC,MAI/C,SAAU5B,EAAmBb,EAAsBwB,GACrD,MAAMiB,EAAQ7B,EAAwBZ,EAAOwB,GAAG,GAChD,GAAIiB,EACA,OAAOA,EAAMjB,EAAEY,QAEnB,MAAMS,EAAU7C,EAAM8C,UAAUrE,IAAI+C,EAAEY,QACtC,GAAIS,EACA,OAAOA,EAAQR,GAAGrC,EAAOwB,EAAEY,QAE3B,GAAIpC,EAAME,OAAO6C,4BACb,OAAO/C,EAAME,OAAO6C,4BAA4B/C,EAAOwB,EAAEY,QAE7D,GAAIpC,EAAME,OAAO8C,wBACb,MAAM,IAAIxC,qDAAqDgB,EAAEY,WAErE,OAAOZ,EAAEY,OAKX,SAAUtB,EAAyBd,EAAsBiD,GAC3D,MAAMP,EAAiC,GACvC,IAAK,MAAMrD,KAAK4D,EAAO,CACnB,MAAMR,EAAQ7B,EAAwBZ,EAAOX,GAAG,GAChD,GAAc,OAAVoD,EACA,MAAM,IAAIjC,2DAA2DnB,KAEzEqD,EAAerD,EAAE+C,QAAUK,EAE/B,OAAOC,EAIL,SAAU3B,EAAkBf,GAC9B,MAAMkD,EAAsB,GAC5B,IAAK,IAAItF,EAAIoC,EAAMuC,OAAOhC,OAAS,EAAG3C,EAAI,EAAGA,IAAK,CAC9C,MAAM4E,EAAsBxC,EAAMuC,OAAO3E,GAIzC,GAHI4E,EAAWE,gBACXQ,EAAEC,QAAQX,EAAWE,iBAEnBF,EAAWG,aACb,MAGR,OAAOO,EAAE3C,OAAS,EAAIjC,OAAO8E,OAAO,MAAOF,QAAK,EAI9C,SAAUlC,EAAahB,EAAsByC,EAAYE,EAAuBD,GAClF1C,EAAMuC,OAAOc,KAAK,CAACV,eAAcF,QAAOC,mBAItC,SAAUzB,EAAejB,GAC3B,GAAIA,EAAMuC,OAAOhC,OAAS,EACtB,MAAM,IAAIC,MAAM,6CAEpB,OAAOR,EAAMuC,OAAOe,MAIlB,SAAUpC,EAASlB,GACrB,OAAOA,EAAMuC,OAAOvC,EAAMuC,OAAOhC,OAAS,GAIxC,SAAUY,EAAenB,GAC3B,OAAOA,EAAMuC,OAAO,GAIlB,SAAUnB,EAAiBpB,EAAsBuD,EAAwBC,GAI3E,GAAI5B,MAAMC,QAAQ2B,EAAOA,EAAOjD,OAAS,IAAK,CAC1C,MAAMkD,EAAQD,EAAOxB,MAAM,EAAGwB,EAAOjD,OAAS,GACxCmD,EAAOF,EAAOA,EAAOjD,OAAS,GACpC,GAAImD,GAA4B,iBAAZA,EAAK,IAAoBA,EAAK,GAAGtB,SAAWpC,EAAME,OAAO4B,cAAc6B,IAEnF/B,MAAMC,QAAQ6B,EAAK,KAA8B,iBAAfA,EAAK,GAAG,IAAoBA,EAAK,GAAG,GAAGtB,SAAWpC,EAAME,OAAO4B,cAAc8B,KAAM,CAuBrH,MAAMC,qBAAiC7D,EAAMC,iBACvC6D,EAAeP,EAAWQ,IAAI,CAACb,EAAGc,KAAJ,CAAc5B,UAAWyB,OAAiBG,KAAOd,EAAEd,YAEvF,MAAO,CACH,CAAC,CAACA,OAAQpC,EAAME,OAAO4B,cAAcmC,OAAQP,EAAK,GAC9C,CAAC,CAACtB,OAAQpC,EAAME,OAAO4B,cAAcoC,KAAM,IAAIJ,MACxCL,KACEC,EAAK,GAAG1B,MAAM,GAAa+B,IAAI,CAACvC,EAAQwC,IACzC,CAAC,CAAC5B,OAAQpC,EAAME,OAAO4B,cAAcqC,KAAML,EAAaE,GAAMxC,OAC9DsC,EAAaC,IAAI,CAACvC,EAAGwC,IACrB,CAAC,CAAC5B,OAAQpC,EAAME,OAAO4B,cAAcqC,KAAMZ,EAAWS,GAAMxC,SAGrEiC,EACHC,EAAK,KAKrB,OAAOF,EAIL,SAAUnC,EAASrB,EAAsBwB,GAG3C,GAFAlD,OAAAiD,EAAA,EAAAjD,CAAmB0B,GAEfwB,QACA,OAAOA,EAEX,IAAI9C,EAAa8C,EAEjB,KACQI,MAAMC,QAAQnD,IADb,CACiB,CAClB,GAAiB,IAAbA,EAAE6B,OACF,OAAO7B,EAGXA,EAAIgC,EAAcV,EAAOtB,GAEzB,MAAM0F,EAAM9F,OAAAgD,EAAA,EAAAhD,CAASI,EAAE,IACvB,IAAI0F,EASA,MATK,CACL,MAAMpG,EAAI2C,EAAaX,EAAOoE,GAE9B,IAAIpG,EAGA,MAFAU,EAAIV,EAAEU,IAWlBJ,OAAAiD,EAAA,EAAAjD,CAAmB0B,GAGvB,GAAI4B,MAAMC,QAAQnD,IAEd,GAAI,GADJA,EAAIA,EAAEsD,MAAM,IACFzB,OAAQ,CACd,MAAM6D,EAAM9F,OAAAgD,EAAA,EAAAhD,CAASI,EAAE,IACvB,GAAI0F,EAAK,CACL,GAAIA,EAAIhC,SAAWpC,EAAME,OAAO4B,cAAcuC,MAC1C,OAAO3F,EAAEsD,MAAM,EAAG,GAAG,GAEzB,GAAIoC,EAAIhC,SAAWpC,EAAME,OAAO4B,cAAcwC,UAK1C,OAJA5F,EAAIA,EAAEsD,MAAM,EAAG,GAAG,GACdJ,MAAMC,QAAQnD,KACdA,EA/PlB,SAAU6F,EAAevE,EAAsBtB,GACjD,IAAK,IAAId,EAAI,EAAGA,EAAIc,EAAE6B,OAAQ3C,IACPgE,MAAMC,QAAQnD,EAAEd,KAAOU,OAAAgD,EAAA,EAAAhD,CAAUI,EAAEd,GAAiB,GAAIoC,EAAME,OAAO4B,cAAc0C,WAElG9F,EAAIA,EAAEsD,MAAM,EAAGpE,GAAGqE,OAAO,CAACZ,EAASrB,EAAQtB,EAAEd,GAAiB,KAAMc,EAAEsD,MAAMpE,EAAI,KAEhFgE,MAAMC,QAAQnD,EAAEd,OAChBc,EAAIA,EAAEsD,MAAM,IACVpE,GAAK2G,EAAevE,EAAOtB,EAAEd,KAGvC,OAAO8C,EAAcV,EAAOtB,GAoPJ6F,CAAevE,EAAOtB,IAEvBA,EAEX,GAAI0F,EAAIhC,SAAWpC,EAAME,OAAO4B,cAAc2C,KAC1C,OAAOpD,EAASrB,EAAOqB,EAASrB,EAAOtB,EAAEsD,MAAM,EAAG,GAAG,KAI7D,MAAM0C,EAAO,GACb,IAAK,IAAI9G,EAAI,EAAGA,EAAIc,EAAE6B,OAAQ3C,IAAK,CAE/B,GADegE,MAAMC,QAAQnD,EAAEd,KAAOU,OAAAgD,EAAA,EAAAhD,CAAUI,EAAEd,GAAiB,GAAIoC,EAAME,OAAO4B,cAAc6C,QACtF,CACRD,EAAKrB,KAAKzF,GACV,MAAMsF,EAAI7B,EAASrB,EAAQtB,EAAEd,GAAiB,IAC9Cc,EAAEd,GAAKgE,MAAMC,QAAQqB,GAAKA,EAAI,CAACA,QAE/BxE,EAAEd,GAAKyD,EAASrB,EAAOtB,EAAEd,IAGjC,IAAK,MAAMA,KAAK8G,EAAKE,UACjBlG,EAAKA,EAAgBsD,MAAM,EAAGpE,GAAGqE,OAAOvD,EAAEd,GAAIc,EAAEsD,MAAMpE,EAAI,IAG9D,IAAIyE,EASJ,GAAkB,mBAPdA,EADgB,mBAAT3D,EAAE,GACJA,EAAE,GACA0F,EApPjB,SAAgCpE,EAAsBwB,GACxD,GAAiB,mBAANA,EACP,OAAOA,EAEX,MAAMqD,EAAW7E,EAAM8E,QAAQrG,IAAI+C,EAAEY,QACrC,GAAIyC,EACA,OAAOA,EAASxC,GAAGrC,EAAOwB,EAAEY,QACzB,CACH,MAAM2C,EAAIlE,EAAmBb,EAAOwB,GACpC,GAAiB,mBAANuD,EACP,OAAOA,EAEX,GAAI/E,EAAME,OAAO8E,2BACb,OAAOhF,EAAME,OAAO8E,2BAA2BhF,EAAOwB,EAAEY,QAE5D,GAAIpC,EAAME,OAAO8C,wBACb,MAAM,IAAIxC,wDAAwDgB,EAAEY,WAExE,OAAOZ,EAAEY,QAmOI6C,CAAsBjF,EAAOoE,GAE7B/C,EAASrB,EAAOtB,EAAE,KAMvB,MAAM,IAAI8B,8DAA8D0E,KAAKC,UAAUzG,OAFvFA,EAAK2D,KAAe3D,EAAEsD,MAAM,UAKjC,GAAIhC,EAAME,OAAOkF,mBAAqB9G,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,SACjFA,EAAKA,EAAsBG,WACxB,GAAIP,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,UAC/CA,EAAImC,EAAmBb,EAAOtB,QAC3B,GAAIJ,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,OAAQ,CACvD,MAAM2G,EAAMhE,EAASrB,EAAQtB,EAAmB2G,KAC1CC,EAAMjE,EAASrB,EAAQtB,EAAmB4G,KAChD,GAAI1D,MAAMC,QAAQyD,GAAM,CACpB,MAAMpC,EAAKoC,EAActD,MAAM,GAC/BkB,EAAEC,QAAQkC,GACV3G,EAAIwE,OAEJxE,EAAI,CAAE2G,MAAKC,YAERhH,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,UAC/CA,EAAI,CACA2C,EAASrB,EAAQtB,EAAuB6G,SAErCjH,OAAOkB,UAAUC,eAAe1B,KAAKW,EAAG,aAC/CA,EAAI,IAGR,OAAOA,iCC9UL,SAAU2F,EAAMrE,EAAsBwB,GACxC,MAAO,CAAC,CAACY,OAAQpC,EAAME,OAAO4B,cAAcuC,OAAQ7C,GAelD,SAAU8C,EAAUtE,EAAsBwB,GAC5C,MAAO,CAAC,CAACY,OAAQpC,EAAME,OAAO4B,cAAcwC,WAAY9C,GAetD,SAAUgE,EAAcxF,EAAsBwB,GAChD,MAAO,CAAC,CAACY,OAAQpC,EAAME,OAAO4B,cAAc0C,SAAUhD,GAepD,SAAUmD,EAAO3E,EAAsBwB,GACzC,MAAO,CAAC,CAACY,OAAQpC,EAAME,OAAO4B,cAAc6C,QAASnD,GAInD,SAAUO,EAAO/B,EAAsBwB,GACzC,MAAO,CAAC,CAACY,OAAQpC,EAAME,OAAO4B,cAAcC,QAASP,GAInD,SAAUiE,EAASjE,EAAQrD,GAC7B,OAAIqD,GAAkB,iBAANA,GAAkBlD,OAAOkB,UAAUC,eAAe1B,KAAKyD,EAAG,eACzD,IAATrD,EACOqD,EAAEY,SAAWjE,EAAOqD,EAAI,KAExBA,EAGR,KA5EX9D,EAAAQ,EAAA0B,EAAA,sBAAAyE,IAAA3G,EAAAQ,EAAA0B,EAAA,sBAAA0E,IAAA5G,EAAAQ,EAAA0B,EAAA,sBAAA4F,IAAA9H,EAAAQ,EAAA0B,EAAA,sBAAA+E,IAAAjH,EAAAQ,EAAA0B,EAAA,sBAAAmC,IAAArE,EAAAQ,EAAA0B,EAAA,sBAAA6F,kCCAA/H,EAAAQ,EAAA0B,EAAA,sBAAA8F,IAAAhI,EAAAQ,EAAA0B,EAAA,sBAAA+F,IAAAjI,EAAAQ,EAAA0B,EAAA,sBAAAgG,IAAAlI,EAAAQ,EAAA0B,EAAA,sBAAAiG,IAAAnI,EAAAQ,EAAA0B,EAAA,sBAAAkG,IAAA,IAAAxE,EAAA5D,EAAA,GAAAqI,EAAArI,EAAA,GAAAsI,EAAAtI,EAAA,GAgBM,SAAUgI,EAAY1F,EAAsBiG,GAC9C,IAAIvH,EAAauH,EACjB,KACQrE,MAAMC,QAAQnD,IADb,CACiB,CAClB,GAAiB,IAAbA,EAAE6B,OACF,MAEJ7B,EAAIJ,OAAAyH,EAAA,EAAAzH,CAAc0B,EAAOtB,GACzB,MAAM0F,EAAM9F,OAAAgD,EAAA,EAAAhD,CAASI,EAAE,IACvB,IAAI0F,EAQA,MARK,CACL,MAAMpG,EAAIM,OAAAyH,EAAA,EAAAzH,CAAa0B,EAAOoE,GAC9B,IAAIpG,EAGA,MAFAU,EAAIV,EAAEU,IAUlBJ,OAAA0H,EAAA,EAAA1H,CAAmB0B,GAEvB,OAAOtB,EAIL,SAAUiH,EAAW3F,EAAsBiG,GAC7C,IAAOrE,MAAMC,QAAQoE,KAAQ3H,OAAAgD,EAAA,EAAAhD,CAAU2H,EAAY,GAAIjG,EAAME,OAAO4B,cAAcuC,OAC9E,MAAM,IAAI7D,MAAM,yCAEpB,OAAQyF,EAAY,GAIlB,SAAUL,EAAiB5F,EAAsBiG,GACnD,OAAIrE,MAAMC,QAAQoE,IAAQ3H,OAAAgD,EAAA,EAAAhD,CAAU2H,EAAY,GAAIjG,EAAME,OAAO4B,cAAcuC,OACnE4B,EAAY,GAEbA,EAKT,SAAUJ,EAAsB7F,GAClC,OAAQ,WAAa,OAAO1B,OAAAyH,EAAA,EAAAzH,CAAS0B,IAInC,SAAU8F,EAA2B9F,EAAsB7B,GAC7D,OAAQ,WAAY,OAAOG,OAAAyH,EAAA,EAAAzH,CAAmB0B,EAAO,CAACoC,OAAQjE,oCCnElET,EAAAQ,EAAA0B,EAAA,sBAAAsG,IAAAxI,EAAAQ,EAAA0B,EAAA,sBAAAuG,IAAAzI,EAAAQ,EAAA0B,EAAA,sBAAAwG,IAmMM,MAAOF,UAAmB1F,MAC5B6F,YAAmBC,GACfC,MAAMD,IAKR,MAAOH,UAAgCD,EACzCG,cACIE,MAAM,uEAKR,MAAOH,UAA+BF,EACxCG,YAAmBG,GACfD,cAAcC,iHCnNtB9I,oBAAAQ,EAAA0B,oBAAA,sBAAA6G,gBAAA,IAAAnF,kCAAA5D,oBAAA,GAAAqI,uCAAArI,oBAAA,GAAAgJ,kDAAAhJ,oBAAA,GAAAiJ,0CAAAjJ,oBAAA,GAsBA,SAASkJ,YAAY5G,EAAsBuD,EAAwBsD,EAAuBrD,EAAesD,GAYrG,SAASC,EAAaC,GAClB,IAAIC,EAAa,GACjB,GAAU,OAAND,EACAC,GAAc,cACX,QAAU,IAAND,EACPC,GAAc,gBACX,cAAeD,GACtB,IAAK,UAAW,IAAK,SACjBC,OAAkBC,OAAOF,MACzB,MACJ,IAAK,SACD,GAAI1I,OAAAgD,kCAAA,EAAAhD,CAAS0I,GAAI,CACb,MAAM5C,EAAM4C,EACRG,EAAIC,SAASC,IAAIjD,EAAIhC,QACrB6E,OAAkBE,EAAIC,SAAS3I,IAAI2F,EAAIhC,YAEvC0E,EAAQK,EAAIG,WAAalD,EAAIhC,OAC7B6E,eAA0BC,OAAOC,EAAIG,kBAEzC,MAGR,QACIR,EAAQK,EAAIG,WAAaN,EACzBC,eAA0BC,OAAOC,EAAIG,iBAGzC,OAAOL,EAIX,SAASM,EAAaC,EAAa5J,GAC/B,IAAIqJ,EAAa,GACjB,MAAMD,EAAIQ,EAAK5J,GACf,GAAIgE,MAAMC,QAAQmF,GACd,GAAI,EAAIA,EAAEzG,OAAQ,CACd,MAAM7B,EAAaJ,OAAAoI,kDAAA,EAAApI,CAAY0B,EAAOgH,GACtC,GAAIpF,MAAMC,QAAQnD,GACd,GAAI,EAAIA,EAAE6B,OACN,GAAIjC,OAAAgD,kCAAA,EAAAhD,CAASI,EAAE,IAAK,CAChB,MAAM0F,EAAM1F,EAAE,GACR0B,EAAO1B,EAAEsD,MAAM,GACjByF,EAAIJ,IAAIjD,EAAIhC,QACZ6E,GAAeQ,EAAIhJ,IAAI2F,EAAIhC,OAAZqF,CAAyC/I,EAAG0B,GAEvDgE,EAAIhC,SAAWpC,EAAME,OAAO4B,cAAc6C,OAC1CsC,UACI7G,EAAK2D,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoI,kDAAA,EAAApI,CAAiB0B,EAAOwB,IAAK,IAAIkG,KAAK,QACjE1H,EAAM8E,QAAQuC,IAAIjD,EAAIhC,SAC7B0E,EAAQK,EAAIG,WAActH,EAAM8E,QAAQrG,IAAI2F,EAAIhC,QAAuBC,GAAGrC,EAAO,IACjFiH,gBAA2BC,OAAOC,EAAIG,kBAClClH,EAAK2D,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoI,kDAAA,EAAApI,CAAiB0B,EAAOwB,IAAK,IAAIkG,KAAK,UACjEP,EAAIC,SAASC,IAAIjD,EAAIhC,QAC5B6E,OAAkBC,OAAOC,EAAIC,SAAS3I,IAAI2F,EAAIhC,aAC1ChC,EAAK2D,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoI,kDAAA,EAAApI,CAAiB0B,EAAOwB,IAAK,IAAIkG,KAAK,SAExEZ,EAAQK,EAAIG,WAAahJ,OAAAoI,kDAAA,EAAApI,CAA2B0B,EAAOoE,EAAIhC,QAC/D6E,gBAA2BC,OAAOC,EAAIG,oBAClClH,EAAK2D,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoI,kDAAA,EAAApI,CAAiB0B,EAAOwB,IAAK,IAAIkG,KAAK,eAIhF,cAAehJ,EAAE,IACjB,IAAK,WACDoI,EAAQK,EAAIG,WAAa5I,EAAE,GAC3BuI,gBAA2BC,OAAOC,EAAIG,kBAClC5I,EAAEsD,MAAM,GAAG+B,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAa,CAACjJ,OAAAoI,kDAAA,EAAApI,CAAiB0B,EAAOwB,IAAK,IAAIkG,KAAK,SACxF,MACJ,QACI,MAAM,IAAIlH,kEAAkE0E,KAAKC,UAAUzG,EAAE,aAIrGuI,GAAc,YAGlBA,GAAcF,EAAaC,QAG/BC,GAAc,YAGlBA,GAAcF,EAAaC,GAE/B,OAAOC,EAIX,MAAME,EAAuB,CACzBL,UACAQ,UAAW,EACXF,SAAU,IAAIQ,IACdC,cAAe,EACfC,QAAS,UACTL,IAAK,IAAIG,IACTG,UAzGJ,SAAmBC,GACf,MAAMC,EAAe,IAAIL,IACzB,IAAK,MAAMpG,KAAK2F,EAAIC,SAASc,UACzBD,EAAa9D,IAAI3C,EAAE,GAAIA,EAAE,IAE7BwG,IACAb,EAAIC,SAAWa,GAoGfV,gBAGJjJ,OAAAqI,0CAAA,EAAArI,CAAkB0B,EAAOmH,GACzB,MAAMM,EAAMN,EAAIM,IAEZzH,EAAME,OAAOiI,6BACb3E,EAASlF,OAAAyH,uCAAA,EAAAzH,CAAiB0B,EAAOuD,EAAYC,IAGjD,MAAMd,EAAiBpE,OAAAyH,uCAAA,EAAAzH,CAAkB0B,GACzC,GAAI0C,EACA,IAAK,MAAMlB,KAAKkB,EACRpE,OAAOmB,eAAe1B,KAAK2E,EAAgBlB,KAC3CsF,EAAQK,EAAIG,aAAe9F,EAC3BsF,EAAQK,EAAIG,WAAa5E,EAAelB,GACxC2F,EAAIC,SAASjD,IAAI3C,cAAe0F,OAAOC,EAAIG,uBAAuBJ,OAAOC,EAAIG,UAAY,SACzFH,EAAIG,aAKhB,MAAMc,KAAoB7E,EAAWQ,IAAI,CAACvC,EAAG5D,KACzCuJ,EAAIC,SAASjD,IAAIZ,EAAW3F,GAAGwE,OAAQ,IAAMxE,MAClCiJ,GAAgBjJ,IAAM2F,EAAWhD,OAAS,EAAK,MAAQ,MAAM3C,MACzE8J,KAAK,OAEFW,YAA2B7E,EAAOO,IAAI,CAACvC,EAAG5D,IAAM2J,EAAa/D,EAAQ5F,IAAI8J,KAAK,QACpF,mBAAoBU,eAA4BjB,EAAIW,UAAUO,MAKlE,SAASC,mBAAmBC,SAAyBzB,QAAgB0B,MAGjE,OADA1B,QAAQ,GAAKrC,KAAK+D,MACX1B,QAAQ,GAIb,SAAUL,cAAczG,EAAsBuD,EAAwBsD,EAAuBrD,GAE/F,MAAMsD,EAAiB,GACvB,OAAOwB,mBAAmBtI,EAAO8G,EAASF,YAAY5G,EAAOuD,EAAYsD,EAAcrD,EAAQsD,mCC7KnGpJ,EAAAQ,EAAA0B,EAAA,sBAAA6I,IAAA,IAAAnH,EAAA5D,EAAA,GAAA6D,EAAA7D,EAAA,GAAAgL,EAAAhL,EAAA,GAkBM,SAAU+K,EAAkBzI,EAAsBmH,GACpD,MAAML,QACFA,EADEW,IAEFA,EAFEM,UAGFA,EAHER,aAIFA,GACAJ,EAGJM,EAAItD,IAAInE,EAAME,OAAO4B,cAAcuC,MAAO,SAAS3F,EAAc0B,GAC7D,IAAI6G,EAAa,GAGjB,OAFAH,EAAQK,EAAIG,WAAa5I,EAAE,GAC3BuI,eAA0BC,OAAOC,EAAIG,mBAKzCG,EAAItD,IAAInE,EAAME,OAAO4B,cAAc8B,KAAM,SAASlF,EAAc0B,GAC5D,IAAI6G,EAAa,GAGjB,OAFAA,oBACI7G,EAAK2D,IAAIvC,GAAK+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAiB0B,EAAOwB,IAAK,IAAIkG,KAAK,WAK1ED,EAAItD,IAAI,QAAS,SAASzF,EAAc0B,GAIpC,IAAI6G,EAAa,GAKjB,OAJA3I,OAAAiD,EAAA,EAAAjD,CAAkB,qBAAsB8B,EAAM,EAAG,GACjD6G,OAAkBM,EAAa7I,EAAG,OAC9B6I,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,KAAM,QACxC6I,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,KAAM,SAKhD+I,EAAItD,IAAI,aAAc,SAASzF,EAAc0B,GAIzC,IAAI6G,EAAa,GAIjB,OAHA3I,OAAAiD,EAAA,EAAAjD,CAAkB,0BAA2B8B,EAAM,EAAG,GACtD6G,uBAAkCM,EAAa7I,EAAG,0BAC9C6I,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,KAAM,eAKhD+I,EAAItD,IAAI,UAAW,SAASzF,EAAc0B,GAItC,IAAI6G,EAAa,GAEb3I,OAAAiD,EAAA,EAAAjD,CAAkB,uBAAwB8B,EAAM,GAChD6G,GAAc,IACd,IAAK,IAAIvH,EAAI,EAAGA,EAAIU,EAAKG,OAAQb,GAAK,EAClCuH,MAAiBM,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOI,EAAKV,KAAM,OACxD6H,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOI,EAAKV,EAAI,KAAM,QAEvDuH,GAAc,OACd,IAAK,IAAIvH,EAAI,EAAGA,EAAIU,EAAKG,OAAQb,GAAK,EAClCuH,GAAc,IAItB,OAFIA,GAAc,MAMtBQ,EAAItD,IAAI,WAAY,SAASzF,EAAc0B,GAIvC,IAAI6G,EAAa,GAMjB,OALA3I,OAAAiD,EAAA,EAAAjD,CAAkB,wBAAyB8B,EAAM,GACjD6G,kCACIM,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,KAAM,aACxCA,EAAEsD,MAAM,GAAG+B,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOwB,IAAK,IAAIkG,KAAK,2BAM5ED,EAAItD,IAAI,cAAe,SAASzF,EAAc0B,GAI1C,IAAI6G,EAAa,GAKjB,OAJA3I,OAAAiD,EAAA,EAAAjD,CAAkB,2BAA4B8B,EAAM,GACpD6G,qCACIvI,EAAEsD,MAAM,GAAG+B,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOwB,IAAK,IAAIkG,KAAK,eACpEH,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,KAAM,wBAKhD+I,EAAItD,IAAI,WAAY,SAASzF,EAAc0B,GAIvC,IAAI6G,EAAa,GAMjB,OALA3I,OAAAiD,EAAA,EAAAjD,CAAkB,wBAAyB8B,EAAM,GACjD6G,mCACIM,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,KAAM,aACxCA,EAAEsD,MAAM,GAAG+B,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOwB,IAAK,IAAIkG,KAAK,2BAM5ED,EAAItD,IAAI,cAAe,SAASzF,EAAc0B,GAI1C,IAAI6G,EAAa,GAKjB,OAJA3I,OAAAiD,EAAA,EAAAjD,CAAkB,2BAA4B8B,EAAM,GACpD6G,qCACIvI,EAAEsD,MAAM,GAAG+B,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOwB,IAAK,IAAIkG,KAAK,gBACpEH,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,KAAM,wBAKhD+I,EAAItD,IAAI,YAAa,SAASzF,EAAc0B,GAIxC,IAAI6G,EAAa,GAEjB,GADA3I,OAAAiD,EAAA,EAAAjD,CAAkB,yBAA0B8B,EAAM,IAC5C9B,OAAAgD,EAAA,EAAAhD,CAAS8B,EAAK,IAChB,MAAM,IAAII,MAAM,yDASpB,OAPAuH,EAAU,KACN,MAAM5J,EAAO,IAAMgJ,EAAIU,gBACvBV,EAAIC,SAASjD,IAAK/D,EAAK,GAAgBgC,OAAQjE,GAC/C8I,wCAAmD9I,OAAUA,UAAaA,cACtEO,EAAEsD,MAAM,GAAG+B,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOwB,IAAK,IAAIkG,KAAK,uBACjDH,EAAanH,EAAM,SAEvC6G,IAIXQ,EAAItD,IAAI,SAAU,SAASzF,EAAc0B,GAIrC,IAAI6G,EAAa,GAEjB,GADA3I,OAAAiD,EAAA,EAAAjD,CAAkB,sBAAuB8B,EAAM,IACzC9B,OAAAgD,EAAA,EAAAhD,CAAS8B,EAAK,IAChB,MAAM,IAAII,MAAM,sDASpB,OAPAuH,EAAU,KACN,MAAM5J,EAAO,IAAMgJ,EAAIU,gBACvBV,EAAIC,SAASjD,IAAK/D,EAAK,GAAgBgC,OAAQjE,GAC/C8I,0CAAqD9I,oBACjDO,EAAEsD,MAAM,GAAG+B,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOwB,IAAK,IAAIkG,KAAK,uBACjDH,EAAanH,EAAM,SAEvC6G,IAIXQ,EAAItD,IAAI,WAAY,SAASzF,EAAc0B,GAIvC,IAAI6G,EAAa,GAIjB,GAHA3I,OAAAiD,EAAA,EAAAjD,CAAkB,wBAAyB8B,EAAM,IAG3CwB,MAAMC,QAAQnD,EAAE,IAClB,MAAM,IAAI8B,MAAM,uDA0BpB,OAxBAuH,EAAU,KACN,IAAK,MAAMvG,KAAKlD,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,IAAc,CAC9C,IAAIP,EAAO,GACX,GAAIyD,MAAMC,QAAQL,GAAI,CAClB,GAAIA,EAAEjB,OAAS,EACX,MAAM,IAAIC,MAAM,0DAEpB,IAAMlC,OAAAgD,EAAA,EAAAhD,CAASkD,EAAE,IACb,MAAM,IAAIhB,MAAM,8DAEpBrC,EAAOqD,EAAE,GAAGY,OACZ6E,OAAkB,IAAME,EAAIU,iBAAiBN,EAAa/F,EAAG,UAC1D,CACH,IAAMlD,OAAAgD,EAAA,EAAAhD,CAASkD,GACX,MAAM,IAAIhB,MAAM,2DAEpBrC,EAAOqD,EAAEY,OAEb+E,EAAIW,iBAAmBX,EAAIU,wBAC3BV,EAAIC,SAASjD,IAAI3C,EAAEY,OAAQ,IAAM+E,EAAIU,iBAEzC,MAAMlI,KAAOjB,EAAEsD,MAAM,GAAG+B,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOwB,IAAK,IAAIkG,KAAK,OACjFT,GAAcvI,EAAE,OAASiB,SAAWA,OAEjCsH,IAIXQ,EAAItD,IAAI,SAAU,SAASzF,EAAc0B,GAIrC,IAAI6G,EAAa,GAYjB,OAXA3I,OAAAiD,EAAA,EAAAjD,CAAkB,sBAAuB8B,EAAM,EAAG,GAClD6G,iBACIM,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,KAAM,aACxCyI,EAAIU,uBAAuBV,EAAIU,cAAgB,cAAcX,OAAOC,EAAIG,kBAC5ER,EAAQK,EAAIG,aAAehJ,OAAAoK,EAAA,EAAApK,CAAsB0B,GACjD+H,EAAU,KACNZ,EAAIC,SAASjD,IAAI,SAAU,IAAMgD,EAAIU,iBACrCV,EAAIC,SAASjD,IAAI,UAAW,IAAMgD,EAAIU,iBACtCZ,MACIM,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,KAAM,aAEzCuI,IAIXQ,EAAItD,IAAInE,EAAME,OAAO4B,cAAc6G,MAAO,SAASjK,EAAc0B,GAG7D,IAAI6G,EAAa,GAGjB,OAFAA,mBACIM,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAiB0B,EAAOtB,EAAE,KAAM,YAKtD+I,EAAItD,IAAI,WAAY,SAASzF,EAAc0B,GAGvC,IAAI6G,EAAa,GAIjB,OAHA3I,OAAAiD,EAAA,EAAAjD,CAAkB,wBAAyB8B,EAAM,EAAG,GACpD6G,WAAsBM,EAAanH,EAAM,8DAM7CqH,EAAItD,IAAI,SAAU,SAASzF,EAAc0B,GAGrC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,sBAAuB8B,EAAM,GAC/C,MAAMwI,EAAStK,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,IAC7BP,EAAOG,OAAAgD,EAAA,EAAAhD,CAASsK,GAAUA,EAAOxG,OAA4B,iBAAXwG,EAAsBA,EAAS,KACvF,GAAoB,iBAATzK,EACP,MAAM,IAAIqC,4DAA4D0E,KAAKC,UAAUzG,EAAE,QAE3F,IAAImK,EAAQ,GACR1B,EAAIC,SAASC,IAAIlJ,GACjB0K,EAAQ1B,EAAIC,SAAS3I,IAAIN,IAEzB2I,EAAQK,EAAIG,WAAahJ,OAAAoK,EAAA,EAAApK,CAA2B0B,EAAO7B,GAC3D0K,aAAmB3B,OAAOC,EAAIG,iBAUlC,OAJAL,QAAmB4B,KAASnK,EAAEsD,MAAM,GAAG+B,IAAI,CAACvC,EAAGwC,EAAK2D,QAChDrJ,OAAAgD,EAAA,EAAAhD,CAASqJ,EAAI3D,IALE8E,KACfhC,EAAQK,EAAIG,WAAawB,aACP5B,OAAOC,EAAIG,iBAIzByB,CAAWpB,EAAY3D,GAAK5B,QAC5BmF,EAAaI,EAAK3D,OAAS0D,KAAK,SAK5CD,EAAItD,IAAI,SAAU,SAASzF,EAAc0B,GAGrC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,sBAAuB8B,EAAM,EAAG,GAClD,MAAMwI,EAAStK,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,IAC7BP,EAAOG,OAAAgD,EAAA,EAAAhD,CAASsK,GAAUA,EAAOxG,OAA4B,iBAAXwG,EAAsBA,EAAS,KACvF,GAAoB,iBAATzK,EACP,MAAM,IAAIqC,4DAA4D0E,KAAKC,UAAUzG,EAAE,QAO3F,OALMyI,EAAIC,SAASC,IAAIlJ,KACnBgJ,EAAIW,iBAAmBX,EAAIU,wBAC3BV,EAAIC,SAASjD,IAAIhG,EAAM,IAAMgJ,EAAIU,kBAErCZ,OAAkBE,EAAIC,SAAS3I,IAAIN,MAASoJ,EAAa7I,EAAG,QAKhE+I,EAAItD,IAAI,SAAU,SAASzF,EAAc0B,GAGrC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,sBAAuB8B,EAAM,GAC/C,MAAMwI,EAAStK,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOtB,EAAE,IAC7BP,EAAOG,OAAAgD,EAAA,EAAAhD,CAASsK,GAClBA,EAAOxG,OACY,iBAAXwG,EACJA,EACChH,MAAMC,QAAQ+G,GACVtK,OAAAgD,EAAA,EAAAhD,CAASsK,EAAO,IACbA,EAAO,GAAGxG,OACY,iBAAdwG,EAAO,GAAkBA,EAAO,GAAK,KAEjD,KAGZ,GAAoB,iBAATzK,EACP,MAAM,IAAIqC,4DAA4D0E,KAAKC,UAAUzG,EAAE,QAE3F,IAAImK,EAAQ,GACR1B,EAAIC,SAASC,IAAIlJ,GACjB0K,EAAQ1B,EAAIC,SAAS3I,IAAIN,IAEzB2I,EAAQK,EAAIG,WAAahJ,OAAAoK,EAAA,EAAApK,CAA2B0B,EAAO7B,GAC3D0K,aAAmB3B,OAAOC,EAAIG,iBAUlC,OAJAL,QAAmB4B,MAAUjH,MAAMC,QAAQ+G,GAAUA,EAAO5G,MAAM,GAAK,IAAI+B,IAAI,CAACvC,EAAGwC,EAAK2D,QACpFrJ,OAAAgD,EAAA,EAAAhD,CAASqJ,EAAI3D,IALE8E,KACfhC,EAAQK,EAAIG,WAAawB,aACP5B,OAAOC,EAAIG,iBAIzByB,CAAWpB,EAAY3D,GAAK5B,QAC5BmF,EAAaI,EAAK3D,OAAS0D,KAAK,OAAOH,EAAa7I,EAAG,QAKnE+I,EAAItD,IAAInE,EAAME,OAAO4B,cAAckH,IAAK,SAAStK,EAAc0B,GAG3D,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,oBAAqB8B,EAAM,EAAG,GAChD6G,QAAmBM,EAAanH,EAAM,QAK1CqH,EAAItD,IAAI,SAAU,SAASzF,EAAc0B,GAIrC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,sBAAuB8B,EAAM,GAC/C6G,OAAkB7G,EAAK2D,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOwB,IAAK,IAAIkG,KAAK,WAKpFD,EAAItD,IAAI,QAAS,SAASzF,EAAc0B,GAIpC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,qBAAsB8B,EAAM,GAC9C6G,OAAkB7G,EAAK2D,IAAKvC,GAAM+F,EAAa,CAACjJ,OAAAoK,EAAA,EAAApK,CAAW0B,EAAOwB,IAAK,IAAIkG,KAAK,WAKpFD,EAAItD,IAAI,MAAO,SAASzF,EAAc0B,GAIlC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,mBAAoB8B,EAAM,EAAG,GAC/C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,YAK7ED,EAAItD,IAAI,MAAO,SAASzF,EAAc0B,GAIlC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,mBAAoB8B,EAAM,EAAG,GAC/C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,YAK7ED,EAAItD,IAAI,KAAM,SAASzF,EAAc0B,GAGjC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,WAK7ED,EAAItD,IAAI,KAAM,SAASzF,EAAc0B,GAGjC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,WAK7ED,EAAItD,IAAI,IAAK,SAASzF,EAAc0B,GAGhC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,iBAAkB8B,EAAM,EAAG,GAC7C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,UAK7ED,EAAItD,IAAI,KAAM,SAASzF,EAAc0B,GAGjC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,WAK7ED,EAAItD,IAAI,IAAK,SAASzF,EAAc0B,GAGhC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,iBAAkB8B,EAAM,EAAG,GAC7C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,UAK7ED,EAAItD,IAAI,KAAM,SAASzF,EAAc0B,GAGjC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,WAK7ED,EAAItD,IAAI,UAAW,SAASzF,EAAc0B,GAGtC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,uBAAwB8B,EAAM,GAChD,IAAI6I,EAAK,GACT,GAAIrH,MAAMC,QAAQzB,EAAK,KAAO9B,OAAAgD,EAAA,EAAAhD,CAAU8B,EAAK,GAAW,GAAIJ,EAAME,OAAO4B,cAAc6C,QAAS,CAC5F,MAAMuE,EAAK3B,EAAanH,EAAK,GAAW,GACxC6I,MAASC,iBAAkBA,cAAeA,gBAAiBA,gCAE3DD,KAAQ1B,EAAanH,EAAa,aAItC,OAFA6G,OAAkBgC,IACd7I,EAAK4B,MAAM,GAAG+B,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,WAKxED,EAAItD,IAAI,IAAK,SAASzF,EAAc0B,GAGhC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,iBAAkB8B,EAAM,GAE1C,IAAI+I,GAAY,EAahB,OAZA/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,KACV/F,MAAMC,QAAQL,IAAMlD,OAAAgD,EAAA,EAAAhD,CAAUkD,EAAU,GAAIxB,EAAME,OAAO4B,cAAc6C,UACvEwE,GAAY,KAIhBlC,GADAkC,yBAEI/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,kBAAsBJ,EAAaI,EAAK3D,OAAS0D,KAAK,iDAG1DtH,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,UAMjFD,EAAItD,IAAI,IAAK,SAASzF,EAAc0B,GAGhC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,iBAAkB8B,EAAM,GAE1C,IAAI+I,GAAY,EAehB,OAdA/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,KACV/F,MAAMC,QAAQL,IAAMlD,OAAAgD,EAAA,EAAAhD,CAAUkD,EAAU,GAAIxB,EAAME,OAAO4B,cAAc6C,UACvEwE,GAAY,KAIhBlC,GADAkC,yBAEI/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,kBAAsBJ,EAAaI,EAAK3D,OAAS0D,KAAK,mGAG1DhJ,EAAE6B,OAAS,EACzBH,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,UAClDR,OAAOK,EAAa7I,EAAG,YAMxC+I,EAAItD,IAAI,IAAK,SAASzF,EAAc0B,GAGhC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,iBAAkB8B,EAAM,GAE1C,IAAI+I,GAAY,EAahB,OAZA/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,KACV/F,MAAMC,QAAQL,IAAMlD,OAAAgD,EAAA,EAAAhD,CAAUkD,EAAU,GAAIxB,EAAME,OAAO4B,cAAc6C,UACvEwE,GAAY,KAIhBlC,GADAkC,yBAEI/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,kBAAsBJ,EAAaI,EAAK3D,OAAS0D,KAAK,iDAG1DtH,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,UAMjFD,EAAItD,IAAI,KAAM,SAASzF,EAAc0B,GAGjC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,kBAAmB8B,EAAM,GAE3C,IAAI+I,GAAY,EAahB,OAZA/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,KACV/F,MAAMC,QAAQL,IAAMlD,OAAAgD,EAAA,EAAAhD,CAAUkD,EAAU,GAAIxB,EAAME,OAAO4B,cAAc6C,UACvEwE,GAAY,KAIhBlC,GADAkC,yBAEI/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,kBAAsBJ,EAAaI,EAAK3D,OAAS0D,KAAK,kDAG1DtH,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,WAMjFD,EAAItD,IAAI,IAAK,SAASzF,EAAc0B,GAGhC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,iBAAkB8B,EAAM,GAE1C,IAAI+I,GAAY,EAahB,OAZA/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,KACV/F,MAAMC,QAAQL,IAAMlD,OAAAgD,EAAA,EAAAhD,CAAUkD,EAAU,GAAIxB,EAAME,OAAO4B,cAAc6C,UACvEwE,GAAY,KAIhBlC,GADAkC,yBAEI/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,kBAAsBJ,EAAaI,EAAK3D,OAAS0D,KAAK,iDAG1DtH,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,UAMjFD,EAAItD,IAAI,IAAK,SAASzF,EAAc0B,GAGhC,IAAI6G,EAAa,GACjB3I,OAAAiD,EAAA,EAAAjD,CAAkB,iBAAkB8B,EAAM,GAE1C,IAAI+I,GAAY,EAahB,OAZA/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,KACV/F,MAAMC,QAAQL,IAAMlD,OAAAgD,EAAA,EAAAhD,CAAUkD,EAAU,GAAIxB,EAAME,OAAO4B,cAAc6C,UACvEwE,GAAY,KAIhBlC,GADAkC,yBAEI/I,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,kBAAsBJ,EAAaI,EAAK3D,OAAS0D,KAAK,iDAG1DtH,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,UAMjFD,EAAItD,IAAI,KAAM,SAASzF,EAAc0B,GAGjC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,WAK7ED,EAAItD,IAAI,KAAM,SAASzF,EAAc0B,GAGjC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,kBAAmB8B,EAAM,EAAG,GAC9C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,WAK7ED,EAAItD,IAAI,MAAO,SAASzF,EAAc0B,GAGlC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,mBAAoB8B,EAAM,EAAG,GAC/C6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,YAK7ED,EAAItD,IAAI,WAAY,SAASzF,EAAc0B,GAGvC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,wBAAyB8B,EAAM,EAAG,GACpD6G,SAAoBM,EAAa7I,EAAG,SAKxC+I,EAAItD,IAAI,WAAY,SAASzF,EAAc0B,GAGvC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,wBAAyB8B,EAAM,EAAG,GACpD6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,UAK7ED,EAAItD,IAAI,UAAW,SAASzF,EAAc0B,GAGtC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,uBAAwB8B,EAAM,EAAG,GACnD6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,UAK7ED,EAAItD,IAAI,WAAY,SAASzF,EAAc0B,GAGvC,IAAI6G,EAAa,GAGjB,OAFA3I,OAAAiD,EAAA,EAAAjD,CAAkB,wBAAyB8B,EAAM,EAAG,GACpD6G,OAAkB7G,EAAK2D,IAAI,CAACvC,EAAGwC,EAAK2D,IAAQJ,EAAaI,EAAK3D,IAAM0D,KAAK,kGC3pBjF,SAAS0B,EAAMC,GACX,MAAqB,iBAAPA,GAAmB/K,OAAOkB,UAAUC,eAAe1B,KAAKsL,EAAI,OAI9E,SAASC,EAAQD,GACb,MAAqB,iBAAPA,GAAwC,IAArBA,EAAGE,OAAOhJ,OAI/C,SAASiJ,EAAkBH,GACvB,MAAqB,iBAAPA,GAAmB,cAAcI,KAAKJ,GAIxD,SAASK,EAAsBL,GAC3B,MAAqB,iBAAPA,GAAmB,UAAUI,KAAKJ,GAIpD,SAASM,EAAkBN,GACvB,MAAqB,iBAAPA,IACTC,EAAQD,KACRG,EAAkBH,GAK3B,SAASO,EAAoB5J,GACzB,eAAgBA,EAAM6J,mBAAmB7J,EAAM8J,gBAAgB9J,EAAM+J,QACjE/J,EAAMgK,QAAQzJ,OAASP,EAAM8J,MACzB9J,EAAMgK,QAAQhK,EAAM8J,OAAO9H,MAAMhC,EAAM+J,IAAK/J,EAAM+J,IAAM,IAAM,KAI1E,SAASE,EAAQjK,EAAsBkK,EAAuBC,GAC1D,GAAInK,EAAMgK,QAAQzJ,QAAUP,EAAM8J,MAC9B,MAAO,CAACM,KAAK,GAEjB,GAAIpK,EAAMgK,QAAQhK,EAAM8J,OAAOvJ,QAAUP,EAAM+J,IAAK,CAChD,IAAO/J,EAAMqK,QAAYrK,EAAMqK,OAAO9J,QAAUP,EAAM8J,MAGlD,OAFA9J,EAAM+J,IAAM,EACZ/J,EAAM8J,QACCG,EAAQjK,GACZ,CACH,MAAMqJ,EAAK,CAACxK,MAAOmB,EAAMqK,OAAOrK,EAAM8J,QAGtC,OAFA9J,EAAM+J,IAAM,EACZ/J,EAAM8J,QACCT,GAGf,GAAIa,EACA,IAAK,MAAMnF,KAAKmF,EAAY,CACxB,MAAMb,EAAKrJ,EAAMgK,QAAQhK,EAAM8J,OAAO9H,MAAMhC,EAAM+J,IAAK/J,EAAM+J,IAAMhF,EAAExE,QACrE,GAAI8I,IAAOtE,EAGP,OAFA/E,EAAM+J,KAAOhF,EAAExE,OACfP,EAAM6J,MAAQR,EAAGiB,MAAM,MAAM/J,OAAS,EAC/B,CAAE6J,KAAK,EAAQG,OAAQxF,GAI1C,CACI,IAAIsE,EAAKrJ,EAAMgK,QAAQhK,EAAM8J,OAAO9H,MAAMhC,EAAM+J,IAAK/J,EAAM+J,IAAM,GAOjE,GANA/J,EAAM+J,MAEK,OAAPV,GACArJ,EAAM6J,QAGHM,GAAyB,OAAPd,EAAa,CAClC,GAAIrJ,EAAMgK,QAAQhK,EAAM8J,OAAOvJ,QAAUP,EAAM+J,IAC3C,MAAM,IAAIvJ,0CAA0CoJ,EAAoB5J,OAK5E,OAHAqJ,EAAKrJ,EAAMgK,QAAQhK,EAAM8J,OAAO9H,MAAMhC,EAAM+J,IAAK/J,EAAM+J,IAAM,GAC7D/J,EAAM+J,MAEEV,GACR,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IACDA,EAAK,KACL,MACJ,IAAK,IAAK,IAAK,IAEP,GAAmE,MAA/DrJ,EAAMgK,QAAQhK,EAAM8J,OAAO9H,MAAMhC,EAAM+J,IAAK/J,EAAM+J,IAAM,GAAY,CACpE,IAAIS,EAAM,GACV,IAAK,IAAI5M,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAM6M,EAAMzK,EAAMgK,QAAQhK,EAAM8J,OAAO9H,MAAMhC,EAAM+J,IAAMnM,EAAGoC,EAAM+J,IAAM,EAAInM,GAC5E,GAAY,MAAR6M,EAAa,CACb,GAAU,IAAN7M,EACA,MAAM,IAAI4C,0CAA0CoJ,EAAoB5J,OAE5EA,EAAM+J,KAAOnM,EACb,MACG,IAAM,mBAAmB6L,KAAKe,GACjC,MAAM,IAAIhK,0CAA0CoJ,EAAoB5J,OAE5EwK,GAAOC,EAEX,GAAmE,MAA/DzK,EAAMgK,QAAQhK,EAAM8J,OAAO9H,MAAMhC,EAAM+J,IAAK/J,EAAM+J,IAAM,GACxD,MAAM,IAAIvJ,0CAA0CoJ,EAAoB5J,OAE5EA,EAAM+J,MACNV,EAAKnC,OAAOwD,cAAchJ,OAAOiJ,SAASH,EAAK,SAC5C,CACH,MAAMA,EAAMxK,EAAMgK,QAAQhK,EAAM8J,OAAO9H,MAAMhC,EAAM+J,IAAK/J,EAAM+J,IAAM,GACpE,IAAM,mBAAmBN,KAAKe,GAC1B,MAAM,IAAIhK,0CAA0CoJ,EAAoB5J,OAE5EA,EAAM+J,KAAO,EACbV,EAAKnC,OAAOwD,cAAchJ,OAAOiJ,SAASH,EAAK,OAM/D,OAAOnB,GAKf,SAASuB,EAAW5K,EAAsBX,EAAW6K,EAAuBC,GACxE,MAAML,EAAQ9J,EAAM8J,MACdC,EAAM/J,EAAM+J,IACZF,EAAO7J,EAAM6J,KACbgB,EAAgB,GAEtB,IACI,IAAK,IAAIjN,EAAI,EAAGA,EAAIyB,EAAGzB,IACnBiN,EAAIxH,KAAK4G,EAAQjK,EAAOkK,EAAYC,IAF5C,QAKInK,EAAM8J,MAAQA,EACd9J,EAAM+J,IAAMA,EACZ/J,EAAM6J,KAAOA,EAGjB,OAAOgB,EAIX,SAASC,EAAU9K,EAAsBkK,EAAuBC,GAC5D,MAAML,EAAQ9J,EAAM8J,MACdC,EAAM/J,EAAM+J,IACZF,EAAO7J,EAAM6J,KACnB,IAAIR,EAEJ,IACIA,EAAKY,EAAQjK,EAAOkK,EAAYC,GADpC,QAGInK,EAAM8J,MAAQA,EACd9J,EAAM+J,IAAMA,EACZ/J,EAAM6J,KAAOA,EAGjB,OAAOR,EAIX,SAAS0B,EAAgB/K,GACrB,IAAIqJ,EAAKyB,EAAU9K,GACnB,MAAQoJ,EAAMC,IAAOC,EAAQD,IACzBY,EAAQjK,GACRqJ,EAAKyB,EAAU9K,GAMvB,SAASgL,EAAYhL,EAAsBkK,GACvC,IAAIvK,EAAI,GACJ0J,EAAKyB,EAAU9K,EAAOkK,GAE1B,MAASd,EAAMC,IACO,iBAAPA,GADK,CAEZ,GAAI,oBAAoBI,KAAK9J,EAAI0J,GAC7BY,EAAQjK,EAAOkK,GACfvK,GAAK0J,MACF,KAAI,8BAA8BI,KAAK9J,EAAI0J,GAI9C,MAHAY,EAAQjK,EAAOkK,GACfvK,GAAK0J,EAQbA,EAAKyB,EAAU9K,EAAOkK,GAG1B,IAAM,mFAAmFT,KAAK9J,GAC1F,MAAM,IAAIa,8CAA8CoJ,EAAoB5J,OAEhF,OAAO0B,OAAO/B,GAIlB,SAASsL,EAAYjL,EAAsBkK,GACvC,IAAIvK,EAAI,GACJ0J,EAAKyB,EAAU9K,EAAOkK,GAE1B,MAASd,EAAMC,IAAK,CAChB,GAAkB,iBAAPA,EAAiB,CACxB,GAAIC,EAAQD,GACR,MACG,GAAW,MAAPA,GAAsD,MAAxCuB,EAAW5K,EAAO,EAAGkK,GAAY,GACtD,MACG,IAAI,cAAcT,KAAK9J,EAAI0J,GAI9B,MAHAY,EAAQjK,EAAOkK,GACfvK,GAAK0J,MAIN,CACH,GAAkB,iBAAPA,IAAmB/K,OAAOkB,UAAUC,eAAe1B,KAAKsL,EAAI,SAKnE,MAAM,IAAI7I,8CAA8CoJ,EAAoB5J,OAJ5EiK,EAAQjK,EAAOkK,GACJb,EAAuBxK,MAClCc,GAAKuH,OAAOmC,GAMpBA,EAAKyB,EAAU9K,EAAOkK,GAG1B,GAAIlK,EAAME,OAAOgL,iBAAkB,CAC/B,IAAIlN,EAA6B,KAEjC,GAAIA,EAAI2B,EAAEwL,MAAM,qBAAsB,CAElC,MAAMC,EAAKpN,EAAE,GAAGsM,MAAM,KAOtB,MALI,CAAC,CAAClI,OAAQpC,EAAME,OAAO4B,cAAcC,QACjC,CAAC,CAACK,OAAQpC,EAAME,OAAO4B,cAAcqC,KACjCiH,IAMX,GAAIpN,EAAI2B,EAAEwL,MAAM,6BAA8B,CAE/C,MAAMC,EAAKpN,EAAE,GAAGsM,MAAM,KAQtB,MANI,CAAC,CAAClI,OAAQpC,EAAME,OAAO4B,cAAcC,QACjC,CAAC,CAACK,OAAQpC,EAAME,OAAO4B,cAAc/D,MACjC,CAAC,CAACqE,OAAQpC,EAAME,OAAO4B,cAAcrD,QAAS2M,GAC9C,CAAChJ,OAAQpE,EAAE,MAMtB,GAAIA,EAAI2B,EAAEwL,MAAM,gBAAiB,CAElC,MAAMC,EAAKpN,EAAE,GAAGsM,MAAM,KAEtB,MADU,CAAC,CAAClI,OAAQpC,EAAME,OAAO4B,cAAcrD,QAAS2M,IAKhE,MAAO,CAAChJ,OAAQzC,GAIpB,SAAS0L,EACDrL,EAAsBoK,EACtBkB,EACAC,EACApB,GAGJ,MAAMqB,EAAUF,EAAiB,IAAIlB,EAAKkB,GAAkBlB,EACtDJ,EAAoB,GACpBK,EAAgB,GAEtB,OAAS,CACL,IAAI1K,EAAI,GACJ0J,EAAKyB,EAAU9K,EAAOwL,EAASrB,GAEnC,MAASf,EAAMC,IAAK,CAChB,GAAkB,iBAAPA,EACPY,EAAQjK,EAAOwL,EAASrB,GACxBxK,GAAK0J,MACF,CACH,GAAkB,iBAAPA,IAAmB/K,OAAOkB,UAAUC,eAAe1B,KAAKsL,EAAI,SAKnE,MAAM,IAAI7I,uDAAuDoJ,EAAoB5J,OAJrFiK,EAAQjK,EAAOwL,EAASrB,GACbd,EAAuBxK,MAClCc,GAAKuH,OAAOmC,GAMpBA,EAAKyB,EAAU9K,EAAOwL,EAASrB,GAKnC,GAFAF,EAAQjK,EAAOwL,EAASrB,IAEE,IAArBd,EAAae,IACd,MAAM,IAAIqB,EAAA,EAAuB,wBAKrC,GAFAzB,EAAQ3G,KAAK1D,GAER0J,EAAakB,SAAWe,EAGzB,MAFAjB,EAAOhH,KAAKqI,EAAU1L,EAAOuL,EAAgB,KAMrD,MAAO,CAAEvB,UAASK,UAItB,SAASsB,EAAY3L,EAAsBmK,GACvC,OAAOkB,EAAqBrL,EAAO,CAAC,KAAM,KAAM,IAAKmK,GAAeH,QAAQ,GAIhF,SAAS4B,EAAa5L,EAAsBoC,EAAkByJ,GAC1D,MAAMC,EAAe,CAAC1J,GAElByJ,GACAC,EAAEzI,KAAKwI,GAGX,MAAME,EAAQV,EAAqBrL,EAAO,CAAC,OAAQ,OAAQ,KAAK,GAChE,IAAK,IAAIpC,EAAI,EAAGA,EAAImO,EAAM/B,QAAQzJ,OAAQ3C,IACtCkO,EAAEzI,KAAK0I,EAAM/B,QAAQpM,IACjBA,EAAImO,EAAM1B,OAAO9J,QACjBuL,EAAEzI,KAAK0I,EAAM1B,OAAOzM,IAI5B,OAAOkO,EAIX,SAASE,EAAuBhM,GAC5B,MAAO,CACHiM,QAASZ,EAAqBrL,EAAO,CAAC,KAAM,MAAO,KAAM,KAAK,GAAOgK,QAAQ,IAKrF,SAASkC,EAAsBlM,GAC3B,MAAO,CACHiM,QAASZ,EAAqBrL,EAAO,CAAC,MAAO,KAAM,KAAK,GAAOgK,QAAQ,IAK/E,SAASmC,EAAcnM,GACnB+K,EAAgB/K,GAChB,IAAIqJ,EAAKyB,EAAU9K,GAEnB,MAASoJ,EAAMC,IAAK,CAChB,OAAQA,GACR,IAAK,IACD,MAAM,IAAI7I,gDAAgDoJ,EAAoB5J,OAElF,IAAK,IAED,OADAiK,EAAQjK,GACD0L,EAAU1L,EAAO,IAAK,IAEjC,IAAK,IAAK,IAAK,IAAK,IAAK,IACrB,CACIiK,EAAQjK,GACR,MAAMoM,EAAQtB,EAAU9K,GACxB,IAAIqM,GAAkB,EACX,MAAPhD,GAAwB,MAAV+C,IACdnC,EAAQjK,GACRqM,GAAkB,GAEtBtB,EAAgB/K,GAChB,MAAMsM,GAAc,MAAPjD,EACLkD,EAAA,EACQ,MAAPlD,EAAakD,EAAA,EAAYA,EAAA,GAC7BvM,EAAOmM,EAAcnM,IAE1B,OAAQqM,EAAkB/N,OAAAiO,EAAA,EAAAjO,CAAO0B,EAAOsM,GAAOA,EAGvD,IAAK,IACD,CACIrC,EAAQjK,GACR,MAAMwM,EAAS5B,EAAW5K,EAAO,GACjC,OAAIA,EAAME,OAAOuM,cAA8B,MAAdD,EAAO,IAA4B,MAAdA,EAAO,IACzDvC,EAAQjK,GACRiK,EAAQjK,GACR+K,EAAgB/K,GACT1B,OAAAiO,EAAA,EAAAjO,CAAO0B,EAAOmM,EAAcnM,MAEnC+K,EAAgB/K,GACT,CAACuF,OAAQ4G,EAAcnM,KAI1C,IAAK,IAED,OADAiK,EAAQjK,GACDgM,EAAuBhM,GAElC,IAAK,IAGG,MAAkB,MADH4K,EAAW5K,EAAO,GACtB,IACPiK,EAAQjK,GACRiK,EAAQjK,GACDkM,EAAsBlM,IAEtBiL,EAAYjL,GAI/B,IAAK,IACD,CACIiK,EAAQjK,GACR,MAAMwM,EAAS5B,EAAW5K,EAAO,GACjC,GAAIA,EAAME,OAAOwM,eAA+B,MAAdF,EAAO,IAA4B,MAAdA,EAAO,GAAY,CACtE,IAAIG,GAAY,EACZvD,EAAMoD,EAAO,KAAOlD,EAAQkD,EAAO,MAE5BhD,EAAkBgD,EAAO,IACd,MAAdA,EAAO,IAA4B,MAAdA,EAAO,IACtB9C,EAAsB8C,EAAO,MAC/BG,GAAY,GAIbhD,EAAkB6C,EAAO,MAChCG,GAAY,IAIhB1C,EAAQjK,GACRiK,EAAQjK,GAER,IAAIoE,EAAgC,KAChCyH,EAA0B,KAC9B,GAAIc,EACAvI,EAAM,CAAChC,OAAQpC,EAAME,OAAO4B,cAAc8K,cACvC,CAEH,GAAY,QADZxI,EAAM6G,EAAYjL,EAAO,CAAC,OAEtB,MAAM,IAAIQ,gDAAgDoJ,EAAoB5J,OAElF,GAAmB,iBAARoE,EACP,MAAM,IAAI5D,gDAAgDoJ,EAAoB5J,OAElF,MAAM6M,EAAMjC,EAAW5K,EAAO,GAC9B,GAAe,MAAX6M,EAAI,GAAY,CAChB,GAAe,MAAXA,EAAI,GACJ,MAAM,IAAIrM,gDAAgDoJ,EAAoB5J,OAElFiK,EAAQjK,GACRiK,EAAQjK,GACR,MAAMkD,EAAIwI,EAAU1L,EAAO,IAAK,CAAC,CAACoC,OAAQ,OACtCR,MAAMC,QAAQqB,KACd2I,EAAQ3I,IAKpB,OAAO0I,EAAa5L,EAAOoE,EAAKyH,GAEhC,OAAOF,EAAY3L,GAAO,GAItC,IAAK,IACD,GAAIA,EAAME,OAAO4M,4BAA6B,CAE1C,GAAkB,MADHlC,EAAW5K,EAAO,GACtB,GAGP,OAFAiK,EAAQjK,GACRiK,EAAQjK,GACD2L,EAAY3L,GAAO,GAKtC,QACI,GAAkB,iBAAPqJ,EAAiB,CACxB,GAAkB,iBAAPA,GAAmB/K,OAAOkB,UAAUC,eAAe1B,KAAKsL,EAAI,SAEnE,OADAY,EAAQjK,GACDA,EAAME,OAAOkF,kBAAoBiE,EAAMA,EAAuBxK,MAErE,MAAM,IAAI2B,gDAAgDoJ,EAAoB5J,OAE/E,GAAIsJ,EAAQD,GACf,MACG,GAAIG,EAAkBH,GAAK,CAC9B,GAAW,MAAPA,GAAqB,MAAPA,EAAY,CAE1B,IAAMK,EADSkB,EAAW5K,EAAO,GACE,IAC/B,OAAOiL,EAAYjL,GAG3B,OAAOgL,EAAYhL,GAChB,GAAI2J,EAAkBN,GACzB,OAAO4B,EAAYjL,GAEnB,MAAM,IAAIQ,gDAAgDoJ,EAAoB5J,OAItF+K,EAAgB/K,GAChBqJ,EAAKyB,EAAU9K,GAGnB,MAAM,IAAIyL,EAAA,EAAuB,iBAIrC,SAASC,EAAU1L,EAAsB+M,EAAsBC,GAC3D,MAAMtO,EAAesO,EAAYhL,MAAM,GACvC,IAAIuD,GAAS,EAEbwF,EAAgB/K,GAChB,IAAIqJ,EAAKyB,EAAU9K,GAEnB,MAASoJ,EAAMC,IAAK,CAChB,OAAQA,GACR,KAAK0D,EAED,OADA9C,EAAQjK,GACJuF,EACO7G,EAAE,GAEFA,EAGf,QACI,CACI,MAAMI,EAAIqN,EAAcnM,GACxB,GAAiB,iBAANlB,GAAkBR,OAAOkB,UAAUC,eAAe1B,KAAKe,EAAG,UAAW,CAC5E,GAAiB,IAAbJ,EAAE6B,OACF,MAAM,IAAIC,4CAA4CoJ,EAAoB5J,OAE9EuF,GAAS,EACL3D,MAAMC,QAAQ/C,IACdA,EAAEqE,QAAQzE,EAAE4E,OACZ5E,EAAE2E,KAAKvE,IAEPJ,EAAE2E,KAAK,CAACgC,IAAK3G,EAAE4E,MAAkBgC,IAAMxG,EAAuByG,cAE/D,GAAiB,iBAANzG,GAAkBR,OAAOkB,UAAUC,eAAe1B,KAAKe,EAAG,WAClEkB,EAAME,OAAO+M,eACfvO,EAAE2E,KAAKvE,OAER,CACH,GAAIyG,EACA,MAAM,IAAI/E,4CAA4CoJ,EAAoB5J,OAE9EtB,EAAE2E,KAAKvE,KAMnBiM,EAAgB/K,GAChBqJ,EAAKyB,EAAU9K,GAGnB,MAAM,IAAIyL,EAAA,EAAuB,aAK/B,SAAUyB,EAAMlN,GAClB,MAAMtB,EAAe,GAErBqM,EAAgB/K,GAChB,IAAIqJ,EAAKyB,EAAU9K,GAEnB,MAASoJ,EAAMC,IAAK,CAChB,OAAQA,GACR,IAAK,IACDY,EAAQjK,GACRtB,EAAE2E,KAAKqI,EAAU1L,EAAO,IAAK,KAC7B,MAEJ,IAAK,IAAK,IAAK,IAIP,IAFAiK,EAAQjK,GACR+K,EAAgB/K,KACP,CACL,MAAMlB,EAAIqN,EAAcnM,GACxB,GAAiB,iBAANlB,IAAkBR,OAAOkB,UAAUC,eAAe1B,KAAKe,EAAG,WAI9D,CACHJ,EAAE2E,MAAa,MAAPgG,EAAakD,EAAA,EAAQA,EAAA,GAAWvM,EAAOlB,IAC/C,MALMkB,EAAME,OAAO+M,eACfvO,EAAE2E,KAAKvE,GAOnB,MAGR,IAAK,IACDmL,EAAQjK,GACJA,EAAME,OAAO+M,cACbjB,EAAuBhM,GAEvBtB,EAAE2E,KAAK2I,EAAuBhM,IAElC,MAEJ,IAAK,IAGqB,MADH4K,EAAW5K,EAAO,GACtB,IACPiK,EAAQjK,GACRiK,EAAQjK,GACJA,EAAME,OAAO+M,cACbf,EAAsBlM,GAEtBtB,EAAE2E,KAAK6I,EAAsBlM,MAGjCiK,EAAQjK,GACJA,EAAME,OAAO+M,cACbjB,EAAuBhM,GAEvBtB,EAAE2E,KAAK2I,EAAuBhM,KAI1C,MAEJ,IAAK,IACD,CACI,MAAMwM,EAAS5B,EAAW5K,EAAO,GACjC,GAAkB,MAAdwM,EAAO,IAA4B,MAAdA,EAAO,GAAY,CACxC9N,EAAE2E,KAAK8I,EAAcnM,IACrB,OAKZ,QACI,MAAM,IAAIQ,oDAAoDoJ,EAAoB5J,OAGtF+K,EAAgB/K,GAChBqJ,EAAKyB,EAAU9K,GAGnB,OAAOtB,2BCnpBJ,MAAMyO,EAAO,CAACnN,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,EAAG,GAEnC,MAAMiF,EAAMgI,KAAWjN,GACvB,IAAMwB,MAAMC,QAAQwD,GAChB,MAAM,IAAI7E,MAAM,yDAEpB,GAAmB,IAAf6E,EAAI9E,OACJ,MAAM,IAAIC,MAAM,mDAEpB,OAAO6E,EAAI,IAKFiI,GAHQH,IAGD,CAACnN,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,EAAG,GAEnC,MAAMiF,EAAMgI,KAAWjN,GACvB,IAAMwB,MAAMC,QAAQwD,GAChB,MAAM,IAAI7E,MAAM,yDAEpB,GAAmB,IAAf6E,EAAI9E,OACJ,MAAM,IAAIC,MAAM,mDAEpB,OAAO6E,EAAIrD,MAAM,KAKRuL,GAHQD,IAGA,CAACtN,EAAsB7B,IAAiB,IAAIiC,KAO7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,IAAIiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GAQrC,OAPY,OAARiF,IACAA,EAAM,IAEE,OAARC,IACAA,EAAM,IAGN1D,MAAMC,QAAQyD,KACdA,EAAMA,EAAItD,MAAM,IACZmB,QAAQkC,GACLC,GAEA,CAACD,MAAKC,SAMRmI,GAHSF,IAGA,CAACvN,EAAsB7B,IAAiB,IAAIiC,KAK9D,MAAMiF,EAAWjF,EAAK4B,MAAM,EAAG,GAC/B,OAAuB,IAAfqD,EAAI9E,OAAgB8E,EAAI,GAAK,OAE5BgI,EARiD,IAAIjN,KAK9D,MAAMiF,EAAWjF,EAAK4B,MAAM,EAAG,GAC/B,OAAuB,IAAfqD,EAAI9E,OAAgB8E,EAAI,GAAK,MAK5BqI,EAAU,CAAC1N,EAAsB7B,IAAiB,IAAIiC,KAK/D,MAAMkF,EAAWlF,EAAK4B,MAAM,EAAG,GAC/B,OAAuB,IAAfsD,EAAI/E,OAAgB+E,EAAI,GAAK,MAE5BqI,EARkD,IAAIvN,KAK/D,MAAMkF,EAAWlF,EAAK4B,MAAM,EAAG,GAC/B,OAAuB,IAAfsD,EAAI/E,OAAgB+E,EAAI,GAAK,MAK5BsI,EAAQ,CAAC5N,EAAsB7B,IAAiB,IAAIiC,KAK7D,MAAMiF,EAAWjF,EAAK4B,MAAM5B,EAAKG,OAAS,EAAGH,EAAKG,QAClD,OAAuB,IAAf8E,EAAI9E,OAAgB8E,EAAI,GAAK,MAK5BwI,EAAQ,CAAC7N,EAAsB7B,IAAiB,IAAIiC,KAK7D,MAAMkF,EAAWlF,EAAK4B,MAAM,GAC5B,OAAQ,EAAIsD,EAAI/E,OAAU+E,EAAM,MAKvBwI,EAAkB,CAAC9N,EAAsB7B,IAAiB,IAAIiC,KAGvE,IAAIiF,EAAWjF,EAAK4B,MAAM,EAAG,GAC7BqD,EAAsB,IAAfA,EAAI9E,OAAgB8E,EAAI,GAAK,KAEpC,IAAIC,EAAWlF,EAAK4B,MAAM,EAAG,GAG7B,MAAO,CAACqD,MAAKC,IAFbA,EAAsB,IAAfA,EAAI/E,OAAgB+E,EAAI,GAAK,OAI3BkI,EAX0D,IAAIpN,KAGvE,IAAIiF,EAAWjF,EAAK4B,MAAM,EAAG,GAC7BqD,EAAsB,IAAfA,EAAI9E,OAAgB8E,EAAI,GAAK,KAEpC,IAAIC,EAAWlF,EAAK4B,MAAM,EAAG,GAG7B,MAAO,CAACqD,MAAKC,IAFbA,EAAsB,IAAfA,EAAI/E,OAAgB+E,EAAI,GAAK,OAO3ByI,EAAQ,CAAC/N,EAAsB7B,IAAiB,IAAIiC,KAI7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAMiF,EAAMgI,KAAWjN,GAEvB,GAAIiF,QACA,OAAO,EAEX,GAAIzD,MAAMC,QAAQwD,GACd,OAAmB,IAAfA,EAAI9E,OAIZ,cAAe8E,GACf,IAAK,SAAU,IAAK,SAAU,IAAK,WAAY,IAAK,UAChD,OAAO,EACX,IAAK,SACD,QAAO/G,OAAAiO,EAAA,EAAAjO,CAAS+G,GAEpB,OAAO,GAKE2I,GAHSD,IAGH,CAAC/N,EAAsB7B,IAAiB,IAAIiC,KAI3D9B,OAAA8O,EAAA,EAAA9O,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,OAAOiF,IAAQC,IAKN2I,GAHOD,IAGE,CAAChO,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAErC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,OAAOiF,IAAQC,IAKN4I,GAHUD,IAGF,CAACjO,EAAsB7B,IAAiB,IAAIiC,IAG7DA,EAAK4B,MAAM,IAKFmM,EAAW,CAACnO,EAAsB7B,EAAcuE,IAAoC,IAAItC,KAIjG9B,OAAA8O,EAAA,EAAA9O,CAAkB,WAAY8B,EAAM,GAEpC,MAAMuC,EAAe0K,KAAWjN,GAC1BgO,EAAiBT,KAAYvN,IAC7BiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,EAAK4B,MAAM,IAClD,IAAItD,EAAa,KAEjB,MAAM+D,EAAa,GACnB,GAAIb,MAAMC,QAAQwD,GACd,IAAK,MAAM7D,KAAK6D,EACZ,GAAIzD,MAAMC,QAAQL,GAAI,CAClB,MAAM6M,EAAKb,KAAoBhM,GACzB8M,EAAQhQ,OAAAiO,EAAA,EAAAjO,CAAS+P,EAAGhJ,KAC1B5C,EAAM6L,EAAQA,EAAMlM,OAAS8E,OAAOmH,EAAGhJ,MAAQ/G,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOqO,EAAG/I,SAC/D,CACH,MAAMiJ,EAAOjQ,OAAAiO,EAAA,EAAAjO,CAASkD,GACtBiB,EAAM8L,EAAOA,EAAKnM,OAAS8E,OAAO1F,IAAM,KAIpDlD,OAAA+C,EAAA,EAAA/C,CAAa0B,EAAOyC,EAAOE,EAAcD,GAEzC,IACI,GAAI,EAAItC,EAAKG,OACT,GAAI6N,EAAgB,CAChB1P,EAAI,GACJ,IAAK,MAAM8C,KAAKpB,EAAK4B,MAAM,GACvBtD,EAAE2E,KAAK/E,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,SAG3B,IAAK,MAAMA,KAAKpB,EAAK4B,MAAM,GACvBtD,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,QAI5B9C,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOsF,GAb5B,QAgBIhH,OAAA+C,EAAA,EAAA/C,CAAe0B,GAGnB,OAAOtB,GAmEE8P,EAAY,CAACxO,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,GAErC,MAAMmD,EAAyBnD,EAAK,GACpC,IAAMwB,MAAMC,QAAQ0B,GAChB,MAAM,IAAI/C,MAAM,8DAGpB,IAAIqG,GAAe,EACnB,IAAK,IAAIjJ,EAAI,EAAGA,EAAI2F,EAAWhD,OAAQ3C,IAAK,CACxC,MAAM6Q,EAAKlL,EAAW3F,GACtB,GAAIA,IAAM2F,EAAWhD,OAAS,GAAKP,EAAME,OAAOuM,cAC5C7K,MAAMC,QAAQ4M,IAAOnQ,OAAAiO,EAAA,EAAAjO,CAASmQ,EAAG,GAAIzO,EAAME,OAAO4B,cAAc6C,QAAS,CACzE,IAAMrG,OAAAiO,EAAA,EAAAjO,CAASmQ,EAAG,IACd,MAAM,IAAIjO,qEAAqE5C,qBAEnF2F,EAAW3F,GAAK6Q,EAAG,GACnB5H,GAAe,OACZ,IAAMvI,OAAAiO,EAAA,EAAAjO,CAASmQ,GAClB,MAAM,IAAIjO,qEAAqE5C,qBAIvF,IAAI4F,EAASpD,EAAK4B,MAAM,GACpBhC,EAAME,OAAOiI,6BACb3E,EAASlF,OAAA+C,EAAA,EAAA/C,CAAiB0B,EAAOuD,EAAYC,IAGjD,MAAMd,EAAiBpE,OAAA+C,EAAA,EAAA/C,CAAkB0B,GAEnCqC,EAAK,IAAIqM,KACX,GAAKA,EAAWnO,QAAUsG,EAAe,EAAI,GAAMtD,EAAWhD,OAC1D,MAAM,IAAIC,uDACNkO,EAAWnO,mBAAmBgD,EAAWhD,WAIjD,OAAO4N,EAASnO,EAAO7B,EAAMuE,EAAtByL,EAAsC,GAAO,EAAO,CACvD,CAACnO,EAAME,OAAO4B,cAAc8B,KAAMvB,MAC9BkB,EAAWQ,IAAI,CAACvC,EAAasI,IAAU,CACvCtI,EAAEY,OACF9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EACD6G,GAAgBiD,IAAUvG,EAAWhD,OAAS,EAC3CmO,EAAW1M,MAAM8H,GAAS4E,EAAW5E,UAG/CtG,IAEV,OAAOnB,GAKEsM,EAAiB,CAAC3O,EAAsB7B,IAAiB,IAAIiC,KAGtE9B,OAAA8O,EAAA,EAAA9O,CAAkB,aAAc8B,EAAM,GAEtC,MAAMmD,EAAyBnD,EAAK,GACpC,IAAMwB,MAAMC,QAAQ0B,GAChB,MAAM,IAAI/C,MAAM,+DAGpB,IAAIqG,GAAe,EACnB,IAAK,IAAIjJ,EAAI,EAAGA,EAAI2F,EAAWhD,OAAQ3C,IAAK,CACxC,MAAM6Q,EAAKlL,EAAW3F,GACtB,GAAIA,IAAM2F,EAAWhD,OAAS,GAAKP,EAAME,OAAOuM,cAC5C7K,MAAMC,QAAQ4M,IAAOnQ,OAAAiO,EAAA,EAAAjO,CAASmQ,EAAG,GAAIzO,EAAME,OAAO4B,cAAc6C,QAAS,CACzE,IAAMrG,OAAAiO,EAAA,EAAAjO,CAASmQ,EAAG,IACd,MAAM,IAAIjO,sEAAsE5C,qBAEpF2F,EAAW3F,GAAK6Q,EAAG,GACnB5H,GAAe,OACZ,IAAMvI,OAAAiO,EAAA,EAAAjO,CAASmQ,GAClB,MAAM,IAAIjO,sEAAsE5C,qBAIxF,MAAM4F,EAASpD,EAAK4B,MAAM,GAC1B,OAAO1D,OAAAsQ,EAAA,EAAAtQ,CAAc0B,EAAOuD,EAAYsD,EAAcrD,IAyK7CqL,EAAS,CAAC7O,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,GAElC,MAAMiF,EAAiBgI,KAAWjN,GAClC,GAAmB,mBAARiF,EACP,MAAM,IAAI7E,MAAM,8DAGpB,MACI,IAAId,IAAa2F,EAAIyJ,MAAM,KAAM1O,EAAK4B,MAAM,GAAGC,OAAOvC,KAiDjDqP,GA9CUF,IA8CD,CAAC7O,EAAsB7B,IAAiB,IAAIiC,KAI9D,MADYiN,KAAWjN,KAsMd4O,GAnMUD,IAmMF,CAAC/O,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,GAEjC,IAAI2E,EAAI3E,EAAK,GACb,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,EAAKG,OAAQ3C,IAC7BmH,EAAI3E,EAAKxC,GAAGmH,GAEhB,OAAOA,IA2EEkK,GAzESD,IAyEA,CAAChP,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAErC,IAAIgE,EAAM9F,OAAAiO,EAAA,EAAAjO,CAAS+O,KAAWjN,IAE9B,IAAMgE,EAAK,CACP,GAAuB,iBAAZhE,EAAK,GAGZ,MAAM,IAAII,MAAM,mDAFhB4D,EAAM,CAAChC,OAAQhC,EAAK,IAS5B,OAHc9B,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOoE,GAAK,GAC5CA,EAAIhC,QAAUhC,EAAK,GAElBA,EAAK,KAKH8O,EAAS,CAAClP,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAErC,IAAI+O,EAAY,GAEZvN,MAAMC,QAAQzB,EAAK,IACnB+O,EAAO/O,EAAK,GAEZ+O,EAAK9L,KAAKjD,EAAK,IAGnB,IAAIgE,EAAM9F,OAAAiO,EAAA,EAAAjO,CAAS6Q,EAAK,IAExB,IAAM/K,EAAK,CACP,GAAuB,iBAAZ+K,EAAK,GAGZ,MAAM,IAAI3O,MAAM,mDAFhB4D,EAAM,CAAChC,OAAQ+M,EAAK,IAM5B,IAAI1M,EAAQnE,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOoE,GAAK,GAChD,GAAc,OAAV3B,EACA,MAAM,IAAIjC,yCAAyC4D,EAAIhC,WAG3D,IAAIgN,GAAQ,EAEZ,IAAK,IAAIxR,EAAI,EAAGA,EAAIuR,EAAK5O,OAAQ3C,IAAK,CAClC,IAAIkO,EAASqD,EAAKvR,GACdyR,GAAS,EACb,MAAMC,EAAO1R,IAAMuR,EAAK5O,OAAS,EACjC,KAAO8O,GACH,cAAevD,GACf,IAAK,WACDrJ,EAAQqJ,EAAErJ,GACV4M,GAAS,EACT,MACJ,IAAK,SACD,GAAIzN,MAAMC,QAAQiK,GACdA,EAAIxN,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO8L,QAGpB,GADA1H,EAAM9F,OAAAiO,EAAA,EAAAjO,CAASwN,GAEXA,EAAI1H,EAAIhC,WACL,KAAI9D,OAAOkB,UAAUC,eAAe1B,KAAK+N,EAAG,SAG/C,MAAM,IAAItL,MAAM,mDAFhBsL,EAAIxN,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO8L,GAK5B,MACJ,IAAK,SACGA,EAAI,IACJA,EAAIrJ,EAAMlC,OAASuL,GAG3B,IAAK,SACGwD,GACA7M,EAAMqJ,GAAK1L,EAAK,GAChBgP,GAAQ,GAER3M,EAAQA,EAAMqJ,GAElBuD,GAAS,EACT,MACJ,QACI,MAAM,IAAI7O,MAAM,oDAK5B,IAAM4O,EACF,MAAM,IAAI5O,MAAM,8DAGpB,OAAOJ,EAAK,IAIHmP,EAAW,CAACvP,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAA8O,EAAA,EAAA9O,CAAkB,WAAY8B,EAAM,EAAG,GAEvC,MAAMiF,EAAMgI,KAAWjN,GACvB,QAAIwB,MAAMC,QAAQwD,IAAuB,IAAfA,EAAI9E,SAClBiP,QAAQnK,IAEXoK,EAAYF,IAGZG,EAAO,CAAC1P,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,EAAG,IAE1BqP,KAAarP,IAEbuP,GAAQD,IAIRE,GAAS,CAAC5P,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,GAElC,IAAIyP,EAAO,KACX,IAAK,IAAIjS,EAAI,EAAGA,EAAIwC,EAAKG,OAAQ3C,IAAK,CAClC,MAAMkS,EAAOxR,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAKxC,IAClC,IAAM6R,EAAUK,GACZ,OAAOA,EAEXD,EAAOC,EAEX,OAAOD,GAOEE,IAJUH,GAAO,MAIT,CAAC5P,EAAsB7B,IAAiB,IAAIiC,KAI7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,GAEjC,IAAIyP,EAAO,KACX,IAAK,IAAIjS,EAAI,EAAGA,EAAIwC,EAAKG,OAAQ3C,IAAK,CAClC,MAAMkS,EAAOxR,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAKxC,IAClC,GAAI6R,EAAUK,GACV,OAAOA,EAEXD,EAAOC,EAEX,OAAOD,IAMEG,IAHSD,GAAM,MAGA,CAAC/P,EAAsB7B,IAAiB,IAAIiC,KAGpE9B,OAAA8O,EAAA,EAAA9O,CAAkB,eAAgB8B,EAAM,EAAG,GAE3C,IAAIiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GAMrC,OALIwB,MAAMC,QAAQwD,IAAuB,IAAfA,EAAI9E,SAAc8E,EAAM,MAC9CzD,MAAMC,QAAQyD,IAAuB,IAAfA,EAAI/E,SAAc+E,EAAM,WACtC,IAARD,IAAgBA,EAAM,WACd,IAARC,IAAgBA,EAAM,MAEnBD,GAAOC,IAEL2K,GAAgBD,KAGhBE,GAAkB,CAAClQ,EAAsB7B,IAAiB,IAAIiC,KAG9D6P,MAAiB7P,GAKjB+P,IAHmBD,KAGb,CAAClQ,EAAsB7B,IAAiB,IAAIiC,KAG3D9B,OAAA8O,EAAA,EAAA9O,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,OAAO9B,OAAA+C,EAAA,EAAA/C,CAAS+G,GAAO/G,OAAA+C,EAAA,EAAA/C,CAASgH,KAKvB8K,IAHOD,KAGD,CAACnQ,EAAsB7B,IAAiB,IAAIiC,KAG3D9B,OAAA8O,EAAA,EAAA9O,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,OAAO9B,OAAA+C,EAAA,EAAA/C,CAAS+G,IAAQ/G,OAAA+C,EAAA,EAAA/C,CAASgH,KAKxB+K,IAHOD,KAGD,CAACpQ,EAAsB7B,IAAiB,IAAIiC,KAG3D9B,OAAA8O,EAAA,EAAA9O,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,OAAO9B,OAAA+C,EAAA,EAAA/C,CAAS+G,GAAO/G,OAAA+C,EAAA,EAAA/C,CAASgH,KAKvBgL,IAHOD,KAGD,CAACrQ,EAAsB7B,IAAiB,IAAIiC,KAG3D9B,OAAA8O,EAAA,EAAA9O,CAAkB,MAAO8B,EAAM,EAAG,GAElC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,OAAO9B,OAAA+C,EAAA,EAAA/C,CAAS+G,IAAQ/G,OAAA+C,EAAA,EAAA/C,CAASgH,KAKxBiL,IAHOD,KAGG,CAACtQ,EAAsB7B,IAAiB,IAAIiC,KAM/D,GAFA9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,EAAG,GAEf,iBAAZA,EAAK,GACZ,MAAO,CAACgC,OAAQhC,EAAK,IAErB,MAAM,IAAII,MAAM,0EA6BXgQ,IA1BWD,KA0BC,CAACvQ,EAAsB7B,IAAiB,IAAIiC,KAMjE,GAFA9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAEpB,IAAhBA,EAAKG,OACL,QAAQjC,OAAAiO,EAAA,EAAAjO,CAAS8B,EAAK,IAEtB,GAAuB,iBAAZA,EAAK,GACZ,QAAQ9B,OAAAiO,EAAA,EAAAjO,CAAS8B,EAAK,GAAIA,EAAK,IAE/B,MAAM,IAAII,MAAM,4EAOfiQ,IAHaD,KAGH,CAACxQ,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,EAAG,GAE/BwB,MAAMC,QAAQwL,KAAWjN,MAKvBsQ,IAHWD,KAGC,CAACzQ,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAEL,iBAArBiN,KAAWjN,KAKhBuQ,IAHaD,KAGD,CAAC1Q,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAEL,iBAArBiN,KAAWjN,KAKhBwQ,IAHaD,KAGJ,CAAC3Q,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAE9BsB,OAAOmP,MAAMxD,KAAWjN,MAKtB0Q,IAHUF,KAGE,CAAC5Q,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAEjCsB,OAAOqP,SAAS1D,KAAWjN,MAKzB4Q,IAHaF,KAGA,CAAC9Q,EAAsB7B,IAAiB,IAAIiC,KAGlE9B,OAAA8O,EAAA,EAAA9O,CAAkB,aAAc8B,EAAM,EAAG,GAElCsB,OAAOuP,UAAU5D,KAAWjN,MAK1B8Q,IAHcF,KAGF,CAAChR,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAEjC8G,OAAOmG,KAAWjN,MAKhB+Q,IAHaD,KAGD,CAAClR,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAEjC9B,OAAA+C,EAAA,EAAA/C,CAAS+O,KAAWjN,MAuClBgR,IArCaD,KAqCG,CAACnR,EAAsB7B,IAAiB,IAAIiC,KAGrE9B,OAAA8O,EAAA,EAAA9O,CAAkB,gBAAiB8B,EAAM,GAElC9B,OAAO8E,OAAOhD,EAAK,MAAQA,EAAK4B,MAAM,MAKpCqP,IAHiBD,KAGA,CAACpR,EAAsB7B,IAAiB,IAAIiC,KAGtE9B,OAAA8O,EAAA,EAAA9O,CAAkB,iBAAkB8B,EAAM,EAAG,GAEtC8E,KAAKC,UAAUkI,KAAWjN,MAKxBkR,IAHkBD,KAGL,CAACrR,EAAsB7B,IAAiB,IAAIiC,KAGlE9B,OAAA8O,EAAA,EAAA9O,CAAkB,aAAc8B,EAAM,EAAG,GAEzC,MAAMT,EAAI0N,KAAWjN,GACrB,GAAiB,iBAANT,EACP,MAAM,IAAIa,MAAM,gEAEpB,OAAO0E,KAAKgI,MAAMvN,KAKT4R,IAHcD,KAGP,CAACtR,EAAsB7B,IAAiB,IAAIiC,IAGrDoR,KAAKC,OAKHC,IAHQH,KAGW,CAACvR,EAAsB7B,IAAiB,IAAIiC,KAGxE9B,OAAA8O,EAAA,EAAA9O,CAAkB,mBAAoB8B,EAAM,EAAG,GAE/C,MAAMT,EAAI0N,KAAWjN,GACrB,GAAiB,iBAANT,EACP,MAAM,IAAIa,MAAM,sEAEpB,IAAM,oLAAoLiJ,KAAK9J,GAC3L,MAAM,IAAIa,sEAAsEb,MAEpF,MAAMgS,EAAK,IAAIH,KAAK7R,GAAGiS,UACvB,GAAIlQ,OAAOmP,MAAMc,GACb,MAAM,IAAInR,kDAAkDb,MAEhE,OAAOgS,IAKEE,IAHoBH,KAGR,CAAC1R,EAAsB7B,IAAiB,IAAIiC,KAOjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAExC,IAAIT,EAAI,GACR,MAAMmS,EAAOpQ,OAAOtB,EAAK,IAErBT,GADAmS,GAAQ,EACH5K,OAAO4K,GAAMC,SAAS,EAAG,KAEzB,IAAM7K,QAAQ4K,GAAMC,SAAS,EAAG,KAGzCpS,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAE/CpS,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAE3C3R,EAAKG,QAAU,IACfZ,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAE3C3R,EAAKG,QAAU,EACfZ,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAE/CpS,GAAK,MAGLS,EAAKG,QAAU,IACfZ,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,MAG/C3R,EAAKG,QAAU,IACfZ,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAAK/P,MAAM,EAAG,IAEjErC,GAAK,KAET,MAAMgS,EAAK,IAAIH,KAAK7R,GAAGiS,UACvB,GAAIlQ,OAAOmP,MAAMc,GACb,MAAM,IAAInR,2CAA2Cb,MAEzD,OAAOgS,IAKEK,IAHaH,KAGC,CAAC7R,EAAsB7B,IAAiB,IAAIiC,KAOnE9B,OAAA8O,EAAA,EAAA9O,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAIT,EAAI,GACR,MAAMmS,EAAOpQ,OAAOtB,EAAK,IAErBT,GADAmS,GAAQ,EACH5K,OAAO4K,GAAMC,SAAS,EAAG,KAEzB,IAAM7K,QAAQ4K,GAAMC,SAAS,EAAG,KAGzCpS,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAE/CpS,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAE3C3R,EAAKG,QAAU,GACfZ,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAE3C3R,EAAKG,QAAU,EACfZ,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAE/CpS,GAAK,MAGLS,EAAKG,QAAU,IACfZ,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,MAG/C3R,EAAKG,QAAU,IACfZ,GAAK,IAAMuH,OAAOxF,OAAOtB,EAAK,KAAK2R,SAAS,EAAG,KAAK/P,MAAM,EAAG,KAGjErC,GAAK,gBAET,MAAMgS,EAAK,IAAIH,KAAK7R,GAAGiS,UACvB,GAAIlQ,OAAOmP,MAAMc,GACb,MAAM,IAAInR,6CAA6Cb,MAE3D,OAAOgS,IAKEM,IAHeD,KAGQ,CAAChS,EAAsB7B,IAAiB,IAAIiC,KAG5E9B,OAAA8O,EAAA,EAAA9O,CAAkB,uBAAwB8B,EAAM,EAAG,GAEnD,MAAMf,EAAIgO,KAAWjN,GACrB,GAAiB,iBAANf,EACP,MAAM,IAAImB,MAAM,0EAEpB,MAAMmR,EAAK,IAAIH,KAAKnS,GACpB,GAAIqC,OAAOmP,MAAMc,EAAGC,WAChB,MAAM,IAAIpR,sDAAsDnB,MAEpE,OAAOsS,EAAGO,gBAKDC,IAHwBF,KAGA,CAACjS,EAAsB7B,IAAiB,IAAIiC,KAG7E9B,OAAA8O,EAAA,EAAA9O,CAAkB,wBAAyB8B,EAAM,EAAG,GAEpD,MAAMf,EAAIgO,KAAWjN,GACrB,GAAiB,iBAANf,EACP,MAAM,IAAImB,MAAM,2EAEpB,MAAMmR,EAAK,IAAIH,KAAKnS,GACpB,GAAIqC,OAAOmP,MAAMc,EAAGC,WAChB,MAAM,IAAIpR,uDAAuDnB,MAErE,MAAQ,CACJsS,EAAGS,iBACHT,EAAGU,cAAgB,EACnBV,EAAGW,aACHX,EAAGY,cACHZ,EAAGa,gBACHb,EAAGc,gBACHd,EAAGe,qBACH,EACAf,EAAGgB,eAMEC,IAHyBT,KAGC,CAACnS,EAAsB7B,IAAiB,IAAIiC,KAG/E9B,OAAA8O,EAAA,EAAA9O,CAAkB,0BAA2B8B,EAAM,EAAG,GAEtD,MAAMf,EAAIgO,KAAWjN,GACrB,GAAiB,iBAANf,EACP,MAAM,IAAImB,MAAM,6EAEpB,MAAMmR,EAAK,IAAIH,KAAKnS,GACpB,GAAIqC,OAAOmP,MAAMc,EAAGC,WAChB,MAAM,IAAIpR,yDAAyDnB,MAEvE,MAAQ,CACJsS,EAAGkB,cACHlB,EAAGmB,WAAa,EAChBnB,EAAGoB,UACHpB,EAAGqB,WACHrB,EAAGsB,aACHtB,EAAGuB,aACHvB,EAAGwB,mBACFxB,EAAGyB,oBAEJzB,EAAG0B,YAMEC,IAH2BV,KAGlB,CAAC5S,EAAsB7B,IAAiB,IAAIiC,KAM9D,GAFA9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAEjB,IAAhBA,EAAKG,OAAc,CAEnB,OADU,IAAIgT,OAAOnT,EAAK,IACjBoT,KAAKpT,EAAK,IAGnB,OADU,IAAImT,OAAOnT,EAAK,GAAIA,EAAK,IAC1BoT,KAAKpT,EAAK,MAMdqT,IAHUH,KAGI,CAACtT,EAAsB7B,IAAiB,IAAIiC,KAGnEsT,QAAQC,OAAOvT,GACR,OAKEwT,IAHeH,KAGC,CAACzT,EAAsB7B,IAAiB,IAAIiC,KAGrEsT,QAAQG,SAASzT,GACV,OAKE0T,IAHiBF,KAGD,CAAC5T,EAAsB7B,IAAiB,IAAIiC,KAGrEsT,QAAQK,SAAS3T,GACV,OAKE4T,IAHiBF,KAGF,CAAC9T,EAAsB7B,IAAiB,IAAIiC,KAIpEsT,QAAQO,QAAQ7T,GACT,OAKE8T,IAHgBF,KAGE,CAAChU,EAAsB7B,IAAiB,IAAIiC,KAIvEsT,QAAQS,WAAW/T,GACZ,OAKEgU,IAHmBF,KAGD,CAAClU,EAAsB7B,IAAiB,IAAIiC,KAItEsT,QAAgBW,WAAWjU,GACrB,OAEqBgU,KC91CjB,IAAAE,GAnPoB,CAAC,CAChCnW,KAAM,OACNkE,GAAI8K,GACL,CACChP,KAAM,OACNkE,GAAIiL,GACL,CACCnP,KAAM,QACNkE,GAAIkL,GACL,CACCpP,KAAM,SACNkE,GAAIoL,GACL,CACCtP,KAAM,UACNkE,GAAIqL,GACL,CACCvP,KAAM,QACNkE,GAAIuL,GACL,CACCzP,KAAM,SACNkE,GAAIuL,GACL,CACCzP,KAAM,QACNkE,GAAIwL,GACL,CACC1P,KAAM,oBACNkE,GAAIyL,GACL,CACC3P,KAAM,QACNkE,GAAI0L,GACL,CACC5P,KAAM,MACNkE,GAAI2L,GACL,CACC7P,KAAM,MACNkE,GAAI2L,GACL,CACC7P,KAAM,UACNkE,GAAI4L,GACL,CACC9P,KAAM,MACNkE,GAAI4L,GACL,CACC9P,KAAM,QACNkE,GAAI6L,GACL,CACC/P,KAAM,WACNkE,GAAI8L,GACL,CACChQ,KAAM,YACNkE,GDoM0B,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAItE9B,OAAA8O,EAAA,EAAA9O,CAAkB,iBAAkB8B,EAAM,GAE1C,MAAMgO,EAAiBf,KAAWjN,GAC5BkF,EAAMqI,KAAYvN,GACxB,IAAI1B,EAAa,KAEjBJ,OAAA+C,EAAA,EAAA/C,CAAa0B,EAAO1B,OAAA+C,EAAA,EAAA/C,CAAe0B,GAAOyC,OAAO,GACjD,IACI,GAAI,EAAIrC,EAAKG,OACT,GAAI6N,EAAgB,CAChB1P,EAAI,GACJ,IAAK,MAAM8C,KAAKpB,EAAK4B,MAAM,GACvBtD,EAAE2E,KAAK/E,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,SAG3B,IAAK,MAAMA,KAAKpB,EAAK4B,MAAM,GACvBtD,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,QAI5B9C,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOsF,GAb5B,QAgBIhH,OAAA+C,EAAA,EAAA/C,CAAe0B,GAGnB,OAAOtB,ICjOR,CACCP,KAAM,aACNkE,GDoOsB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAGlE9B,OAAA8O,EAAA,EAAA9O,CAAkB,aAAc8B,EAAM,GAEtC,MAAMmD,EAAyBnD,EAAK,GACpC,IAAMwB,MAAMC,QAAQ0B,GAChB,MAAM,IAAI/C,MAAM,8DAGpB,IAAI9B,EAAa,KAEjB,MAAMgE,EAAiBpE,OAAA+C,EAAA,EAAA/C,CAAyB0B,EAAOuD,GACvDjF,OAAA+C,EAAA,EAAA/C,CAAa0B,EAAO,IAAI,EAAM0C,GAC9B,IACI,IAAK,MAAMlB,KAAKpB,EAAK4B,MAAM,GACvBtD,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,GAF5B,QAKIlD,OAAA+C,EAAA,EAAA/C,CAAe0B,GAGnB,OAAOtB,ICzPR,CACCP,KAAM,YACNkE,GAAImM,GACL,CACCrQ,KAAM,aACNkE,GAAIsM,GACL,CACCxQ,KAAM,WACNkE,GD4UoB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAA8O,EAAA,EAAA9O,CAAkB,WAAY8B,EAAM,GAEpC,MAAMiF,EAAgBgI,KAAWjN,GAC3BiC,EAAKmM,EAAUxO,EAAVwO,IAA0BpO,EAAK4B,MAAM,IAKhD,OAJAhC,EAAM8E,QAAQX,IAAIkB,EAAIjD,OAAQ,CAC1BjE,KAAMkH,EAAIjD,OACVC,GAAI,CAACkS,EAAIC,IAAOnS,IAEbA,ICtVR,CACClE,KAAM,YACNkE,GDyVyB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAGrE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,GAErC,MAAMiF,EAAgBgI,KAAWjN,GAC3BiC,EAAKsM,EAAe3O,EAAf2O,IAA+BvO,EAAK4B,MAAM,IAKrD,OAJAhC,EAAM8E,QAAQX,IAAIkB,EAAIjD,OAAQ,CAC1BjE,KAAMkH,EAAIjD,OACVC,GAAI,CAACkS,EAAIC,IAAOnS,IAEbA,ICnWR,CACClE,KAAM,WACNkE,GDsWoB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAA8O,EAAA,EAAA9O,CAAkB,WAAY8B,EAAM,EAAG,GAEvC,MAAMiF,EAAgBgI,KAAWjN,GAC3BqU,EAAOzU,EAAM8E,QAAQrG,IAAI4G,EAAIjD,QACnC,IAAKqS,EACD,MAAM,IAAIjU,iCAAiC6E,EAAIjD,0BAEnD,OAAOqS,EAAKpS,GAAGrC,EAAOqF,EAAIjD,UC/W3B,CACCjE,KAAM,cACNkE,GDkXuB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAA8O,EAAA,EAAA9O,CAAkB,cAAe8B,EAAM,GAEvC,MAAMiF,EAAgBgI,KAAWjN,GACjC,IAAImD,EAAyBnD,EAAK,GAClC,IAAMwB,MAAMC,QAAQ0B,GAChB,MAAM,IAAI/C,MAAM,gEAGpB,IAAIqG,GAAe,EACnB,IAAK,IAAIjJ,EAAI,EAAGA,EAAI2F,EAAWhD,OAAQ3C,IAAK,CACxC,MAAM6Q,EAAKlL,EAAW3F,GACtB,GAAIA,IAAM2F,EAAWhD,OAAS,GAAKP,EAAME,OAAOuM,cAC5C7K,MAAMC,QAAQ4M,IAAOnQ,OAAAiO,EAAA,EAAAjO,CAASmQ,EAAG,GAAIzO,EAAME,OAAO4B,cAAc6C,QAAS,CACzE,IAAMrG,OAAAiO,EAAA,EAAAjO,CAASmQ,EAAG,IACd,MAAM,IAAIjO,uEAAuE5C,qBAErF2F,EAAW3F,GAAK6Q,EAAG,GACnB5H,GAAe,OACZ,IAAMvI,OAAAiO,EAAA,EAAAjO,CAASmQ,GAClB,MAAM,IAAIjO,uEAAuE5C,qBAIzF,MAAM4F,EAASpD,EAAK4B,MAAM,GACpBU,EAAiBpE,OAAA+C,EAAA,EAAA/C,CAAkB0B,GAEnCqC,EAAK,IAAIqS,KACX,IAAIhG,EAAagG,EAAM1S,MAAM,GAC7B,GAAK0M,EAAWnO,QAAUsG,EAAe,EAAI,GAAMtD,EAAWhD,OAC1D,MAAM,IAAIC,0BAA0B6E,EAAIjD,0CACpCsM,EAAWnO,mBAAmBgD,EAAWhD,WAGjD,IAAK,IAAI3C,EAAI2F,EAAWhD,QAAUsG,EAAe,EAAI,GAAIjJ,GAAK,EAAGA,IAAK,CAClE,IAAI4W,EAAKjR,EAAW3F,GAAGwE,OACvB,GAAIoS,EAAGG,WAAW,MAId,GAHApR,EAAW3F,GAAGwE,OAASmB,EAAW3F,GAAGwE,OAAOJ,MAAM,GAClDwS,EAAKjR,EAAW3F,GAAGwE,QAEb9D,OAAAiO,EAAA,EAAAjO,CAASoQ,EAAW9Q,IACtB,MAAM,IAAI4C,0BAA0B6E,EAAIjD,uBAAuBxE,MAAM4W,0BAEtE,GAAIA,EAAGG,WAAW,MAAQH,EAAGI,SAAS,KAAM,CAI/C,GAHArR,EAAW3F,GAAGwE,OAASmB,EAAW3F,GAAGwE,OAAOJ,MAAM,GAAI,GACtDwS,EAAKjR,EAAW3F,GAAGwE,QAEf9D,OAAAiO,EAAA,EAAAjO,CAASoQ,EAAW9Q,GAAI4W,GAIxB,MAAM,IAAIhU,0BAA0B6E,EAAIjD,uBAAuBxE,MAAM4W,8BAHrEjR,EAAaA,EAAWvB,MAAM,EAAGpE,GAAGqE,OAAOsB,EAAWvB,MAAMpE,EAAI,IAChE8Q,EAAaA,EAAW1M,MAAM,EAAGpE,GAAGqE,OAAOyM,EAAW1M,MAAMpE,EAAI,QAIjE,CAEH,MAAMiX,EAAOL,EAAGM,YAAY,KAC5B,GAAI,EAAID,EAAM,CACV,MAAME,EAAQP,EAAGxS,MAAM6S,EAAO,GAC9B,OAAQE,GACR,IAAK,SACD,GAA6B,iBAAlBrG,EAAW9Q,GAClB,MAAM,IAAI4C,0BAA0B6E,EAAIjD,uBAAuBxE,MAAM4W,qBAEzE,MACJ,IAAK,SACD,GAA6B,iBAAlB9F,EAAW9Q,GAClB,MAAM,IAAI4C,0BAA0B6E,EAAIjD,uBAAuBxE,MAAM4W,qBAEzE,MACJ,IAAK,WACD,IAAO5S,MAAMC,QAAQ6M,EAAW9Q,MAAOU,OAAAiO,EAAA,EAAAjO,CAASoQ,EAAW9Q,GAAG,IAC1D,MAAM,IAAI4C,0BAA0B6E,EAAIjD,uBAAuBxE,MAAM4W,uBAEzE,MACJ,IAAK,OACD,IAAM5S,MAAMC,QAAQ6M,EAAW9Q,IAC3B,MAAM,IAAI4C,0BAA0B6E,EAAIjD,uBAAuBxE,MAAM4W,mBAEzE,MACJ,IAAK,SACD,IAAMlW,OAAAiO,EAAA,EAAAjO,CAASoQ,EAAW9Q,IACtB,MAAM,IAAI4C,0BAA0B6E,EAAIjD,uBAAuBxE,MAAM4W,qBAEzE,MACJ,IAAK,MACD,MACJ,QACI,MAAM,IAAIhU,0BAA0B6E,EAAIjD,uBAAuBxE,MAAM4W,sBAAuBO,MAEhGxR,EAAW3F,GAAGwE,OAASmB,EAAW3F,GAAGwE,OAAOJ,MAAM,EAAG6S,GACrDL,EAAKjR,EAAW3F,GAAGwE,SAI/B,OAAO+L,EAASnO,EAAO7B,EAAMuE,EAAtByL,EAAsC,GAAO,EAAO,CACvD,CAACnO,EAAME,OAAO4B,cAAc8B,KAAMvB,MAC9BkB,EAAWQ,IAAI,CAACvC,EAAasI,IAAU,CACvCtI,EAAEY,OACF9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EACD6G,GAAgBiD,IAAUvG,EAAWhD,OAAS,EAC3CmO,EAAW1M,MAAM8H,GAAS4E,EAAW5E,UAnE5B,MAsETtG,IAQpB,OALAxD,EAAMmC,SAASgC,IAAIkB,EAAIjD,OAAQ,CAC3BjE,KAAMkH,EAAIjD,OACVC,GAAI,CAACkS,EAAIC,IAAQQ,GAAS3S,KAAO2S,EAAKhT,MAAM,MAGzCK,ICleR,CACClE,KAAM,SACNkE,GAAIwM,GACL,CACC1Q,KAAM,UACNkE,GDmfmB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,GAEnC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACjCgE,EAAM9F,OAAAiO,EAAA,EAAAjO,CAASgH,GACrB,OAAO2P,SAASzV,UAAUsP,MAAM/Q,KAC5BsH,EAAIjB,EAAMA,EAAIhC,OAAS9D,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOsF,IACvCD,EACAjF,EAAK4B,MAAM,MC5fhB,CACC7D,KAAM,SACNkE,GDggBkB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAErC,IAAI1B,EAAa,GACjB,IACIA,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAK,IAC3B,MAAO8U,GACL,GAAIA,aAAazJ,EAAA,EACb,MAAMyJ,EAGNxW,EADA,EAAI0B,EAAKG,OACL4N,EAASnO,EAATmO,EAAsB,GAAM,EAAO,CACnC,CAAC,SAAU7P,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOkV,IACxB,CAAC,UAAW5W,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAO1B,OAAA+C,EAAA,EAAA/C,CAAS0B,MACnCI,EAAK,IAEJ,KAGZ,OAAO1B,ICrhBR,CACCP,KAAM,SACNkE,GAAI0M,GACL,CACC5Q,KAAM,QACNkE,GD8hBiB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAI7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAMiF,EAAMgI,KAAWjN,GACvB,IAAI1B,EAAa,GAUjB,OARIA,EADA+Q,EAAUpK,GACN/G,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAK,IAErB,EAAIA,EAAKG,OACLjC,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAK,IAErB,OC3iBb,CACCjC,KAAM,aACNkE,GDijBqB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAIjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,IAAI1B,EAAa,GAMjB,OAFIA,EAHEuR,GAAc5K,EAAK,MAGjB/G,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOsF,GAFhBD,ICzjBT,CACClH,KAAM,UACNkE,GDgkBmB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAI/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,GAEnC,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,EAAKG,OAAS,EAAG3C,GAAK,EAAG,CACzC,MAAMK,EAAImC,EAAKxC,GACT4D,EAAIpB,EAAKxC,EAAI,GACnB,GAAI6R,EAAUnR,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO/B,IAC1B,OAAOK,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,GAG/B,OAAO,OC5kBR,CACCrD,KAAM,WACNkE,GD+kBoB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAIhE9B,OAAA8O,EAAA,EAAA9O,CAAkB,WAAY8B,EAAM,GAEpC,MAAMiF,EAAMgI,KAAWjN,GACjBkF,EAAMlF,EAAK4B,MAAM,GACvB,IAAItD,EAAa,KACjB,KAAO+Q,EAAUnR,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOqF,KAC7B,IAAK,MAAM7D,KAAK8D,EACZ5G,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,GAG5B,OAAO9C,IC5lBR,CACCP,KAAM,cACNkE,GD+lBsB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAIlE9B,OAAA8O,EAAA,EAAA9O,CAAkB,aAAc8B,EAAM,GAEtC,MAAMiF,EAAMgI,KAAWjN,GACjBkF,EAAMlF,EAAK4B,MAAM,GACvB,IAAItD,EAAa,KAEjB,GACI,IAAK,MAAM8C,KAAK8D,EACZ5G,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,SAEnBiO,EAAUnR,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOqF,KACnC,OAAO3G,IC7mBR,CACCP,KAAM,WACNkE,GDgnBoB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAIhE9B,OAAA8O,EAAA,EAAA9O,CAAkB,WAAY8B,EAAM,GAEpC,MAAMiF,EAAMgI,KAAWjN,GACjBkF,EAAMlF,EAAK4B,MAAM,GACvB,IAAItD,EAAa,KACjB,KAAOiR,GAAMrR,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOqF,KACzB,IAAK,MAAM7D,KAAK8D,EACZ5G,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,GAG5B,OAAO9C,IC7nBR,CACCP,KAAM,cACNkE,GDgoBsB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAIlE9B,OAAA8O,EAAA,EAAA9O,CAAkB,aAAc8B,EAAM,GAEtC,MAAMiF,EAAMgI,KAAWjN,GACjBkF,EAAMlF,EAAK4B,MAAM,GACvB,IAAItD,EAAa,KACjB,GACI,IAAK,MAAM8C,KAAK8D,EACZ5G,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,SAEnBmO,GAAMrR,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOqF,KAC/B,OAAO3G,IC7oBR,CACCP,KAAM,YACNkE,GDgpBqB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAIjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,GAErC,MAAMgE,EAAM9F,OAAAiO,EAAA,EAAAjO,CAAS+O,KAAWjN,IAChC,IAAMgE,EACF,MAAM,IAAI5D,MAAM,0EAEpB,MAAMiC,EAAQnE,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOoE,GAAK,GAE5C/E,EAAIf,OAAA+C,EAAA,EAAA/C,CAASqP,KAAYvN,IACzBkF,EAAMlF,EAAK4B,MAAM,GACvB,IAAItD,EAAa,KACjB,IAAK,IAAId,EAAI,EAAGA,EAAIyB,EAAGzB,IAAK,CACxB6E,EAAM2B,EAAIhC,QAAUxE,EACpB,IAAK,MAAM4D,KAAK8D,EACZ5G,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,GAG5B,OAAO9C,ICpqBR,CACCP,KAAM,SACNkE,GDuqBkB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,GAElC,MAAMgE,EAAM9F,OAAAiO,EAAA,EAAAjO,CAAS+O,KAAWjN,IAChC,IAAMgE,EACF,MAAM,IAAI5D,MAAM,uEAEpB,MAAMiC,EAAQnE,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOoE,GAAK,GAE5C4Q,EAAOrH,KAAYvN,GACzB,IAAMwB,MAAMC,QAAQmT,GAChB,MAAM,IAAIxU,MAAM,sEAGpB,MAAM8E,EAAMlF,EAAK4B,MAAM,GACvB,IAAItD,EAAa,KACjB,IAAK,MAAMoN,KAAKkJ,EAAM,CAClBvS,EAAM2B,EAAIhC,QAAU0J,EACpB,IAAK,MAAMtK,KAAK8D,EACZ5G,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,GAG5B,OAAO9C,IC/rBR,CACCP,KAAM,QACNkE,GAAI2M,GACL,CACC7Q,KAAM,SACNkE,GD8sBkB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,GAElC,IAAI2E,EAAS,KACTX,EAAM9F,OAAAiO,EAAA,EAAAjO,CAAS8B,EAAK,IAExB,IAAKgE,EACD,cAAehE,EAAK,IACpB,IAAK,SAAU,IAAK,SAChBgE,EAAM,CAAChC,OAAQ8E,OAAO9G,EAAK,KAC3B,MACJ,QACI2E,EAAIzG,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOI,EAAK,IAKjC,GAAIgE,EAAK,CACL,MAAM3B,EAAQnE,OAAA+C,EAAA,EAAA/C,CAAwB0B,EAAOoE,GAAK,GAClD,IAAM3B,EACF,MAAM,IAAIjC,4DAA4D4D,EAAIhC,2BAE9E2C,EAAItC,EAAM2B,EAAIhC,QAGlB,IAAK,IAAIxE,EAAI,EAAGA,EAAIwC,EAAKG,OAAQ3C,IAAK,CAClC,IAAIkO,EAAS1L,EAAKxC,GACdyR,GAAS,EACb,KAAOA,GACH,cAAevD,GACf,IAAK,WACD/G,EAAI+G,EAAE/G,GACNsK,GAAS,EACT,MACJ,IAAK,SACD,GAAIzN,MAAMC,QAAQiK,GACdA,EAAIxN,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO8L,QAGpB,GADA1H,EAAM9F,OAAAiO,EAAA,EAAAjO,CAASwN,GAEXA,EAAI1H,EAAIhC,WACL,KAAI9D,OAAOkB,UAAUC,eAAe1B,KAAK+N,EAAG,SAG/C,MAAM,IAAItL,MAAM,wDAFhBsL,EAAIxN,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO8L,GAK5B,MACJ,IAAK,SACGA,EAAI,IACJA,EAAI/G,EAAExE,OAASuL,GAGvB,IAAK,SACD/G,EAAIA,EAAE+G,GACNuD,GAAS,EACT,MACJ,QACI,MAAM,IAAI7O,MAAM,yDAI5B,OAAOuE,IC7wBR,CACC5G,KAAM,SACNkE,GAAI4M,GACL,CACC9Q,KAAM,SACNkE,GAAI6M,GACL,CACC/Q,KAAM,WACNkE,GAAIkN,GACL,CACCpR,KAAM,OACNkE,GAAIqN,GACL,CACCvR,KAAM,SACNkE,GAAIuN,IACL,CACCzR,KAAM,QACNkE,GAAI0N,IACL,CACC5R,KAAM,KACNkE,GAAI2N,IACL,CACC7R,KAAM,KACNkE,GAAI6N,IACL,CACC/R,KAAM,IACNkE,GAAI8N,IACL,CACChS,KAAM,KACNkE,GAAI+N,IACL,CACCjS,KAAM,IACNkE,GAAIgO,IACL,CACClS,KAAM,KACNkE,GAAIiO,IACL,CACCnS,KAAM,UACNkE,GAAIkO,IACL,CACCpS,KAAM,YACNkE,GDs+BqB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAIjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MACM+U,EAAc,CAAC/S,6BADkBpC,EAAMC,4BAE7C,GAAoB,IAAhBG,EAAKG,OAAc,CACnB,MAAM2C,EAAI5E,OAAAiO,EAAA,EAAAjO,CAAS8B,EAAK,IACxB,GAAI8C,EACA+L,EAAOjP,EAAPiP,CAAkB/L,EAAGiS,OAClB,IAAuB,iBAAZ/U,EAAK,GAGnB,MAAM,IAAII,MAAM,0EAFhByO,EAAOjP,EAAPiP,CAAkB,CAAC7M,OAAQhC,EAAK,IAAK+U,IAK7C,OAAOA,ICv/BR,CACChX,KAAM,aACNkE,GAAImO,IACL,CACCrS,KAAM,WACNkE,GAAIoO,IACL,CACCtS,KAAM,aACNkE,GAAIqO,IACL,CACCvS,KAAM,aACNkE,GAAIsO,IACL,CACCxS,KAAM,UACNkE,GAAIuO,IACL,CACCzS,KAAM,aACNkE,GAAIyO,IACL,CACC3S,KAAM,cACNkE,GAAI2O,IACL,CACC7S,KAAM,aACNkE,GAAI6O,IACL,CACC/S,KAAM,aACNkE,GAAI8O,IACL,CACChT,KAAM,OACNkE,GDkkCuB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAGnE,MAAM1B,EAAS,GACf,IAAK,MAAM8C,KAAKpB,EAAM,CAClB,KAAIwB,MAAMC,QAAQL,IAAM,EAAIA,EAAEjB,QAqB1B,MAAM,IAAIC,MAAM,gEArBkB,CAClC,MAAM4D,EAAM9F,OAAAiO,EAAA,EAAAjO,CAASkD,EAAE,IACjB4T,EACFhR,EAAMA,EAAIhC,OACV8E,OAAO5I,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,EAAE,KACZ,IAAbA,EAAEjB,OAGF7B,EAAE0W,IAAW,EACO,IAAb5T,EAAEjB,OAGT7B,EAAE0W,GAAW9W,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,EAAE,IAI/B9C,EAAE0W,GACE9W,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAQ,CAAC,CAACoC,OAAQpC,EAAME,OAAO4B,cAAckT,OACrD/S,OAAOT,EAAEQ,MAAM,MAMhC,OAAOtD,IC9lCR,CACCP,KAAM,iBACNkE,GAAI+O,IACL,CACCjT,KAAM,kBACNkE,GAAIgP,IACL,CACClT,KAAM,OACNkE,GAAIkP,IACL,CACCpT,KAAM,qBACNkE,GAAIqP,IACL,CACCvT,KAAM,YACNkE,GAAIwP,IACL,CACC1T,KAAM,eACNkE,GAAI2P,IACL,CACC7T,KAAM,0BACNkE,GAAI4P,IACL,CACC9T,KAAM,0BACNkE,GAAI8P,IACL,CACChU,KAAM,6BACNkE,GAAIuQ,IACL,CACCzU,KAAM,cACNkE,GAAIiP,IACL,CACCnT,KAAM,SACNkE,GAAIiR,IACL,CACCnV,KAAM,eACNkE,GAAIoR,IACL,CACCtV,KAAM,iBACNkE,GAAIuR,IACL,CACCzV,KAAM,iBACNkE,GAAIyR,IACL,CACC3V,KAAM,gBACNkE,GAAI2R,IACL,CACC7V,KAAM,oBACNkE,GAAI6R,IACL,CACC/V,KAAM,oBACNkE,GAAI+R,KC2KO,IAAAiB,GAvZsB,CAAC,CAClClX,KAAM,SACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,YACb4S,EAAK,GACLA,EAAK,MACDA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,SACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,aACb,GACA,KACI4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,UACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,cACb,KACI4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,aACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,aACb,GACA,KACI4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,WACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,iBACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,WACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAIzC,IADe1W,OAAAiO,EAAA,EAAAjO,CAAS0W,EAAK,GAAI,OAE7B,MAAM,IAAIxU,MAAM,yDAEpB,MAAO,CAAC,CAAC4B,OAAQ,cAAe9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAAK1W,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAO,CAAC,CAACoC,OAAQ,aAC1E9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,OACdA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,SAGjD,CACCrD,KAAM,MACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,eACV4S,EAAKhT,MAAM,KAGvB,CACC7D,KAAM,YACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAIzC,IADe1W,OAAAiO,EAAA,EAAAjO,CAAS0W,EAAK,GAAI,OAE7B,MAAM,IAAIxU,MAAM,yDAEpB,MAAO,CAAC,CAAC4B,OAAQ,cAAe9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAAK1W,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAO,CAAC,CAACoC,OAAQ,cAC1E9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,OACdA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,SAGjD,CACCrD,KAAM,MACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,gBACV4S,EAAKhT,MAAM,KAGvB,CACC7D,KAAM,UACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,gBACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,KACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,gBACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,WACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,iBACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,KACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,iBACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,SACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,eACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,UACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,gBACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,SACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,eACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,KACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,eACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,YACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,kBACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,QACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS0W,EAAM,GAE1B,CAAC,CAAC5S,OAAQ,WACb4S,EAAK,GACL1W,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,OACdA,EAAKhT,MAAM,MAGxB,CACC7D,KAAM,OACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,aACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,MACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,SACb4S,EAAK,MACDA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,WACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,cACb4S,EAAK,MACDA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,KACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,cACb4S,EAAK,MACDA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,QACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,cACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,SACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,eACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,YACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,kBACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,SACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,eACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,YACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,kBACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,UACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAIzC,IADc1W,OAAAiO,EAAA,EAAAjO,CAAS0W,EAAK,GAAI,MAE5B,MAAM,IAAIxU,MAAM,uDAEpB,MAAO,CAAC,CAAC4B,OAAQ,aACb9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAClBA,EAAK,MACDA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,OAGjD,CACCrD,KAAM,OACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAIzC,IADc1W,OAAAiO,EAAA,EAAAjO,CAAS0W,EAAK,GAAI,MAE5B,MAAM,IAAIxU,MAAM,oDAEpB,MAAO,CAAC,CAAC4B,OAAQ,UACb9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAClBA,EAAK,MACDA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,OAGjD,CACCrD,KAAM,OACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,aACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,OACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ0W,EAAM,EAAG,GAE5B,CAAC,CAAC5S,OAAQ,UACb9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAClBA,EAAK,MAGd,CACC7W,KAAM,gBACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,gBAAiB0W,EAAM,EAAG,GAErC,CAAC,CAAC5S,OAAQ,WACb,CAAC,CAACA,OAAQ,UACN9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAClBA,EAAK,OAIlB,CACC7W,KAAM,OACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ0W,EAAM,EAAG,GAE5B,CAAC,CAAC5S,OAAQ,UACb9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAClBA,EAAK,MAGd,CACC7W,KAAM,cACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,cAAe0W,EAAM,EAAG,GAEnC,CAAC,CAAC5S,OAAQ,UACb9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAClBA,EAAK,MAGd,CACC7W,KAAM,OACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,aACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,MACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CAAC,CAAC5S,OAAQ,YACT4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,UACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAIlC,CACH,CAAC5S,OAAQ,gBACL4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,IACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CACH,CAAC5S,OAAQ,WACL4S,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,OCxXrC,IAAA8T,GA5BwB,CACnC,CAACnX,KAAM,MAAOkE,GAAI,CAACrC,EAAsB7B,IAAiB,IAC1D,CAACA,KAAM,OAAQkE,GAAI,CAACrC,EAAsB7B,IAAiB,MAE3D,CAACA,KAAM,YAAakE,GAAI,CAACrC,EAAsB7B,SAAiB,GAEhE,CAACA,KAAM,OAAQkE,GAAI,CAACrC,EAAsB7B,KAAiB,GAC3D,CAACA,KAAM,QAASkE,GAAI,CAACrC,EAAsB7B,KAAiB,GAC5D,CAACA,KAAM,KAAMkE,GAAI,CAACrC,EAAsB7B,KAAiB,GAEzD,CAACA,KAAM,QAASkE,GAAI,CAACrC,EAAsB7B,KAAiB,GAC5D,CAACA,KAAM,SAAUkE,GAAI,CAACrC,EAAsB7B,KAAiB,GAC7D,CAACA,KAAM,KAAMkE,GAAI,CAACrC,EAAsB7B,KAAiB,GAEzD,CAACA,KAAM,mBAAoBkE,GAAI,CAACrC,EAAsB7B,IAAiBuD,OAAO6T,mBAC9E,CAACpX,KAAM,YAAakE,GAAI,CAACrC,EAAsB7B,IAAiBuD,OAAO6T,mBACvE,CAACpX,KAAM,YAAakE,GAAI,CAACrC,EAAsB7B,IAAiBuD,OAAO8T,mBAEvE,CAACrX,KAAM,kBAAmBkE,GAAI,CAACrC,EAAsB7B,IAAiBuD,OAAO+T,SAC7E,CAACtX,KAAM,mBAAoBkE,GAAI,CAACrC,EAAsB7B,IAAiBuD,OAAOgU,WAC9E,CAACvX,KAAM,mBAAoBkE,GAAI,CAACrC,EAAsB7B,IAAiBuD,OAAOiU,WAC9E,CAACxX,KAAM,yBAA0BkE,GAAI,CAACrC,EAAsB7B,IAAiBuD,OAAOkU,kBACpF,CAACzX,KAAM,yBAA0BkE,GAAI,CAACrC,EAAsB7B,IAAiBuD,OAAOmU,kBAEpF,CAAC1X,KAAM,MAAOkE,GAAI,CAACrC,EAAsB7B,IAAiBuD,OAAOD,MCtBvD,SAAUqU,GAAQ5V,GAI5B,OAHAA,EAAO6V,OAAS7V,EAAO6V,OAAS,IAAI9T,OAAOqS,IAC3CpU,EAAO8V,QAAU9V,EAAO8V,QAAU,IAAI/T,OAAOoT,IAC7CnV,EAAO+V,SAAW/V,EAAO+V,SAAW,IAAIhU,OAAOqT,IACxCpV,ECHJ,MAAMgW,GAAa,CAAClW,EAAsB7B,IAAiB,IAAIiC,KAGlE9B,OAAA8O,EAAA,EAAA9O,CAAkB,aAAc8B,EAAM,EAAG,GAEzC,IAAIiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GAIrC,OAHAiF,EAAM/G,OAAA+C,EAAA,EAAA/C,CAAS+G,GAGX,IAFJC,EAAMhH,OAAA+C,EAAA,EAAA/C,CAASgH,IAGJA,EAAM,GAAKD,GAAOC,EAAM,EAExBA,GAAO,GAAKD,KAAUC,EAAO,GAM/B6Q,IAHcD,KAGA,CAAClW,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAA8O,EAAA,EAAA9O,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAIiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GAIrC,OAHAiF,EAAM/G,OAAA+C,EAAA,EAAA/C,CAAS+G,GAGX,IAFJC,EAAMhH,OAAA+C,EAAA,EAAA/C,CAASgH,IAGJA,EAAM,GAAKD,GAAOC,EAAa,WAAND,GAAsB,EAAI,EAEnDC,GAAO,GAAKD,IAASC,EAAO,IAM9B8Q,IAHeD,KAGD,CAACnW,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAA8O,EAAA,EAAA9O,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAIiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GAIrC,OAHAiF,EAAM/G,OAAA+C,EAAA,EAAA/C,CAAS+G,GAGX,IAFJC,EAAMhH,OAAA+C,EAAA,EAAA/C,CAASgH,IAGJA,EAAM,GAAKD,IAAQC,EAAM,EAEzBA,GAAO,GAAKD,IAASC,EAAO,IAM9B+Q,IAHeD,KAGL,CAACpW,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,EAAG,GAEtC,MAAMiF,EAAMgI,KAAWjN,GACvB,OAAQ9B,OAAA+C,EAAA,EAAA/C,CAAS+G,KAKRiR,IAHWD,KAGD,CAACrW,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,GAEnC,MAAMiF,EAAMgI,KAAWjN,GACvB,OAAOA,EAAK4B,MAAM,GAAGuU,OAAO,CAAC1G,EAAMC,IAASxR,OAAA+C,EAAA,EAAA/C,CAASuR,GAAQvR,OAAA+C,EAAA,EAAA/C,CAASwR,GAAOxR,OAAA+C,EAAA,EAAA/C,CAAS+G,MAK7EmR,IAHWF,KAGF,CAACtW,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,GAElC,MAAMiF,EAAMgI,KAAWjN,GACvB,OAAOA,EAAK4B,MAAM,GAAGuU,OAAO,CAAC1G,EAAMC,IAASxR,OAAA+C,EAAA,EAAA/C,CAASuR,GAAQvR,OAAA+C,EAAA,EAAA/C,CAASwR,GAAOxR,OAAA+C,EAAA,EAAA/C,CAAS+G,MAK7EoR,IAHUD,KAGA,CAACxW,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,GAEnC,MAAMiF,EAAMgI,KAAWjN,GACvB,OAAOA,EAAK4B,MAAM,GAAGuU,OAAO,CAAC1G,EAAMC,IAASxR,OAAA+C,EAAA,EAAA/C,CAASuR,GAAQvR,OAAA+C,EAAA,EAAA/C,CAASwR,GAAOxR,OAAA+C,EAAA,EAAA/C,CAAS+G,MAK7EqR,IAHWD,KAGJ,CAACzW,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,GAEzBA,EAAKmW,OAAO,CAAC1G,EAAMC,IAASxR,OAAA+C,EAAA,EAAA/C,CAASuR,GAAQvR,OAAA+C,EAAA,EAAA/C,CAASwR,GAAO,KAK3D6G,IAHQD,KAGD,CAAC1W,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,GAEhC,MAAMiF,EAAMgI,KAAWjN,GAEvB,OAAoB,IADPA,EAAK4B,MAAM,GACfzB,QAEGjC,OAAA+C,EAAA,EAAA/C,CAAS+G,GAGVjF,EAAK4B,MAAM,GAAGuU,OAAO,CAAC1G,EAAMC,IAASxR,OAAA+C,EAAA,EAAA/C,CAASuR,GAAQvR,OAAA+C,EAAA,EAAA/C,CAASwR,GAAOxR,OAAA+C,EAAA,EAAA/C,CAAS+G,MAMjFuR,IAHQD,KAGD,CAAC3W,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,GAEhC,MAAMiF,EAAMgI,KAAWjN,GACvB,OAAOA,EAAK4B,MAAM,GAAGuU,OAAO,CAAC1G,EAAMC,IAASxR,OAAA+C,EAAA,EAAA/C,CAASuR,GAAQvR,OAAA+C,EAAA,EAAA/C,CAASwR,GAAOxR,OAAA+C,EAAA,EAAA/C,CAAS+G,MAK7EwR,IAHQD,KAGD,CAAC5W,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,GAEhC,MAAMiF,EAAMgI,KAAWjN,GACvB,OAAOA,EAAK4B,MAAM,GAAGuU,OAAO,CAAC1G,EAAMC,IAASgH,KAAAC,IAAAzY,OAAA+C,EAAA,EAAA/C,CAASuR,GAASvR,OAAA+C,EAAA,EAAA/C,CAASwR,IAAOxR,OAAA+C,EAAA,EAAA/C,CAAS+G,MAK9E2R,IAHQH,KAGD,CAAC7W,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,GAEhC,MAAMiF,EAAMgI,KAAWjN,GACvB,OAAOA,EAAK4B,MAAM,GAAGuU,OAAO,CAAC1G,EAAMC,IAASxR,OAAA+C,EAAA,EAAA/C,CAASuR,GAAQvR,OAAA+C,EAAA,EAAA/C,CAASwR,GAAOxR,OAAA+C,EAAA,EAAA/C,CAAS+G,MAK7E4R,IAHQD,KAGD,CAAChX,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,GAEhC,MAAMiF,EAAMgI,KAAWjN,GACvB,OAAOA,EAAK4B,MAAM,GAAGuU,OAAO,CAAC1G,EAAMC,IAASxR,OAAA+C,EAAA,EAAA/C,CAASuR,GAAQvR,OAAA+C,EAAA,EAAA/C,CAASwR,GAAOxR,OAAA+C,EAAA,EAAA/C,CAAS+G,MAK7E6R,IAHQD,KAGD,CAACjX,EAAsB7B,IAAiB,IAAIiC,IAGrD0W,KAAKxW,OAAQF,EAAK2D,IAAIvC,GAAKlD,OAAA+C,EAAA,EAAA/C,CAASkD,MAKlC2V,IAHQD,KAGD,CAAClX,EAAsB7B,IAAiB,IAAIiC,IAGrD0W,KAAKzW,OAAQD,EAAK2D,IAAIvC,GAAKlD,OAAA+C,EAAA,EAAA/C,CAASkD,MAKlC4V,IAHQD,KAGD,CAACnX,EAAsB7B,IAAiB,IAAIiC,KAG5D,MAAM8C,EAAI9C,EAAK2D,IAAIvC,GAAKlD,OAAA+C,EAAA,EAAA/C,CAASkD,IACjC,OAAO0B,EAAE3C,OAAS,EAAI2C,EAAEqT,OAAO,CAAC1G,EAAMC,IAASD,EAAOC,EAAM,GAAK5M,EAAE3C,OAASkB,MAKnE4V,IAHQD,KAGC,CAACpX,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAE9B0W,KAAKQ,MAAMhZ,OAAA+C,EAAA,EAAA/C,CAAS+O,KAAWjN,OAK7BmX,IAHUF,KAGF,CAACrX,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAE7B0W,KAAKU,KAAKlZ,OAAA+C,EAAA,EAAA/C,CAAS+O,KAAWjN,OAK5BqX,IAHSF,KAGA,CAACvX,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAE9B0W,KAAKY,MAAMpZ,OAAA+C,EAAA,EAAA/C,CAAS+O,KAAWjN,OAK7BuX,IAHUF,KAGH,CAACzX,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,EAAG,GAE5B0W,KAAKc,IAAItZ,OAAA+C,EAAA,EAAA/C,CAAS+O,KAAWjN,OAK3ByX,IAHQF,KAGA,CAAC3X,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAE7B0W,KAAKgB,KAAKxZ,OAAA+C,EAAA,EAAA/C,CAAS+O,KAAWjN,OAEnByX,KClJP,IAAAE,GAnGoB,CAAC,CAChC5Z,KAAM,KACNkE,GAAI6T,IACL,CACC/X,KAAM,eACNkE,GAAI6T,IACL,CACC/X,KAAM,KACNkE,GAAI8T,IACL,CACChY,KAAM,gBACNkE,GAAI8T,IACL,CACChY,KAAM,MACNkE,GAAI+T,IACL,CACCjY,KAAM,gBACNkE,GAAI+T,IACL,CACCjY,KAAM,WACNkE,GAAIgU,IACL,CACClY,KAAM,WACNkE,GAAIiU,IACL,CACCnY,KAAM,UACNkE,GAAImU,IACL,CACCrY,KAAM,WACNkE,GAAIoU,IACL,CACCtY,KAAM,IACNkE,GAAIqU,IACL,CACCvY,KAAM,OACNkE,GAAIqU,IACL,CACCvY,KAAM,OACNkE,GAAIqU,IACL,CACCvY,KAAM,IACNkE,GAAIsU,IACL,CACCxY,KAAM,OACNkE,GAAIsU,IACL,CACCxY,KAAM,OACNkE,GAAIsU,IACL,CACCxY,KAAM,IACNkE,GAAIuU,IACL,CACCzY,KAAM,OACNkE,GAAIuU,IACL,CACCzY,KAAM,KACNkE,GAAIwU,IACL,CACC1Y,KAAM,OACNkE,GAAIwU,IACL,CACC1Y,KAAM,IACNkE,GAAI2U,IACL,CACC7Y,KAAM,OACNkE,GAAI2U,IACL,CACC7Y,KAAM,IACNkE,GAAI4U,IACL,CACC9Y,KAAM,OACNkE,GAAI4U,IACL,CACC9Y,KAAM,OACNkE,GAAI6U,IACL,CACC/Y,KAAM,OACNkE,GAAI8U,IACL,CACChZ,KAAM,OACNkE,GAAI+U,IACL,CACCjZ,KAAM,SACNkE,GAAIgV,IACL,CACClZ,KAAM,QACNkE,GAAIkV,IACL,CACCpZ,KAAM,SACNkE,GAAIoV,IACL,CACCtZ,KAAM,OACNkE,GAAIsV,IACL,CACCxZ,KAAM,QACNkE,GAAIwV,KCmBO,IAAAG,GA/GsB,CAAC,CAClC7Z,KAAM,QACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS0W,EAAM,EAAG,GAE7B,CAAC,CAAC5S,OAAQ,QACb4S,EAAK,GACL,CAAC,CAAC5S,OAAQ,QAAS4S,EAAK,GAAI,MAGrC,CACC7W,KAAM,KACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,KAAM0W,EAAM,EAAG,GAE1B,CAAC,CAAC5S,OAAQ,QACb4S,EAAK,GACL,CAAC,CAAC5S,OAAQ,QAAS4S,EAAK,GAAI,MAGrC,CACC7W,KAAM,QACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS0W,EAAM,EAAG,GAE7B,CAAC,CAAC5S,OAAQ,QACb4S,EAAK,GACL,CAAC,CAAC5S,OAAQ,QAAS4S,EAAK,IAAK,MAGtC,CACC7W,KAAM,KACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,KAAM0W,EAAM,EAAG,GAE1B,CAAC,CAAC5S,OAAQ,QACb4S,EAAK,GACL,CAAC,CAAC5S,OAAQ,QAAS4S,EAAK,IAAK,MAGtC,CACC7W,KAAM,SACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAIzC,GADA1W,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU0W,EAAM,EAAG,GACd,iBAAZA,EAAK,GACZ,MAAM,IAAIxU,MAAM,yDAGpB,MAAO,CAAC,CAAC4B,OAAQ,QACb4S,EAAK,GACL,CAAC,CAAC5S,OAAQ,QAAS4S,EAAK,GAAIA,EAAK,OAG1C,CACC7W,KAAM,KACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAIzC,GADA1W,OAAA8O,EAAA,EAAA9O,CAAkB,KAAM0W,EAAM,EAAG,GACV,iBAAZA,EAAK,GACZ,MAAM,IAAIxU,MAAM,qDAGpB,MAAO,CAAC,CAAC4B,OAAQ,QACb4S,EAAK,GACL,CAAC,CAAC5S,OAAQ,QAAS4S,EAAK,GAAIA,EAAK,OAG1C,CACC7W,KAAM,SACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAIzC,GADA1W,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU0W,EAAM,EAAG,GACd,iBAAZA,EAAK,GACZ,MAAM,IAAIxU,MAAM,yDAGpB,MAAO,CAAC,CAAC4B,OAAQ,QACb4S,EAAK,GACL,CAAC,CAAC5S,OAAQ,QAAS4S,EAAK,IAAMA,EAAK,OAG5C,CACC7W,KAAM,KACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAIzC,GADA1W,OAAA8O,EAAA,EAAA9O,CAAkB,KAAM0W,EAAM,EAAG,GACV,iBAAZA,EAAK,GACZ,MAAM,IAAIxU,MAAM,qDAGpB,MAAO,CAAC,CAAC4B,OAAQ,QACb4S,EAAK,GACL,CAAC,CAAC5S,OAAQ,QAAS4S,EAAK,IAAMA,EAAK,QC1GhC,IAAAiD,GAHwB,GCGzB,SAAUC,GAAQhY,GAI5B,OAHAA,EAAO6V,OAAS7V,EAAO6V,OAAS,IAAI9T,OAAO8V,IAC3C7X,EAAO8V,QAAU9V,EAAO8V,QAAU,IAAI/T,OAAO+V,IAC7C9X,EAAO+V,SAAW/V,EAAO+V,SAAW,IAAIhU,OAAOgW,IACxC/X,ECVL,MAAOiY,GACT9R,YAA0B+R,GAAAC,KAAAD,OAGnB/R,QAAQiS,GACX,IAAIjW,EAkBJ,OAhBIA,EADAT,MAAMC,QAAQyW,GACT,CAAC9W,EAAM+W,KACR,IAAK,MAAMta,KAAKqa,EACZ,GAAiB,iBAANra,EAAgB,CACvB,GAAIuD,EAAEvD,GAAKsa,EAAEta,GAAI,OAAO,EACxB,GAAIuD,EAAEvD,GAAKsa,EAAEta,GAAI,OAAQ,MACtB,CACH,MAAMua,EAAgB,SAATva,EAAE,IAAiB,EAAI,EACpC,GAAIuD,EAAEvD,EAAE,IAAMsa,EAAEta,EAAE,IAAK,OAAO,EAAIua,EAClC,GAAIhX,EAAEvD,EAAE,IAAMsa,EAAEta,EAAE,IAAK,OAAQ,EAAIua,EAG3C,OAAO,GAGNF,EAEF,IAAIH,GAAME,KAAKD,KAAKpW,MAAM,GAAGyW,KAAKpW,IAGtCgE,QAAQiS,GACX,IAAIjW,EAEAA,EADAT,MAAMC,QAAQyW,GACT,CAAC9W,EAAM+W,KACR,IAAK,MAAMta,KAAKqa,EACZ,GAAI9W,EAAEvD,KAAOsa,EAAEta,GAAI,OAAO,EAE9B,OAAO,GAGNqa,EAET,MAAM5Z,EAAW,GACjB,IAAIga,EAAQ,EACR9a,EAAI,EACR,KAAOA,EAAIya,KAAKD,KAAK7X,OAAQ3C,IACnByE,EAAGgW,KAAKD,KAAKM,GAAQL,KAAKD,KAAKxa,GAAIA,EAAGya,KAAKD,QAC7C1Z,EAAE2E,KAAKgV,KAAKD,KAAKpW,MAAM0W,EAAO9a,IAC9B8a,EAAQ9a,GAIhB,OADAc,EAAE2E,KAAKgV,KAAKD,KAAKpW,MAAM0W,EAAO9a,IACvB,IAAIua,GAAMzZ,GAGd2H,WAAWhH,GACd,GAAiB,iBAANA,EACP,OAAOgZ,KAAKM,QAAQ,CAACzV,EAAG8D,EAAG8C,EAAO8O,IACzB9O,EAAQzK,GAAO,GAGrB,CACH,MAAMwZ,EAAIva,OAAO8E,OAAO,CAAC0V,MAAOzZ,EAAE0Z,aAAczJ,KAAMjQ,EAAE0Z,cAAe1Z,GACjEX,EAAI2Z,KAAKM,QAAQ,CAACzV,EAAG8D,EAAG8C,EAAO8O,IAC7BC,EAAEG,QAAUJ,EAAMrY,OACbuJ,EAAQ+O,EAAEG,QAAY,EAEpBlP,GAAS+O,EAAEC,MACbhP,EAAQ+O,EAAEC,OAAW,GAGpBhP,EAAQ+O,EAAEC,OAASD,EAAEE,cAAkB,GAmBrD,OAfsB,IAAlBra,EAAE0Z,KAAK7X,OACHsY,EAAEG,OAASta,EAAE0Z,KAAK,GAAG7X,QACrB7B,EAAE0Z,KAAK/U,KAAK,IAGZwV,EAAEC,MAAQpa,EAAE0Z,KAAK,GAAG7X,QAEpB7B,EAAE0Z,KAAKjV,QAAQ,IAGnBzE,EAAE0Z,KAAK7X,OAAS,GACZ7B,EAAE0Z,KAAK1Z,EAAE0Z,KAAK7X,OAAS,GAAGA,OAASsY,EAAEvJ,MACrC5Q,EAAE0Z,KAAK/U,KAAK,IAGb3E,GAIR2H,MAAMhE,GACT,OAAO,IAAI8V,GAAME,KAAKD,KAAKa,OAAO5W,IAK/BgE,OAAUhE,GACb,OAAOA,EAAKgW,KAAKD,KAAKrU,IAAI1B,GAAMgW,KAAKD,MAMvC,SAAUc,GAASd,GACrB,OAAO,IAAID,GAASC,GC/FjB,MAoBMe,GAAU,CAACnZ,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,EAAG,GAEtC,MAAMiF,EAAMgI,KAAWjN,GACvB,cAAeiF,GACf,IAAK,SACD,KAAO,WAAYA,GACf,MAGR,IAAK,SACD,OAAOA,EAAI9E,OAEf,MAAM,IAAIC,MAAM,0EAKP4Y,IAHWD,KAGH,CAACnZ,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAMiF,EAAMgI,KAAWjN,GACvB,GAAmB,iBAARiF,EACP,OAAOA,EAAIkE,OAEf,MAAM,IAAI/I,MAAM,+DAKP6Y,IAHSD,KAGG,CAACpZ,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAMiF,EAAMgI,KAAWjN,GACvB,GAAmB,iBAARiF,EACP,OAAOA,EAAIiU,WAEf,MAAM,IAAI9Y,MAAM,mEAKP+Y,IAHaF,KAGD,CAACrZ,EAAsB7B,IAAiB,IAAIiC,KAGjE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAMiF,EAAMgI,KAAWjN,GACvB,GAAmB,iBAARiF,EACP,OAAOA,EAAImU,YAEf,MAAM,IAAIhZ,MAAM,mEAKPiZ,IAHaF,KAGC,CAACvZ,EAAsB7B,IAAiB,IAAIiC,KAKnE,GAFA9B,OAAA8O,EAAA,EAAA9O,CAAkB,cAAe8B,EAAM,EAAG,GAEnB,iBAAZA,EAAK,IAAsC,iBAAZA,EAAK,IAAsC,iBAAZA,EAAK,GAC1E,OAAOA,EAAK,GAAGkK,MAAMlK,EAAK,IAAIsH,KAAKtH,EAAK,IAE5C,MAAM,IAAII,MAAM,mFAKPkZ,IAHeD,KAGN,CAACzZ,EAAsB7B,IAAiB,IAAIiC,KAK9D,GAFA9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAEd,iBAAZA,EAAK,IAAsC,iBAAZA,EAAK,GAC3C,OAAOA,EAAK,GAAGkK,MAAMlK,EAAK,IAE9B,MAAM,IAAII,MAAM,uEAKPmZ,IAHUD,KAGF,CAAC1Z,EAAsB7B,IAAiB,IAAIiC,KAMzD,GAHJ9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEzBwB,MAAMC,QAAQzB,EAAK,IACtBA,EAAKG,OAAS,EAAG,CACjB,GAAuB,iBAAZH,EAAK,GACZ,OAAOA,EAAK,GAAGsH,KAAKtH,EAAK,IAE7B,MAAM,IAAII,MAAM,6DAEhB,OAAOJ,EAAK,GAAGsH,SAQdkS,IAHSD,KAGC,CAAC3Z,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,GAEnC,MAAMiF,EAAMgI,KAAWjN,GACvB,cAAeiF,GACf,IAAK,SACD,KAAO,WAAYA,GACf,MAGR,IAAK,SACD,OAAOA,EAAIpD,UAAU7B,EAAK4B,MAAM,IAEpC,MAAM,IAAIxB,MAAM,2EAKPqZ,IAHWD,KAGF,CAAC5Z,EAAsB7B,IAAiB,IAAIiC,KAM9D,GAFA9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAEjB,IAAhBA,EAAKG,SACkB,iBAAZH,EAAK,IAAmBwB,MAAMC,QAAQzB,EAAK,KAClD,OAAOA,EAAK,GAAG4B,MAAM1D,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,IAAK9B,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,KAG9D,GAAoB,IAAhBA,EAAKG,SACkB,iBAAZH,EAAK,IAAmBwB,MAAMC,QAAQzB,EAAK,KAClD,OAAOA,EAAK,GAAG4B,MAAM1D,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,KAG3C,MAAM,IAAII,kDAAkDJ,EAAKG,OAAS,gCAKjEuZ,IAHUD,KAGH,CAAC7Z,EAAsB7B,IAAiB,IAAIiC,KAK5D,GAFA9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,EAAG,GAEZ,iBAAZA,EAAK,IAAmBwB,MAAMC,QAAQzB,EAAK,IAClD,OAAOA,EAAK,GAAG4B,MAAM,EAAG1D,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,KAE1C,MAAM,IAAII,MAAM,uEAKPuZ,IAHQD,KAGA,CAAC9Z,EAAsB7B,IAAiB,IAAIiC,KAK7D,GAFA9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEb,iBAAZA,EAAK,IAAmBwB,MAAMC,QAAQzB,EAAK,IAAK,CACvD,MAAMf,GAAKf,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,IACzB,OAAOA,EAAK,GAAG4B,MAAM3C,GAAK,GAAKqC,OAAOmP,MAAMxR,GAAKe,EAAK,GAAGG,OAASlB,GAEtE,MAAM,IAAImB,MAAM,wEAKPwZ,IAHSD,KAGD,CAAC/Z,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEzBwB,MAAMC,QAAQzB,EAAK,IAC1BA,EAAK,GAAGiD,KAAKjD,EAAK,IACXA,EAAK,KAOP6Z,IAHSD,KAGF,CAACha,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,EAAG,GAExBwB,MAAMC,QAAQzB,EAAK,IAE1B,OADUA,EAAK,GAAGkD,QASb4W,IAJQD,KAIA,CAACja,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,OAAOkF,EAAID,KAMF8U,IAHSD,KAGE,CAACla,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAA8O,EAAA,EAAA9O,CAAkB,WAAY8B,EAAM,EAAG,GAEvC,MAAMiF,EAAMgI,KAAWjN,GACvB,GAAIwB,MAAMC,QAAQwD,GACd,OAAOA,EAAIrD,MAAM,GAAG4C,UAExB,MAAM,IAAIpE,MAAM,iEAKP4Z,IAHYD,KAGU,CAACna,EAAsB7B,IAAiB,IAAIiC,KAG3E9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAMiF,EAAMgI,KAAWjN,GACvB,GAAIwB,MAAMC,QAAQwD,GACd,OAAOA,EAAIT,UAEf,MAAM,IAAIpE,MAAM,kEAKP6Z,IAHuBD,KAGf,CAACpa,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,GAAIwB,MAAMC,QAAQwD,GACd,OAAOA,EAAIiV,KAAKhV,GAEpB,MAAM,IAAI9E,MAAM,8DAKP+Z,IAHSF,KAGC,CAACra,EAAsB7B,IAAiB,IAAIiC,KAG/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,EAAG,GAEtC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,GAAIwB,MAAMC,QAAQwD,GACd,OAAOA,EAAI4T,OAAO3T,GAEtB,MAAM,IAAI9E,MAAM,gEAKPga,IAHWD,KAGJ,CAACva,EAAsB7B,IAAiB,IAAIiC,KAG5D9B,OAAA8O,EAAA,EAAA9O,CAAkB,OAAQ8B,EAAM,EAAG,GAEnC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,GAAIwB,MAAMC,QAAQwD,GACd,OAAOA,EAAItB,IAAIuB,GAEnB,MAAM,IAAI9E,MAAM,6DAKPia,IAHQD,KAGE,CAACxa,EAAsB7B,IAAiB,IAAIiC,KAI/D9B,OAAA8O,EAAA,EAAA9O,CAAkB,UAAW8B,EAAM,EAAG,GAEtC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,GAAIwB,MAAMC,QAAQwD,GACd,OAAIjF,EAAKG,OAAS,EACP8E,EAAIkR,OAAOjR,GAEXD,EAAIkR,OAAOjR,EAAKlF,EAAK,IAGpC,MAAM,IAAII,MAAM,gEAKPka,IAHWD,KAGO,CAACza,EAAsB7B,IAAiB,IAAIiC,KAIvE9B,OAAA8O,EAAA,EAAA9O,CAAkB,kBAAmB8B,EAAM,EAAG,GAE9C,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,GAAIwB,MAAMC,QAAQwD,GACd,OAAIjF,EAAKG,OAAS,EACP8E,EAAIsV,YAAYrV,GAEhBD,EAAIsV,YAAYrV,EAAKlF,EAAK,IAGzC,MAAM,IAAII,MAAM,wEAKPoa,IAHmBF,KAGX,CAAC1a,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,GAAIwB,MAAMC,QAAQwD,GACd,OAAOA,EAAIrD,MAAM,GAAGyW,KAAKnT,GAE7B,MAAM,IAAI9E,MAAM,8DAKPqa,IAHSD,KAGU,CAAC5a,EAAsB7B,IAAiB,IAAIiC,KAGxE9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAErC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,GAAIwB,MAAMC,QAAQwD,GACd,OAAOA,EAAIoT,KAAKnT,GAEpB,MAAM,IAAI9E,MAAM,+DAKPsa,IAHoBD,KAGN,CAAC7a,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAA8O,EAAA,EAAA9O,CAAkB,eAAgB8B,EAAM,EAAG,GAE3C,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,IAAMwB,MAAMC,QAAQyD,GAChB,MAAM,IAAI9E,MAAM,mEAGpB,OAAO0Y,GAAM5T,GAAcyV,WAAW1V,GAAK2V,WAKlCC,IAHeH,KAGJ,CAAC9a,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,IAAMwB,MAAMC,QAAQyD,GAChB,MAAM,IAAI9E,MAAM,gEAGpB,OAAO0Y,GAAM5T,GAAcqT,QAAQtT,GAAK2V,WAK/BE,IAHYD,KAGD,CAACjb,EAAsB7B,IAAiB,IAAIiC,KAGhE9B,OAAA8O,EAAA,EAAA9O,CAAkB,YAAa8B,EAAM,EAAG,GAExC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,IAAMwB,MAAMC,QAAQyD,GAChB,MAAM,IAAI9E,MAAM,gEAGpB,OAAO0Y,GAAM5T,GAAc6V,QAAQ9V,GAAK2V,WAK/BI,IAHYF,KAGH,CAAClb,EAAsB7B,IAAiB,IAAIiC,KAG9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAErC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,GAAuB,mBAAZA,EAAK,GACZ,MAAM,IAAII,MAAM,gEAEpB,IAAMoB,MAAMC,QAAQyD,GAChB,MAAM,IAAI9E,MAAM,6DAGpB,OAAO0Y,GAAM5T,GAAckB,MAAMnB,GAAK2V,WAEnBI,KC5VR,IAAAC,GA1FoB,CAAC,CAChCld,KAAM,SACNkE,GDGkB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAI9D9B,OAAA8O,EAAA,EAAA9O,CAAkB,SAAU8B,EAAM,EAAG,GAErC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACjCsY,EAAQpa,OAAA+C,EAAA,EAAA/C,CAAS+G,IAAQ,EACzBiW,EAAOhd,OAAA+C,EAAA,EAAA/C,CAASgH,IAAQ,EAExBiW,EAAQnb,EAAKG,OAAS,GAAIjC,OAAA+C,EAAA,EAAA/C,CAAS8B,EAAK,MAAkBsY,GAAS4C,EAAO,GAAK,GAC/Ejc,EAAIyX,KAAKgB,KAAKwD,EAAO5C,GAAS5B,KAAKgB,KAAKyD,KAAU,EACnDzE,KAAKQ,MAAOR,KAAKc,IAAI0D,EAAO5C,GAAS5B,KAAKc,IAAI2D,IAAU,EAAK,EAIlE,OAFAvb,EAAMC,WAAaZ,EACnBf,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAO,GACT4B,MAAM4Z,KAAK,CAACjb,OAAQlB,GAAI,CAACmC,EAAG5D,IAAM8a,EAAQ9a,EAAI2d,KClBtD,CACCpd,KAAM,UACNkE,GAAI8W,IACL,CACChb,KAAM,QACNkE,GAAI+W,IACL,CACCjb,KAAM,aACNkE,GAAIgX,IACL,CACClb,KAAM,aACNkE,GAAIkX,IACL,CACCpb,KAAM,eACNkE,GAAIoX,IACL,CACCtb,KAAM,SACNkE,GAAIqX,IACL,CACCvb,KAAM,QACNkE,GAAIsX,IACL,CACCxb,KAAM,UACNkE,GAAIuX,IACL,CACCzb,KAAM,SACNkE,GAAIwX,IACL,CACC1b,KAAM,OACNkE,GAAIyX,IACL,CACC3b,KAAM,QACNkE,GAAI0X,IACL,CACC5b,KAAM,QACNkE,GAAI2X,IACL,CACC7b,KAAM,OACNkE,GAAI4X,IACL,CACC9b,KAAM,QACNkE,GAAI6X,IACL,CACC/b,KAAM,WACNkE,GAAI8X,IACL,CACChc,KAAM,YACNkE,GAAI+X,IACL,CACCjc,KAAM,QACNkE,GAAIgY,IACL,CACClc,KAAM,UACNkE,GAAIkY,IACL,CACCpc,KAAM,OACNkE,GAAImY,IACL,CACCrc,KAAM,UACNkE,GAAIoY,IACL,CACCtc,KAAM,oBACNkE,GAAIoY,IACL,CACCtc,KAAM,oBACNkE,GAAIqY,IACL,CACCvc,KAAM,QACNkE,GAAIuY,IACL,CACCzc,KAAM,SACNkE,GAAIwY,IACL,CACC1c,KAAM,eACNkE,GAAIyY,IACL,CACC3c,KAAM,YACNkE,GAAI4Y,IACL,CACC9c,KAAM,YACNkE,GAAI6Y,IACL,CACC/c,KAAM,SACNkE,GAAI+Y,KCpEO,IAAAK,GAjBsB,CAAC,CAClCtd,KAAM,KACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAIzC,IADc1W,OAAAiO,EAAA,EAAAjO,CAAS0W,EAAK,GAAI,KAE5B,MAAM,IAAIxU,MAAM,sDAEpB,MAAO,CAAC,CAAC4B,OAAQ,SACb4S,EAAK,GACLA,EAAK,OCVF,IAAA0G,GAHwB,GCGzB,SAAUC,GAAQzb,GAI5B,OAHAA,EAAO6V,OAAS7V,EAAO6V,OAAS,IAAI9T,OAAOoZ,IAC3Cnb,EAAO8V,QAAU9V,EAAO8V,QAAU,IAAI/T,OAAOwZ,IAC7Cvb,EAAO+V,SAAW/V,EAAO+V,SAAW,IAAIhU,OAAOyZ,IACxCxb,ECIJ,MAsDM0b,GAAY,CAAC5b,EAAsB7B,IAAiB,IAAIiC,KAGjE,MAAM1B,EAAS,GACf,IAAK,MAAM8C,KAAKpB,EAAM,CAClB,KAAIwB,MAAMC,QAAQL,IAAM,EAAIA,EAAEjB,QA8I1B,MAAM,IAAIC,MAAM,8DA9IkB,CAClC,MAAM4D,EAAM9F,OAAAiO,EAAA,EAAAjO,CAASkD,EAAE,IACjB4T,EACFhR,EAAMA,EAAIhC,OACV8E,OAAO5I,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,EAAE,KAC7B,OAAQ4T,GACR,IAAK,QAEG,GAAiB,IAAb5T,EAAEjB,OAGF7B,EAAE0W,GAAW,QACV,GAAI5T,EAAEjB,QAAU,EAAG,CAItB,MAAMsb,EAAiB,GACvB,IAAK,MAAMlc,KAAK6B,EAAEQ,MAAM,GACpB,GAAIJ,MAAMC,QAAQlC,IAAM,EAAIA,EAAEY,OAC1Bsb,EAAO3U,OAAO5I,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOL,EAAE,MAAQuH,OAAO5I,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOL,EAAE,UAC9D,GAAiB,iBAANA,EACd,IAAK,MAAMoF,KAAKpF,EAAE2K,MAAM,KAAM,CAC1B,MAAMwR,EAAU,4BAA4BtI,KAAKzO,GAC7C+W,IACAD,EAAOC,EAAQ,IAAMA,EAAQ,IAK7Cpd,EAAE0W,GAAWyG,EAGrB,MACJ,IAAK,QAAS,IAAK,aAEX,GAAiB,IAAbra,EAAEjB,OAGF7B,EAAE0W,GAAW,QACV,GAAI5T,EAAEjB,QAAU,EAAG,CAItB,IAAIwb,EAAiB,GACrB,IAAK,MAAM9d,KAAKuD,EAAEQ,MAAM,GAChBJ,MAAMC,QAAQ5D,GACd8d,EAAUA,EAAQ9Z,OAAOhE,EAAE8F,IAAIiY,GAAK1d,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOgc,KAChC,iBAAN/d,IACd8d,EAAUA,EAAQ9Z,OAAOhE,EAAEqM,MAAM,OAGzC,MAAM2R,EAAe,GACf5Z,EAA0Ba,GAAMA,EACjCgZ,QAAQje,GAAMA,aACX,EACC2D,MAAMC,QAAQ5D,GAAKoE,EAAGpE,GAAKge,EAAG5Y,KAAK6D,OAAOjJ,KACnDoE,EAAG0Z,GACHrd,EAAE0W,GAAW6G,EAGrB,MACJ,IAAK,YAEG,GAAiB,IAAbza,EAAEjB,OAGF7B,EAAE0W,GAAW,QACV,GAAI5T,EAAEjB,QAAU,EAAG,CAItB,IAAIwb,EAAkB,GACtB,IAAK,MAAM9d,KAAKuD,EAAEQ,MAAM,GAAI,CACxB,IAAIma,EAAW,GACf,GAAIva,MAAMC,QAAQ5D,GAAI,CAClB,MAAMge,EAAe,GACf5Z,EAA0Ba,GAAMA,EACjCa,IAAIiY,GAAK1d,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOgc,IACzBE,QAAQF,GAAMA,aACX,EACCpa,MAAMC,QAAQma,GAAK3Z,EAAG2Z,GAAKC,EAAG5Y,KAAK6D,OAAO8U,KACnD3Z,EAAGpE,GACHke,EAAWF,EAAGvU,KAAK,SACC,iBAANzJ,IACdke,EAAWle,GAEX,EAAI8d,EAAQxb,OAAQwb,GAAW,IAAMI,EACpCJ,EAAUI,EAEnBzd,EAAE0W,GAAW2G,EAGrB,MACJ,IAAK,0BAEoB,IAAbva,EAAEjB,OACF7B,EAAE0W,GAAW,CAACgH,OAAQ,IACf5a,EAAEjB,QAAU,EACnB7B,EAAE0W,GAAW,CAACgH,OAAQ9d,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,EAAE,KAExC9C,EAAE0W,GAAW,CAACgH,OACV9d,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAQ,CAAC,CAACoC,OAAQpC,EAAME,OAAO4B,cAAckT,OACrD/S,OAAOT,EAAEQ,MAAM,MAI5B,MACJ,IAAK,eAEoB,IAAbR,EAAEjB,OACF7B,EAAE0W,GAAW,CAACiH,OAAQ,IACf7a,EAAEjB,QAAU,EACnB7B,EAAE0W,GAAW,CAACiH,OAAQ/d,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,EAAE,KAExC9C,EAAE0W,GAAW,CAACiH,OACV/d,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAQ,CAAC,CAACoC,OAAQpC,EAAME,OAAO4B,cAAckT,OACrD/S,OAAOT,EAAEQ,MAAM,MAI5B,MACJ,QAEyB,IAAbR,EAAEjB,OAGF7B,EAAE0W,IAAW,EACO,IAAb5T,EAAEjB,OAGT7B,EAAE0W,GAAW9W,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOwB,EAAE,IAI/B9C,EAAE0W,GACE9W,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAQ,CAAC,CAACoC,OAAQpC,EAAME,OAAO4B,cAAckT,OACrD/S,OAAOT,EAAEQ,MAAM,OASxC,OAAOtD,GAIX,SAAS4d,GAAiBtc,KAAyBI,GAC/C,IAAImc,EAAWnc,EACXoc,EAAa,GACjB,GAAI,EAAIpc,EAAKG,QAAUqB,MAAMC,QAAQzB,EAAK,IAAK,CAC/B9B,OAAAiO,EAAA,EAAAjO,CAAS8B,EAAK,GAAG,GAAI,OAG7Boc,EAAQZ,GAAU5b,EAAO,GAAjB4b,IAAwBxb,EAAK,GAAG4B,MAAM,IAC9Cua,EAAWA,EAASva,MAAM,IAGlC,MAAO,CAACwa,QAAOD,YAIZ,MAAME,GAAkB,CAACzc,EAAsB7B,IAAiB,IAAIiC,KACvE,MAAMoc,MAACA,EAADD,SAAQA,GAAYD,GAAiBtc,KAAUI,GACrD,OAAQJ,EAAME,OAAOwc,IAAYve,EAAMqe,KAAUD,IAIxCI,GAAoBC,GAAmB,CAAC5c,EAAsB7B,IAAiB,IAAIiC,KAC5F,MAAMoc,MAACA,EAADD,SAAQA,GAAYD,GAAiBtc,KAAUI,GACrD,OAAQJ,EAAME,OAAOwc,IAAYE,EAAWJ,KAAUD,ICxO3C,IAAAM,GAToB,CAAC,CAChC1e,KAAM,SACNkE,GDQuB,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAInE9B,OAAA8O,EAAA,EAAA9O,CAAkB,cAAe8B,EAAM,GAEvC,MAAMiF,IAACA,EAADC,IAAMA,GAAOkI,KAAoBpN,GACvC,IAAI1B,EAAa,GASjB,OARI+Q,EAAUpK,KACN,EAAIjF,EAAKG,QACT7B,EAAE2E,KAAK,CAACjB,OAAQpC,EAAME,OAAO4B,cAAc8K,aAAcxM,EAAK4B,MAAM,IACpEtD,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOtB,IAEpBA,EAAIJ,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOsF,IAGrB5G,ICvBR,CACCP,KAAM,UACNkE,GD0B0B,CAACrC,EAAsB7B,IAAiB,IAAIiC,KAGtE9B,OAAA8O,EAAA,EAAA9O,CAAkB,iBAAkB8B,EAAM,GAE1C,MAAMiF,EAAMgI,KAAWjN,GACjB1B,EAAe,GACrB,IAAIkD,MAAMC,QAAQwD,GAiBd,MAAM,IAAI7E,MAAM,mEAhBhB,IAAK,IAAI5C,EAAI,EAAGA,EAAIyH,EAAI9E,OAAQ3C,IAAK,CACjC,MAAM4D,EAAI6D,EAAIzH,GACRmH,EAAIoJ,EAASnO,EAATmO,EAAsB,GAAM,EAAM,CACxC,CAAC,QAAS7P,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,IACvB,CAAC,SAAU5D,GACX,CAAC,SAAUU,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOqF,IACxB,CAAC,UAAW/G,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAO1B,OAAA+C,EAAA,EAAA/C,CAAS0B,GAAOyC,YACvCrC,EAAK4B,MAAM,IAEb,EAAI5B,EAAKG,QAAUqB,MAAMC,QAAQkD,GACjCrG,EAAE2E,QAAQ0B,GAEVrG,EAAE2E,KAAK0B,GAOnB,OAAOzG,OAAA+C,EAAA,EAAA/C,CAAS0B,EACX,CAAC,CAACoC,OAAQpC,EAAME,OAAO4B,cAAc8K,WACrC3K,OAAOvD,EAAEqF,IAAIiY,GAAK,CAAC,CAAC5Z,OAAQpC,EAAME,OAAO4B,cAAcuC,OAAQ2X,SE7BzD,IAAAc,GA9BsB,CAAC,CAClC3e,KAAM,IACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAClC1W,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,IAEzB,CACC7W,KAAM,OACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CACH,CAAC5S,OAAQ,UACT4S,EAAK,MACDA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,MAGjD,CACCrD,KAAM,QACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,GAGlC,CACH,CAAC5S,OAAQ,WACT4S,EAAK,MACDA,EAAKhT,MAAM,GAAG+B,IAAIvC,GAAKlD,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOwB,OCvBrC,IAAAub,GAHwB,GCOzB,SAAUC,GAAQ9c,EAAwB+c,GACpD/c,EAAO6V,OAAS7V,EAAO6V,OAAS,IAAI9T,OAAO4a,IAC3C3c,EAAO8V,QAAU9V,EAAO8V,QAAU,IAAI/T,OAAO6a,IAC7C5c,EAAO+V,SAAW/V,EAAO+V,SAAW,IAAIhU,OAAO8a,IAE/C,MAAMG,EACF5e,OAAO4J,QAAQ+U,EAAQC,YACtBnZ,IAAIvC,IAAC,CAAMrD,KAAMqD,EAAE,GAAIa,GAAIsa,GAAiBnb,EAAE,OAWnD,OATAtB,EAAO6V,MAAQ7V,EAAO6V,MAAM9T,OACxB,CAAC9D,KAAM+B,EAAO4B,cAAc8K,SAAUvK,GAAIsa,GAAiBM,EAAQE,iBAChED,GAGPhd,EAAO8E,2BAA6ByX,GACpCvc,EAAOwc,IAAMO,EAAQP,IACrBxc,EAAOkd,YAAcH,EAAQE,YAEtBjd,ECrBJ,MAAMmd,GAAc,CAACrd,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAA8O,EAAA,EAAA9O,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAIkd,EAAwBld,EAAK,GAYjC,MAXuB,iBAAZkd,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAE9BA,EAAUA,EAAQC,KAAKxY,IACnB,IAEI,OADAkK,EAAOjP,EAAPiP,CAAkB7O,EAAK,GAAI2E,GACpBA,EACT,MAAOmQ,GACL,OAAOsI,QAAQE,OAAOxI,OAUrByI,IAJeN,GAAY,MAIb,CAACrd,EAAsB7B,IAAiB,IAAIiC,KAGnE9B,OAAA8O,EAAA,EAAA9O,CAAkB,cAAe8B,EAAM,EAAG,GAE1C,IAAIkd,EAAwBld,EAAK,GAYjC,MAXuB,iBAAZkd,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAE9BA,EAAUA,EAAQC,KAAKxY,IACnB,IAEI,OADAmK,EAAOlP,EAAPkP,CAAkB9O,EAAK,GAAI2E,GACpBA,EACT,MAAOmQ,GACL,OAAOsI,QAAQE,OAAOxI,QASrB0I,IAHeD,GAAY,MAGnB,CAAC3d,EAAsB7B,IAAiB,IAAIiC,KAG7D9B,OAAA8O,EAAA,EAAA9O,CAAkB,QAAS8B,EAAM,EAAG,GAEpC,IAAIkd,EAAwBld,EAAK,GAIjC,GAHuB,iBAAZkd,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAEP,mBAAZld,EAAK,GACZkd,EAAUA,EAAQC,KAAKnd,EAAK,GAAIA,EAAK,QAClC,CACH,GAAuB,mBAAZA,EAAK,GACZ,MAAM,IAAII,MAAM,6DAEpB8c,EAAUA,EAAQC,KAAKnd,EAAK,IAEhC,OAAOkd,IAKEO,IAHSD,KAGK,CAAC5d,EAAsB7B,IAAiB,IAAIiC,KAGnE,MAAM0d,EAAgC1d,EAAK4B,MAAM,GACjD,IAAK,IAAIpE,EAAI,EAAGA,EAAIkgB,EAASvd,OAAQ3C,IACN,iBAAhBkgB,EAASlgB,IAAwD,mBAA7BkgB,EAASlgB,GAAW2f,OAC/DO,EAASlgB,GAAK4f,QAAQC,QAAQK,EAASlgB,KAG/C,OAAO4f,QAAQO,IAAID,KAKVE,IAHeH,KAGD,CAAC7d,EAAsB7B,IAAiB,IAAIiC,KAGnE,MAAM0d,EAAgC1d,EAAK4B,MAAM,GACjD,IAAK,IAAIpE,EAAI,EAAGA,EAAIkgB,EAASvd,OAAQ3C,IACN,iBAAhBkgB,EAASlgB,IAAwD,mBAA7BkgB,EAASlgB,GAAW2f,OAC/DO,EAASlgB,GAAK4f,QAAQC,QAAQK,EAASlgB,KAO/C,MAAMqgB,EAAWve,GAAoB,IAAI8d,QAAQ,CAACU,EAAKC,IAAQze,EAAE6d,KAAKY,EAAKD,IAG3E,MAFiBE,IAA4BH,EAAOT,QAAQO,IAAIK,EAAGra,IAAIka,KAEhEI,CAAQP,KAKNQ,IAHeN,KAGA,CAAChe,EAAsB7B,IAAiB,IAAIiC,KAIpE9B,OAAA8O,EAAA,EAAA9O,CAAkB,eAAgB8B,EAAM,GAExC,IAAIkd,EAAwBld,EAAK,GACV,iBAAZkd,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAE9B,MAAMiB,EAAUne,EAAK4B,MAAM,GAC3B,IAAK,IAAIpE,EAAI,EAAGA,EAAI2gB,EAAQhe,OAAQ3C,IAChC,GAA0B,mBAAf2gB,EAAQ3gB,GAAmB,CAClC,MAAMmH,EAAIwZ,EAAQ3gB,GAClB2gB,EAAQ3gB,GAAK,KAAMmH,GAG3B,IAAIrF,EAAI4d,EACR,IAAK,MAAMzf,KAAK0gB,EACZ7e,EAAIA,EAAE6d,KAAK1f,GAEf,OAAO6B,IAKE8e,IAHgBF,KAGD,CAACte,EAAsB7B,IAAiB,IAAIiC,KAIpE9B,OAAA8O,EAAA,EAAA9O,CAAkB,eAAgB8B,EAAM,GAExC,IAAIkd,EAAwBld,EAAK,GACV,iBAAZkd,GAAgD,mBAAjBA,EAAQC,OAC9CD,EAAUE,QAAQC,QAAQH,IAE9B,MAAMiB,EAAUne,EAAK4B,MAAM,GAC3B,IAAK,IAAIpE,EAAI,EAAGA,EAAI2gB,EAAQhe,OAAQ3C,IAChC,GAA0B,mBAAf2gB,EAAQ3gB,GAAmB,CAClC,MAAMmH,EAAIwZ,EAAQ3gB,GAClB2gB,EAAQ3gB,GAAK,KAAMmH,GAI3B,MAAM0Z,EAAY,IAAI7c,MAAM2c,EAAQhe,QAC9Bme,EAAY,IAAI9c,MAAM2c,EAAQhe,QAE9Boe,EAA0B,GAChC,IAAK,IAAI/gB,EAAI,EAAGA,EAAI2gB,EAAQhe,OAAQ3C,IAChC+gB,EAAGtb,KAAK,IAAIma,QAAa,CAACC,EAAcC,KACpCe,EAAU7gB,GAAMmH,KACZ,IAAI6Z,EAAmBL,EAAQ3gB,GAAGmH,GAChB,iBAAP6Z,GAAsC,mBAAZA,EAAGrB,OACpCqB,EAAKpB,QAAQC,QAAQmB,IAGzBA,EACCrB,KAAK/b,GAAKic,EAAQjc,IAClBqd,MAAM3J,GAAKwI,EAAOxI,MAEvBwJ,EAAU9gB,GAAK8f,KASvB,OALAJ,EAAQC,KACJxY,GAAK0Z,EAAUvC,QAAQ4C,GAAKA,EAAE/Z,IAC9BmQ,GAAKwJ,EAAUxC,QAAQ4C,GAAKA,EAAE5J,KAG3ByJ,IAEkBH,KC1Jd,IAAAO,GAxBoB,CAAC,CAChC5gB,KAAM,eACNkE,GAAIgb,IACL,CACClf,KAAM,eACNkE,GAAIsb,IACL,CACCxf,KAAM,QACNkE,GAAIub,IACL,CACCzf,KAAM,eACNkE,GAAIwb,IACL,CACC1f,KAAM,eACNkE,GAAI2b,IACL,CACC7f,KAAM,gBACNkE,GAAIic,IACL,CACCngB,KAAM,gBACNkE,GAAImc,KCSO,IAAAQ,GA3BsB,CAAC,CAClC7gB,KAAM,aACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,aAAc0W,EAAM,EAAG,GAElC,CAAC,CAAC5S,OAAQ,gBACb9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAClBA,EAAK,MAGd,CACC7W,KAAM,aACNkE,GAAI,CAACrC,EAAsB7B,IAAkB6W,IAGzC1W,OAAA8O,EAAA,EAAA9O,CAAkB,aAAc0W,EAAM,EAAG,GAElC,CAAC,CAAC5S,OAAQ,gBACb9D,OAAAiO,EAAA,EAAAjO,CAAM0B,EAAOgV,EAAK,IAClBA,EAAK,OCrBF,IAAAiK,GAHwB,GCGzB,SAAUC,GAAQhf,GAI5B,OAHAA,EAAO6V,OAAS7V,EAAO6V,OAAS,IAAI9T,OAAO8c,IAC3C7e,EAAO8V,QAAU9V,EAAO8V,QAAU,IAAI/T,OAAO+c,IAC7C9e,EAAO+V,SAAW/V,EAAO+V,SAAW,IAAIhU,OAAOgd,IACxC/e,4QCSJ,MAAMif,GAAwC,CACjD1a,KAAM,QACNJ,MAAO,SACPC,UAAW,aACXE,QAAS,WACTG,OAAQ,UACR5C,OAAQ,UAERsD,IAAK,OACLC,IAAK,OACL8Z,KAAM,QACNC,KAAM,QACNC,GAAI,MACJtK,KAAM,QAEN9Q,IAAK,aACLqb,OAAQ,UACR3b,KAAM,QACN4b,MAAO,SAEP7b,GAAI,MACJ8b,KAAM,QAENC,MAAO,SACPC,QAAS,YACT1b,MAAO,SACP2b,QAAS,YAETnhB,IAAK,OACLohB,OAAQ,gBACRC,KAAM,cACN3b,IAAK,OACLpG,KAAM,QAENiL,IAAK,OACL+W,IAAK,OACLC,GAAI,MAEJva,SAAU,aACVwa,OAAQ,UACRtX,MAAO,SACPkW,MAAO,SAEPjS,SAAU,YAGDsT,GAAgC,CACzCld,yBAAyB,EACzBmd,gBAAgB,EAChBzT,eAAe,EACfD,cAAc,EACd9K,cAAc,EACduJ,kBAAkB,EAClB4B,6BAA6B,EAC7B3E,4BAA4B,EAC5B8E,eAAe,EACf7H,mBAAmB,EACnBgb,oBAAoB,EACpBjgB,aAAc,EAEd2B,cAAeqd,GACflJ,QAAS,GACTD,OAAQ,GACRD,MAAO,IAKX,SAASsK,GAAUngB,EAAwBogB,EAActW,EAAwCK,GAC7F,MAAO,CACHL,QAA4B,iBAAZA,EAAuB,CAACA,GAAWA,EACnDK,OAAQA,GAAU,GAElBP,MAAO,EACPC,IAAK,EACLF,KAAM,EAEN5J,UAAW,EAEXsC,OAAQ,CAAC,CAACI,cAAc,EAAOF,MAAO6d,IAEtCne,SAAU,IAAIyF,IAAyB1H,EAAO8V,OAAOjS,IAAIvC,GAAK,CAACA,EAAErD,KAAMqD,KACvEsD,QAAS,IAAI8C,IAAwB1H,EAAO6V,MAAMhS,IAAIvC,GAAK,CAACA,EAAErD,KAAMqD,KACpEsB,UAAW,IAAI8E,IAA0B1H,EAAO+V,QAAQlS,IAAIvC,GAAK,CAACA,EAAErD,KAAMqD,KAE1EtB,UAKR,SAASqgB,GAAWvgB,EAAsBgK,EAAwCK,GAO9E,OANArK,EAAMgK,QAA6B,iBAAZA,EAAuB,CAACA,GAAWA,EAC1DhK,EAAMqK,OAASA,GAAU,GACzBrK,EAAM8J,MAAQ,EACd9J,EAAM+J,IAAM,EACZ/J,EAAM6J,KAAO,EACb7J,EAAMC,UAAY,EACXD,EAML,SAAUwgB,GAAYC,GACxB,IAAIvgB,EAASugB,GAAQniB,OAAO8E,OAAO,GAAI8c,IACnCtd,EAAmB,GACnB8d,EAAqB,GAEzB,MAAMlN,EAAO,CAACxT,EAAsBL,KAChC,GAAIO,EAAOigB,eACP,IAAK,IAAIviB,EAAI,EAAGA,EAAI+B,EAAEY,OAAQ3C,IAC1B+B,EAAE/B,GAAKU,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOL,EAAE/B,IAIjC,OAAIsC,EAAOkgB,mBACa,IAAbzgB,EAAEY,OAAeZ,EAAE,GAAKA,EAExBA,EAAEA,EAAEY,OAAS,IAItBue,EAA4B,CAAC9U,KAA2CK,KAC1E,MAAMrK,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAcoH,EAASK,GACzE,OAAOmJ,EAAKxT,EAAO0gB,EAAQze,OAAOiL,EAAMlN,MAgD5C,OA7CA8e,EAAE6B,YAAepU,KACb,MAAMvM,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAc,IAChE,OAAO4Q,EAAKxT,EAAO0gB,EAAQze,OAAOsK,MAErCuS,EAAU8B,KAAO,MACd,MAAM5gB,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAc,IAChE4Q,EAAKxT,EAAO0gB,EAAQ1e,MAAM,IAC1B,MAAM6e,EAAgC,CAAC7W,KAA2CK,KAC9EkW,GAAWvgB,EAAOgK,EAASK,GACpBmJ,EAAKxT,EAAOkN,EAAMlN,KAG7B,OADC6gB,EAAcC,KAAOD,EACfA,IAEX/B,EAAEiC,WAAcT,KACZ1d,EAActE,OAAO8E,OAAO,GAAIkd,GAAW,IACpCxB,IAEXA,EAAEkC,cAAiBV,KACf1d,EAActE,OAAO8E,OAAO,GAAIR,EAAa0d,GAAW,IACjDxB,IAEXA,EAAEmC,WAAa,EAACjX,KAA2CK,KACvD,MAAMrK,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAcoH,EAASK,GAEzE,OADAqW,EAAUxT,EAAMlN,GACT8e,IAEXA,EAAEoC,cAAiB3U,KACfmU,EAAUnU,EACHuS,IAEXA,EAAEqC,cAAgB,EAACnX,KAA2CK,KAC1D,MAAMrK,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAcoH,EAASK,GAEzE,OADAqW,EAAUA,EAAQze,OAAOiL,EAAMlN,IACxB8e,IAEXA,EAAEsC,iBAAoB7U,KAClBmU,EAAUA,EAAQze,OAAOsK,GAClBuS,IAEXA,EAAEhJ,QAAWuL,KACTnhB,EAASmhB,EAAUnhB,GACZ4e,IAGJA,EAIL,SAAUwC,GAAiBb,GAC7B,IAAIvgB,EAASugB,GAAQniB,OAAO8E,OAAO,GAAI8c,IACnCtd,EAAmB,GACnB8d,EAAqB,GAEzB,MAAMlN,EAAO,CAAOxT,EAAsBL,IAAgB4hB,GAAAlJ,UAAA,qBACtD,GAAInY,EAAOigB,eACP,IAAK,IAAIviB,EAAI,EAAGA,EAAI+B,EAAEY,OAAQ3C,IAC1B+B,EAAE/B,GAAKU,OAAA+C,EAAA,EAAA/C,CAAS0B,EAAOL,EAAE/B,IAEL,iBAAT+B,EAAE/B,IAA4B,OAAT+B,EAAE/B,IAA6C,mBAAtB+B,EAAE/B,GAAW2f,OAClE5d,EAAE/B,SAAW+B,EAAE/B,IAK3B,OAAIsC,EAAOkgB,mBACa,IAAbzgB,EAAEY,OAAeZ,EAAE,GAAKA,EAExBA,EAAEA,EAAEY,OAAS,KAItBue,EAAiC,CAAO9U,KAA2CK,IAAiBkX,GAAAlJ,UAAA,qBACtG,MAAMrY,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAcoH,EAASK,GACzE,OAAOmJ,EAAKxT,EAAO0gB,EAAQze,OAAOiL,EAAMlN,OAiE5C,OA9DA8e,EAAE6B,YAAepU,KACb,MAAMvM,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAc,IAChE,OAAO4Q,EAAKxT,EAAO0gB,EAAQze,OAAOsK,MAErCuS,EAAU8B,KAAO,MACd,MAaM5gB,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAc,IAChE4Q,EAAKxT,EAAO0gB,EAAQ1e,MAAM,IAC1B,MAAM6e,EAAqC,CAAO7W,KAA2CK,IAAiBkX,GAAAlJ,UAAA,qBAE1G,OADAkI,GAAWvgB,EAAOgK,EAASK,GACpBmJ,EAAKxT,EAAOkN,EAAMlN,MAO7B,OADC6gB,EAAcC,KAJ2B,EAAC9W,KAA2CK,KAClFkW,GAAWvgB,EAAOgK,EAASK,GApBd,EAACmX,EAAqB7hB,KACnC,GAAIO,EAAOigB,eACP,IAAK,IAAIviB,EAAI,EAAGA,EAAI+B,EAAEY,OAAQ3C,IAC1B+B,EAAE/B,GAAKU,OAAA+C,EAAA,EAAA/C,CAASkjB,EAAM7hB,EAAE/B,IAIhC,OAAIsC,EAAOkgB,mBACa,IAAbzgB,EAAEY,OAAeZ,EAAE,GAAKA,EAExBA,EAAEA,EAAEY,OAAS,IAWjBkhB,CAASzhB,EAAOkN,EAAMlN,MAG1B6gB,IAEX/B,EAAEiC,WAAcT,KACZ1d,EAActE,OAAO8E,OAAO,GAAIkd,GAAW,IACpCxB,IAEXA,EAAEkC,cAAiBV,KACf1d,EAActE,OAAO8E,OAAO,GAAIR,EAAa0d,GAAW,IACjDxB,IAEXA,EAAEmC,WAAa,EAACjX,KAA2CK,KACvD,MAAMrK,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAcoH,EAASK,GAEzE,OADAqW,EAAUxT,EAAMlN,GACT8e,IAEXA,EAAEoC,cAAiB3U,KACfmU,EAAUnU,EACHuS,IAEXA,EAAEqC,cAAgB,EAACnX,KAA2CK,KAC1D,MAAMrK,EAAQqgB,GAAUngB,EAAQ5B,OAAO8E,OAAO,GAAIR,GAAcoH,EAASK,GAEzE,OADAqW,EAAUA,EAAQze,OAAOiL,EAAMlN,IACxB8e,IAEXA,EAAEsC,iBAAoB7U,KAClBmU,EAAUA,EAAQze,OAAOsK,GAClBuS,IAEXA,EAAEhJ,QAAWuL,KACTnhB,EAASmhB,EAAUnhB,GACZ4e,IAGJA,EAKJ,MAAM4C,GAAI,MACb,MAAMxhB,EAAyB5B,OAAO8E,OAAO,GAAI8c,IAKjD,OAHAhgB,EAAOigB,gBAAiB,EACxBjgB,EAAOkgB,oBAAqB,EAErBI,GAAYtgB,IANN,GAWJyhB,GAAI,MACb,IAAIzhB,EAAyB5B,OAAO8E,OAAO,GAAI8c,IAY/C,OAXAhgB,EAAO4B,cAAgBxD,OAAO8E,OAAO,GAAIlD,EAAO4B,cAAe,CAC3D8K,SAAU,aAMd1M,EAASgf,GADThf,EAASyb,GADTzb,EAASgY,GADThY,EAAS4V,GAAY5V,OAKd+M,eAAgB,EAEhBuT,GAAYtgB,IAbN,GAgBJ0hB,GAAKD,GACLE,GAAOF,GAKPG,GAAU,MACnB,IAAI5hB,EAAyB5B,OAAO8E,OAAO,GAAI8c,IAY/C,OAXAhgB,EAAO4B,cAAgBxD,OAAO8E,OAAO,GAAIlD,EAAO4B,cAAe,CAC3D8K,SAAU,aAMd1M,EAASgf,GADThf,EAASyb,GADTzb,EAASgY,GADThY,EAAS4V,GAAY5V,OAKd+M,eAAgB,EAEhBqU,GAAiBphB,IAbL,GAiBV6hB,GAAWD,GAEXE,GAAaF,GAIbG,GAAK,MACd,IAAI/hB,EAAyB5B,OAAO8E,OAAO,GAAI8c,IAa/C,OAZAhgB,EAAO4B,cAAgBxD,OAAO8E,OAAO,GAAIlD,EAAO4B,cAAe,CAC3D8K,SAAU,aAMd1M,EAASgf,GADThf,EAASyb,GADTzb,EAASgY,GADThY,EAAS4V,GAAY5V,OAKd+M,eAAgB,EACvB/M,EAAOkgB,oBAAqB,EAErBI,GAAYtgB,IAdL,GAoBLgiB,GAAW,MACpB,IAAIhiB,EAAyB5B,OAAO8E,OAAO,GAAI8c,IAa/C,OAZAhgB,EAAO4B,cAAgBxD,OAAO8E,OAAO,GAAIlD,EAAO4B,cAAe,CAC3D8K,SAAU,aAMd1M,EAASgf,GADThf,EAASyb,GADTzb,EAASgY,GADThY,EAAS4V,GAAY5V,OAKd+M,eAAgB,EACvB/M,EAAOkgB,oBAAqB,EAErBkB,GAAiBphB,IAdJ,GAmBlB,SAAUiiB,GAAiBlF,GAC7B,IAAI/c,EAAyB5B,OAAO8E,OAAO,GAAI8c,IAU/C,OAJAhgB,EAAS8c,GADT9c,EAASgf,GADThf,EAASyb,GADTzb,EAASgY,GADThY,EAAS4V,GAAY5V,MAIO+c,IAErBhQ,eAAgB,EAEhBuT,GAAYtgB,GAKjB,SAAUkiB,GAAuBnF,GACnC,IAAI/c,EAAyB5B,OAAO8E,OAAO,GAAI8c,IAU/C,OAJAhgB,EAAS8c,GADT9c,EAASgf,GADThf,EAASyb,GADTzb,EAASgY,GADThY,EAAS4V,GAAY5V,MAIO+c,IAErBhQ,eAAgB,EAEhBqU,GAAiBphB,GCxZtB,SAAUmiB,GAAcR,EAA0DvB,EAAkBgC,EAAc,aACpH,MAAMC,EAAQC,SAASC,iCAAiCH,OAClDrG,EAAK,GACX,IAAK,IAAIre,EAAI,EAAGA,EAAI2kB,EAAMhiB,OAAQ3C,IAC9Bqe,EAAG5Y,KAAKkf,EAAM3kB,GAAG8kB,WAGrB,OADAb,EAAOA,EAAKb,cAAcV,GAAW,KACzBrE,EAAGvU,KAAK,OCjBxBhK,EAAAQ,EAAA0B,EAAA,qCAAA+iB,KAAAjlB,EAAAQ,EAAA0B,EAAA,kCAAAgjB,KAAAllB,EAAAQ,EAAA0B,EAAA,mCAAAijB,KAAAnlB,EAAAQ,EAAA0B,EAAA,yCAAAuf,KAAAzhB,EAAAQ,EAAA0B,EAAA,kCAAAsgB,KAAAxiB,EAAAQ,EAAA0B,EAAA,gCAAA4gB,KAAA9iB,EAAAQ,EAAA0B,EAAA,qCAAA0hB,KAAA5jB,EAAAQ,EAAA0B,EAAA,sBAAA8hB,KAAAhkB,EAAAQ,EAAA0B,EAAA,sBAAA+hB,KAAAjkB,EAAAQ,EAAA0B,EAAA,uBAAAgiB,KAAAlkB,EAAAQ,EAAA0B,EAAA,yBAAAiiB,KAAAnkB,EAAAQ,EAAA0B,EAAA,4BAAAkiB,KAAApkB,EAAAQ,EAAA0B,EAAA,6BAAAmiB,KAAArkB,EAAAQ,EAAA0B,EAAA,+BAAAoiB,KAAAtkB,EAAAQ,EAAA0B,EAAA,uBAAAqiB,KAAAvkB,EAAAQ,EAAA0B,EAAA,6BAAAsiB,KAAAxkB,EAAAQ,EAAA0B,EAAA,wBAAAuiB,KAAAzkB,EAAAQ,EAAA0B,EAAA,8BAAAwiB,KAAA1kB,EAAAQ,EAAA0B,EAAA,kCAAAyiB,KAAA3kB,EAAAQ,EAAA0B,EAAA,gCAAAkW,KAAApY,EAAAQ,EAAA0B,EAAA,sCAAAsY,KAAAxa,EAAAQ,EAAA0B,EAAA,oCAAA+b,KAAAje,EAAAQ,EAAA0B,EAAA,+BAAAod,KAAAtf,EAAAQ,EAAA0B,EAAA,sCAAAsf,KAqCO,MAAMyD,GAAmB,CAC5BG,KAAMxO,GACNyO,WAAYhL,GACZiL,SAAU3H,GACVqB,IAAKG,GACLoG,WAAYlE,IAGH6D,GAAgB,CACzBE,KAAMzN,GACN0N,WAAY/K,GACZgL,SAAUvH,GACViB,IAAKI,GACLmG,WAAYjE,IAGH6D,GAAiB,CAC1BC,KAAMxN,GACNyN,WAAY9K,GACZ+K,SAAUtH,GACVgB,IAAKK,GACLkG,WAAYhE","file":"liyad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"liyad\"] = factory();\n\telse\n\t\troot[\"liyad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         MaxEvaluationCountError } from './types';\r\n\r\n\r\n\r\nexport function setEvaluationCount(state: SxParserState) {\r\n    state.evalCount++;\r\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\r\n        throw new MaxEvaluationCountError();\r\n    }\r\n}\r\n\r\n\r\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\r\n    if (args.length < min) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\r\n    }\r\n    if (max && max < args.length) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\r\n    }\r\n    return true;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedPair,\r\n         SxDottedFragment,\r\n         SxToken,\r\n         SxScope,\r\n         CapturedScopes }     from './types';\r\nimport { isSymbol }           from './ast';\r\nimport { setEvaluationCount } from './errors';\r\n\r\n\r\n\r\nexport function toNumber(x: any) {\r\n    switch (typeof x) {\r\n    case 'object': case 'symbol': case 'function':\r\n        return NaN;\r\n    default:\r\n        return Number(x);\r\n    }\r\n}\r\n\r\n\r\nexport function resolveUnquote(state: SxParserState, r: SxToken[]) {\r\n    for (let i = 0; i < r.length; i++) {\r\n        const symUnquote = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.unquote);\r\n        if (symUnquote) {\r\n            r = r.slice(0, i).concat([evaluate(state, (r[i] as SxToken[])[1])], r.slice(i + 1));\r\n        }\r\n        if (Array.isArray(r[i])) {\r\n            r = r.slice(0);\r\n            r[i] = resolveUnquote(state, r[i] as SxToken[]);\r\n        }\r\n    }\r\n    return resolveSplice(state, r);\r\n}\r\n\r\n\r\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\r\n    if (state.config.enableSplice) {\r\n        for (let i = r.length - 1; i >= 0; i--) {\r\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\r\n            if (symSplice) {\r\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function resolveMacro(state: SxParserState, x: SxSymbol): ((list: SxToken[]) => SxToken) | false {\r\n    const macroInfo = state.macroMap.get(x.symbol);\r\n    if (macroInfo) {\r\n        return macroInfo.fn(state, x.symbol);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\r\n    if (typeof x === 'function') {\r\n        return x;\r\n    }\r\n    const funcInfo = state.funcMap.get(x.symbol);\r\n    if (funcInfo) {\r\n        return funcInfo.fn(state, x.symbol);\r\n    } else {\r\n        const v = resolveValueSymbol(state, x);\r\n        if (typeof v === 'function') {\r\n            return v;\r\n        }\r\n        if (state.config.funcSymbolResolverFallback) {\r\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\r\n            return localScope.scope;\r\n        }\r\n        if (localScope.capturedScopes &&\r\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\r\n            return localScope.capturedScopes[x.symbol];\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    const globalScope = getGlobalScope(state);\r\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\r\n        return globalScope.scope;\r\n    }\r\n    return nullIfNotDefined ? null : getScope(state).scope;\r\n}\r\n\r\n\r\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\r\n    const scope = resolveValueSymbolScope(state, x, true);\r\n    if (scope) {\r\n        return scope[x.symbol];\r\n    }\r\n    const symInfo = state.symbolMap.get(x.symbol);\r\n    if (symInfo) {\r\n        return symInfo.fn(state, x.symbol);\r\n    } else {\r\n        if (state.config.valueSymbolResolverFallback) {\r\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\r\n    const capturedScopes: CapturedScopes = {};\r\n    for (const n of names) {\r\n        const scope = resolveValueSymbolScope(state, n, true);\r\n        if (scope === null) {\r\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\r\n        }\r\n        capturedScopes[n.symbol] = scope;\r\n    }\r\n    return capturedScopes;\r\n}\r\n\r\n\r\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\r\n    const a: CapturedScopes[] = [];\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope.capturedScopes) {\r\n            a.unshift(localScope.capturedScopes);\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\r\n}\r\n\r\n\r\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\r\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\r\n}\r\n\r\n\r\nexport function uninstallScope(state: SxParserState): any {\r\n    if (state.scopes.length < 2) {\r\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\r\n    }\r\n    return state.scopes.pop();\r\n}\r\n\r\n\r\nexport function getScope(state: SxParserState) {\r\n    return state.scopes[state.scopes.length - 1];\r\n}\r\n\r\n\r\nexport function getGlobalScope(state: SxParserState) {\r\n    return state.scopes[0];\r\n}\r\n\r\n\r\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //    formalArgs: 'sym1 ... 'symN\r\n    //        fnBody: 'expr1 ... 'exprN\r\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\r\n        const front = fnBody.slice(0, fnBody.length - 1);\r\n        const tail = fnBody[fnBody.length - 1];\r\n        if (tail && (typeof tail[0] === 'object') && tail[0].symbol === state.config.reservedNames.if) {\r\n            // S expression: ($if cond t-expr f-expr)\r\n            if (Array.isArray(tail[3]) && (typeof tail[3][0] === 'object') && tail[3][0].symbol === state.config.reservedNames.self) {\r\n                // S expression (recursive):\r\n                //     (                                 ;; fnBody\r\n                //         expr1 ... exprN-1             ;; front\r\n                //         ($if cond                     ;; tail[0] [1]\r\n                //             t-expr                    ;;     [2]\r\n                //             ($self                    ;;     [3]\r\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\r\n                //     )\r\n                //\r\n                //  -> S exp (tail call optimization):\r\n                //     (                                                                  ;; fnBody\r\n                //         ($until cond                                                   ;; tail[1]\r\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\r\n                //                 expr1 ... exprN-1                                      ;; front\r\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\r\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\r\n                //             )                                                          ;;\r\n                //         )                                                              ;;\r\n                //         expr1 ... exprN-1                                              ;; front\r\n                //         t-expr                                                         ;; tail[2]\r\n                //     )\r\n\r\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\r\n\r\n                return [\r\n                    [{symbol: state.config.reservedNames.until}, tail[1],\r\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\r\n                            ...front,\r\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\r\n                            ...(tempVarsSyms.map((x, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\r\n                        ],\r\n                    ],\r\n                    ...front,\r\n                    tail[2],\r\n                ];\r\n            }\r\n        }\r\n    }\r\n    return fnBody;\r\n}\r\n\r\n\r\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\r\n    setEvaluationCount(state);\r\n\r\n    if (x === null || x === void 0) {\r\n        return x;\r\n    }\r\n    let r: SxToken = x;\r\n\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                return r;\r\n            }\r\n\r\n            r = resolveSplice(state, r);\r\n\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym);\r\n\r\n                if (m) {\r\n                    r = m(r);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        setEvaluationCount(state);\r\n    }\r\n\r\n    if (Array.isArray(r)) {\r\n        r = r.slice(0);\r\n        if (0 < r.length) {\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                if (sym.symbol === state.config.reservedNames.quote) {\r\n                    return r.slice(1, 2)[0];\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.backquote) {\r\n                    r = r.slice(1, 2)[0];\r\n                    if (Array.isArray(r)) {\r\n                        r = resolveUnquote(state, r);\r\n                    }\r\n                    return r;\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.eval) {\r\n                    return evaluate(state, evaluate(state, r.slice(1, 2)[0]));\r\n                }\r\n            }\r\n\r\n            const sprs = [];\r\n            for (let i = 1; i < r.length; i++) {\r\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\r\n                if (symSpr) {\r\n                    sprs.push(i);\r\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\r\n                    r[i] = Array.isArray(a) ? a : [a];\r\n                } else {\r\n                    r[i] = evaluate(state, r[i]);\r\n                }\r\n            }\r\n            for (const i of sprs.reverse()) {\r\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\r\n            }\r\n\r\n            let fn: any;\r\n            if (typeof r[0] === 'function') {\r\n                fn = r[0];\r\n            } else if (sym) {\r\n                fn = resolveFunctionSymbol(state, sym);\r\n            } else {\r\n                fn = evaluate(state, r[0]);\r\n            }\r\n\r\n            if (typeof fn === 'function') {\r\n                r = (fn as any)(...(r.slice(1)));\r\n            } else {\r\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\r\n            }\r\n        }\r\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\r\n        r = (r as SxExternalValue).value;\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\r\n        r = resolveValueSymbol(state, r as SxSymbol);\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\r\n        const car = evaluate(state, (r as SxDottedPair).car);\r\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\r\n        if (Array.isArray(cdr)) {\r\n            const a = (cdr as any[]).slice(0);\r\n            a.unshift(car);\r\n            r = a;\r\n        } else {\r\n            r = { car, cdr };\r\n        }\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\r\n        r = [\r\n            evaluate(state, (r as SxDottedFragment).dotted),\r\n        ];\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\r\n        r = [];\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol }     from './types';\r\n\r\n\r\n\r\nexport function quote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.quote}, x];\r\n}\r\n\r\n\r\nexport function isQuoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.quote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function backquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.backquote}, x];\r\n}\r\n\r\n\r\nexport function isBackquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.backquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function wrapByUnquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.unquote}, x];\r\n}\r\n\r\n\r\nexport function isUnquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.unquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function spread(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.spread}, x];\r\n}\r\n\r\n\r\nexport function splice(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.splice}, x];\r\n}\r\n\r\n\r\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\r\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\r\n        if (name !== void 0) {\r\n            return x.symbol === name ? x : null;\r\n        } else {\r\n            return x;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken }            from '../types';\r\nimport { isSymbol }           from '../ast';\r\nimport { resolveSplice,\r\n         resolveMacro,\r\n         resolveValueSymbol,\r\n         getScope }           from '../evaluate';\r\nimport { setEvaluationCount } from '../errors';\r\n\r\n\r\n\r\nexport function applyMacros(state: SxParserState, tok: SxToken) {\r\n    let r: SxToken = tok;\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                break;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym);\r\n                if (m) {\r\n                    r = m(r);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function stripQuote(state: SxParserState, tok: SxToken) {\r\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\r\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\r\n    }\r\n    return (tok as any)[1];\r\n}\r\n\r\n\r\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\r\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\r\n        return (tok as any)[1];\r\n    } else {\r\n        return tok;\r\n    }\r\n}\r\n\r\n\r\nexport function getScope_stateApplied(state: SxParserState) {\r\n    return (function() { return getScope(state); });\r\n}\r\n\r\n\r\nexport function resolveValueSymbol_dynamic(state: SxParserState, name: string) {\r\n    return (function(){ return resolveValueSymbol(state, {symbol: name}); });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport type SxMacro = (state: SxParserState, name: string) => (list: SxToken[]) => SxToken;\r\n\r\nexport interface SxMacroInfo {\r\n    name: string;\r\n    fn: SxMacro;\r\n\r\n    // TODO: overloading\r\n    // formalArgs?: SxToken[];\r\n    // next?: SxMacroInfo;\r\n}\r\n\r\n\r\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\r\n\r\nexport interface SxFuncInfo {\r\n    name: string;\r\n    fn: SxFunc;\r\n\r\n    // TODO: overloading\r\n    // formalArgs?: SxToken[];\r\n    // next?: SxFuncInfo;\r\n}\r\n\r\n\r\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\r\n\r\nexport interface SxSymbolInfo {\r\n    name: string;\r\n    fn: SxSymbolResolver;\r\n}\r\n\r\n\r\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\r\n\r\nexport interface SxScope {\r\n    isBlockLocal: boolean;\r\n    scope: any;           // { [s: string]: any; };\r\n    capturedScopes?: CapturedScopes;\r\n}\r\n\r\n\r\nexport interface SxReservedNames {\r\n    eval: string;\r\n    quote: string;\r\n    backquote: string;\r\n    unquote: string;\r\n    spread: string;\r\n    splice: string;\r\n\r\n    car: string;\r\n    cdr: string;\r\n    cons: string;\r\n    atom: string;\r\n    eq: string;\r\n    list: string;\r\n\r\n    let: string;\r\n    lambda: string;\r\n    self: string;\r\n    defun: string;\r\n\r\n    if: string;\r\n    cond: string;\r\n\r\n    while: string;\r\n    doWhile: string;\r\n    until: string;\r\n    doUntil: string;\r\n\r\n    get: string;\r\n    defvar: string;\r\n    setq: string;\r\n    set: string;\r\n    call: string;\r\n\r\n    not: string;\r\n    and: string;\r\n    or: string;\r\n\r\n    isSymbol: string;\r\n    gensym: string;\r\n    raise: string;\r\n    catch: string;\r\n\r\n    Template: string;\r\n}\r\n\r\nexport interface SxParserConfig {\r\n    raiseOnUnresolvedSymbol: boolean;\r\n    enableEvaluate: boolean;\r\n    enableHereDoc: boolean;\r\n    enableSpread: boolean;\r\n    enableSplice: boolean;\r\n    enableShorthands: boolean;\r\n    enableVerbatimStringLiteral: boolean;\r\n    enableTailCallOptimization: boolean;\r\n    stripComments: boolean;\r\n    wrapExternalValue: boolean;\r\n    reservedNames: SxReservedNames;\r\n    returnMultipleRoot: boolean;\r\n    maxEvalCount: number;\r\n\r\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\r\n    JsxFragment?: any;\r\n\r\n    funcs: SxFuncInfo[];\r\n    macros: SxMacroInfo[];\r\n    symbols: SxSymbolInfo[];\r\n\r\n    funcSymbolResolverFallback?: SxFunc;\r\n    valueSymbolResolverFallback?: SxSymbolResolver;\r\n}\r\n\r\nexport interface SxParserState {\r\n    strings: TemplateStringsArray | string[];\r\n    values: any[];\r\n\r\n    index: number;\r\n    pos: number;\r\n    line: number;\r\n\r\n    evalCount: number;\r\n\r\n    scopes: SxScope[];\r\n\r\n    macroMap: Map<string, SxMacroInfo>;\r\n    funcMap: Map<string, SxFuncInfo>;\r\n    symbolMap: Map<string, SxSymbolInfo>;\r\n\r\n    config: SxParserConfig;\r\n}\r\n\r\nexport interface SxEof {\r\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\r\n    eofSeq?: string;\r\n}\r\n\r\nexport interface SxExternalValue {\r\n    value: any;\r\n}\r\n\r\nexport interface SxSymbol {\r\n    'symbol': string;\r\n}\r\n\r\nexport interface SxComment {\r\n    comment: string;\r\n}\r\n\r\nexport interface SxDottedPair {\r\n    car: SxToken; // left\r\n    cdr: SxToken; // right\r\n}\r\n\r\nexport interface SxDottedFragment {\r\n    dotted: SxToken; // right\r\n}\r\n\r\n\r\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\r\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\r\nexport type SxChar = string | SxEof | SxExternalValue;\r\nexport type SxAtom = SxSymbol | string | number | boolean | null;\r\nexport type SxList = SxDottedPair | SxAtom[];\r\n\r\n\r\n\r\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\r\n\r\n\r\nexport interface CompilerContext {\r\n    _$_vars: any[];\r\n    varsCount: number;\r\n    varNames: Map<string, string>;\r\n    varNamesCount: number;\r\n    varDefs: string;\r\n    ops: Map<string, CompilerOperator>;\r\n    makeScope: (scoped: () => void) => void;\r\n    compileToken: (body: any[], i: number) => string;\r\n}\r\n\r\n\r\nexport interface LsxConfig {\r\n    jsx: (comp: any, props: any, ...children: any[]) => any;\r\n    jsxFlagment: any;\r\n    components: object;\r\n}\r\n\r\n\r\nexport class FatalError extends Error {\r\n    public constructor(message?: string | undefined) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n\r\nexport class MaxEvaluationCountError extends FatalError {\r\n    public constructor() {\r\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\r\n    }\r\n}\r\n\r\n\r\nexport class ScriptTerminationError extends FatalError {\r\n    public constructor(where: string) {\r\n        super(`[SX] ${where}: Unexpected termination of script.`);\r\n    }\r\n}\r\n\r\n\r\nexport interface SExpressionRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\r\n}\r\n\r\n\r\nexport interface SExpressionTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    evaluateAST: (ast: SxToken[]) => R;\r\n    repl: () => SExpressionRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\r\n    repl: () => SExpressionAsyncRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         SxFuncInfo,\r\n         CompilerOperator,\r\n         CompilerContext  }           from './types';\r\nimport { isSymbol }                   from './ast';\r\nimport { getCapturedScopes,\r\n         optimizeTailCall }           from './evaluate';\r\nimport { applyMacros,\r\n         stripQuoteOrPass,\r\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\r\nimport { registerOperators }          from './compile.ops';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\r\n\r\n    function makeScope(scoped: () => void) {\r\n        const varNamesCopy = new Map<string, string>();\r\n        for (const x of ctx.varNames.entries()) {\r\n            varNamesCopy.set(x[0], x[1]);\r\n        }\r\n        scoped();\r\n        ctx.varNames = varNamesCopy;\r\n    }\r\n\r\n\r\n    function compileValue(b: any) {\r\n        let compFnBody = '';\r\n        if (b === null) {\r\n            compFnBody += '(null)';\r\n        } else if (b === void 0) {\r\n            compFnBody += '(void 0)';\r\n        } else switch (typeof b) {\r\n        case 'boolean': case 'number':\r\n            compFnBody += `(${String(b)})`;\r\n            break;\r\n        case 'object':\r\n            if (isSymbol(b)) {\r\n                const sym = b as SxSymbol;\r\n                if (ctx.varNames.has(sym.symbol)) {\r\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\r\n                } else {\r\n                    _$_vars[ctx.varsCount] = sym.symbol;\r\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n                }\r\n                break;\r\n            } else {}\r\n            // FALL_THRU\r\n        default:\r\n            _$_vars[ctx.varsCount] = b;\r\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n            break;\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    function compileToken(body: any[], i: number) {\r\n        let compFnBody = '';\r\n        const b = body[i];\r\n        if (Array.isArray(b)) {\r\n            if (0 < b.length) {\r\n                const r: SxToken = applyMacros(state, b);\r\n                if (Array.isArray(r)) {\r\n                    if (0 < r.length) {\r\n                        if (isSymbol(r[0])) {\r\n                            const sym = r[0] as SxSymbol;\r\n                            const args = r.slice(1);\r\n                            if (ops.has(sym.symbol)) {\r\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\r\n                            } else {\r\n                                if (sym.symbol === state.config.reservedNames.spread) {\r\n                                    compFnBody += `...(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else if (state.funcMap.has(sym.symbol)) {\r\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                } else if (ctx.varNames.has(sym.symbol)) {\r\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else {\r\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            switch (typeof r[0]) {\r\n                            case 'function':\r\n                                _$_vars[ctx.varsCount] = r[0];\r\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                break;\r\n                            default:\r\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        compFnBody += '([])';\r\n                    }\r\n                } else {\r\n                    compFnBody += compileValue(b);\r\n                }\r\n            } else {\r\n                compFnBody += '([])';\r\n            }\r\n        } else {\r\n            compFnBody += compileValue(b);\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    const ctx: CompilerContext = {\r\n        _$_vars,\r\n        varsCount: 1,\r\n        varNames: new Map<string, string>(),\r\n        varNamesCount: 0,\r\n        varDefs: 'var x0;',\r\n        ops: new Map<string, CompilerOperator>(),\r\n        makeScope,\r\n        compileToken,\r\n    };\r\n\r\n    registerOperators(state, ctx);\r\n    const ops = ctx.ops;\r\n\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n    if (capturedScopes) {\r\n        for (const x in capturedScopes) {\r\n            if (Object.hasOwnProperty.call(capturedScopes, x)) {\r\n                _$_vars[ctx.varsCount++] = x;\r\n                _$_vars[ctx.varsCount] = capturedScopes[x];\r\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\r\n                ctx.varsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const compFormalArgs = `${formalArgs.map((x, i) => {\r\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\r\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\r\n    }).join(',')}`;\r\n\r\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\r\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\r\n}\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\r\n    // tslint:disable-next-line:no-eval\r\n    _$_vars[0] = eval(code);\r\n    return _$_vars[0];\r\n}\r\n\r\n\r\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\r\n    // tslint:disable-next-line:variable-name\r\n    const _$_vars: any[] = [];\r\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         CompilerContext }            from '../types';\r\nimport { isSymbol }                   from '../ast';\r\nimport { checkParamsLength }          from '../errors';\r\nimport { stripQuote,\r\n         stripQuoteOrPass,\r\n         getScope_stateApplied,\r\n         resolveValueSymbol_dynamic } from './helpers';\r\n\r\n\r\n\r\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\r\n    const {\r\n        _$_vars,\r\n        ops,\r\n        makeScope,\r\n        compileToken,\r\n    } = ctx;\r\n\r\n\r\n    ops.set(state.config.reservedNames.quote, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.self, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        compFnBody += `((_$_vars[0])(${\r\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if condition 't-expr 'f-expr)\r\n        //  -> (if condition is true ) S expr  : t-expr\r\n        //  -> (if condition is false) S expr  : f-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if', args, 2, 3);\r\n        compFnBody += `(${compileToken(r, 1)}?(${\r\n            compileToken([stripQuote(state, r[2])], 0)}):(${\r\n            compileToken([stripQuote(state, r[3])], 0)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if-null condition 'null-expr)\r\n        //  -> (if condition is not null ) S expr  : condition\r\n        //  -> (if condition is null)      S expr  : null-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\r\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\r\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        //  -> (if (eval condI) is true ) S expr  : exprI\r\n        //  -> (if no matched)            S expr  : null\r\n        let compFnBody = '';\r\n        {\r\n            checkParamsLength('compileToken:$__cond', args, 1);\r\n            compFnBody += `(`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\r\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\r\n            }\r\n            compFnBody += `null`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `)`;\r\n            }\r\n            compFnBody += `)`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__while', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n        //  -> (if n > 0) S expr  : exprN\r\n        //  -> (else)     S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__repeat', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n        //  -> (if list.length > 0) S expr  : exprN\r\n        //  -> (else)               S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__for', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n        //  -> (else)               S expr  : exprN\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__scope', args, 2);\r\n        // r[1]: isBlockLocal\r\n        // r[2]: returnMultiple\r\n        if (! Array.isArray(r[3])) {\r\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\r\n        }\r\n        makeScope(() => {\r\n            for (const x of stripQuote(state, r[3]) as any[]) {\r\n                let name = '';\r\n                if (Array.isArray(x)) {\r\n                    if (x.length < 1) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\r\n                    }\r\n                    if (! isSymbol(x[0])) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\r\n                    }\r\n                    name = x[0].symbol;\r\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\r\n                } else {\r\n                    if (! isSymbol(x)) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\r\n                    }\r\n                    name = x.symbol;\r\n                }\r\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n                ctx.varNames.set(x.symbol, 'v' + ctx.varNamesCount++);\r\n            }\r\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\r\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__try 'expr 'catch-expr)\r\n        //  ->                               S expr  : expr\r\n        //  -> (if error is raised in expr)  S expr  : catch-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__try', args, 1, 2);\r\n        compFnBody += `((()=>{try{${\r\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\r\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\r\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\r\n        makeScope(() => {\r\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\r\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\r\n            compFnBody += `${\r\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.raise, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($raise 'expr)\r\n        //  -> S expr  : -\r\n        let compFnBody = '';\r\n        compFnBody += `((()=>{throw ${\r\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($boolean any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\r\n        compFnBody += `((x0=${compileToken(args, 0)\r\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__get', args, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__let 'nameStrOrSymbol expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__let', args, 2, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        if (! ctx.varNames.has(name)) {\r\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n        }\r\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__set', args, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ?\r\n            quoted.symbol :\r\n            (typeof quoted === 'string' ?\r\n                quoted :\r\n                (Array.isArray(quoted) ?\r\n                    (isSymbol(quoted[0]) ?\r\n                        quoted[0].symbol :\r\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\r\n                    ) :\r\n                    null\r\n                )\r\n            );\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.not, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$not', args, 1, 1);\r\n        compFnBody += `(!${compileToken(args, 0)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__and 'expr1 ... 'exprN)\r\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n        //  -> (else)                                                     S expr  : expr-i (false left most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__and', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__or 'expr1 ... 'exprN)\r\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n        //  -> (else)                                                  S expr  : expr-i (false right most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__or', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($eq arg1 arg2)\r\n        //  -> (if arg1 === arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:===', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not-eq arg1 arg2)\r\n        //  -> (if arg1 !== arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (== a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (!= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (< a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (> a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($concat listOrString1 ... listOrStringN)\r\n        //  -> S expr  : listOrString\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$concat', args, 1);\r\n        let w1 = '';\r\n        if (Array.isArray(args[0]) && isSymbol((args[0] as any)[0], state.config.reservedNames.spread)) {\r\n            const w0 = compileToken(args[0] as any, 1);\r\n            w1 = `(${w0}[0]).concat((${w0}.length>1?${w0}[1]:(typeof ${w0}[0]==='string'?'':[])),`;\r\n        } else {\r\n            w1 = `${compileToken(args as any, 0)}.concat(`;\r\n        }\r\n        compFnBody += `(${w1}${\r\n            args.slice(1).map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (+ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n            };return _$_rv.reduce((x,y)=>x+y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (- number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:-', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return (_$_rv.length>1?(_$_rv.reduce((x,y)=>x-y)):(_$_rv.length>0?-_$_rv[0]:NaN));})())`;\r\n        } else {\r\n            compFnBody += `(${r.length > 2 ?\r\n                args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\r\n                `-(${String(compileToken(r, 1))})`})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (* number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:*', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x*y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (** number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:**', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x**y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (/ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:/', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x/y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (% number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:%', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x%y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<< number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-not number)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\r\n        compFnBody += `(~(${compileToken(r, 1)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-and numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-or numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-xor numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\r\n        return compFnBody;\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxEof,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedFragment,\r\n         SxComment,\r\n         SxToken,\r\n         SxChar,\r\n         ScriptTerminationError } from './types';\r\nimport { quote,\r\n         backquote,\r\n         wrapByUnquote,\r\n         spread,\r\n         splice }                 from './ast';\r\n\r\n\r\n\r\nfunction isEOF(ch: SxChar): boolean {\r\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\r\n}\r\n\r\n\r\nfunction isSpace(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && ch.trim().length === 0;\r\n}\r\n\r\n\r\nfunction isNumberFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isSymbolFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' &&\r\n        !isSpace(ch) &&\r\n        !isNumberFirstChar(ch);\r\n}\r\n\r\n\r\n\r\nfunction lookCurrentLineHint(state: SxParserState): string {\r\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\r\n        state.strings.length > state.index ?\r\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\r\n}\r\n\r\n\r\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    if (state.strings.length <= state.index) {\r\n        return {eof: true};\r\n    }\r\n    if (state.strings[state.index].length <= state.pos) {\r\n        if ((! state.values) || (state.values.length <= state.index)) {\r\n            state.pos = 0;\r\n            state.index++;\r\n            return getChar(state);\r\n        } else {\r\n            const ch = {value: state.values[state.index]};\r\n            state.pos = 0;\r\n            state.index++;\r\n            return ch;\r\n        }\r\n    }\r\n    if (virtualEof) {\r\n        for (const v of virtualEof) {\r\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\r\n            if (ch === v) {\r\n                state.pos += v.length;\r\n                state.line += ch.split('\\n').length - 1;\r\n                return { eof: false , eofSeq: v };\r\n            }\r\n        }\r\n    }\r\n    {\r\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n        state.pos++;\r\n\r\n        if (ch === '\\n') {\r\n            state.line++;\r\n        }\r\n\r\n        if ((! disableEscape) && ch === '\\\\') {\r\n            if (state.strings[state.index].length <= state.pos) {\r\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n            state.pos++;\r\n\r\n            switch (ch) {\r\n            case 'b':\r\n                ch = '\\b';\r\n                break;\r\n            case 't':\r\n                ch = '\\t';\r\n                break;\r\n            case 'n':\r\n                ch = '\\n';\r\n                break;\r\n            case 'v':\r\n                ch = '\\v';\r\n                break;\r\n            case 'f':\r\n                ch = '\\f';\r\n                break;\r\n            case 'r':\r\n                ch = '\\r';\r\n                break;\r\n            case 'U': case 'u':\r\n                {\r\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\r\n                        let ch1 = '';\r\n                        for (let i = 0; i < 6; i++) {\r\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\r\n                            if (ch2 === '}') {\r\n                                if (i === 0) {\r\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                                }\r\n                                state.pos += i;\r\n                                break;\r\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\r\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            ch1 += ch2;\r\n                        }\r\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos++;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    } else {\r\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\r\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos += 4;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return ch;\r\n    }\r\n}\r\n\r\n\r\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    const chs: SxChar[] = [];\r\n\r\n    try {\r\n        for (let i = 0; i < n; i++) {\r\n            chs.push(getChar(state, virtualEof, disableEscape));\r\n        }\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return chs;\r\n}\r\n\r\n\r\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    let ch: SxChar;\r\n\r\n    try {\r\n        ch = getChar(state, virtualEof, disableEscape);\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return ch;\r\n}\r\n\r\n\r\nfunction skipWhitespaces(state: SxParserState): void {\r\n    let ch = lookAhead(state);\r\n    while (!isEOF(ch) && isSpace(ch)) {\r\n        getChar(state);\r\n        ch = lookAhead(state);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\r\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n    }\r\n    return Number(s);\r\n}\r\n\r\n\r\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (isSpace(ch)) {\r\n                break;\r\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\r\n                break;\r\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                getChar(state, virtualEof);\r\n                const v = (ch as SxExternalValue).value;\r\n                s += String(ch);\r\n            } else {\r\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (state.config.enableShorthands) {\r\n        let m: RegExpMatchArray | null = null;\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        if (m = s.match(/^::([^=:][^=]+)=$/)) {\r\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\r\n            const ws = m[1].split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.set},\r\n                        ws\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^::([^@:][^@]+)@([^@:]+)$/)) {\r\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\r\n            const ws = m[1].split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.call},\r\n                        [{symbol: state.config.reservedNames.get}, ...ws],\r\n                        {symbol: m[2]},\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^::([^:].+)$/)) {\r\n            // ::foo:bar:baz -> ($get foo bar baz)\r\n            const ws = m[1].split(':');\r\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\r\n            return z as any;\r\n        }\r\n    }\r\n\r\n    return {symbol: s};\r\n}\r\n\r\n\r\nfunction parseStringOrComment(\r\n        state: SxParserState, eof: string[],\r\n        valuesStartSeq: string | null ,\r\n        valuesStopChar: string,\r\n        disableEscape: boolean\r\n    ): { strings: string[], values: any[] } {\r\n\r\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\r\n    const strings: string[] = [];\r\n    const values: any[] = [];\r\n\r\n    for (;;) {\r\n        let s = '';\r\n        let ch = lookAhead(state, eofSeqs, disableEscape);\r\n\r\n        while (! isEOF(ch)) {\r\n            if (typeof ch === 'string') {\r\n                getChar(state, eofSeqs, disableEscape);\r\n                s += ch;\r\n            } else {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state, eofSeqs, disableEscape);\r\n                    const v = (ch as SxExternalValue).value;\r\n                    s += String(ch);\r\n                } else {\r\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            }\r\n\r\n            ch = lookAhead(state, eofSeqs, disableEscape);\r\n        }\r\n\r\n        getChar(state, eofSeqs, disableEscape);\r\n\r\n        if ((ch as SxEof).eof === true) {\r\n            throw new ScriptTerminationError('parseStringOrComment');\r\n        }\r\n\r\n        strings.push(s);\r\n\r\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\r\n            values.push(parseList(state, valuesStopChar, []));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { strings, values };\r\n}\r\n\r\n\r\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\r\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape).strings[0];\r\n}\r\n\r\n\r\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\r\n    const q: SxToken[] = [symbol];\r\n\r\n    if (attrs) {\r\n        q.push(attrs);\r\n    }\r\n\r\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false);\r\n    for (let i = 0; i < inner.strings.length; i++) {\r\n        q.push(inner.strings[i]);\r\n        if (i < inner.values.length) {\r\n            q.push(inner.values[i]);\r\n        }\r\n    }\r\n\r\n    return q;\r\n}\r\n\r\n\r\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['|#'], null, ')', false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseOneToken(state: SxParserState): SxToken {\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case ')':\r\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n\r\n        case '(':\r\n            getChar(state);\r\n            return parseList(state, ')', []);\r\n\r\n        case \"'\": case \"`\": case ',':\r\n            {\r\n                getChar(state);\r\n                const ahead = lookAhead(state);\r\n                let isSpliceUnquote = false;\r\n                if (ch === ',' && ahead === '@') {\r\n                    getChar(state);\r\n                    isSpliceUnquote = true;\r\n                }\r\n                skipWhitespaces(state);\r\n                const ret = (ch === \"'\" ?\r\n                        quote :\r\n                        (ch === \"`\" ? backquote : wrapByUnquote))\r\n                    (state, parseOneToken(state)\r\n                );\r\n                return (isSpliceUnquote ? splice(state, ret) : ret);\r\n            }\r\n\r\n        case \".\":\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 2);\r\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    skipWhitespaces(state);\r\n                    return spread(state, parseOneToken(state));\r\n                } else {\r\n                    skipWhitespaces(state);\r\n                    return {dotted: parseOneToken(state)};\r\n                }\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            return parseSingleLineComment(state);\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseMultiLineComment(state);\r\n                } else {\r\n                    return parseSymbol(state);\r\n                }\r\n            }\r\n\r\n        case '\"':\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 4);\r\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\r\n                    let isHereDoc = true;\r\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\r\n                        // here doc\r\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\r\n                        if (aheads[2] === '+' || aheads[2] === '-') {\r\n                            if (! isNumberAfterSignChar(aheads[3])) {\r\n                                isHereDoc = false;\r\n                            }\r\n                        }\r\n                        // here doc\r\n                    } else if (isSymbolFirstChar(aheads[2])) {\r\n                        isHereDoc = false;\r\n                    } else {\r\n                        // here doc\r\n                    }\r\n                    getChar(state);\r\n                    getChar(state);\r\n\r\n                    let sym: SxSymbol | number | null = null;\r\n                    let attrs: SxToken[] | null = null;\r\n                    if (isHereDoc) {\r\n                        sym = {symbol: state.config.reservedNames.Template};\r\n                    } else {\r\n                        sym = parseSymbol(state, ['@']);\r\n                        if (sym === null) {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        if (typeof sym === 'number') {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        const ahs = lookAheads(state, 2);\r\n                        if (ahs[0] === '@') {\r\n                            if (ahs[1] !== '{') {\r\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            getChar(state);\r\n                            getChar(state);\r\n                            const a = parseList(state, '}', [{symbol: '@'}]);\r\n                            if (Array.isArray(a)) {\r\n                                attrs = a;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return parseHereDoc(state, sym, attrs);\r\n                } else {\r\n                    return parseString(state, false);\r\n                }\r\n            }\r\n\r\n        case '@':\r\n            if (state.config.enableVerbatimStringLiteral) {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '\"') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseString(state, true);\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            if (typeof ch !== 'string') {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state);\r\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\r\n                } else {\r\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            } else if (isSpace(ch)) {\r\n                break;\r\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\r\n                if (ch === '+' || ch === '-') {\r\n                    const aheads = lookAheads(state, 2);\r\n                    if (! isNumberAfterSignChar(aheads[1])) {\r\n                        return parseSymbol(state);\r\n                    }\r\n                }\r\n                return parseNumber(state);\r\n            } else if (isSymbolFirstChar(ch)) {\r\n                return parseSymbol(state);\r\n            } else {\r\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseOneToken');\r\n}\r\n\r\n\r\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\r\n    const r: SxToken[] = initialList.slice(0);\r\n    let dotted = false;\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case listStopChar:\r\n            getChar(state);\r\n            if (dotted) {\r\n                return r[0];\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        default:\r\n            {\r\n                const t = parseOneToken(state);\r\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\r\n                    if (r.length !== 1) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    dotted = true;\r\n                    if (Array.isArray(t)) {\r\n                        t.unshift(r.pop() as SxToken);\r\n                        r.push(t);\r\n                    } else {\r\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\r\n                    }\r\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                    if (! state.config.stripComments) {\r\n                        r.push(t);\r\n                    }\r\n                } else {\r\n                    if (dotted) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    r.push(t);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseList');\r\n}\r\n\r\n\r\n\r\nexport function parse(state: SxParserState) {\r\n    const r: SxToken[] = [];\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case '(':\r\n            getChar(state);\r\n            r.push(parseList(state, ')', []));\r\n            break;\r\n\r\n        case \"'\": case \"`\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                for (;;) {\r\n                    const t = parseOneToken(state);\r\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                        if (! state.config.stripComments) {\r\n                            r.push(t);\r\n                        }\r\n                    } else {\r\n                        r.push((ch === \"'\" ? quote : backquote)(state, t));\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            if (state.config.stripComments) {\r\n                parseSingleLineComment(state);\r\n            } else {\r\n                r.push(parseSingleLineComment(state));\r\n            }\r\n            break;\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseMultiLineComment(state);\r\n                    } else {\r\n                        r.push(parseMultiLineComment(state));\r\n                    }\r\n                } else {\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseSingleLineComment(state);\r\n                    } else {\r\n                        r.push(parseSingleLineComment(state));\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case '\"':\r\n            {\r\n                const aheads = lookAheads(state, 3);\r\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\r\n                    r.push(parseOneToken(state));\r\n                    break;\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         FatalError,\r\n         CapturedScopes }     from '../../types';\r\nimport { isSymbol,\r\n         quote }              from '../../ast';\r\nimport { evaluate,\r\n         resolveValueSymbolScope,\r\n         collectCapturedVariables,\r\n         getCapturedScopes,\r\n         getScope,\r\n         getGlobalScope,\r\n         installScope,\r\n         uninstallScope,\r\n         optimizeTailCall,\r\n         toNumber }           from '../../evaluate';\r\nimport { compileLambda }      from '../../compile';\r\nimport { checkParamsLength }  from '../../errors';\r\n\r\n\r\n\r\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($car '(first second ... last))\r\n    //  -> S expr  : first\r\n    checkParamsLength('$car', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car[0];\r\n};\r\nexport const $$car = $car(null as any, null as any);\r\n\r\n\r\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cdr '(first second ... last))\r\n    //  -> S expr  : (second ... last)\r\n    checkParamsLength('$cdr', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car.slice(1);\r\n};\r\nexport const $$cdr = $cdr(null as any, null as any);\r\n\r\n\r\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\r\n    //  -> S expr  : (arg1 arg2-item1 ...)\r\n    // S expression: ($cons arg1 nilOrNull ... argN)\r\n    //  -> S expr  : (arg1)\r\n    // S expression: ($cons arg1 arg2 ... argN)\r\n    //  -> S expr  : arg1.arg2\r\n    checkParamsLength('$cons', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (car === null) {\r\n        car = [];\r\n    }\r\n    if (cdr === null) {\r\n        cdr = [];\r\n    }\r\n\r\n    if (Array.isArray(cdr)) {\r\n        cdr = cdr.slice(0);\r\n        cdr.unshift(car);\r\n        return cdr;\r\n    } else {\r\n        return {car, cdr};\r\n    }\r\n};\r\nexport const $$cons = $cons(null as any, null as any);\r\n\r\n\r\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first first second ... last)\r\n    //  -> S expr  : first\r\n    // S expression: ($first)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(0, 1);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$first = $first(null as any, null as any);\r\n\r\n\r\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($second first second ... last)\r\n    //  -> S expr  : second\r\n    // S expression: ($second first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1, 2);\r\n    return (cdr.length === 1) ? cdr[0] : null;\r\n};\r\nexport const $$second = $second(null as any, null as any);\r\n\r\n\r\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($last first second ... last)\r\n    //  -> S expr  : last\r\n    // S expression: ($last)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(args.length - 1, args.length);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$last = $last(null as any, null as any);\r\n\r\n\r\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($rest first second ... last)\r\n    //  -> S expr  : (second ... last)\r\n    // S expression: ($rest first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1);\r\n    return (0 < cdr.length) ? cdr : null;\r\n};\r\nexport const $$rest = $rest(null as any, null as any);\r\n\r\n\r\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first-and-second first second ... last)\r\n    //  -> S expr  : first.second\r\n    let car: any = args.slice(0, 1);\r\n    car = (car.length === 1) ? car[0] : null;\r\n\r\n    let cdr: any = args.slice(1, 2);\r\n    cdr = (cdr.length === 1) ? cdr[0] : null;\r\n\r\n    return {car, cdr};\r\n};\r\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\r\n\r\n\r\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($atom arg1 ...)\r\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\r\n    //  -> (if arg1 is nil or anything else) S expr  : true\r\n    checkParamsLength('$atom', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n\r\n    if (car === null || car === void 0) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(car)) {\r\n        if (car.length === 0) return  true;\r\n        else                  return false;\r\n    }\r\n\r\n    switch (typeof car) {\r\n    case 'number': case 'string': case 'function': case 'boolean':\r\n        return true;\r\n    case 'object':\r\n        return isSymbol(car) ? true : false;\r\n    }\r\n    return false;\r\n};\r\nexport const $$atom = $atom(null as any, null as any);\r\n\r\n\r\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($eq arg1 arg2)\r\n    //  -> (if arg1 === arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$eq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car === cdr;\r\n};\r\nexport const $$eq = $eq(null as any, null as any);\r\n\r\n\r\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not-eq arg1 arg2)\r\n    //  -> (if arg1 !== arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$notEq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car !== cdr;\r\n};\r\nexport const $$notEq = $notEq(null as any, null as any);\r\n\r\n\r\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\r\n    // S expression: ($list arg1 ... argN)\r\n    //  -> S expr  : (arg1 ... argN)\r\n    args.slice(0);\r\nexport const $$list = $list(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\r\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__scope', args, 3);\r\n\r\n    const isBlockLocal = $$first(...args);\r\n    const returnMultiple = $$second(...args);\r\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\r\n    let r: SxToken = null;\r\n\r\n    const scope: any = {};\r\n    if (Array.isArray(car)) {\r\n        for (const x of car) {\r\n            if (Array.isArray(x)) {\r\n                const kv = $$firstAndSecond(...x);\r\n                const kvSym = isSymbol(kv.car);\r\n                scope[kvSym ? kvSym.symbol : String(kv.car)] = evaluate(state, kv.cdr);\r\n            } else {\r\n                const xSym = isSymbol(x);\r\n                scope[xSym ? xSym.symbol : String(x)] = null;\r\n            }\r\n        }\r\n    }\r\n    installScope(state, scope, isBlockLocal, capturedScopes);\r\n\r\n    try {\r\n        if (4 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(3)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(3)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__globalScope', args, 1);\r\n\r\n    const returnMultiple = $$first(...args);\r\n    const cdr = $$second(...args);\r\n    let r: SxToken = null;\r\n\r\n    installScope(state, getGlobalScope(state).scope, true);\r\n    try {\r\n        if (2 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(1)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(1)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : exprN\r\n    checkParamsLength('$__capture', args, 1);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let r: SxToken = null;\r\n\r\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\r\n    installScope(state, {}, true, capturedScopes);\r\n    try {\r\n        for (const x of args.slice(1)) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    let fnBody = args.slice(1);\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (...actualArgs: any[]) => {\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] func call: Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        // TODO: add type checking\r\n        // TODO: pass \"this\" to the $__scope variable.\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(1);\r\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $__lambda(state, name)(...args.slice(1));\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($refun 'name)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__refun', args, 1, 1);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const info = state.funcMap.get(car.symbol);\r\n    if (!info) {\r\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\r\n    }\r\n    return info.fn(state, car.symbol);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defmacro = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defmacro', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    let formalArgs: SxSymbol[] = args[1];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__defmacro: Invalid argument(s): args[1] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(2);\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (...aArgs: any[]) => {\r\n        let actualArgs = aArgs.slice(0);\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] macro call (${car.symbol}): Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        const extra: SxToken[] = [];\r\n        for (let i = formalArgs.length - (lastIsSpread ? 2 : 1); i >= 0; i--) {\r\n            let nm = formalArgs[i].symbol;\r\n            if (nm.startsWith('!')) {\r\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(1);\r\n                nm = formalArgs[i].symbol;\r\n\r\n                if (! isSymbol(actualArgs[i])) {\r\n                    throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not symbol.`);\r\n                }\r\n            } else if (nm.startsWith('<') && nm.endsWith('>')) {\r\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(1, -1);\r\n                nm = formalArgs[i].symbol;\r\n\r\n                if (isSymbol(actualArgs[i], nm)) {\r\n                    formalArgs = formalArgs.slice(0, i).concat(formalArgs.slice(i + 1));\r\n                    actualArgs = actualArgs.slice(0, i).concat(actualArgs.slice(i + 1));\r\n                } else {\r\n                    throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not expected symbol.`);\r\n                }\r\n            } else {\r\n                // TODO: refactor: extract to function.\r\n                const tpos = nm.lastIndexOf(':');\r\n                if (0 < tpos) {\r\n                    const tname = nm.slice(tpos + 1);\r\n                    switch (tname) {\r\n                    case 'number':\r\n                        if (typeof actualArgs[i] !== 'number') {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not number.`);\r\n                        }\r\n                        break;\r\n                    case 'string':\r\n                        if (typeof actualArgs[i] !== 'string') {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not string.`);\r\n                        }\r\n                        break;\r\n                    case 'function':\r\n                        if (! (Array.isArray(actualArgs[i]) && isSymbol(actualArgs[i][0]))) {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not function.`);\r\n                        }\r\n                        break;\r\n                    case 'list':\r\n                        if (! Array.isArray(actualArgs[i])) {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not list.`);\r\n                        }\r\n                        break;\r\n                    case 'symbol':\r\n                        if (! isSymbol(actualArgs[i])) {\r\n                            throw new Error(`[SX] macro call (${car.symbol}): Actual arg(${i}: ${nm}) is not symbol.`);\r\n                        }\r\n                        break;\r\n                    case 'any':\r\n                        break;\r\n                    default:\r\n                        throw new Error(`[SX] macro call (${car.symbol}): Formal arg(${i}: ${nm}) is unknown type ${tname}.`);\r\n                    }\r\n                    formalArgs[i].symbol = formalArgs[i].symbol.slice(0, tpos);\r\n                    nm = formalArgs[i].symbol;\r\n                }\r\n            }\r\n        }\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...extra, ...fnBody);\r\n    };\r\n\r\n    state.macroMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => (list) => fn(...(list.slice(1))),\r\n    });\r\n\r\n    return fn;\r\n};\r\n\r\n\r\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($apply fn arg1 ... argN)\r\n    //  -> S expr  : fn'\r\n    checkParamsLength('$apply', args, 1);\r\n\r\n    const car: () => any = $$first(...args);\r\n    if (typeof car !== 'function') {\r\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\r\n    }\r\n\r\n    return (\r\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\r\n    );\r\n};\r\nexport const $$apply = $apply(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__call', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const sym = isSymbol(cdr);\r\n    return Function.prototype.apply.call(\r\n        car[sym ? sym.symbol : evaluate(state, cdr) as any],\r\n        car,\r\n        args.slice(2)\r\n    );\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__try 'expr 'catch-expr)\r\n    //  ->                               S expr  : expr\r\n    //  -> (if error is raised in expr)  S expr  : catch-expr\r\n    checkParamsLength('$__try', args, 1, 2);\r\n\r\n    let r: SxToken = [];\r\n    try {\r\n        r = evaluate(state, args[0]);\r\n    } catch (e) {\r\n        if (e instanceof FatalError) {\r\n            throw e;\r\n        }\r\n        if (1 < args.length) {\r\n            r = $__scope(state, name)(true, false, [\r\n                ['$error', quote(state, e)],\r\n                ['$parent', quote(state, getScope(state))],\r\n            ], args[1]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($raise 'expr)\r\n    //  -> S expr  : -\r\n    const car = $$first(...args);\r\n    throw car;\r\n};\r\nexport const $$raise = $raise(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if condition 't-expr 'f-expr)\r\n    //  -> (if condition is true ) S expr  : t-expr\r\n    //  -> (if condition is false) S expr  : f-expr\r\n    checkParamsLength('$__if', args, 2, 3);\r\n\r\n    const car = $$first(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        r = evaluate(state, args[1]);\r\n    } else {\r\n        if (2 < args.length) {\r\n            r = evaluate(state, args[2]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if-null condition 'null-expr)\r\n    //  -> (if condition is not null ) S expr  : condition\r\n    //  -> (if condition is null)      S expr  : null-expr\r\n    checkParamsLength('$__ifNull', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if (! $$ambiguousEq(car, null)) {\r\n        r = car;\r\n    } else {\r\n        r = evaluate(state, cdr);\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n    //  -> (if (eval condI) is true ) S expr  : exprI\r\n    //  -> (if no matched)            S expr  : null\r\n    checkParamsLength('$__cond', args, 1);\r\n\r\n    for (let i = 0; i < args.length - 1; i += 2) {\r\n        const c = args[i];\r\n        const x = args[i + 1];\r\n        if ($$boolean(evaluate(state, c))) {\r\n            return evaluate(state, x);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__while', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$boolean(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doWhile', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$boolean(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__until', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$not(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doUntil', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$not(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n    //  -> (if n > 0) S expr  : exprN\r\n    //  -> (else)     S expr  : null\r\n    checkParamsLength('$__repeat', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const n = toNumber($$second(...args));\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (let i = 0; i < n; i++) {\r\n        scope[sym.symbol] = i;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n    //  -> (if list.length > 0) S expr  : exprN\r\n    //  -> (else)               S expr  : null\r\n    checkParamsLength('$__for', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const list = $$second(...args);\r\n    if (! Array.isArray(list)) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\r\n    }\r\n\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (const q of list) {\r\n        scope[sym.symbol] = q;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get v fn1 ... fnN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$pipe', args, 1);\r\n\r\n    let v = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n        v = args[i](v);\r\n    }\r\n    return v;\r\n};\r\nexport const $$pipe = $pipe(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__get', args, 1);\r\n\r\n    let v: any = null;\r\n    let sym = isSymbol(args[0]);\r\n\r\n    if (!sym) {\r\n        switch (typeof args[0]) {\r\n        case 'string': case 'number':\r\n            sym = {symbol: String(args[0])};\r\n            break;\r\n        default:\r\n            v = evaluate(state, args[0]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (sym) {\r\n        const scope = resolveValueSymbolScope(state, sym, true);\r\n        if (! scope) {\r\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\r\n        }\r\n        v = scope[sym.symbol];\r\n    }\r\n\r\n    for (let i = 1; i < args.length; i++) {\r\n        let q: any = args[i];\r\n        let inprog = true;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                v = q(v);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = v.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                v = v[q];\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n            }\r\n        }\r\n    }\r\n    return v;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let 'nameStrOrSymbol expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__let', args, 2, 2);\r\n\r\n    let sym = isSymbol($$first(...args));\r\n\r\n    if (! sym) {\r\n        if (typeof args[0] === 'string') {\r\n            sym = {symbol: args[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n    scope[sym.symbol] = args[1];\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__set', args, 2, 2);\r\n\r\n    let path: any = [];\r\n\r\n    if (Array.isArray(args[0])) {\r\n        path = args[0];\r\n    } else {\r\n        path.push(args[0]);\r\n    }\r\n\r\n    let sym = isSymbol(path[0]);\r\n\r\n    if (! sym) {\r\n        if (typeof path[0] === 'string') {\r\n            sym = {symbol: path[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    let scope = resolveValueSymbolScope(state, sym, true);\r\n    if (scope === null) {\r\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\r\n    }\r\n\r\n    let subst = false;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        let q: any = path[i];\r\n        let inprog = true;\r\n        const last = i === path.length - 1;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                scope = q(scope);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = scope.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                if (last) {\r\n                    scope[q] = args[1];\r\n                    subst = true;\r\n                } else {\r\n                    scope = scope[q];\r\n                }\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (! subst) {\r\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\r\n    }\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($boolean any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$boolean', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car) && car.length === 0) return false;\r\n    else return Boolean(car);\r\n};\r\nexport const $$boolean = $boolean(null as any, null as any);\r\n\r\n\r\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$not', args, 1, 1);\r\n\r\n    return ! $$boolean(...args);\r\n};\r\nexport const $$not = $not(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__and 'expr1 ... 'exprN)\r\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n    //  -> (else)                                                     S expr  : expr-i (false left most)\r\n    checkParamsLength('$__and', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if (! $$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__and = $__and(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__or 'expr1 ... 'exprN)\r\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n    //  -> (else)                                                  S expr  : expr-i (false right most)\r\n    checkParamsLength('$__or', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if ($$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__or = $__or(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (== a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ambiguousEq', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car) && car.length === 0) car = null;\r\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\r\n    if (car === void 0) car = null;\r\n    if (cdr === void 0) cdr = null;\r\n    // tslint:disable-next-line:triple-equals\r\n    return car == cdr;\r\n};\r\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (!= a b)\r\n    //  -> S expr  : boolean\r\n    return ! $$ambiguousEq(...args);\r\n};\r\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\r\n\r\n\r\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (< a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$lt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) < toNumber(cdr);\r\n};\r\nexport const $$lt = $lt(null as any, null as any);\r\n\r\n\r\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$le', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) <= toNumber(cdr);\r\n};\r\nexport const $$le = $le(null as any, null as any);\r\n\r\n\r\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (> a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$gt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) > toNumber(cdr);\r\n};\r\nexport const $$gt = $gt(null as any, null as any);\r\n\r\n\r\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ge', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) >= toNumber(cdr);\r\n};\r\nexport const $$ge = $ge(null as any, null as any);\r\n\r\n\r\nexport const $symbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($symbol)\r\n    // S expression: ($symbol name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$symbol', args, 1, 1);\r\n\r\n    if (typeof args[0] === 'string') {\r\n        return {symbol: args[0]};\r\n    } else {\r\n        throw new Error(`[SX] $symbol: Invalid argument(s): item(s) of args[0] is not string.`);\r\n    }\r\n};\r\nexport const $$symbol = $symbol(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__gensym = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__gensym)\r\n    // S expression: ($__gensym name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$__gensym', args, 0, 1);\r\n\r\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\r\n    if (args.length === 1) {\r\n        const a = isSymbol(args[0]);\r\n        if (a) {\r\n            $__let(state, '')(a, tempVarSym);\r\n        } else if (typeof args[0] === 'string') {\r\n            $__let(state, '')({symbol: args[0]}, tempVarSym);\r\n        } else {\r\n            throw new Error(`[SX] $__gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n        }\r\n    }\r\n    return tempVarSym;\r\n};\r\n\r\n\r\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-symbol x)\r\n    // S expression: ($is-symbol x name)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isSymbol', args, 1, 2);\r\n\r\n    if (args.length === 1) {\r\n        return (isSymbol(args[0]) ? true : false);\r\n    } else {\r\n        if (typeof args[1] === 'string') {\r\n            return (isSymbol(args[0], args[1]) ? true : false);\r\n        } else {\r\n            throw new Error(`[SX] $isSymbol: Invalid argument(s): item(s) of args[1] is not string.`);\r\n        }\r\n    }\r\n};\r\nexport const $$isSymbol = $isSymbol(null as any, null as any);\r\n\r\n\r\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-list x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isList', args, 1, 1);\r\n\r\n    return Array.isArray($$first(...args));\r\n};\r\nexport const $$isList = $isList(null as any, null as any);\r\n\r\n\r\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-string x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isString', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'string';\r\n};\r\nexport const $$isString = $isString(null as any, null as any);\r\n\r\n\r\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-number x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNumber', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'number';\r\n};\r\nexport const $$isNumber = $isNumber(null as any, null as any);\r\n\r\n\r\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-NaN x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNaN', args, 1, 1);\r\n\r\n    return Number.isNaN($$first(...args));\r\n};\r\nexport const $$isNaN = $isNaN(null as any, null as any);\r\n\r\n\r\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-finate x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isFinite', args, 1, 1);\r\n\r\n    return Number.isFinite($$first(...args));\r\n};\r\nexport const $$isFinite = $isFinite(null as any, null as any);\r\n\r\n\r\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-integer x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isInteger', args, 1, 1);\r\n\r\n    return Number.isInteger($$first(...args));\r\n};\r\nexport const $$isInteger = $isInteger(null as any, null as any);\r\n\r\n\r\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-string x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$toString', args, 1, 1);\r\n\r\n    return String($$first(...args));\r\n};\r\nexport const $$toString = $toString(null as any, null as any);\r\n\r\n\r\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-number x)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$toNumber', args, 1, 1);\r\n\r\n    return toNumber($$first(...args));\r\n};\r\nexport const $$toNumber = $toNumber(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__# '(name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n            if (x.length === 1) {\r\n                // S expression: (# ... (keyName) ...)\r\n                //  -> JSON    : {..., keyName: true, ...}\r\n                r[keyName] = true;\r\n            } else if (x.length === 2) {\r\n                // S expression: (# ... (keyName value) ...)\r\n                //  -> JSON    : {..., keyName: value, ...}\r\n                r[keyName] = evaluate(state, x[1]);\r\n            } else {\r\n                // S expression: (# ... (keyName value1 value2 ...) ...)\r\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                r[keyName] =\r\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                    .concat(x.slice(1)));\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($object-assign x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$objectAssign', args, 1);\r\n\r\n    return Object.assign(args[0], ...(args.slice(1)));\r\n};\r\nexport const $$objectAssign = $objectAssign(null as any, null as any);\r\n\r\n\r\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-stringify x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$jsonStringify', args, 1, 1);\r\n\r\n    return JSON.stringify($$first(...args));\r\n};\r\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\r\n\r\n\r\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-parse x)\r\n    //  -> S expr  : object\r\n    checkParamsLength('$jsonParse', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    return JSON.parse(s);\r\n};\r\nexport const $$jsonParse = $jsonParse(null as any, null as any);\r\n\r\n\r\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($now)\r\n    //  -> S expr  : number\r\n    return Date.now();\r\n};\r\nexport const $$now = $now(null as any, null as any);\r\n\r\n\r\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-from-iso str)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\r\n\r\n\r\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime year month1-12 day)\r\n    // S expression: ($datetime year month1-12 day hours)\r\n    // S expression: ($datetime year month1-12 day hours minutes)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetime', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n        s += 'Z';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetime = $datetime(null as any, null as any);\r\n\r\n\r\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-lc year month1-12 day)\r\n    // S expression: ($datetime-lc year month1-12 day hours)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeLc', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n    } else {\r\n        s += 'T00:00:00.000';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-iso-string number)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\r\n    }\r\n    return dt.toISOString();\r\n};\r\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getUTCFullYear(),\r\n        dt.getUTCMonth() + 1,\r\n        dt.getUTCDate(),\r\n        dt.getUTCHours(),\r\n        dt.getUTCMinutes(),\r\n        dt.getUTCSeconds(),\r\n        dt.getUTCMilliseconds(),\r\n        0, // TZ\r\n        dt.getUTCDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components-lc number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getFullYear(),\r\n        dt.getMonth() + 1,\r\n        dt.getDate(),\r\n        dt.getHours(),\r\n        dt.getMinutes(),\r\n        dt.getSeconds(),\r\n        dt.getMilliseconds(),\r\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\r\n                                 // If your time zone is UTC+2:00, +120 will be returned.\r\n        dt.getDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\r\n\r\n\r\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($match pattern-str string)\r\n    // S expression: ($match pattern-str options-str string)\r\n    //  -> S expr  : array\r\n    checkParamsLength('$match', args, 2, 3);\r\n\r\n    if (args.length === 2) {\r\n        const m = new RegExp(args[0]);\r\n        return m.exec(args[1]);\r\n    } else {\r\n        const m = new RegExp(args[0], args[1]);\r\n        return m.exec(args[2]);\r\n    }\r\n};\r\nexport const $$match = $match(null as any, null as any);\r\n\r\n\r\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-log expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.log(...args);\r\n    return null;\r\n};\r\nexport const $$consoleLog = $consoleLog(null as any, null as any);\r\n\r\n\r\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-error expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.error(...args);\r\n    return null;\r\n};\r\nexport const $$consoleError = $consoleError(null as any, null as any);\r\n\r\n\r\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-trace expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.trace(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\r\n\r\n\r\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time)\r\n    // S expression: ($console-time label)\r\n    //  -> S expr  : null\r\n    console.time(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTime = $consoleTime(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-end)\r\n    // S expression: ($console-time-end label)\r\n    //  -> S expr  : null\r\n    console.timeEnd(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-log label)\r\n    // S expression: ($console-time-log label value ... value)\r\n    //  -> S expr  : null\r\n    (console as any).timeLog(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './core.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$car',\r\n    fn: ops.$car,\r\n}, {\r\n    name: '$cdr',\r\n    fn: ops.$cdr,\r\n}, {\r\n    name: '$cons',\r\n    fn: ops.$cons,\r\n}, {\r\n    name: '$first',\r\n    fn: ops.$first,\r\n}, {\r\n    name: '$second',\r\n    fn: ops.$second,\r\n}, {\r\n    name: '$last',\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$progn', // alias of $last\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$rest',\r\n    fn: ops.$rest,\r\n}, {\r\n    name: '$first-and-second',\r\n    fn: ops.$firstAndSecond,\r\n}, {\r\n    name: '$atom',\r\n    fn: ops.$atom,\r\n}, {\r\n    name: '$eq',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '===',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '$not-eq',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '!==',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '$list',\r\n    fn: ops.$list,\r\n}, {\r\n    name: '$__scope',\r\n    fn: ops.$__scope,\r\n}, {\r\n    name: '$__global',\r\n    fn: ops.$__globalScope,\r\n}, {\r\n    name: '$__capture',\r\n    fn: ops.$__capture,\r\n}, {\r\n    name: '$__lambda',\r\n    fn: ops.$__lambda,\r\n}, {\r\n    name: '$$__lambda',\r\n    fn: ops.$comp$__lambda,\r\n}, {\r\n    name: '$__defun',\r\n    fn: ops.$__defun,\r\n}, {\r\n    name: '$$__defun',\r\n    fn: ops.$comp$__defun,\r\n}, {\r\n    name: '$__refun',\r\n    fn: ops.$__refun,\r\n}, {\r\n    name: '$__defmacro',\r\n    fn: ops.$__defmacro,\r\n}, {\r\n    name: '$apply',\r\n    fn: ops.$apply,\r\n}, {\r\n    name: '$__call',\r\n    fn: ops.$__call,\r\n}, {\r\n    name: '$__try',\r\n    fn: ops.$__try,\r\n}, {\r\n    name: '$raise',\r\n    fn: ops.$raise,\r\n}, {\r\n    name: '$__if',\r\n    fn: ops.$__if,\r\n}, {\r\n    name: '$__if-null',\r\n    fn: ops.$__ifNull,\r\n}, {\r\n    name: '$__cond',\r\n    fn: ops.$__cond,\r\n}, {\r\n    name: '$__while',\r\n    fn: ops.$__while,\r\n}, {\r\n    name: '$__do-while',\r\n    fn: ops.$__doWhile,\r\n}, {\r\n    name: '$__until',\r\n    fn: ops.$__until,\r\n}, {\r\n    name: '$__do-until',\r\n    fn: ops.$__doUntil,\r\n}, {\r\n    name: '$__repeat',\r\n    fn: ops.$__repeat,\r\n}, {\r\n    name: '$__for',\r\n    fn: ops.$__for,\r\n}, {\r\n    name: '$pipe',\r\n    fn: ops.$pipe,\r\n}, {\r\n    name: '$__get',\r\n    fn: ops.$__get,\r\n}, {\r\n    name: '$__let',\r\n    fn: ops.$__let,\r\n}, {\r\n    name: '$__set',\r\n    fn: ops.$__set,\r\n}, {\r\n    name: '$boolean',\r\n    fn: ops.$boolean,\r\n}, {\r\n    name: '$not',\r\n    fn: ops.$not,\r\n}, {\r\n    name: '$__and',\r\n    fn: ops.$__and,\r\n}, {\r\n    name: '$__or',\r\n    fn: ops.$__or,\r\n}, {\r\n    name: '==',\r\n    fn: ops.$ambiguousEq,\r\n}, {\r\n    name: '!=',\r\n    fn: ops.$ambiguousNotEq,\r\n}, {\r\n    name: '<',\r\n    fn: ops.$lt,\r\n}, {\r\n    name: '<=',\r\n    fn: ops.$le,\r\n}, {\r\n    name: '>',\r\n    fn: ops.$gt,\r\n}, {\r\n    name: '>=',\r\n    fn: ops.$ge,\r\n}, {\r\n    name: '$symbol',\r\n    fn: ops.$symbol,\r\n}, {\r\n    name: '$__gensym',\r\n    fn: ops.$__gensym,\r\n}, {\r\n    name: '$is-symbol',\r\n    fn: ops.$isSymbol,\r\n}, {\r\n    name: '$is-list',\r\n    fn: ops.$isList,\r\n}, {\r\n    name: '$is-string',\r\n    fn: ops.$isString,\r\n}, {\r\n    name: '$is-number',\r\n    fn: ops.$isNumber,\r\n}, {\r\n    name: '$is-NaN',\r\n    fn: ops.$isNaN,\r\n}, {\r\n    name: '$is-finite',\r\n    fn: ops.$isFinite,\r\n}, {\r\n    name: '$is-integer',\r\n    fn: ops.$isInteger,\r\n}, {\r\n    name: '$to-string',\r\n    fn: ops.$toString,\r\n}, {\r\n    name: '$to-number',\r\n    fn: ops.$toNumber,\r\n}, {\r\n    name: '$__#',\r\n    fn: ops.$__toObject,\r\n}, {\r\n    name: '$object-assign',\r\n    fn: ops.$objectAssign,\r\n}, {\r\n    name: '$json-stringify',\r\n    fn: ops.$jsonStringify,\r\n}, {\r\n    name: '$now',\r\n    fn: ops.$now,\r\n}, {\r\n    name: '$datetime-from-iso',\r\n    fn: ops.$datetimeFromIso,\r\n}, {\r\n    name: '$datetime',\r\n    fn: ops.$datetime,\r\n}, {\r\n    name: '$datetime-lc',\r\n    fn: ops.$datetimeLc,\r\n}, {\r\n    name: '$datetime-to-iso-string',\r\n    fn: ops.$datetimeToIsoString,\r\n}, {\r\n    name: '$datetime-to-components',\r\n    fn: ops.$datetimeToComponents,\r\n}, {\r\n    name: '$datetime-to-components-lc',\r\n    fn: ops.$datetimeToComponentsLc,\r\n}, {\r\n    name: '$json-parse',\r\n    fn: ops.$jsonParse,\r\n}, {\r\n    name: '$match',\r\n    fn: ops.$match,\r\n}, {\r\n    name: '$console-log',\r\n    fn: ops.$consoleLog,\r\n}, {\r\n    name: '$console-error',\r\n    fn: ops.$consoleError,\r\n}, {\r\n    name: '$console-trace',\r\n    fn: ops.$consoleTrace,\r\n}, {\r\n    name: '$console-time',\r\n    fn: ops.$consoleTime,\r\n}, {\r\n    name: '$console-time-end',\r\n    fn: ops.$consoleTimeEnd,\r\n}, {\r\n    name: '$console-time-log',\r\n    fn: ops.$consoleTimeLog,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$scope',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            list[1],\r\n            list[2],\r\n            ...(list.slice(3).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$local',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($local ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$global',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($__global expr1 ... exprN)\r\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\r\n        return [{symbol: '$__global'},\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-let', // alias of $local\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$capture',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__capture'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$refun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($refun name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '<-',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (<- name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defmacro',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defmacro name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defmacro'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$call',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($call thisArg symbol arg1 ... argN)\r\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\r\n        checkParamsLength('$call', list, 3);\r\n\r\n        return [{symbol: '$__call'},\r\n            list[1],\r\n            quote(state, list[2]),\r\n            ...(list.slice(3)),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$try',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($try expr catch-expr)\r\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\r\n        return [{symbol: '$__try'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if cond t-expr f-expr)\r\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\r\n        return [{symbol: '$__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if-null',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if-null cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '??',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (?? cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$cond',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($cond cond1 expr1 ... condN exprN)\r\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        return [{symbol: '$__cond'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($while condition expr1 exprN)\r\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-while condition expr1 exprN)\r\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($until condition expr1 exprN)\r\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-until condition expr1 exprN)\r\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$repeat',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($repeat i of n-times expr1 exprN)\r\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__repeat'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($for x of list expr1 exprN)\r\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__for'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$get',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\r\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        return [{symbol: '$__get'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$let',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$let', list, 3, 3);\r\n\r\n        return [{symbol: '$__let'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-defvar',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$clisp-defvar', list, 3, 3);\r\n\r\n        return [{symbol: '$global'},\r\n            [{symbol: '$__let'},\r\n                quote(state, list[1]),\r\n                list[2]\r\n            ],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\r\n        checkParamsLength('$set', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-setq', // alias of $set\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-setq symbol expr)\r\n        //  -> S expr  : ($__set 'symbol expr)\r\n        checkParamsLength('$clisp-setq', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$and',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($and expr1 ... exprN)\r\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\r\n        return [{symbol: '$__and'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$or',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($or expr1 ... exprN)\r\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\r\n        return [{symbol: '$__or'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$gensym',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($gensym)\r\n        // S expression: ($gensym name)\r\n        //  -> S expr  : ($__gensym 'name)\r\n        return [\r\n            {symbol: '$__gensym'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '#',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (# (name value...)...)\r\n        //  -> S expr  : ($__# '(name value...)...)\r\n        return [\r\n            {symbol: '$__#'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [\r\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\r\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\r\n\r\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\r\n\r\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\r\n\r\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\r\n\r\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\r\n\r\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\r\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\r\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\r\n\r\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\r\n];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './core.operator';\r\nimport macros             from './core.macro';\r\nimport symbols            from './core.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\n\r\n\r\n\r\nexport const $bitLShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<< number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitLShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car << cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car >>> (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitLShift = $bitLShift(null as any, null as any);\r\n\r\n\r\nexport const $bitSRShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitSRShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >> cdr : (car & 0x080000000) ? -1 : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitSRShift = $bitSRShift(null as any, null as any);\r\n\r\n\r\nexport const $bitURShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitURShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >>> cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitURShift = $bitURShift(null as any, null as any);\r\n\r\n\r\nexport const $bitNot = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-not number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitNot', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    return ~toNumber(car);\r\n};\r\nexport const $$bitNot = $bitNot(null as any, null as any);\r\n\r\n\r\nexport const $bitAnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-and numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitAnd', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) & toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitAnd = $bitAnd(null as any, null as any);\r\n\r\n\r\nexport const $bitOr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-or numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitOr', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) | toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitOr = $bitOr(null as any, null as any);\r\n\r\n\r\nexport const $bitXor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-xor numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitXor', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ^ toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitXor = $bitXor(null as any, null as any);\r\n\r\n\r\nexport const $add = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (+ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$add', args, 1);\r\n\r\n    return args.reduce((prev, curr) => toNumber(prev) + toNumber(curr), 0);\r\n};\r\nexport const $$add = $add(null as any, null as any);\r\n\r\n\r\nexport const $sub = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (- number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sub', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const last = args.slice(1);\r\n    if (last.length === 0) {\r\n        // negate\r\n        return -toNumber(car);\r\n    } else {\r\n        // subtract\r\n        return args.slice(1).reduce((prev, curr) => toNumber(prev) - toNumber(curr), toNumber(car));\r\n    }\r\n};\r\nexport const $$sub = $sub(null as any, null as any);\r\n\r\n\r\nexport const $mul = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (* number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mul', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) * toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mul = $mul(null as any, null as any);\r\n\r\n\r\nexport const $sup = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (** number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sup', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ** toNumber(curr), toNumber(car));\r\n};\r\nexport const $$sup = $sup(null as any, null as any);\r\n\r\n\r\nexport const $div = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (/ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$div', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) / toNumber(curr), toNumber(car));\r\n};\r\nexport const $$div = $div(null as any, null as any);\r\n\r\n\r\nexport const $mod = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (% number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mod', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) % toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mod = $mod(null as any, null as any);\r\n\r\n\r\nexport const $max = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($max val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.max(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$max = $max(null as any, null as any);\r\n\r\n\r\nexport const $min = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($min val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.min(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$min = $min(null as any, null as any);\r\n\r\n\r\nexport const $avg = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($avg val1 ... valN)\r\n    //  -> S expr  : value\r\n    const a = args.map(x => toNumber(x));\r\n    return a.length > 0 ? a.reduce((prev, curr) => prev + curr, 0) / a.length : NaN;\r\n};\r\nexport const $$avg = $avg(null as any, null as any);\r\n\r\n\r\nexport const $floor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($floor number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$floor', args, 1, 1);\r\n\r\n    return Math.floor(toNumber($$first(...args)));\r\n};\r\nexport const $$floor = $floor(null as any, null as any);\r\n\r\n\r\nexport const $ceil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($ceil number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$ceil', args, 1, 1);\r\n\r\n    return Math.ceil(toNumber($$first(...args)));\r\n};\r\nexport const $$ceil = $ceil(null as any, null as any);\r\n\r\n\r\nexport const $round = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($round number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$round', args, 1, 1);\r\n\r\n    return Math.round(toNumber($$first(...args)));\r\n};\r\nexport const $$round = $round(null as any, null as any);\r\n\r\n\r\nexport const $abs = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($abs number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$abs', args, 1, 1);\r\n\r\n    return Math.abs(toNumber($$first(...args)));\r\n};\r\nexport const $$abs = $abs(null as any, null as any);\r\n\r\n\r\nexport const $sign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sign number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sign', args, 1, 1);\r\n\r\n    return Math.sign(toNumber($$first(...args)));\r\n};\r\nexport const $$sign = $sign(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './arithmetic.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '<<',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '$bit-l-shift',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '>>',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '$bit-sr-shift',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '>>>',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-ur-shift',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-not',\r\n    fn: ops.$bitNot,\r\n}, {\r\n    name: '$bit-and',\r\n    fn: ops.$bitAnd,\r\n}, {\r\n    name: '$bit-or',\r\n    fn: ops.$bitOr,\r\n}, {\r\n    name: '$bit-xor',\r\n    fn: ops.$bitXor,\r\n}, {\r\n    name: '+',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$add',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$sum',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '-',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$sub',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$neg',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '*',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '$mul',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '**',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '$sup',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '/',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '$div',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '%',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$mod',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$max',\r\n    fn: ops.$max,\r\n}, {\r\n    name: '$min',\r\n    fn: ops.$min,\r\n}, {\r\n    name: '$avg',\r\n    fn: ops.$avg,\r\n}, {\r\n    name: '$floor',\r\n    fn: ops.$floor,\r\n}, {\r\n    name: '$ceil',\r\n    fn: ops.$ceil,\r\n}, {\r\n    name: '$round',\r\n    fn: ops.$round,\r\n}, {\r\n    name: '$abs',\r\n    fn: ops.$abs,\r\n}, {\r\n    name: '$sign',\r\n    fn: ops.$sign,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$incl',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($incl name)\r\n        //  -> S expr  : ($set name ($add name 1))\r\n        checkParamsLength('$incl', list, 2, 2);\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], 1],\r\n        ];\r\n    },\r\n}, {\r\n    name: '++',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (++ name)\r\n        //  -> S expr  : ($set name ($add name 1))\r\n        checkParamsLength('++', list, 2, 2);\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], 1],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$decl',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($decl name)\r\n        //  -> S expr  : ($set name ($add name -1))\r\n        checkParamsLength('$decl', list, 2, 2);\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], -1],\r\n        ];\r\n    },\r\n}, {\r\n    name: '--',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (-- name)\r\n        //  -> S expr  : ($set name ($add name -1))\r\n        checkParamsLength('--', list, 2, 2);\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], -1],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$incln',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($incln name v)\r\n        //  -> S expr  : ($set name ($add name v))\r\n        checkParamsLength('$incln', list, 3, 3);\r\n        if (typeof list[2] !== 'number') {\r\n            throw new Error(`[SX] $incln: Invalid parameter: arg(1) is not number.`);\r\n        }\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], list[2]],\r\n        ];\r\n    },\r\n}, {\r\n    name: '+=',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (++ name)\r\n        //  -> S expr  : ($set name ($add name v))\r\n        checkParamsLength('+=', list, 3, 3);\r\n        if (typeof list[2] !== 'number') {\r\n            throw new Error(`[SX] +=: Invalid parameter: arg(1) is not number.`);\r\n        }\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], list[2]],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$decln',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($decln name v)\r\n        //  -> S expr  : ($set name ($add name -v))\r\n        checkParamsLength('$decln', list, 3, 3);\r\n        if (typeof list[2] !== 'number') {\r\n            throw new Error(`[SX] $decln: Invalid parameter: arg(1) is not number.`);\r\n        }\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\r\n        ];\r\n    },\r\n}, {\r\n    name: '-=',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (-- name)\r\n        //  -> S expr  : ($set name ($add name -v))\r\n        checkParamsLength('-=', list, 3, 3);\r\n        if (typeof list[2] !== 'number') {\r\n            throw new Error(`[SX] -=: Invalid parameter: arg(1) is not number.`);\r\n        }\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './arithmetic.operator';\r\nimport macros             from './arithmetic.macro';\r\nimport symbols            from './arithmetic.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2017, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport class Query<T> {\r\n    public constructor(public data: T[]) {\r\n    }\r\n\r\n    public orderBy(condition: Array<string | string[/* colName: string, ('asc' | 'desc') */]> | ((a: T, b: T) => number)): Query<T> {\r\n        let fn: (a: T, b: T) => number;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (typeof c === 'string') {\r\n                        if (x[c] > y[c]) return 1;\r\n                        if (x[c] < y[c]) return -1;\r\n                    } else {\r\n                        const desc = c[1] === 'desc' ? -1 : 1;\r\n                        if (x[c[0]] > y[c[0]]) return 1 * desc;\r\n                        if (x[c[0]] < y[c[0]]) return -1 * desc;\r\n                    }\r\n                }\r\n                return 0;\r\n            };\r\n        } else {\r\n            fn = condition;\r\n        }\r\n        return new Query(this.data.slice(0).sort(fn));\r\n    }\r\n\r\n    public groupBy(condition: string[/* colName: string */] | ((a: T, b: T, index: number, array: T[]) => boolean)): Query<T[]> {\r\n        let fn: (a: T, b: T, index: number, array: T[]) => boolean;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (x[c] !== y[c]) return false;\r\n                }\r\n                return true;\r\n            };\r\n        } else{\r\n            fn = condition;\r\n        }\r\n        const r: T[][] = [];\r\n        let start = 0;\r\n        let i = 1;\r\n        for (; i < this.data.length; i++) {\r\n            if (! fn(this.data[start], this.data[i], i, this.data)) {\r\n                r.push(this.data.slice(start, i));\r\n                start = i;\r\n            }\r\n        }\r\n        r.push(this.data.slice(start, i));\r\n        return new Query(r);\r\n    }\r\n\r\n    public groupEvery(n: number | {single: number, first?: number, intermediate: number, last?: number}): Query<T[]> {\r\n        if (typeof n === 'number') {\r\n            return this.groupBy((a, b, index, array) => {\r\n                if ((index % n) === 0) return false;\r\n                return true;\r\n            });\r\n        } else {\r\n            const w = Object.assign({first: n.intermediate, last: n.intermediate}, n);\r\n            const r = this.groupBy((a, b, index, array) => {\r\n                if (w.single >= array.length) {\r\n                    if ((index % w.single) === 0) return false;\r\n                    return true;\r\n                } else if (index <= w.first) {\r\n                    if ((index % w.first) === 0) return false;\r\n                    return true;\r\n                } else {\r\n                    if (((index - w.first) % w.intermediate) === 0) return false;\r\n                    return true;\r\n                }\r\n            });\r\n            if (r.data.length === 1) {\r\n                if (w.single < r.data[0].length) {\r\n                    r.data.push([]);\r\n                }\r\n            } else {\r\n                if (w.first < r.data[0].length) {\r\n                    // case of w.first === 0\r\n                    r.data.unshift([]);\r\n                }\r\n            }\r\n            if (r.data.length > 1) {\r\n                if (r.data[r.data.length - 1].length > w.last) {\r\n                    r.data.push([]);\r\n                }\r\n            }\r\n            return r;\r\n        }\r\n    }\r\n\r\n    public where(fn: (value: T, index: number, array: T[]) => boolean): Query<T> {\r\n        return new Query(this.data.filter(fn));\r\n    }\r\n\r\n    public select(): T[];\r\n    public select<R>(fn: (value: T, index: number, array: T[]) => R): R[];\r\n    public select<R>(fn?: (value: T, index: number, array: T[]) => R): Array<R | T> {\r\n        return fn ? this.data.map(fn) : this.data as any;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function query<T>(data: T[]): Query<T> {\r\n    return new Query<T>(data);\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber,\r\n         evaluate }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\nimport { query }             from '../../../lib/data';\r\n\r\n\r\n\r\nexport const $range = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($range start end)\r\n    // S expression: ($range start end step)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$range', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const start = toNumber(car) || 0;\r\n    const stop = toNumber(cdr) || 0;\r\n\r\n    const step = (args.length > 2 ? toNumber(args[2]) || 0 : 0) || (start <= stop ? 1 : -1);\r\n    const n = Math.sign(stop - start) + Math.sign(step) !== 0 ?\r\n        (Math.floor((Math.abs(stop - start) / Math.abs(step))) + 1) : 0;\r\n\r\n    state.evalCount += n;\r\n    evaluate(state, 0);\r\n    return Array.from({length: n}, (x, i) => start + i * step);\r\n};\r\n\r\n\r\nexport const $length = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($length listOrString)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$length', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('length' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.length;\r\n    }\r\n    throw new Error(`[SX] $length: Invalid argument type: object has no property 'length'.`);\r\n};\r\nexport const $$length = $length(null as any, null as any);\r\n\r\n\r\nexport const $trim = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trim', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trim();\r\n    }\r\n    throw new Error(`[SX] $trim: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trim = $trim(null as any, null as any);\r\n\r\n\r\nexport const $trimHead = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-head string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimHead', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimLeft();\r\n    }\r\n    throw new Error(`[SX] $trimHead: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimHead = $trimHead(null as any, null as any);\r\n\r\n\r\nexport const $trimTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-tail string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimTail', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimRight();\r\n    }\r\n    throw new Error(`[SX] $trimTail: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimTail = $trimTail(null as any, null as any);\r\n\r\n\r\nexport const $replaceAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($replace-all src-string match-string replacement-string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$replaceAll', args, 3, 3);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string' && typeof args[2] === 'string') {\r\n        return args[0].split(args[1]).join(args[2]);\r\n    }\r\n    throw new Error(`[SX] $replaceAll: Invalid argument type: args[0] or [1] or [2] is not string.`);\r\n};\r\nexport const $$replaceAll = $replaceAll(null as any, null as any);\r\n\r\n\r\nexport const $split = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($split src-string match-string)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$split', args, 2, 2);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string') {\r\n        return args[0].split(args[1]);\r\n    }\r\n    throw new Error(`[SX] $split: Invalid argument type: args[0] or [1] is not string.`);\r\n};\r\nexport const $$split = $split(null as any, null as any);\r\n\r\n\r\nexport const $join = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($join '(str1 ... strN) separator)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$join', args, 1, 2);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        if (args.length > 1) {\r\n            if (typeof args[1] === 'string') {\r\n                return args[0].join(args[1]);\r\n            }\r\n            throw new Error(`[SX] $join: Invalid argument type: args[1] is not string.`);\r\n        } else {\r\n            return args[0].join();\r\n        }\r\n    }\r\n    throw new Error(`[SX] $join: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$join = $join(null as any, null as any);\r\n\r\n\r\nexport const $concat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($concat listOrString1 ... listOrStringN)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$concat', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('concat' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.concat(...args.slice(1));\r\n    }\r\n    throw new Error(`[SX] $concat: Invalid argument type: object has no property 'concat'.`);\r\n};\r\nexport const $$concat = $concat(null as any, null as any);\r\n\r\n\r\nexport const $slice = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($slice start end listOrString)\r\n    // S expression: ($slice start listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$slice', args, 2, 3);\r\n\r\n    if (args.length === 3) {\r\n        if (typeof args[2] === 'string' || Array.isArray(args[2])) {\r\n            return args[2].slice(toNumber(args[0]), toNumber(args[1]));\r\n        }\r\n    }\r\n    if (args.length === 2) {\r\n        if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n            return args[1].slice(toNumber(args[0]));\r\n        }\r\n    }\r\n    throw new Error(`[SX] $slice: Invalid argument type: args[${args.length - 1}] is not string or array.`);\r\n};\r\nexport const $$slice = $slice(null as any, null as any);\r\n\r\n\r\nexport const $top = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($top n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$top', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        return args[1].slice(0, toNumber(args[0]));\r\n    }\r\n    throw new Error(`[SX] $top: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$top = $top(null as any, null as any);\r\n\r\n\r\nexport const $tail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($tail n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$tail', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        const n = -toNumber(args[0]);\r\n        return args[1].slice(n >= 0 || Number.isNaN(n) ? args[1].length : n);\r\n    }\r\n    throw new Error(`[SX] $tail: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$tail = $tail(null as any, null as any);\r\n\r\n\r\nexport const $push = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($push list value)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$push', args, 2, 2);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        args[0].push(args[1]);\r\n        return args[0];\r\n    }\r\n    throw new Error(`[SX] $push: Invalid argument type: args[1] is not array.`);\r\n};\r\nexport const $$push = $push(null as any, null as any);\r\n\r\n\r\nexport const $pop = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($pop list)\r\n    //  -> S expr  : value\r\n    checkParamsLength('$pop', args, 1, 1);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        const v = args[0].pop();\r\n        return v;\r\n    }\r\n    throw new Error(`[SX] $pop: Invalid argument type: args[1] is not array.`);\r\n};\r\nexport const $$pop = $pop(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__at = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__at index listOrString)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__at', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return cdr[car];\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__at = $__at(null as any, null as any);\r\n\r\n\r\nexport const $reverse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverse = $reverse(null as any, null as any);\r\n\r\n\r\nexport const $reverseDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse! listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse!', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverseDestructive = $reverseDestructive(null as any, null as any);\r\n\r\n\r\nexport const $find = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($find list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$find', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.find(cdr);\r\n    }\r\n    throw new Error(`[SX] $find: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$find = $find(null as any, null as any);\r\n\r\n\r\nexport const $filter = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($filter list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$filter', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.filter(cdr);\r\n    }\r\n    throw new Error(`[SX] $filter: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$filter = $filter(null as any, null as any);\r\n\r\n\r\nexport const $map = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($map list (lambda (v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$map', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.map(cdr);\r\n    }\r\n    throw new Error(`[SX] $map: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$map = $map(null as any, null as any);\r\n\r\n\r\nexport const $reduce = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduce', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduce(cdr);\r\n        } else {\r\n            return car.reduce(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduce: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduce = $reduce(null as any, null as any);\r\n\r\n\r\nexport const $reduceFromTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduceFromTail', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduceRight(cdr);\r\n        } else {\r\n            return car.reduceRight(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduceFromTail: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduceFromTail = $reduceFromTail(null as any, null as any);\r\n\r\n\r\nexport const $sort = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sort = $sort(null as any, null as any);\r\n\r\n\r\nexport const $sortDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort! list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort!', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sortDestructive = $sortDestructive(null as any, null as any);\r\n\r\n\r\nexport const $groupEvery = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-every optionsOrNumber (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-every', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-every: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupEvery(car).select();\r\n};\r\nexport const $$groupEvery = $groupEvery(null as any, null as any);\r\n\r\n\r\nexport const $groupBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-by conditions (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupBy(car).select();\r\n};\r\nexport const $$groupBy = $groupBy(null as any, null as any);\r\n\r\n\r\nexport const $orderBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($order-by conditions (x1 ... xN))\r\n    //  -> S expr  : (x1 ... xN)\r\n    checkParamsLength('$order-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $order-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).orderBy(car).select();\r\n};\r\nexport const $$orderBy = $orderBy(null as any, null as any);\r\n\r\n\r\nexport const $where = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($where (-> (v index array) ... boolean) (x1 ... xN))\r\n    //  -> S expr  : (x'1 ... x'M)\r\n    checkParamsLength('$where', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (typeof args[0] !== 'function') {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[0] is not function.`);\r\n    }\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).where(car).select();\r\n};\r\nexport const $$where = $where(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './sequence.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$range',\r\n    fn: ops.$range,\r\n}, {\r\n    name: '$length',\r\n    fn: ops.$length,\r\n}, {\r\n    name: '$trim',\r\n    fn: ops.$trim,\r\n}, {\r\n    name: '$trim-head',\r\n    fn: ops.$trimHead,\r\n}, {\r\n    name: '$trim-tail',\r\n    fn: ops.$trimTail,\r\n}, {\r\n    name: '$replace-all',\r\n    fn: ops.$replaceAll,\r\n}, {\r\n    name: '$split',\r\n    fn: ops.$split,\r\n}, {\r\n    name: '$join',\r\n    fn: ops.$join,\r\n}, {\r\n    name: '$concat',\r\n    fn: ops.$concat,\r\n}, {\r\n    name: '$slice',\r\n    fn: ops.$slice,\r\n}, {\r\n    name: '$top',\r\n    fn: ops.$top,\r\n}, {\r\n    name: '$tail',\r\n    fn: ops.$tail,\r\n}, {\r\n    name: '$push',\r\n    fn: ops.$push,\r\n}, {\r\n    name: '$pop',\r\n    fn: ops.$pop,\r\n}, {\r\n    name: '$__at',\r\n    fn: ops.$__at,\r\n}, {\r\n    name: '$reverse',\r\n    fn: ops.$reverse,\r\n}, {\r\n    name: '$reverse!',\r\n    fn: ops.$reverseDestructive,\r\n}, {\r\n    name: '$find',\r\n    fn: ops.$find,\r\n}, {\r\n    name: '$filter',\r\n    fn: ops.$filter,\r\n}, {\r\n    name: '$map',\r\n    fn: ops.$map,\r\n}, {\r\n    name: '$reduce',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-head',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-tail',\r\n    fn: ops.$reduceFromTail,\r\n}, {\r\n    name: '$sort',\r\n    fn: ops.$sort,\r\n}, {\r\n    name: '$sort!',\r\n    fn: ops.$sortDestructive,\r\n}, {\r\n    name: '$group-every',\r\n    fn: ops.$groupEvery,\r\n}, {\r\n    name: '$group-by',\r\n    fn: ops.$groupBy,\r\n}, {\r\n    name: '$order-by',\r\n    fn: ops.$orderBy,\r\n}, {\r\n    name: '$where',\r\n    fn: ops.$where,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState } from '../../types';\r\nimport { isSymbol }      from '../../ast';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$[',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($[ index ] listOrObject)\r\n        //  -> S expr  : ($__at listOrObject)\r\n        const symOf = isSymbol(list[2], ']');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing ']' keyword.`);\r\n        }\r\n        return [{symbol: '$__at'},\r\n            list[1],\r\n            list[3],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './sequence.operator';\r\nimport macros             from './sequence.macro';\r\nimport symbols            from './sequence.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken }           from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { evaluate,\r\n         getScope }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond,\r\n         $__scope,\r\n         $$boolean }         from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputIf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputIf cond 'expr)\r\n    //  -> (if cond is true ) S expr  : expr\r\n    //  -> (if cond is false) S expr  : ()\r\n    checkParamsLength('$__outputIf', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        if (2 < args.length) {\r\n            r.push({symbol: state.config.reservedNames.Template}, ...args.slice(1));\r\n            r = evaluate(state, r);\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputForOf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputForOf list 'expr)\r\n    //  -> S expr  : (Template expr ... expr)\r\n    checkParamsLength('$__outputForOf', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    const r: SxToken[] = [];\r\n    if (Array.isArray(car)) {\r\n        for (let i = 0; i < car.length; i++) {\r\n            const x = car[i];\r\n            const v = $__scope(state, name)(true, true, [\r\n                ['$data', quote(state, x)],\r\n                ['$index', i],\r\n                ['$array', quote(state, car)],\r\n                ['$parent', quote(state, getScope(state).scope)],\r\n            ], ...args.slice(1));\r\n\r\n            if (2 < args.length && Array.isArray(v)) {\r\n                r.push(...v);\r\n            } else {\r\n                r.push(v);\r\n            }\r\n        }\r\n    } else {\r\n        throw new Error(`[SX] $__outputForOf: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    // All of r items are already evaluated.\r\n    return evaluate(state,\r\n        ([{symbol: state.config.reservedNames.Template}] as SxToken[])\r\n        .concat(r.map(z => [{symbol: state.config.reservedNames.quote}, z])));\r\n};\r\n\r\n\r\nexport const $jsxProps = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (@ (name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n            switch (keyName) {\r\n            case 'style':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (style) ...)\r\n                        //  -> JSON    : {..., style: \"\", ...}\r\n                        r[keyName] = \"\";\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (style \"styleName1: styleValue1; ...\" ...) ...)\r\n                        // S expression: (@ ... (style (styleName1 styleValue1) ...) ...)\r\n                        //  -> JSON    : {..., style: {styleName1: styleValue1}, ...}\r\n                        const styles: object = {};\r\n                        for (const s of x.slice(1)) {\r\n                            if (Array.isArray(s) && 1 < s.length) {\r\n                                styles[String(evaluate(state, s[0]))] = String(evaluate(state, s[1]));\r\n                            } else if (typeof s === 'string') {\r\n                                for (const v of s.split(';')) {\r\n                                    const matched = /^\\s*(\\S+)\\s*:\\s*(.*?)\\s*$/.exec(v);\r\n                                    if (matched) {\r\n                                        styles[matched[1]] = matched[2];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        r[keyName] = styles;\r\n                    }\r\n                }\r\n                break;\r\n            case 'class': case 'styleClass':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: [], ...}\r\n                        r[keyName] = [];\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: [className1 className2 ...], ...}\r\n                        let classes: any[] = [];\r\n                        for (const c of x.slice(1)) {\r\n                            if (Array.isArray(c)) {\r\n                                classes = classes.concat(c.map(z => evaluate(state, z)));\r\n                            } else if (typeof c === 'string') {\r\n                                classes = classes.concat(c.split(' '));\r\n                            }\r\n                        }\r\n                        const cs: string[] = [];\r\n                        const fn: (a: any[]) => void = (a) => a\r\n                            .forEach(c => (c === null || c === void 0) ?\r\n                                void 0 :\r\n                                (Array.isArray(c) ? fn(c) : cs.push(String(c))));\r\n                        fn(classes);\r\n                        r[keyName] = cs;\r\n                    }\r\n                }\r\n                break;\r\n            case 'className':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: \"\", ...}\r\n                        r[keyName] = '';\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: \"className1 className2 ...\", ...}\r\n                        let classes: string = '';\r\n                        for (const c of x.slice(1)) {\r\n                            let fragment = '';\r\n                            if (Array.isArray(c)) {\r\n                                const cs: string[] = [];\r\n                                const fn: (a: any[]) => void = (a) => a\r\n                                    .map(z => evaluate(state, z))\r\n                                    .forEach(z => (z === null || z === void 0) ?\r\n                                        void 0 :\r\n                                        (Array.isArray(z) ? fn(z) : cs.push(String(z))));\r\n                                fn(c);\r\n                                fragment = cs.join(' ');\r\n                            } else if (typeof c === 'string') {\r\n                                fragment = c;\r\n                            }\r\n                            if (0 < classes.length) classes += ' ' + fragment;\r\n                            else classes = fragment;\r\n                        }\r\n                        r[keyName] = classes;\r\n                    }\r\n                }\r\n                break;\r\n            case 'dangerouslySetInnerHTML':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__html: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__html: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__html:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            case 'setInnerText':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__text: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__text: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__text:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (keyName) ...)\r\n                        //  -> JSON    : {..., keyName: true, ...}\r\n                        r[keyName] = true;\r\n                    } else if (x.length === 2) {\r\n                        // S expression: (@ ... (keyName value) ...)\r\n                        //  -> JSON    : {..., keyName: value, ...}\r\n                        r[keyName] = evaluate(state, x[1]);\r\n                    } else {\r\n                        // S expression: (@ ... (keyName value1 value2 ...) ...)\r\n                        //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                        r[keyName] =\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $jsxProps: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nfunction getJsxTagsParams(state: SxParserState, ...args: any[]) {\r\n    let children = args;\r\n    let props: any = {};\r\n    if (0 < args.length && Array.isArray(args[0])) {\r\n        const sym = isSymbol(args[0][0], '@');\r\n\r\n        if (sym) {\r\n            props = $jsxProps(state, '')(...args[0].slice(1));\r\n            children = children.slice(1);\r\n        }\r\n    }\r\n    return {props, children};\r\n}\r\n\r\n\r\nexport const $jsxStandardTag = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(name, props, ...children);\r\n};\r\n\r\n\r\nexport const $jsxComponentTag = (component: any) => (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(component, props, ...children);\r\n};\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './jsx.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$=__if',\r\n    fn: ops.$__outputIf,\r\n}, {\r\n    name: '$=__for',\r\n    fn: ops.$__outputForOf,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState } from '../../types';\r\nimport { quote }         from '../../ast';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '@',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        return quote(state, list);\r\n    },\r\n}, {\r\n    name: '$=if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=if cond expr)\r\n        //  -> S expr  : ($=__if cond 'expr)\r\n        return [\r\n            {symbol: '$=__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$=for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=for list expr)\r\n        //  -> S expr  : ($=__for list 'expr)\r\n        return [\r\n            {symbol: '$=__for'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig,\r\n         LsxConfig }        from '../../types';\r\nimport operators            from './jsx.operator';\r\nimport macros               from './jsx.macro';\r\nimport symbols              from './jsx.symbol';\r\n\r\nimport { $jsxStandardTag,\r\n         $jsxComponentTag } from './jsx.fn';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig, lsxConf: LsxConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n\r\n    const components =\r\n        Object.entries(lsxConf.components)\r\n        .map(x => ({name: x[0], fn: $jsxComponentTag(x[1])}));\r\n\r\n    config.funcs = config.funcs.concat(\r\n        {name: config.reservedNames.Template, fn: $jsxComponentTag(lsxConf.jsxFlagment)},\r\n        ...components\r\n    );\r\n\r\n    config.funcSymbolResolverFallback = $jsxStandardTag;\r\n    config.jsx = lsxConf.jsx;\r\n    config.JsxFragment = lsxConf.jsxFlagment;\r\n\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $__let,\r\n         $__set  }           from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__letAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let-async 'nameStrOrSymbol promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__letAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__let(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__letAsync = $__letAsync(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__setAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set-async 'nameOrListOfNameOrIndex promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__setAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__set(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__setAsync = $__setAsync(null as any, null as any);\r\n\r\n\r\nexport const $then = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($then promise (lambda (val) ...) (lambda (err) ...))\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$then', args, 2, 3);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    if (typeof args[2] === 'function') {\r\n        promise = promise.then(args[1], args[2]);\r\n    } else {\r\n        if (typeof args[1] !== 'function') {\r\n            throw new Error(`[SX] $then: Invalid argument(s): args[1] is not function.`);\r\n        }\r\n        promise = promise.then(args[1]);\r\n    }\r\n    return promise;\r\n};\r\nexport const $$then = $then(null as any, null as any);\r\n\r\n\r\nexport const $resolveAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-all promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n    return Promise.all(promises);\r\n};\r\nexport const $$resolveAll = $resolveAll(null as any, null as any);\r\n\r\n\r\nexport const $resolveAny = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-any promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/39940152/get-first-fulfilled-promise\r\n    // firstOf: This will return the value of the first fulfilled promise,\r\n    //          or if all reject, an array of rejection reasons.\r\n    const invert  = (p: Promise<any>) => new Promise((res, rej) => p.then(rej, res));\r\n    const firstOf = (ps: Array<Promise<any>>) => invert(Promise.all(ps.map(invert)));\r\n\r\n    return firstOf(promises);\r\n};\r\nexport const $$resolveAny = $resolveAny(null as any, null as any);\r\n\r\n\r\nexport const $resolvePipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-pipe promise<val1> (lambda (val1) ... promiseOrVal2) (lambda (val2) ... promiseOrVal3) ... (lambda (valN-1) ... promiseOrValN))\r\n    //  -> S expr  : promise\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolvePipe', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n    let p = promise;\r\n    for (const l of lambdas) {\r\n        p = p.then(l);\r\n    }\r\n    return p;\r\n};\r\nexport const $$resolvePipe = $resolvePipe(null as any, null as any);\r\n\r\n\r\nexport const $resolveFork = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-fork promise<val1> (lambda (val1) ... promiseOrVal2a) ... (lambda (val1) ... promiseOrVal2z))\r\n    //  -> S expr  : (promise<val2a> ... promise<val2z>)\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolveFork', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n\r\n    const resolvers = new Array(lambdas.length);\r\n    const rejectors = new Array(lambdas.length);\r\n\r\n    const pa: Array<Promise<any>> = [];\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        pa.push(new Promise<any>((resolve: any, reject: any) => {\r\n            resolvers[i] = (v: any) => {\r\n                let lp: Promise<any> = lambdas[i](v);\r\n                if (typeof lp !== 'object' || typeof lp.then !== 'function') {\r\n                    lp = Promise.resolve(lp);\r\n                }\r\n\r\n                lp\r\n                .then(x => resolve(x))\r\n                .catch(e => reject(e));\r\n            };\r\n            rejectors[i] = reject;\r\n        }));\r\n    }\r\n\r\n    promise.then(\r\n        v => resolvers.forEach(f => f(v)),\r\n        e => rejectors.forEach(f => f(e))\r\n    );\r\n\r\n    return pa;\r\n};\r\nexport const $$resolveFork = $resolveFork(null as any, null as any);\r\n\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './concurrent.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$__let-async',\r\n    fn: ops.$__letAsync,\r\n}, {\r\n    name: '$__set-async',\r\n    fn: ops.$__setAsync,\r\n}, {\r\n    name: '$then',\r\n    fn: ops.$then,\r\n}, {\r\n    name: '$resolve-all',\r\n    fn: ops.$resolveAll,\r\n}, {\r\n    name: '$resolve-any',\r\n    fn: ops.$resolveAny,\r\n}, {\r\n    name: '$resolve-pipe',\r\n    fn: ops.$resolvePipe,\r\n}, {\r\n    name: '$resolve-fork',\r\n    fn: ops.$resolveFork,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$let-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let-async nameStrOrSymbol promise)\r\n        //  -> S expr  : ($__let-async 'nameStrOrSymbol promise)\r\n        checkParamsLength('$let-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__let-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set-async nameOrListOfNameOrIndex promise)\r\n        //  -> S expr  : ($__set-async 'nameOrListOfNameOrIndex promise)\r\n        checkParamsLength('$set-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__set-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './concurrent.operator';\r\nimport macros             from './concurrent.macro';\r\nimport symbols            from './concurrent.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxFuncInfo,\r\n         SxSymbolInfo,\r\n         SxReservedNames,\r\n         SxParserConfig,\r\n         SxParserState,\r\n         SxToken,\r\n         LsxConfig,\r\n         SExpressionTemplateFn,\r\n         SExpressionAsyncTemplateFn } from './types';\r\nimport { parse }            from './parser';\r\nimport { evaluate }         from './evaluate';\r\nimport installCore          from './operators/core';\r\nimport installArithmetic    from './operators/arithmetic';\r\nimport installSequence      from './operators/sequence';\r\nimport installJsx           from './operators/jsx';\r\nimport installConcurrent    from './operators/concurrent';\r\n\r\n\r\n\r\nexport const defaultReservedNames: SxReservedNames = {\r\n    eval: '$eval',\r\n    quote: '$quote',\r\n    backquote: '$backquote',\r\n    unquote: '$unquote',\r\n    spread: '$spread',\r\n    splice: '$splice',\r\n\r\n    car: '$car',\r\n    cdr: '$cdr',\r\n    cons: '$cons',\r\n    atom: '$atom',\r\n    eq: '$eq',\r\n    list: '$list',\r\n\r\n    let: '$clisp-let',\r\n    lambda: '$lambda',\r\n    self: '$self',\r\n    defun: '$defun',\r\n\r\n    if: '$if',\r\n    cond: '$cond',\r\n\r\n    while: '$while',\r\n    doWhile: '$do-while',\r\n    until: '$until',\r\n    doUntil: '$do-until',\r\n\r\n    get: '$get',\r\n    defvar: '$clisp-defvar',\r\n    setq: '$clisp-setq',\r\n    set: '$set',\r\n    call: '$call',\r\n\r\n    not: '$not',\r\n    and: '$and',\r\n    or: '$or',\r\n\r\n    isSymbol: '$is-symbol',\r\n    gensym: '$gensym',\r\n    raise: '$raise',\r\n    catch: '$catch',\r\n\r\n    Template: 'Template',\r\n};\r\n\r\nexport const defaultConfig: SxParserConfig = {\r\n    raiseOnUnresolvedSymbol: false,\r\n    enableEvaluate: true,\r\n    enableHereDoc: true,\r\n    enableSpread: true,\r\n    enableSplice: true,\r\n    enableShorthands: true,\r\n    enableVerbatimStringLiteral: true,\r\n    enableTailCallOptimization: true,\r\n    stripComments: false,\r\n    wrapExternalValue: true,\r\n    returnMultipleRoot: false,\r\n    maxEvalCount: 0,\r\n\r\n    reservedNames: defaultReservedNames,\r\n    symbols: [],\r\n    macros: [],\r\n    funcs: [],\r\n};\r\n\r\n\r\n\r\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\r\n    return {\r\n        strings: typeof strings === 'string' ? [strings] : strings,\r\n        values: values || [],\r\n\r\n        index: 0,\r\n        pos: 0,\r\n        line: 0,\r\n\r\n        evalCount: 0,\r\n\r\n        scopes: [{isBlockLocal: false, scope: globals}],\r\n\r\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\r\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\r\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\r\n\r\n        config,\r\n    };\r\n}\r\n\r\n\r\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\r\n    state.strings = typeof strings === 'string' ? [strings] : strings;\r\n    state.values = values || [];\r\n    state.index = 0;\r\n    state.pos = 0;\r\n    state.line = 0;\r\n    state.evalCount = 0;\r\n    return state;\r\n}\r\n\r\n\r\n\r\n\r\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fRepl;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = async (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n\r\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\r\n                    s[i] = await s[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\r\n            if (config.enableEvaluate) {\r\n                for (let i = 0; i < s.length; i++) {\r\n                    s[i] = evaluate(stat, s[i]);\r\n                }\r\n            }\r\n\r\n            if (config.returnMultipleRoot) {\r\n                return s.length === 1 ? s[0] : s;\r\n            } else {\r\n                return s[s.length - 1];\r\n            }\r\n        };\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return execSync(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fReplSync;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\n\r\nexport const S = (() => {\r\n    const config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config.enableEvaluate = false;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\nexport const L = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\nexport const LS = L;\r\nexport const lisp = L;\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const L_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LS_async = L_async;\r\n// tslint:disable-next-line:variable-name\r\nexport const lisp_async = L_async;\r\n\r\n\r\n\r\nexport const LM = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LM_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n\r\n\r\nexport function LSX<R = SxToken>(lsxConf: LsxConfig): SExpressionTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config) as any;\r\n}\r\n\r\n\r\n\r\nexport function LSX_async<R = SxToken>(lsxConf: LsxConfig): SExpressionAsyncTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config) as any;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SExpressionTemplateFn,\r\n         SExpressionAsyncTemplateFn } from './types';\r\n\r\n\r\n\r\nexport function runScriptTags(lisp: SExpressionTemplateFn | SExpressionAsyncTemplateFn, globals?: object, contentType = 'text/lisp') {\r\n    const codes = document.querySelectorAll(`script[type=\"${contentType}\"]`);\r\n    const cs = [];\r\n    for (let i = 0; i < codes.length; i++) {\r\n        cs.push(codes[i].innerHTML);\r\n    }\r\n    lisp = lisp.appendGlobals(globals || {});\r\n    return lisp(cs.join('\\n'));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nexport * from './s-exp/s-expression';\r\nexport * from './s-exp/browser';\r\n\r\n\r\nexport { default as installCore }         from './s-exp/operators/core';\r\nexport { default as installArithmetic }   from './s-exp/operators/arithmetic';\r\nexport { default as installSequence }     from './s-exp/operators/sequence';\r\nexport { default as installJsx }          from './s-exp/operators/jsx';\r\nexport { default as installConcurrent }   from './s-exp/operators/concurrent';\r\n\r\n\r\nimport { default as coreOperators }       from './s-exp/operators/core/core.operator';\r\nimport { default as coreMacros }          from './s-exp/operators/core/core.macro';\r\nimport { default as coreSymbols }         from './s-exp/operators/core/core.symbol';\r\n\r\nimport { default as arithmeticOperators } from './s-exp/operators/arithmetic/arithmetic.operator';\r\nimport { default as arithmeticMacros }    from './s-exp/operators/arithmetic/arithmetic.macro';\r\nimport { default as arithmeticSymbols }   from './s-exp/operators/arithmetic/arithmetic.symbol';\r\n\r\nimport { default as sequenceOperators }   from './s-exp/operators/sequence/sequence.operator';\r\nimport { default as sequenceMacros }      from './s-exp/operators/sequence/sequence.macro';\r\nimport { default as sequenceSymbols }     from './s-exp/operators/sequence/sequence.symbol';\r\n\r\nimport { default as jsxOperators }        from './s-exp/operators/jsx/jsx.operator';\r\nimport { default as jsxMacros }           from './s-exp/operators/jsx/jsx.macro';\r\nimport { default as jsxSymbols }          from './s-exp/operators/jsx/jsx.symbol';\r\n\r\nimport { default as concurrentOperators } from './s-exp/operators/concurrent/concurrent.operator';\r\nimport { default as concurrentMacros }    from './s-exp/operators/concurrent/concurrent.macro';\r\nimport { default as concurrentSymbols }   from './s-exp/operators/concurrent/concurrent.symbol';\r\n\r\n\r\nexport const builtinOperators = {\r\n    core: coreOperators,\r\n    arithmetic: arithmeticOperators,\r\n    sequence: sequenceOperators,\r\n    jsx: jsxOperators,\r\n    concurrent: concurrentOperators,\r\n};\r\n\r\nexport const builtinMacros = {\r\n    core: coreMacros,\r\n    arithmetic: arithmeticMacros,\r\n    sequence: sequenceMacros,\r\n    jsx: jsxMacros,\r\n    concurrent: concurrentMacros,\r\n};\r\n\r\nexport const builtinSymbols = {\r\n    core: coreSymbols,\r\n    arithmetic: arithmeticSymbols,\r\n    sequence: sequenceSymbols,\r\n    jsx: jsxSymbols,\r\n    concurrent: concurrentSymbols,\r\n};\r\n"],"sourceRoot":""}