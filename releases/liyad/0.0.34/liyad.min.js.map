{"version":3,"sources":["webpack://liyad/webpack/universalModuleDefinition","webpack://liyad/webpack/bootstrap","webpack://liyad/./src/s-exp/errors.ts","webpack://liyad/./src/s-exp/evaluate.ts","webpack://liyad/./src/s-exp/ast.ts","webpack://liyad/./src/s-exp/compile.ops/helpers.ts","webpack://liyad/./src/s-exp/types.ts","webpack://liyad/./src/s-exp/compile.ts","webpack://liyad/./src/s-exp/compile.ops/index.ts","webpack://liyad/./src/s-exp/parser.ts","webpack://liyad/./src/s-exp/operators/core/core.fn.ts","webpack://liyad/./src/s-exp/operators/core/core.operator.ts","webpack://liyad/./src/s-exp/operators/core/core.macro.ts","webpack://liyad/./src/s-exp/operators/core/core.symbol.ts","webpack://liyad/./src/s-exp/operators/core/index.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.fn.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.operator.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.macro.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.symbol.ts","webpack://liyad/./src/s-exp/operators/arithmetic/index.ts","webpack://liyad/./src/lib/data.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.fn.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.operator.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.macro.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.symbol.ts","webpack://liyad/./src/s-exp/operators/sequence/index.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.fn.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.operator.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.macro.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.symbol.ts","webpack://liyad/./src/s-exp/operators/jsx/index.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.fn.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.operator.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.macro.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.symbol.ts","webpack://liyad/./src/s-exp/operators/concurrent/index.ts","webpack://liyad/./src/s-exp/s-expression.ts","webpack://liyad/./src/s-exp/browser.ts","webpack://liyad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","setEvaluationCount","checkParamsLength","checkUnsafeVarNames","_types__WEBPACK_IMPORTED_MODULE_0__","state","evalCount","config","maxEvalCount","args","min","max","length","Error","varName","toNumber","resolveSplice","resolveMacro","resolveValueSymbolScope","resolveValueSymbol","collectCapturedVariables","getCapturedScopes","installScope","uninstallScope","getScope","getGlobalScope","optimizeTailCall","evaluate","_ast__WEBPACK_IMPORTED_MODULE_0__","_errors__WEBPACK_IMPORTED_MODULE_1__","x","NaN","Number","enableSplice","Array","isArray","reservedNames","splice","slice","concat","macroInfo","macroMap","symbol","lastErr","r1","formalArgs","fn","actualArgs","matchResult","matchMacroArgs","Boolean","lastIsSpread","error","next","nullIfNotDefined","scopes","localScope","scope","capturedScopes","isBlockLocal","globalScope","symInfo","symbolMap","valueSymbolResolverFallback","raiseOnUnresolvedSymbol","names","a","unshift","assign","push","pop","macroName","nm","startsWith","endsWith","tpos","lastIndexOf","tname","fnBody","front","tail","if","self","varBaseName","tempVarsSyms","map","idx","until","let","set","sym","quote","backquote","resolveUnquote","unquote","eval","sprs","spread","reverse","funcInfo","funcMap","v","funcSymbolResolverFallback","resolveFunctionSymbol","JSON","stringify","wrapExternalValue","car","cdr","dotted","wrapByUnquote","isSymbol","applyMacros","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","checkUnsafeVarNames_dynamic","_evaluate__WEBPACK_IMPORTED_MODULE_1__","_errors__WEBPACK_IMPORTED_MODULE_2__","tok","FatalError","MaxEvaluationCountError","ScriptTerminationError","[object Object]","message","super","where","compileLambda","_compile_ops_helpers__WEBPACK_IMPORTED_MODULE_3__","_compile_ops__WEBPACK_IMPORTED_MODULE_4__","compileCore","_$_vars","compileValue","b","compFnBody","String","ctx","varNames","has","varsCount","compileToken","body","ops","join","arr","Map","varNamesCount","varDefs","makeScope","scoped","varNamesCopy","entries","enableTailCallOptimization","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","code","registerOperators","_helpers__WEBPACK_IMPORTED_MODULE_2__","raise","quoted","vName","symName","regToVars","checkNameCalled","checkNamePos","str","checkName","not","w1","w0","hasSpread","isEOF","ch","isSpace","trim","isNumberFirstChar","test","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","line","index","pos","strings","getChar","virtualEof","disableEscape","eof","values","split","eofSeq","ch1","ch2","fromCodePoint","parseInt","lookAheads","chs","lookAhead","skipWhitespaces","parseNumber","parseSymbol","enableShorthands","match","ws","parseStringOrComment","valuesStartSeq","valuesStopChar","eofSeqs","types","parseList","parseString","parseHereDoc","attrs","q","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","ahead","isSpliceUnquote","ret","ast","aheads","enableSpread","enableHereDoc","isHereDoc","Template","ahs","enableVerbatimStringLiteral","listStopChar","initialList","stripComments","parse","$car","errors","$$first","$cdr","$cons","$$firstAndSecond","$first","$second","$$second","$last","$rest","$firstAndSecond","$atom","$eq","$notEq","$list","$__scope","returnMultiple","kv","kvSym","kvName","xSym","xName","$__lambda","fa","$comp$__lambda","compile","$apply","apply","$raise","$pipe","$__let","$__set","path","subst","inprog","last","$boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$symbol","$isSymbol","$isList","$isString","$isNumber","$isNaN","isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","$objectAssign","$jsonStringify","$jsonParse","$now","Date","now","$datetimeFromIso","dt","getTime","$datetime","year","padStart","$datetimeLc","$datetimeToIsoString","toISOString","$datetimeToComponents","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getUTCDay","$datetimeToComponentsLc","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","getDay","$match","RegExp","exec","$consoleLog","console","log","$consoleError","$consoleTrace","trace","$consoleTime","time","$consoleTimeEnd","timeEnd","$consoleTimeLog","timeLog","core_operator","st","info","fArgs","aArgs","list","Function","e","tempVarSym","keyName","core_macro","core_symbol","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","install","funcs","macros","symbols","$bitLShift","$bitSRShift","$bitURShift","$bitNot","$bitAnd","reduce","$bitOr","$bitXor","$add","$sub","$mul","$sup","Math","pow","$div","$mod","$max","$min","$avg","$floor","floor","$ceil","ceil","$round","round","$abs","abs","$sign","sign","arithmetic_operator","arithmetic_macro","arithmetic_symbol","arithmetic_install","Query","data","this","condition","y","desc","sort","start","groupBy","array","w","first","intermediate","single","filter","query","$length","$trim","$trimHead","trimLeft","$trimTail","trimRight","$replaceAll","$split","$join","$concat","$slice","$top","$tail","$push","$pop","$__at","$reverse","$reverseDestructive","$find","find","$filter","$map","$reduce","$reduceFromTail","reduceRight","$sort","$sortDestructive","$groupEvery","groupEvery","select","$groupBy","$orderBy","orderBy","$where","sequence_operator","stop","step","from","sequence_macro","sequence_symbol","sequence_install","$jsxProps","styles","matched","classes","z","cs","forEach","fragment","__html","__text","getJsxTagsParams","children","props","$jsxStandardTag","jsx","$jsxComponentTag","component","jsx_operator","jsx_macro","jsx_symbol","jsx_install","lsxConf","components","jsxFlagment","JsxFragment","$__letAsync","promise","then","Promise","resolve","reject","$__setAsync","$then","$resolveAll","promises","all","$resolveAny","invert","res","rej","ps","firstOf","$resolvePipe","lambdas","$resolveFork","resolvers","rejectors","pa","lp","catch","f","concurrent_operator","concurrent_macro","concurrent_symbol","concurrent_install","defaultReservedNames","cons","atom","eq","lambda","defun","cond","while","doWhile","doUntil","defvar","setq","and","or","gensym","defaultConfig","enableEvaluate","returnMultipleRoot","initState","globals","resetState","SExpression","conf","startup","evaluateAST","repl","fRepl","sync","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","installer","SExpressionAsync","__awaiter","stat","execSync","S","L","LS","lisp","L_async","LS_async","lisp_async","LM","LM_async","LSX","LSX_async","runScriptTags","contentType","codes","document","querySelectorAll","innerHTML","builtinOperators","builtinMacros","builtinSymbols","core","arithmetic","sequence","concurrent"],"mappings":"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","file":"liyad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"liyad\"] = factory();\n\telse\n\t\troot[\"liyad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         MaxEvaluationCountError } from './types';\r\n\r\n\r\n\r\nexport function setEvaluationCount(state: SxParserState) {\r\n    state.evalCount++;\r\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\r\n        throw new MaxEvaluationCountError();\r\n    }\r\n}\r\n\r\n\r\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\r\n    if (args.length < min) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\r\n    }\r\n    if (max && max < args.length) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\r\n    }\r\n    return args;\r\n}\r\n\r\n\r\nexport function checkUnsafeVarNames(name: string, varName: string) {\r\n    if (varName === '__proto__') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    return varName;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedPair,\r\n         SxDottedFragment,\r\n         SxToken,\r\n         SxScope,\r\n         CapturedScopes,\r\n         SxMacroInfo }         from './types';\r\nimport { isSymbol }            from './ast';\r\nimport { setEvaluationCount,\r\n         checkUnsafeVarNames } from './errors';\r\n\r\n\r\n\r\nexport function toNumber(x: any) {\r\n    switch (typeof x) {\r\n    case 'object': case 'symbol': case 'function':\r\n        return NaN;\r\n    default:\r\n        return Number(x);\r\n    }\r\n}\r\n\r\n\r\nexport function resolveUnquote(state: SxParserState, r: SxToken[]) {\r\n    for (let i = 0; i < r.length; i++) {\r\n        const symUnquote = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.unquote);\r\n        if (symUnquote) {\r\n            r = r.slice(0, i).concat([evaluate(state, (r[i] as SxToken[])[1])], r.slice(i + 1));\r\n        }\r\n        if (Array.isArray(r[i])) {\r\n            r = r.slice(0);\r\n            r[i] = resolveUnquote(state, r[i] as SxToken[]);\r\n        }\r\n    }\r\n    return resolveSplice(state, r);\r\n}\r\n\r\n\r\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\r\n    if (state.config.enableSplice) {\r\n        for (let i = r.length - 1; i >= 0; i--) {\r\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\r\n            if (symSplice) {\r\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function resolveMacro(state: SxParserState, x: SxSymbol, r: SxToken[]) {\r\n    const macroInfo = state.macroMap.get(x.symbol);\r\n    let lastErr = null;\r\n    if (macroInfo) {\r\n        let m: SxMacroInfo | undefined = macroInfo;\r\n        const r1 = r.slice(1);\r\n        while (m) {\r\n            if (m.formalArgs) {\r\n                const matchResult = matchMacroArgs(state, x.symbol, m.formalArgs, Boolean(m.lastIsSpread), r1);\r\n                if (! matchResult.error) {\r\n                    return {\r\n                        fn: m.fn(state, x.symbol, matchResult.formalArgs as SxSymbol[]),\r\n                        actualArgs: r.slice(0, 1).concat(matchResult.actualArgs as SxToken[]),\r\n                    };\r\n                }\r\n                lastErr = matchResult.error;\r\n                m = m.next;\r\n            } else {\r\n                return {\r\n                    fn: m.fn(state, x.symbol),\r\n                    actualArgs: r,\r\n                };\r\n            }\r\n        }\r\n        if (lastErr) {\r\n            throw new Error(lastErr);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\r\n    if (typeof x === 'function') {\r\n        return x;\r\n    }\r\n    const funcInfo = state.funcMap.get(x.symbol);\r\n    if (funcInfo) {\r\n        return funcInfo.fn(state, x.symbol);\r\n    } else {\r\n        const v = resolveValueSymbol(state, x);\r\n        if (typeof v === 'function') {\r\n            return v;\r\n        }\r\n        if (state.config.funcSymbolResolverFallback) {\r\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\r\n            return localScope.scope;\r\n        }\r\n        if (localScope.capturedScopes &&\r\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\r\n            return localScope.capturedScopes[x.symbol];\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    const globalScope = getGlobalScope(state);\r\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\r\n        return globalScope.scope;\r\n    }\r\n    return nullIfNotDefined ? null : getScope(state).scope;\r\n}\r\n\r\n\r\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\r\n    const scope = resolveValueSymbolScope(state, x, true);\r\n    if (scope) {\r\n        return scope[x.symbol];\r\n    }\r\n    const symInfo = state.symbolMap.get(x.symbol);\r\n    if (symInfo) {\r\n        return symInfo.fn(state, x.symbol);\r\n    } else {\r\n        if (state.config.valueSymbolResolverFallback) {\r\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\r\n    const capturedScopes: CapturedScopes = {};\r\n    for (const n of names) {\r\n        const scope = resolveValueSymbolScope(state, n, true);\r\n        if (scope === null) {\r\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\r\n        }\r\n        checkUnsafeVarNames('collectCapturedVariables', n.symbol);\r\n        capturedScopes[n.symbol] = scope;\r\n    }\r\n    return capturedScopes;\r\n}\r\n\r\n\r\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\r\n    const a: CapturedScopes[] = [];\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope.capturedScopes) {\r\n            a.unshift(localScope.capturedScopes);\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\r\n}\r\n\r\n\r\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\r\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\r\n}\r\n\r\n\r\nexport function uninstallScope(state: SxParserState): any {\r\n    if (state.scopes.length < 2) {\r\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\r\n    }\r\n    return state.scopes.pop();\r\n}\r\n\r\n\r\nexport function getScope(state: SxParserState) {\r\n    return state.scopes[state.scopes.length - 1];\r\n}\r\n\r\n\r\nexport function getGlobalScope(state: SxParserState) {\r\n    return state.scopes[0];\r\n}\r\n\r\n\r\nexport function matchMacroArgs(\r\n        state: SxParserState, macroName: string,\r\n        formalArgs: SxSymbol[], lastIsSpread: boolean, actualArgs: SxToken[]) {\r\n\r\n    formalArgs = formalArgs.slice(0);\r\n    actualArgs = actualArgs.slice(0);\r\n    if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n        return ({ error: `[SX] macro call (${macroName}): Actual args too short: actual ${\r\n            actualArgs.length} / formal ${formalArgs.length}.` });\r\n    }\r\n    for (let i = formalArgs.length - (lastIsSpread ? 2 : 1); i >= 0; i--) {\r\n        let nm = formalArgs[i].symbol;\r\n        if (nm.startsWith('!')) {\r\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1);\r\n            nm = formalArgs[i].symbol;\r\n\r\n            if (! isSymbol(actualArgs[i])) {\r\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\r\n            }\r\n        } else if (nm.startsWith('<') && nm.endsWith('>')) {\r\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1, -1);\r\n            nm = formalArgs[i].symbol;\r\n\r\n            if (isSymbol(actualArgs[i], nm)) {\r\n                formalArgs = formalArgs.slice(0, i).concat(formalArgs.slice(i + 1));\r\n                actualArgs = actualArgs.slice(0, i).concat(actualArgs.slice(i + 1));\r\n            } else {\r\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not expected symbol.` });\r\n            }\r\n        } else {\r\n            const tpos = nm.lastIndexOf(':');\r\n            if (0 < tpos) {\r\n                const tname = nm.slice(tpos + 1);\r\n                switch (tname) {\r\n                case 'number':\r\n                    if (typeof actualArgs[i] !== 'number') {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not number.` });\r\n                    }\r\n                    break;\r\n                case 'string':\r\n                    if (typeof actualArgs[i] !== 'string') {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not string.` });\r\n                    }\r\n                    break;\r\n                case 'function':\r\n                    if (! (Array.isArray(actualArgs[i]) && isSymbol((actualArgs[i] as any)[0]))) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not function.` });\r\n                    }\r\n                    break;\r\n                case 'list':\r\n                    if (! Array.isArray(actualArgs[i])) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not list.` });\r\n                    }\r\n                    break;\r\n                case 'symbol':\r\n                    if (! isSymbol(actualArgs[i])) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\r\n                    }\r\n                    break;\r\n                case 'any':\r\n                    break;\r\n                default:\r\n                    return ({ error: `[SX] macro call (${macroName}): Formal arg(${i}: ${nm}) is unknown type ${tname}.` });\r\n                }\r\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(0, tpos);\r\n            }\r\n        }\r\n    }\r\n    return ({ formalArgs, actualArgs });\r\n}\r\n\r\n\r\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //    formalArgs: 'sym1 ... 'symN\r\n    //        fnBody: 'expr1 ... 'exprN\r\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\r\n        const front = fnBody.slice(0, fnBody.length - 1);\r\n        const tail = fnBody[fnBody.length - 1];\r\n        if (tail && (typeof tail[0] === 'object') && tail[0].symbol === state.config.reservedNames.if) {\r\n            // S expression: ($if cond t-expr f-expr)\r\n            if (Array.isArray(tail[3]) && (typeof tail[3][0] === 'object') && tail[3][0].symbol === state.config.reservedNames.self) {\r\n                // S expression (recursive):\r\n                //     (                                 ;; fnBody\r\n                //         expr1 ... exprN-1             ;; front\r\n                //         ($if cond                     ;; tail[0] [1]\r\n                //             t-expr                    ;;     [2]\r\n                //             ($self                    ;;     [3]\r\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\r\n                //     )\r\n                //\r\n                //  -> S exp (tail call optimization):\r\n                //     (                                                                  ;; fnBody\r\n                //         ($until cond                                                   ;; tail[1]\r\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\r\n                //                 expr1 ... exprN-1                                      ;; front\r\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\r\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\r\n                //             )                                                          ;;\r\n                //         )                                                              ;;\r\n                //         expr1 ... exprN-1                                              ;; front\r\n                //         t-expr                                                         ;; tail[2]\r\n                //     )\r\n\r\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\r\n\r\n                return [\r\n                    [{symbol: state.config.reservedNames.until}, tail[1],\r\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\r\n                            ...front,\r\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\r\n                            ...(tempVarsSyms.map((x, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\r\n                        ],\r\n                    ],\r\n                    ...front,\r\n                    tail[2],\r\n                ];\r\n            }\r\n        }\r\n    }\r\n    return fnBody;\r\n}\r\n\r\n\r\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\r\n    setEvaluationCount(state);\r\n\r\n    if (x === null || x === void 0) {\r\n        return x;\r\n    }\r\n    let r: SxToken = x;\r\n\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                return r;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym, r);\r\n                if (m) {\r\n                    r = m.fn(m.actualArgs as SxToken[]);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n\r\n    if (Array.isArray(r)) {\r\n        r = r.slice(0);\r\n        if (0 < r.length) {\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                if (sym.symbol === state.config.reservedNames.quote) {\r\n                    return r.slice(1, 2)[0];\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.backquote) {\r\n                    r = r.slice(1, 2)[0];\r\n                    if (Array.isArray(r)) {\r\n                        r = resolveUnquote(state, r);\r\n                    }\r\n                    return r;\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.eval) {\r\n                    return evaluate(state, evaluate(state, r.slice(1, 2)[0]));\r\n                }\r\n            }\r\n\r\n            const sprs = [];\r\n            for (let i = 1; i < r.length; i++) {\r\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\r\n                if (symSpr) {\r\n                    sprs.push(i);\r\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\r\n                    r[i] = Array.isArray(a) ? a : [a];\r\n                } else {\r\n                    r[i] = evaluate(state, r[i]);\r\n                }\r\n            }\r\n            for (const i of sprs.reverse()) {\r\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\r\n            }\r\n\r\n            let fn: any;\r\n            if (typeof r[0] === 'function') {\r\n                fn = r[0];\r\n            } else if (sym) {\r\n                fn = resolveFunctionSymbol(state, sym);\r\n            } else {\r\n                fn = evaluate(state, r[0]);\r\n            }\r\n\r\n            if (typeof fn === 'function') {\r\n                r = (fn as any)(...(r.slice(1)));\r\n            } else {\r\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\r\n            }\r\n        }\r\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\r\n        r = (r as SxExternalValue).value;\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\r\n        r = resolveValueSymbol(state, r as SxSymbol);\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\r\n        const car = evaluate(state, (r as SxDottedPair).car);\r\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\r\n        if (Array.isArray(cdr)) {\r\n            const a = (cdr as any[]).slice(0);\r\n            a.unshift(car);\r\n            r = a;\r\n        } else {\r\n            r = { car, cdr };\r\n        }\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\r\n        r = [\r\n            evaluate(state, (r as SxDottedFragment).dotted),\r\n        ];\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\r\n        r = [];\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol }     from './types';\r\n\r\n\r\n\r\nexport function quote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.quote}, x];\r\n}\r\n\r\n\r\nexport function isQuoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.quote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function backquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.backquote}, x];\r\n}\r\n\r\n\r\nexport function isBackquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.backquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function wrapByUnquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.unquote}, x];\r\n}\r\n\r\n\r\nexport function isUnquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.unquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function spread(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.spread}, x];\r\n}\r\n\r\n\r\nexport function splice(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.splice}, x];\r\n}\r\n\r\n\r\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\r\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\r\n        if (name !== void 0) {\r\n            return x.symbol === name ? x : null;\r\n        } else {\r\n            return x;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken }             from '../types';\r\nimport { isSymbol }            from '../ast';\r\nimport { resolveSplice,\r\n         resolveMacro,\r\n         resolveValueSymbol,\r\n         getScope }            from '../evaluate';\r\nimport { setEvaluationCount,\r\n         checkUnsafeVarNames } from '../errors';\r\n\r\n\r\n\r\nexport function applyMacros(state: SxParserState, tok: SxToken) {\r\n    let r: SxToken = tok;\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                break;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym, r);\r\n                if (m) {\r\n                    r = m.fn(m.actualArgs as SxToken[]);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function stripQuote(state: SxParserState, tok: SxToken) {\r\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\r\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\r\n    }\r\n    return (tok as any)[1];\r\n}\r\n\r\n\r\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\r\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\r\n        return (tok as any)[1];\r\n    } else {\r\n        return tok;\r\n    }\r\n}\r\n\r\n\r\nexport function getScope_stateApplied(state: SxParserState) {\r\n    return (function() { return getScope(state); });\r\n}\r\n\r\n\r\nexport function resolveValueSymbol_dynamic(state: SxParserState, varName: string) {\r\n    checkUnsafeVarNames('(compiler)resolveValueSymbol_dynamic', varName);\r\n    return (function(){ return resolveValueSymbol(state, {symbol: varName}); });\r\n}\r\n\r\nexport function checkUnsafeVarNames_dynamic(name: string) {\r\n    return (function(varName: string){ return checkUnsafeVarNames(name, varName); });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport type SxMacro = (state: SxParserState, name: string, formalArgs?: SxSymbol[]) => (list: SxToken[]) => SxToken;\r\n\r\nexport interface SxMacroInfo {\r\n    name: string;\r\n    fn: SxMacro;\r\n\r\n    formalArgs?: SxSymbol[];\r\n    lastIsSpread?: boolean;\r\n    next?: SxMacroInfo;\r\n}\r\n\r\n\r\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\r\n\r\nexport interface SxFuncInfo {\r\n    name: string;\r\n    fn: SxFunc;\r\n\r\n    // TODO: overloading\r\n    // formalArgs?: SxSymbol[];\r\n    // lastIsSpread?: boolean;\r\n    // next?: SxFuncInfo;\r\n}\r\n\r\n\r\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\r\n\r\nexport interface SxSymbolInfo {\r\n    name: string;\r\n    fn: SxSymbolResolver;\r\n}\r\n\r\n\r\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\r\n\r\nexport interface SxScope {\r\n    isBlockLocal: boolean;\r\n    scope: any;           // { [s: string]: any; };\r\n    capturedScopes?: CapturedScopes;\r\n}\r\n\r\n\r\nexport interface SxReservedNames {\r\n    eval: string;\r\n    quote: string;\r\n    backquote: string;\r\n    unquote: string;\r\n    spread: string;\r\n    splice: string;\r\n\r\n    car: string;\r\n    cdr: string;\r\n    cons: string;\r\n    atom: string;\r\n    eq: string;\r\n    list: string;\r\n\r\n    let: string;\r\n    lambda: string;\r\n    self: string;\r\n    defun: string;\r\n\r\n    if: string;\r\n    cond: string;\r\n\r\n    while: string;\r\n    doWhile: string;\r\n    until: string;\r\n    doUntil: string;\r\n\r\n    get: string;\r\n    defvar: string;\r\n    setq: string;\r\n    set: string;\r\n    call: string;\r\n\r\n    not: string;\r\n    and: string;\r\n    or: string;\r\n\r\n    isSymbol: string;\r\n    gensym: string;\r\n    raise: string;\r\n    catch: string;\r\n\r\n    Template: string;\r\n}\r\n\r\nexport interface SxParserConfig {\r\n    raiseOnUnresolvedSymbol: boolean;\r\n    enableEvaluate: boolean;\r\n    enableHereDoc: boolean;\r\n    enableSpread: boolean;\r\n    enableSplice: boolean;\r\n    enableShorthands: boolean;\r\n    enableVerbatimStringLiteral: boolean;\r\n    enableTailCallOptimization: boolean;\r\n    stripComments: boolean;\r\n    wrapExternalValue: boolean;\r\n    reservedNames: SxReservedNames;\r\n    returnMultipleRoot: boolean;\r\n    maxEvalCount: number;\r\n\r\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\r\n    JsxFragment?: any;\r\n\r\n    funcs: SxFuncInfo[];\r\n    macros: SxMacroInfo[];\r\n    symbols: SxSymbolInfo[];\r\n\r\n    funcSymbolResolverFallback?: SxFunc;\r\n    valueSymbolResolverFallback?: SxSymbolResolver;\r\n}\r\n\r\nexport interface SxParserState {\r\n    strings: TemplateStringsArray | string[];\r\n    values: any[];\r\n\r\n    index: number;\r\n    pos: number;\r\n    line: number;\r\n\r\n    evalCount: number;\r\n\r\n    scopes: SxScope[];\r\n\r\n    macroMap: Map<string, SxMacroInfo>;\r\n    funcMap: Map<string, SxFuncInfo>;\r\n    symbolMap: Map<string, SxSymbolInfo>;\r\n\r\n    config: SxParserConfig;\r\n}\r\n\r\nexport interface SxEof {\r\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\r\n    eofSeq?: string;\r\n}\r\n\r\nexport interface SxExternalValue {\r\n    value: any;\r\n}\r\n\r\nexport interface SxSymbol {\r\n    'symbol': string;\r\n\r\n    // TODO: debug info\r\n    // _fileName?: string;\r\n    // _line?: number;\r\n    // _col?: number;\r\n}\r\n\r\nexport interface SxComment {\r\n    comment: string;\r\n}\r\n\r\nexport interface SxDottedPair {\r\n    car: SxToken; // left\r\n    cdr: SxToken; // right\r\n}\r\n\r\nexport interface SxDottedFragment {\r\n    dotted: SxToken; // right\r\n}\r\n\r\n\r\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\r\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\r\nexport type SxChar = string | SxEof | SxExternalValue;\r\nexport type SxAtom = SxSymbol | string | number | boolean | null;\r\nexport type SxList = SxDottedPair | SxAtom[];\r\n\r\n\r\n\r\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\r\n\r\n\r\nexport interface CompilerContext {\r\n    _$_vars: any[];\r\n    varsCount: number;\r\n    varNames: Map<string, string>;\r\n    varNamesCount: number;\r\n    varDefs: string;\r\n    ops: Map<string, CompilerOperator>;\r\n    makeScope: (scoped: () => void) => void;\r\n    compileToken: (body: any[], i: number) => string;\r\n}\r\n\r\n\r\nexport interface LsxConfig {\r\n    jsx: (comp: any, props: any, ...children: any[]) => any;\r\n    jsxFlagment: any;\r\n    components: object;\r\n}\r\n\r\n\r\nexport class FatalError extends Error {\r\n    public constructor(message?: string | undefined) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n\r\nexport class MaxEvaluationCountError extends FatalError {\r\n    public constructor() {\r\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\r\n    }\r\n}\r\n\r\n\r\nexport class ScriptTerminationError extends FatalError {\r\n    public constructor(where: string) {\r\n        super(`[SX] ${where}: Unexpected termination of script.`);\r\n    }\r\n}\r\n\r\n\r\nexport interface SExpressionRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\r\n}\r\n\r\n\r\nexport interface SExpressionTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    evaluateAST: (ast: SxToken[]) => R;\r\n    repl: () => SExpressionRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\r\n    repl: () => SExpressionAsyncRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         SxFuncInfo,\r\n         CompilerOperator,\r\n         CompilerContext  }           from './types';\r\nimport { isSymbol }                   from './ast';\r\nimport { getCapturedScopes,\r\n         optimizeTailCall }           from './evaluate';\r\nimport { checkUnsafeVarNames }        from './errors';\r\nimport { applyMacros,\r\n         stripQuoteOrPass,\r\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\r\nimport { registerOperators }          from './compile.ops';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\r\n\r\n    function makeScope(scoped: () => void) {\r\n        const varNamesCopy = new Map<string, string>();\r\n        for (const x of ctx.varNames.entries()) {\r\n            varNamesCopy.set(x[0], x[1]);\r\n        }\r\n        scoped();\r\n        ctx.varNames = varNamesCopy;\r\n    }\r\n\r\n\r\n    function compileValue(b: any) {\r\n        let compFnBody = '';\r\n        if (b === null) {\r\n            compFnBody += '(null)';\r\n        } else if (b === void 0) {\r\n            compFnBody += '(void 0)';\r\n        } else switch (typeof b) {\r\n        case 'boolean': case 'number':\r\n            compFnBody += `(${String(b)})`;\r\n            break;\r\n        case 'object':\r\n            if (isSymbol(b)) {\r\n                const sym = b as SxSymbol;\r\n                checkUnsafeVarNames('(compiler)compileValue', sym.symbol);\r\n                if (ctx.varNames.has(sym.symbol)) {\r\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\r\n                } else {\r\n                    _$_vars[ctx.varsCount] = sym.symbol;\r\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n                }\r\n                break;\r\n            } else {}\r\n            // FALL_THRU\r\n        default:\r\n            _$_vars[ctx.varsCount] = b;\r\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n            break;\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    function compileToken(body: any[], i: number) {\r\n        let compFnBody = '';\r\n        const b = body[i];\r\n        if (Array.isArray(b)) {\r\n            if (0 < b.length) {\r\n                const r: SxToken = applyMacros(state, b);\r\n                if (Array.isArray(r)) {\r\n                    if (0 < r.length) {\r\n                        if (isSymbol(r[0])) {\r\n                            const sym = r[0] as SxSymbol;\r\n                            const args = r.slice(1);\r\n                            checkUnsafeVarNames('(compiler)compileToken', sym.symbol);\r\n                            if (ops.has(sym.symbol)) {\r\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\r\n                            } else {\r\n                                if (sym.symbol === state.config.reservedNames.spread) {\r\n                                    compFnBody += `...(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else if (state.funcMap.has(sym.symbol)) {\r\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                } else if (ctx.varNames.has(sym.symbol)) {\r\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else {\r\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            switch (typeof r[0]) {\r\n                            case 'function':\r\n                                _$_vars[ctx.varsCount] = r[0];\r\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                break;\r\n                            default:\r\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        compFnBody += '([])';\r\n                    }\r\n                } else {\r\n                    compFnBody += compileValue(b);\r\n                }\r\n            } else {\r\n                compFnBody += '([])';\r\n            }\r\n        } else {\r\n            compFnBody += compileValue(b);\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    const ctx: CompilerContext = {\r\n        _$_vars,\r\n        varsCount: 1,\r\n        varNames: new Map<string, string>(),\r\n        varNamesCount: 0,\r\n        varDefs: 'var x0;',\r\n        ops: new Map<string, CompilerOperator>(),\r\n        makeScope,\r\n        compileToken,\r\n    };\r\n\r\n    registerOperators(state, ctx);\r\n    const ops = ctx.ops;\r\n\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n    if (capturedScopes) {\r\n        for (const x in capturedScopes) {\r\n            if (Object.hasOwnProperty.call(capturedScopes, x)) {\r\n                _$_vars[ctx.varsCount++] = x;\r\n                _$_vars[ctx.varsCount] = capturedScopes[x];\r\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\r\n                ctx.varsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const compFormalArgs = `${formalArgs.map((x, i) => {\r\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\r\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\r\n    }).join(',')}`;\r\n\r\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\r\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\r\n}\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\r\n    // tslint:disable-next-line:no-eval\r\n    _$_vars[0] = eval(code);\r\n    return _$_vars[0];\r\n}\r\n\r\n\r\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\r\n    // tslint:disable-next-line:variable-name\r\n    const _$_vars: any[] = [];\r\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         CompilerContext }             from '../types';\r\nimport { isSymbol }                    from '../ast';\r\nimport { checkParamsLength,\r\n         checkUnsafeVarNames }         from '../errors';\r\nimport { stripQuote,\r\n         stripQuoteOrPass,\r\n         getScope_stateApplied,\r\n         resolveValueSymbol_dynamic,\r\n         checkUnsafeVarNames_dynamic } from './helpers';\r\n\r\n\r\n\r\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\r\n    const {\r\n        _$_vars,\r\n        ops,\r\n        makeScope,\r\n        compileToken,\r\n    } = ctx;\r\n\r\n\r\n    ops.set(state.config.reservedNames.quote, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.self, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        compFnBody += `((_$_vars[0])(${\r\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if condition 't-expr 'f-expr)\r\n        //  -> (if condition is true ) S expr  : t-expr\r\n        //  -> (if condition is false) S expr  : f-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if', args, 2, 3);\r\n        compFnBody += `(${compileToken(r, 1)}?(${\r\n            compileToken([stripQuote(state, r[2])], 0)}):(${\r\n            compileToken([stripQuote(state, r[3])], 0)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if-null condition 'null-expr)\r\n        //  -> (if condition is not null ) S expr  : condition\r\n        //  -> (if condition is null)      S expr  : null-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\r\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\r\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        //  -> (if (eval condI) is true ) S expr  : exprI\r\n        //  -> (if no matched)            S expr  : null\r\n        let compFnBody = '';\r\n        {\r\n            checkParamsLength('compileToken:$__cond', args, 1);\r\n            compFnBody += `(`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\r\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\r\n            }\r\n            compFnBody += `null`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `)`;\r\n            }\r\n            compFnBody += `)`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__while', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n        //  -> (if n > 0) S expr  : exprN\r\n        //  -> (else)     S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__repeat', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n        //  -> (if list.length > 0) S expr  : exprN\r\n        //  -> (else)               S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__for', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n        //  -> (else)               S expr  : exprN\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__scope', args, 2);\r\n        // r[1]: isBlockLocal\r\n        // r[2]: returnMultiple\r\n        if (! Array.isArray(r[3])) {\r\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\r\n        }\r\n        makeScope(() => {\r\n            for (const x of stripQuote(state, r[3]) as any[]) {\r\n                let name = '';\r\n                if (Array.isArray(x)) {\r\n                    if (x.length < 1) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\r\n                    }\r\n                    if (! isSymbol(x[0])) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\r\n                    }\r\n                    name = x[0].symbol;\r\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\r\n                } else {\r\n                    if (! isSymbol(x)) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\r\n                    }\r\n                    name = x.symbol;\r\n                }\r\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n                ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n            }\r\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\r\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__try 'expr 'catch-expr)\r\n        //  ->                               S expr  : expr\r\n        //  -> (if error is raised in expr)  S expr  : catch-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__try', args, 1, 2);\r\n        compFnBody += `((()=>{try{${\r\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\r\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\r\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\r\n        makeScope(() => {\r\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\r\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\r\n            compFnBody += `${\r\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.raise, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($raise 'expr)\r\n        //  -> S expr  : -\r\n        let compFnBody = '';\r\n        compFnBody += `((()=>{throw ${\r\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($boolean any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\r\n        compFnBody += `((x0=${compileToken(args, 0)\r\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__get', args, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__let 'nameStrOrSymbol expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__let', args, 2, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        if (! ctx.varNames.has(name)) {\r\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n        }\r\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__set', args, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ?\r\n            quoted.symbol :\r\n            (typeof quoted === 'string' ?\r\n                quoted :\r\n                (Array.isArray(quoted) ?\r\n                    (isSymbol(quoted[0]) ?\r\n                        quoted[0].symbol :\r\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\r\n                    ) :\r\n                    null\r\n                )\r\n            );\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = checkUnsafeVarNames('compileToken:$__set', symName);\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        let checkNameCalled = false;\r\n        let checkNamePos = '';\r\n        const checkName = (str: string) => {\r\n            if (! checkNameCalled) {\r\n                _$_vars[ctx.varsCount] = checkUnsafeVarNames_dynamic('compileToken:$__set');\r\n                checkNamePos = String(ctx.varsCount++);\r\n                checkNameCalled = true;\r\n            }\r\n            return `(_$_vars[${checkNamePos}](${str}))`;\r\n        };\r\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                checkName(compileToken(arr, idx))}]`).join('')}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.not, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$not', args, 1, 1);\r\n        compFnBody += `(!${compileToken(args, 0)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__and 'expr1 ... 'exprN)\r\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n        //  -> (else)                                                     S expr  : expr-i (false left most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__and', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__or 'expr1 ... 'exprN)\r\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n        //  -> (else)                                                  S expr  : expr-i (false right most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__or', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($eq arg1 arg2)\r\n        //  -> (if arg1 === arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:===', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not-eq arg1 arg2)\r\n        //  -> (if arg1 !== arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (== a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (!= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (< a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (> a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($concat listOrString1 ... listOrStringN)\r\n        //  -> S expr  : listOrString\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$concat', args, 1);\r\n        let w1 = '';\r\n        if (Array.isArray(args[0]) && isSymbol((args[0] as any)[0], state.config.reservedNames.spread)) {\r\n            const w0 = compileToken(args[0] as any, 1);\r\n            w1 = `(${w0}[0]).concat((${w0}.length>1?${w0}[1]:(typeof ${w0}[0]==='string'?'':[])),`;\r\n        } else {\r\n            w1 = `${compileToken(args as any, 0)}.concat(`;\r\n        }\r\n        compFnBody += `(${w1}${\r\n            args.slice(1).map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (+ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n            };return _$_rv.reduce((x,y)=>x+y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (- number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:-', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return (_$_rv.length>1?(_$_rv.reduce((x,y)=>x-y)):(_$_rv.length>0?-_$_rv[0]:NaN));})())`;\r\n        } else {\r\n            compFnBody += `(${r.length > 2 ?\r\n                args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\r\n                `-(${String(compileToken(r, 1))})`})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (* number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:*', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x*y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (** number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:**', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x**y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (/ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:/', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x/y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (% number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:%', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x%y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<< number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-not number)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\r\n        compFnBody += `(~(${compileToken(r, 1)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-and numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-or numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-xor numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\r\n        return compFnBody;\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxEof,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedFragment,\r\n         SxComment,\r\n         SxToken,\r\n         SxChar,\r\n         ScriptTerminationError } from './types';\r\nimport { quote,\r\n         backquote,\r\n         wrapByUnquote,\r\n         spread,\r\n         splice }                 from './ast';\r\n\r\n\r\n\r\nfunction isEOF(ch: SxChar): boolean {\r\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\r\n}\r\n\r\n\r\nfunction isSpace(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && ch.trim().length === 0;\r\n}\r\n\r\n\r\nfunction isNumberFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isSymbolFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' &&\r\n        !isSpace(ch) &&\r\n        !isNumberFirstChar(ch);\r\n}\r\n\r\n\r\n\r\nfunction lookCurrentLineHint(state: SxParserState): string {\r\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\r\n        state.strings.length > state.index ?\r\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\r\n}\r\n\r\n\r\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    if (state.strings.length <= state.index) {\r\n        return {eof: true};\r\n    }\r\n    if (state.strings[state.index].length <= state.pos) {\r\n        if ((! state.values) || (state.values.length <= state.index)) {\r\n            state.pos = 0;\r\n            state.index++;\r\n            return getChar(state);\r\n        } else {\r\n            const ch = {value: state.values[state.index]};\r\n            state.pos = 0;\r\n            state.index++;\r\n            return ch;\r\n        }\r\n    }\r\n    if (virtualEof) {\r\n        for (const v of virtualEof) {\r\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\r\n            if (ch === v) {\r\n                state.pos += v.length;\r\n                state.line += ch.split('\\n').length - 1;\r\n                return { eof: false , eofSeq: v };\r\n            }\r\n        }\r\n    }\r\n    {\r\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n        state.pos++;\r\n\r\n        if (ch === '\\n') {\r\n            state.line++;\r\n        }\r\n\r\n        if ((! disableEscape) && ch === '\\\\') {\r\n            if (state.strings[state.index].length <= state.pos) {\r\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n            state.pos++;\r\n\r\n            switch (ch) {\r\n            case 'b':\r\n                ch = '\\b';\r\n                break;\r\n            case 't':\r\n                ch = '\\t';\r\n                break;\r\n            case 'n':\r\n                ch = '\\n';\r\n                break;\r\n            case 'v':\r\n                ch = '\\v';\r\n                break;\r\n            case 'f':\r\n                ch = '\\f';\r\n                break;\r\n            case 'r':\r\n                ch = '\\r';\r\n                break;\r\n            case 'U': case 'u':\r\n                {\r\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\r\n                        let ch1 = '';\r\n                        for (let i = 0; i < 6; i++) {\r\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\r\n                            if (ch2 === '}') {\r\n                                if (i === 0) {\r\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                                }\r\n                                state.pos += i;\r\n                                break;\r\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\r\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            ch1 += ch2;\r\n                        }\r\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos++;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    } else {\r\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\r\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos += 4;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return ch;\r\n    }\r\n}\r\n\r\n\r\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    const chs: SxChar[] = [];\r\n\r\n    try {\r\n        for (let i = 0; i < n; i++) {\r\n            chs.push(getChar(state, virtualEof, disableEscape));\r\n        }\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return chs;\r\n}\r\n\r\n\r\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    let ch: SxChar;\r\n\r\n    try {\r\n        ch = getChar(state, virtualEof, disableEscape);\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return ch;\r\n}\r\n\r\n\r\nfunction skipWhitespaces(state: SxParserState): void {\r\n    let ch = lookAhead(state);\r\n    while (!isEOF(ch) && isSpace(ch)) {\r\n        getChar(state);\r\n        ch = lookAhead(state);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\r\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n    }\r\n    return Number(s);\r\n}\r\n\r\n\r\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (isSpace(ch)) {\r\n                break;\r\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\r\n                break;\r\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                getChar(state, virtualEof);\r\n                const v = (ch as SxExternalValue).value;\r\n                s += String(ch);\r\n            } else {\r\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (state.config.enableShorthands) {\r\n        let m: RegExpMatchArray | null = null;\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        if (m = s.match(/^::([^=:][^=]+)=$/)) {\r\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\r\n            const ws = m[1].split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.set},\r\n                        ws\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^::([^@:][^@]+)@([^@:]+)$/)) {\r\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\r\n            const ws = m[1].split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.call},\r\n                        [{symbol: state.config.reservedNames.get}, ...ws],\r\n                        {symbol: m[2]},\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^::([^:].+)$/)) {\r\n            // ::foo:bar:baz -> ($get foo bar baz)\r\n            const ws = m[1].split(':');\r\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\r\n            return z as any;\r\n        }\r\n    }\r\n\r\n    return {symbol: s};\r\n}\r\n\r\n\r\nfunction parseStringOrComment(\r\n        state: SxParserState, eof: string[],\r\n        valuesStartSeq: string | null ,\r\n        valuesStopChar: string,\r\n        disableEscape: boolean\r\n    ): { strings: string[], values: any[] } {\r\n\r\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\r\n    const strings: string[] = [];\r\n    const values: any[] = [];\r\n\r\n    for (;;) {\r\n        let s = '';\r\n        let ch = lookAhead(state, eofSeqs, disableEscape);\r\n\r\n        while (! isEOF(ch)) {\r\n            if (typeof ch === 'string') {\r\n                getChar(state, eofSeqs, disableEscape);\r\n                s += ch;\r\n            } else {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state, eofSeqs, disableEscape);\r\n                    const v = (ch as SxExternalValue).value;\r\n                    s += String(ch);\r\n                } else {\r\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            }\r\n\r\n            ch = lookAhead(state, eofSeqs, disableEscape);\r\n        }\r\n\r\n        getChar(state, eofSeqs, disableEscape);\r\n\r\n        if ((ch as SxEof).eof === true) {\r\n            throw new ScriptTerminationError('parseStringOrComment');\r\n        }\r\n\r\n        strings.push(s);\r\n\r\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\r\n            values.push(parseList(state, valuesStopChar, []));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { strings, values };\r\n}\r\n\r\n\r\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\r\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape).strings[0];\r\n}\r\n\r\n\r\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\r\n    const q: SxToken[] = [symbol];\r\n\r\n    if (attrs) {\r\n        q.push(attrs);\r\n    }\r\n\r\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false);\r\n    for (let i = 0; i < inner.strings.length; i++) {\r\n        q.push(inner.strings[i]);\r\n        if (i < inner.values.length) {\r\n            q.push(inner.values[i]);\r\n        }\r\n    }\r\n\r\n    return q;\r\n}\r\n\r\n\r\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['|#'], null, ')', false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseOneToken(state: SxParserState): SxToken {\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case ')':\r\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n\r\n        case '(':\r\n            getChar(state);\r\n            return parseList(state, ')', []);\r\n\r\n        case \"'\": case \"`\": case ',':\r\n            {\r\n                getChar(state);\r\n                const ahead = lookAhead(state);\r\n                let isSpliceUnquote = false;\r\n                if (ch === ',' && ahead === '@') {\r\n                    getChar(state);\r\n                    isSpliceUnquote = true;\r\n                }\r\n                skipWhitespaces(state);\r\n                const ret = (ch === \"'\" ?\r\n                        quote :\r\n                        (ch === \"`\" ? backquote : wrapByUnquote))\r\n                    (state, parseOneToken(state)\r\n                );\r\n                return (isSpliceUnquote ? splice(state, ret) : ret);\r\n            }\r\n\r\n        case \".\":\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 2);\r\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    skipWhitespaces(state);\r\n                    return spread(state, parseOneToken(state));\r\n                } else {\r\n                    skipWhitespaces(state);\r\n                    return {dotted: parseOneToken(state)};\r\n                }\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            return parseSingleLineComment(state);\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseMultiLineComment(state);\r\n                } else {\r\n                    return parseSymbol(state);\r\n                }\r\n            }\r\n\r\n        case '\"':\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 4);\r\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\r\n                    let isHereDoc = true;\r\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\r\n                        // here doc\r\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\r\n                        if (aheads[2] === '+' || aheads[2] === '-') {\r\n                            if (! isNumberAfterSignChar(aheads[3])) {\r\n                                isHereDoc = false;\r\n                            }\r\n                        }\r\n                        // here doc\r\n                    } else if (isSymbolFirstChar(aheads[2])) {\r\n                        isHereDoc = false;\r\n                    } else {\r\n                        // here doc\r\n                    }\r\n                    getChar(state);\r\n                    getChar(state);\r\n\r\n                    let sym: SxSymbol | number | null = null;\r\n                    let attrs: SxToken[] | null = null;\r\n                    if (isHereDoc) {\r\n                        sym = {symbol: state.config.reservedNames.Template};\r\n                    } else {\r\n                        sym = parseSymbol(state, ['@']);\r\n                        if (sym === null) {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        if (typeof sym === 'number') {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        const ahs = lookAheads(state, 2);\r\n                        if (ahs[0] === '@') {\r\n                            if (ahs[1] !== '{') {\r\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            getChar(state);\r\n                            getChar(state);\r\n                            const a = parseList(state, '}', [{symbol: '@'}]);\r\n                            if (Array.isArray(a)) {\r\n                                attrs = a;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return parseHereDoc(state, sym, attrs);\r\n                } else {\r\n                    return parseString(state, false);\r\n                }\r\n            }\r\n\r\n        case '@':\r\n            if (state.config.enableVerbatimStringLiteral) {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '\"') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseString(state, true);\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            if (typeof ch !== 'string') {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state);\r\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\r\n                } else {\r\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            } else if (isSpace(ch)) {\r\n                break;\r\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\r\n                if (ch === '+' || ch === '-') {\r\n                    const aheads = lookAheads(state, 2);\r\n                    if (! isNumberAfterSignChar(aheads[1])) {\r\n                        return parseSymbol(state);\r\n                    }\r\n                }\r\n                return parseNumber(state);\r\n            } else if (isSymbolFirstChar(ch)) {\r\n                return parseSymbol(state);\r\n            } else {\r\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseOneToken');\r\n}\r\n\r\n\r\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\r\n    const r: SxToken[] = initialList.slice(0);\r\n    let dotted = false;\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case listStopChar:\r\n            getChar(state);\r\n            if (dotted) {\r\n                return r[0];\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        default:\r\n            {\r\n                const t = parseOneToken(state);\r\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\r\n                    if (r.length !== 1) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    dotted = true;\r\n                    if (Array.isArray(t)) {\r\n                        t.unshift(r.pop() as SxToken);\r\n                        r.push(t);\r\n                    } else {\r\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\r\n                    }\r\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                    if (! state.config.stripComments) {\r\n                        r.push(t);\r\n                    }\r\n                } else {\r\n                    if (dotted) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    r.push(t);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseList');\r\n}\r\n\r\n\r\n\r\nexport function parse(state: SxParserState) {\r\n    const r: SxToken[] = [];\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case '(':\r\n            getChar(state);\r\n            r.push(parseList(state, ')', []));\r\n            break;\r\n\r\n        case \"'\": case \"`\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                for (;;) {\r\n                    const t = parseOneToken(state);\r\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                        if (! state.config.stripComments) {\r\n                            r.push(t);\r\n                        }\r\n                    } else {\r\n                        r.push((ch === \"'\" ? quote : backquote)(state, t));\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            if (state.config.stripComments) {\r\n                parseSingleLineComment(state);\r\n            } else {\r\n                r.push(parseSingleLineComment(state));\r\n            }\r\n            break;\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseMultiLineComment(state);\r\n                    } else {\r\n                        r.push(parseMultiLineComment(state));\r\n                    }\r\n                } else {\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseSingleLineComment(state);\r\n                    } else {\r\n                        r.push(parseSingleLineComment(state));\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case '\"':\r\n            {\r\n                const aheads = lookAheads(state, 3);\r\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\r\n                    r.push(parseOneToken(state));\r\n                    break;\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         FatalError,\r\n         CapturedScopes,\r\n         SxMacroInfo }         from '../../types';\r\nimport { isSymbol,\r\n         quote }               from '../../ast';\r\nimport { evaluate,\r\n         resolveValueSymbolScope,\r\n         collectCapturedVariables,\r\n         getCapturedScopes,\r\n         getScope,\r\n         getGlobalScope,\r\n         installScope,\r\n         uninstallScope,\r\n         optimizeTailCall,\r\n         toNumber }            from '../../evaluate';\r\nimport { compileLambda }       from '../../compile';\r\nimport { checkParamsLength,\r\n         checkUnsafeVarNames } from '../../errors';\r\n\r\n\r\n\r\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($car '(first second ... last))\r\n    //  -> S expr  : first\r\n    checkParamsLength('$car', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car[0];\r\n};\r\nexport const $$car = $car(null as any, null as any);\r\n\r\n\r\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cdr '(first second ... last))\r\n    //  -> S expr  : (second ... last)\r\n    checkParamsLength('$cdr', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car.slice(1);\r\n};\r\nexport const $$cdr = $cdr(null as any, null as any);\r\n\r\n\r\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\r\n    //  -> S expr  : (arg1 arg2-item1 ...)\r\n    // S expression: ($cons arg1 nilOrNull ... argN)\r\n    //  -> S expr  : (arg1)\r\n    // S expression: ($cons arg1 arg2 ... argN)\r\n    //  -> S expr  : arg1.arg2\r\n    checkParamsLength('$cons', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (car === null) {\r\n        car = [];\r\n    }\r\n    if (cdr === null) {\r\n        cdr = [];\r\n    }\r\n\r\n    if (Array.isArray(cdr)) {\r\n        cdr = cdr.slice(0);\r\n        cdr.unshift(car);\r\n        return cdr;\r\n    } else {\r\n        return {car, cdr};\r\n    }\r\n};\r\nexport const $$cons = $cons(null as any, null as any);\r\n\r\n\r\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first first second ... last)\r\n    //  -> S expr  : first\r\n    // S expression: ($first)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(0, 1);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$first = $first(null as any, null as any);\r\n\r\n\r\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($second first second ... last)\r\n    //  -> S expr  : second\r\n    // S expression: ($second first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1, 2);\r\n    return (cdr.length === 1) ? cdr[0] : null;\r\n};\r\nexport const $$second = $second(null as any, null as any);\r\n\r\n\r\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($last first second ... last)\r\n    //  -> S expr  : last\r\n    // S expression: ($last)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(args.length - 1, args.length);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$last = $last(null as any, null as any);\r\n\r\n\r\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($rest first second ... last)\r\n    //  -> S expr  : (second ... last)\r\n    // S expression: ($rest first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1);\r\n    return (0 < cdr.length) ? cdr : null;\r\n};\r\nexport const $$rest = $rest(null as any, null as any);\r\n\r\n\r\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first-and-second first second ... last)\r\n    //  -> S expr  : first.second\r\n    let car: any = args.slice(0, 1);\r\n    car = (car.length === 1) ? car[0] : null;\r\n\r\n    let cdr: any = args.slice(1, 2);\r\n    cdr = (cdr.length === 1) ? cdr[0] : null;\r\n\r\n    return {car, cdr};\r\n};\r\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\r\n\r\n\r\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($atom arg1 ...)\r\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\r\n    //  -> (if arg1 is nil or anything else) S expr  : true\r\n    checkParamsLength('$atom', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n\r\n    if (car === null || car === void 0) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(car)) {\r\n        if (car.length === 0) return  true;\r\n        else                  return false;\r\n    }\r\n\r\n    switch (typeof car) {\r\n    case 'number': case 'string': case 'function': case 'boolean':\r\n        return true;\r\n    case 'object':\r\n        return isSymbol(car) ? true : false;\r\n    }\r\n    return false;\r\n};\r\nexport const $$atom = $atom(null as any, null as any);\r\n\r\n\r\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($eq arg1 arg2)\r\n    //  -> (if arg1 === arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$eq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car === cdr;\r\n};\r\nexport const $$eq = $eq(null as any, null as any);\r\n\r\n\r\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not-eq arg1 arg2)\r\n    //  -> (if arg1 !== arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$notEq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car !== cdr;\r\n};\r\nexport const $$notEq = $notEq(null as any, null as any);\r\n\r\n\r\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\r\n    // S expression: ($list arg1 ... argN)\r\n    //  -> S expr  : (arg1 ... argN)\r\n    args.slice(0);\r\nexport const $$list = $list(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\r\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__scope', args, 3);\r\n\r\n    const isBlockLocal = $$first(...args);\r\n    const returnMultiple = $$second(...args);\r\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\r\n    let r: SxToken = null;\r\n\r\n    const scope: any = {};\r\n    if (Array.isArray(car)) {\r\n        for (const x of car) {\r\n            if (Array.isArray(x)) {\r\n                const kv = $$firstAndSecond(...x);\r\n                const kvSym = isSymbol(kv.car);\r\n                const kvName = kvSym ? kvSym.symbol : String(kv.car);\r\n                checkUnsafeVarNames('$__scope', kvName);\r\n                scope[kvName] = evaluate(state, kv.cdr);\r\n            } else {\r\n                const xSym = isSymbol(x);\r\n                const xName = xSym ? xSym.symbol : String(x);\r\n                checkUnsafeVarNames('$__scope', xName);\r\n                scope[xName] = null;\r\n            }\r\n        }\r\n    }\r\n    installScope(state, scope, isBlockLocal, capturedScopes);\r\n\r\n    try {\r\n        if (4 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(3)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(3)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__globalScope', args, 1);\r\n\r\n    const returnMultiple = $$first(...args);\r\n    const cdr = $$second(...args);\r\n    let r: SxToken = null;\r\n\r\n    installScope(state, getGlobalScope(state).scope, true);\r\n    try {\r\n        if (2 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(1)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(1)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : exprN\r\n    checkParamsLength('$__capture', args, 1);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let r: SxToken = null;\r\n\r\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\r\n    installScope(state, {}, true, capturedScopes);\r\n    try {\r\n        for (const x of args.slice(1)) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    let fnBody = args.slice(1);\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (...actualArgs: any[]) => {\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] func call: Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        // TODO: add type checking\r\n        // TODO: pass \"this\" to the $__scope variable.\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(1);\r\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $__lambda(state, name)(...args.slice(1));\r\n\r\n    checkUnsafeVarNames('$__defun', car.symbol);\r\n    // TODO: overloading\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn,\r\n        // formalArgs: ,\r\n        // lastIsSpread: ,\r\n        // next: ,\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\r\n\r\n    checkUnsafeVarNames('$$__defun', car.symbol);\r\n    // TODO: overloading\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn,\r\n        // formalArgs: ,\r\n        // lastIsSpread: ,\r\n        // next: ,\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($refun 'name)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__refun', args, 1, 1);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n\r\n    checkUnsafeVarNames('$__refun', car.symbol);\r\n    const info = state.funcMap.get(car.symbol);\r\n    if (!info) {\r\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\r\n    }\r\n    return info.fn(state, car.symbol);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defmacro = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defmacro', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const formalArgs: SxSymbol[] = args[1];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__defmacro: Invalid argument(s): args[1] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(2);\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (fArgs: SxSymbol[]) => (...aArgs: any[]) => {\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(fArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === fArgs.length - 1) ?\r\n                        aArgs.slice(index) : aArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n\r\n    const m: SxMacroInfo = {\r\n        name: car.symbol,\r\n        fn: (st: SxParserState, nm: string, fArgs: SxSymbol[]) => (list: SxToken[]) => fn(fArgs)(...(list.slice(1))),\r\n        formalArgs,\r\n        lastIsSpread,\r\n    };\r\n\r\n    checkUnsafeVarNames('$__defmacro', car.symbol);\r\n\r\n    if (state.macroMap.has(car.symbol)) {\r\n        let curr = state.macroMap.get(car.symbol);\r\n        (curr as SxMacroInfo).next = m;\r\n        if (curr && curr.formalArgs) {\r\n            if (curr.formalArgs.length < formalArgs.length) {\r\n                state.macroMap.set(car.symbol, m);\r\n                m.next = curr;\r\n            } else {\r\n                let prev = curr;\r\n                curr = curr.next;\r\n                while (curr) {\r\n                    if (curr.formalArgs) {\r\n                        if (curr.formalArgs.length < formalArgs.length) {\r\n                            prev.next = m;\r\n                            m.next = curr;\r\n                            break;\r\n                        }\r\n                    }\r\n                    prev = curr;\r\n                    curr = curr.next;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        state.macroMap.set(car.symbol, m);\r\n    }\r\n    return fn;\r\n};\r\n\r\n\r\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($apply fn arg1 ... argN)\r\n    //  -> S expr  : fn'\r\n    checkParamsLength('$apply', args, 1);\r\n\r\n    const car: () => any = $$first(...args);\r\n    if (typeof car !== 'function') {\r\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\r\n    }\r\n\r\n    return (\r\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\r\n    );\r\n};\r\nexport const $$apply = $apply(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__call', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const sym = isSymbol(cdr);\r\n    const xName = sym ? sym.symbol : evaluate(state, cdr) as any;\r\n\r\n    checkUnsafeVarNames('$__call', xName);\r\n\r\n    return Function.prototype.apply.call(\r\n        car[xName],\r\n        car,\r\n        args.slice(2)\r\n    );\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__try 'expr 'catch-expr)\r\n    //  ->                               S expr  : expr\r\n    //  -> (if error is raised in expr)  S expr  : catch-expr\r\n    checkParamsLength('$__try', args, 1, 2);\r\n\r\n    let r: SxToken = [];\r\n    try {\r\n        r = evaluate(state, args[0]);\r\n    } catch (e) {\r\n        if (e instanceof FatalError) {\r\n            throw e;\r\n        }\r\n        if (1 < args.length) {\r\n            r = $__scope(state, name)(true, false, [\r\n                ['$error', quote(state, e)],\r\n                ['$parent', quote(state, getScope(state))],\r\n            ], args[1]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($raise 'expr)\r\n    //  -> S expr  : -\r\n    const car = $$first(...args);\r\n    throw car;\r\n};\r\nexport const $$raise = $raise(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if condition 't-expr 'f-expr)\r\n    //  -> (if condition is true ) S expr  : t-expr\r\n    //  -> (if condition is false) S expr  : f-expr\r\n    checkParamsLength('$__if', args, 2, 3);\r\n\r\n    const car = $$first(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        r = evaluate(state, args[1]);\r\n    } else {\r\n        if (2 < args.length) {\r\n            r = evaluate(state, args[2]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if-null condition 'null-expr)\r\n    //  -> (if condition is not null ) S expr  : condition\r\n    //  -> (if condition is null)      S expr  : null-expr\r\n    checkParamsLength('$__ifNull', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if (! $$ambiguousEq(car, null)) {\r\n        r = car;\r\n    } else {\r\n        r = evaluate(state, cdr);\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n    //  -> (if (eval condI) is true ) S expr  : exprI\r\n    //  -> (if no matched)            S expr  : null\r\n    checkParamsLength('$__cond', args, 1);\r\n\r\n    for (let i = 0; i < args.length - 1; i += 2) {\r\n        const c = args[i];\r\n        const x = args[i + 1];\r\n        if ($$boolean(evaluate(state, c))) {\r\n            return evaluate(state, x);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__while', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$boolean(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doWhile', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$boolean(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__until', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$not(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doUntil', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$not(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n    //  -> (if n > 0) S expr  : exprN\r\n    //  -> (else)     S expr  : null\r\n    checkParamsLength('$__repeat', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n\r\n    checkUnsafeVarNames('$__repeat', sym.symbol);\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const n = toNumber($$second(...args));\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (let i = 0; i < n; i++) {\r\n        scope[sym.symbol] = i;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n    //  -> (if list.length > 0) S expr  : exprN\r\n    //  -> (else)               S expr  : null\r\n    checkParamsLength('$__for', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n\r\n    checkUnsafeVarNames('$__for', sym.symbol);\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const list = $$second(...args);\r\n    if (! Array.isArray(list)) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\r\n    }\r\n\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (const q of list) {\r\n        scope[sym.symbol] = q;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get v fn1 ... fnN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$pipe', args, 1);\r\n\r\n    let v = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n        v = args[i](v);\r\n    }\r\n    return v;\r\n};\r\nexport const $$pipe = $pipe(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__get', args, 1);\r\n\r\n    let v: any = null;\r\n    let sym = isSymbol(args[0]);\r\n\r\n    if (!sym) {\r\n        switch (typeof args[0]) {\r\n        case 'string': case 'number':\r\n            sym = {symbol: String(args[0])};\r\n            break;\r\n        default:\r\n            v = evaluate(state, args[0]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (sym) {\r\n        const scope = resolveValueSymbolScope(state, sym, true);\r\n        if (! scope) {\r\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\r\n        }\r\n        v = scope[sym.symbol];\r\n    }\r\n\r\n    for (let i = 1; i < args.length; i++) {\r\n        let q: any = args[i];\r\n        let inprog = true;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                v = q(v);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = v.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                checkUnsafeVarNames('$__get', q);\r\n                v = v[q];\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n            }\r\n        }\r\n    }\r\n    return v;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let 'nameStrOrSymbol expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__let', args, 2, 2);\r\n\r\n    let sym = isSymbol($$first(...args));\r\n\r\n    if (! sym) {\r\n        if (typeof args[0] === 'string') {\r\n            sym = {symbol: args[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    checkUnsafeVarNames('$__let', sym.symbol);\r\n\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n    scope[sym.symbol] = args[1];\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__set', args, 2, 2);\r\n\r\n    let path: any = [];\r\n\r\n    if (Array.isArray(args[0])) {\r\n        path = args[0];\r\n    } else {\r\n        path.push(args[0]);\r\n    }\r\n\r\n    let sym = isSymbol(path[0]);\r\n\r\n    if (! sym) {\r\n        if (typeof path[0] === 'string') {\r\n            checkUnsafeVarNames('$__set', path[0]);\r\n            sym = {symbol: path[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    let scope = resolveValueSymbolScope(state, sym, true);\r\n    if (scope === null) {\r\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\r\n    }\r\n\r\n    let subst = false;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        let q: any = path[i];\r\n        let inprog = true;\r\n        const last = i === path.length - 1;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                scope = q(scope);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = scope.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                checkUnsafeVarNames('$__set', q);\r\n                if (last) {\r\n                    scope[q] = args[1];\r\n                    subst = true;\r\n                } else {\r\n                    scope = scope[q];\r\n                }\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (! subst) {\r\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\r\n    }\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($boolean any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$boolean', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car) && car.length === 0) return false;\r\n    else return Boolean(car);\r\n};\r\nexport const $$boolean = $boolean(null as any, null as any);\r\n\r\n\r\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$not', args, 1, 1);\r\n\r\n    return ! $$boolean(...args);\r\n};\r\nexport const $$not = $not(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__and 'expr1 ... 'exprN)\r\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n    //  -> (else)                                                     S expr  : expr-i (false left most)\r\n    checkParamsLength('$__and', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if (! $$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__and = $__and(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__or 'expr1 ... 'exprN)\r\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n    //  -> (else)                                                  S expr  : expr-i (false right most)\r\n    checkParamsLength('$__or', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if ($$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__or = $__or(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (== a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ambiguousEq', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car) && car.length === 0) car = null;\r\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\r\n    if (car === void 0) car = null;\r\n    if (cdr === void 0) cdr = null;\r\n    // tslint:disable-next-line:triple-equals\r\n    return car == cdr;\r\n};\r\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (!= a b)\r\n    //  -> S expr  : boolean\r\n    return ! $$ambiguousEq(...args);\r\n};\r\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\r\n\r\n\r\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (< a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$lt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) < toNumber(cdr);\r\n};\r\nexport const $$lt = $lt(null as any, null as any);\r\n\r\n\r\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$le', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) <= toNumber(cdr);\r\n};\r\nexport const $$le = $le(null as any, null as any);\r\n\r\n\r\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (> a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$gt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) > toNumber(cdr);\r\n};\r\nexport const $$gt = $gt(null as any, null as any);\r\n\r\n\r\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ge', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) >= toNumber(cdr);\r\n};\r\nexport const $$ge = $ge(null as any, null as any);\r\n\r\n\r\nexport const $symbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($symbol)\r\n    // S expression: ($symbol name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$symbol', args, 1, 1);\r\n\r\n    if (typeof args[0] === 'string') {\r\n        return {symbol: args[0]};\r\n    } else {\r\n        throw new Error(`[SX] $symbol: Invalid argument(s): item(s) of args[0] is not string.`);\r\n    }\r\n};\r\nexport const $$symbol = $symbol(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__gensym = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__gensym)\r\n    // S expression: ($__gensym name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$__gensym', args, 0, 1);\r\n\r\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\r\n    if (args.length === 1) {\r\n        const a = isSymbol(args[0]);\r\n        if (a) {\r\n            $__let(state, '')(a, tempVarSym);\r\n        } else if (typeof args[0] === 'string') {\r\n            $__let(state, '')({symbol: args[0]}, tempVarSym);\r\n        } else {\r\n            throw new Error(`[SX] $__gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n        }\r\n    }\r\n    return tempVarSym;\r\n};\r\n\r\n\r\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-symbol x)\r\n    // S expression: ($is-symbol x name)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isSymbol', args, 1, 2);\r\n\r\n    if (args.length === 1) {\r\n        return (isSymbol(args[0]) ? true : false);\r\n    } else {\r\n        if (typeof args[1] === 'string') {\r\n            return (isSymbol(args[0], args[1]) ? true : false);\r\n        } else {\r\n            throw new Error(`[SX] $isSymbol: Invalid argument(s): item(s) of args[1] is not string.`);\r\n        }\r\n    }\r\n};\r\nexport const $$isSymbol = $isSymbol(null as any, null as any);\r\n\r\n\r\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-list x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isList', args, 1, 1);\r\n\r\n    return Array.isArray($$first(...args));\r\n};\r\nexport const $$isList = $isList(null as any, null as any);\r\n\r\n\r\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-string x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isString', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'string';\r\n};\r\nexport const $$isString = $isString(null as any, null as any);\r\n\r\n\r\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-number x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNumber', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'number';\r\n};\r\nexport const $$isNumber = $isNumber(null as any, null as any);\r\n\r\n\r\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-NaN x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNaN', args, 1, 1);\r\n\r\n    return Number.isNaN($$first(...args));\r\n};\r\nexport const $$isNaN = $isNaN(null as any, null as any);\r\n\r\n\r\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-finate x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isFinite', args, 1, 1);\r\n\r\n    return Number.isFinite($$first(...args));\r\n};\r\nexport const $$isFinite = $isFinite(null as any, null as any);\r\n\r\n\r\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-integer x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isInteger', args, 1, 1);\r\n\r\n    return Number.isInteger($$first(...args));\r\n};\r\nexport const $$isInteger = $isInteger(null as any, null as any);\r\n\r\n\r\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-string x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$toString', args, 1, 1);\r\n\r\n    return String($$first(...args));\r\n};\r\nexport const $$toString = $toString(null as any, null as any);\r\n\r\n\r\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-number x)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$toNumber', args, 1, 1);\r\n\r\n    return toNumber($$first(...args));\r\n};\r\nexport const $$toNumber = $toNumber(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__# '(name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n\r\n            checkUnsafeVarNames('$__#', keyName);\r\n            if (x.length === 1) {\r\n                // S expression: (# ... (keyName) ...)\r\n                //  -> JSON    : {..., keyName: true, ...}\r\n                r[keyName] = true;\r\n            } else if (x.length === 2) {\r\n                // S expression: (# ... (keyName value) ...)\r\n                //  -> JSON    : {..., keyName: value, ...}\r\n                r[keyName] = evaluate(state, x[1]);\r\n            } else {\r\n                // S expression: (# ... (keyName value1 value2 ...) ...)\r\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                r[keyName] =\r\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                    .concat(x.slice(1)));\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($object-assign x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$objectAssign', args, 1);\r\n\r\n    return Object.assign(args[0], ...(args.slice(1)));\r\n};\r\nexport const $$objectAssign = $objectAssign(null as any, null as any);\r\n\r\n\r\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-stringify x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$jsonStringify', args, 1, 1);\r\n\r\n    return JSON.stringify($$first(...args));\r\n};\r\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\r\n\r\n\r\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-parse x)\r\n    //  -> S expr  : object\r\n    checkParamsLength('$jsonParse', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    return JSON.parse(s);\r\n};\r\nexport const $$jsonParse = $jsonParse(null as any, null as any);\r\n\r\n\r\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($now)\r\n    //  -> S expr  : number\r\n    return Date.now();\r\n};\r\nexport const $$now = $now(null as any, null as any);\r\n\r\n\r\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-from-iso str)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\r\n\r\n\r\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime year month1-12 day)\r\n    // S expression: ($datetime year month1-12 day hours)\r\n    // S expression: ($datetime year month1-12 day hours minutes)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetime', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n        s += 'Z';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetime = $datetime(null as any, null as any);\r\n\r\n\r\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-lc year month1-12 day)\r\n    // S expression: ($datetime-lc year month1-12 day hours)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeLc', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n    } else {\r\n        s += 'T00:00:00.000';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-iso-string number)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\r\n    }\r\n    return dt.toISOString();\r\n};\r\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getUTCFullYear(),\r\n        dt.getUTCMonth() + 1,\r\n        dt.getUTCDate(),\r\n        dt.getUTCHours(),\r\n        dt.getUTCMinutes(),\r\n        dt.getUTCSeconds(),\r\n        dt.getUTCMilliseconds(),\r\n        0, // TZ\r\n        dt.getUTCDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components-lc number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getFullYear(),\r\n        dt.getMonth() + 1,\r\n        dt.getDate(),\r\n        dt.getHours(),\r\n        dt.getMinutes(),\r\n        dt.getSeconds(),\r\n        dt.getMilliseconds(),\r\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\r\n                                 // If your time zone is UTC+2:00, +120 will be returned.\r\n        dt.getDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\r\n\r\n\r\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($match pattern-str string)\r\n    // S expression: ($match pattern-str options-str string)\r\n    //  -> S expr  : array\r\n    checkParamsLength('$match', args, 2, 3);\r\n\r\n    if (args.length === 2) {\r\n        const m = new RegExp(args[0]);\r\n        return m.exec(args[1]);\r\n    } else {\r\n        const m = new RegExp(args[0], args[1]);\r\n        return m.exec(args[2]);\r\n    }\r\n};\r\nexport const $$match = $match(null as any, null as any);\r\n\r\n\r\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-log expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.log(...args);\r\n    return null;\r\n};\r\nexport const $$consoleLog = $consoleLog(null as any, null as any);\r\n\r\n\r\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-error expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.error(...args);\r\n    return null;\r\n};\r\nexport const $$consoleError = $consoleError(null as any, null as any);\r\n\r\n\r\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-trace expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.trace(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\r\n\r\n\r\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time)\r\n    // S expression: ($console-time label)\r\n    //  -> S expr  : null\r\n    console.time(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTime = $consoleTime(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-end)\r\n    // S expression: ($console-time-end label)\r\n    //  -> S expr  : null\r\n    console.timeEnd(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-log label)\r\n    // S expression: ($console-time-log label value ... value)\r\n    //  -> S expr  : null\r\n    (console as any).timeLog(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './core.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$car',\r\n    fn: ops.$car,\r\n}, {\r\n    name: '$cdr',\r\n    fn: ops.$cdr,\r\n}, {\r\n    name: '$cons',\r\n    fn: ops.$cons,\r\n}, {\r\n    name: '$first',\r\n    fn: ops.$first,\r\n}, {\r\n    name: '$second',\r\n    fn: ops.$second,\r\n}, {\r\n    name: '$last',\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$progn', // alias of $last\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$rest',\r\n    fn: ops.$rest,\r\n}, {\r\n    name: '$first-and-second',\r\n    fn: ops.$firstAndSecond,\r\n}, {\r\n    name: '$atom',\r\n    fn: ops.$atom,\r\n}, {\r\n    name: '$eq',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '===',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '$not-eq',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '!==',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '$list',\r\n    fn: ops.$list,\r\n}, {\r\n    name: '$__scope',\r\n    fn: ops.$__scope,\r\n}, {\r\n    name: '$__global',\r\n    fn: ops.$__globalScope,\r\n}, {\r\n    name: '$__capture',\r\n    fn: ops.$__capture,\r\n}, {\r\n    name: '$__lambda',\r\n    fn: ops.$__lambda,\r\n}, {\r\n    name: '$$__lambda',\r\n    fn: ops.$comp$__lambda,\r\n}, {\r\n    name: '$__defun',\r\n    fn: ops.$__defun,\r\n}, {\r\n    name: '$$__defun',\r\n    fn: ops.$comp$__defun,\r\n}, {\r\n    name: '$__refun',\r\n    fn: ops.$__refun,\r\n}, {\r\n    name: '$__defmacro',\r\n    fn: ops.$__defmacro,\r\n}, {\r\n    name: '$apply',\r\n    fn: ops.$apply,\r\n}, {\r\n    name: '$__call',\r\n    fn: ops.$__call,\r\n}, {\r\n    name: '$__try',\r\n    fn: ops.$__try,\r\n}, {\r\n    name: '$raise',\r\n    fn: ops.$raise,\r\n}, {\r\n    name: '$__if',\r\n    fn: ops.$__if,\r\n}, {\r\n    name: '$__if-null',\r\n    fn: ops.$__ifNull,\r\n}, {\r\n    name: '$__cond',\r\n    fn: ops.$__cond,\r\n}, {\r\n    name: '$__while',\r\n    fn: ops.$__while,\r\n}, {\r\n    name: '$__do-while',\r\n    fn: ops.$__doWhile,\r\n}, {\r\n    name: '$__until',\r\n    fn: ops.$__until,\r\n}, {\r\n    name: '$__do-until',\r\n    fn: ops.$__doUntil,\r\n}, {\r\n    name: '$__repeat',\r\n    fn: ops.$__repeat,\r\n}, {\r\n    name: '$__for',\r\n    fn: ops.$__for,\r\n}, {\r\n    name: '$pipe',\r\n    fn: ops.$pipe,\r\n}, {\r\n    name: '$__get',\r\n    fn: ops.$__get,\r\n}, {\r\n    name: '$__let',\r\n    fn: ops.$__let,\r\n}, {\r\n    name: '$__set',\r\n    fn: ops.$__set,\r\n}, {\r\n    name: '$boolean',\r\n    fn: ops.$boolean,\r\n}, {\r\n    name: '$not',\r\n    fn: ops.$not,\r\n}, {\r\n    name: '$__and',\r\n    fn: ops.$__and,\r\n}, {\r\n    name: '$__or',\r\n    fn: ops.$__or,\r\n}, {\r\n    name: '==',\r\n    fn: ops.$ambiguousEq,\r\n}, {\r\n    name: '!=',\r\n    fn: ops.$ambiguousNotEq,\r\n}, {\r\n    name: '<',\r\n    fn: ops.$lt,\r\n}, {\r\n    name: '<=',\r\n    fn: ops.$le,\r\n}, {\r\n    name: '>',\r\n    fn: ops.$gt,\r\n}, {\r\n    name: '>=',\r\n    fn: ops.$ge,\r\n}, {\r\n    name: '$symbol',\r\n    fn: ops.$symbol,\r\n}, {\r\n    name: '$__gensym',\r\n    fn: ops.$__gensym,\r\n}, {\r\n    name: '$is-symbol',\r\n    fn: ops.$isSymbol,\r\n}, {\r\n    name: '$is-list',\r\n    fn: ops.$isList,\r\n}, {\r\n    name: '$is-string',\r\n    fn: ops.$isString,\r\n}, {\r\n    name: '$is-number',\r\n    fn: ops.$isNumber,\r\n}, {\r\n    name: '$is-NaN',\r\n    fn: ops.$isNaN,\r\n}, {\r\n    name: '$is-finite',\r\n    fn: ops.$isFinite,\r\n}, {\r\n    name: '$is-integer',\r\n    fn: ops.$isInteger,\r\n}, {\r\n    name: '$to-string',\r\n    fn: ops.$toString,\r\n}, {\r\n    name: '$to-number',\r\n    fn: ops.$toNumber,\r\n}, {\r\n    name: '$__#',\r\n    fn: ops.$__toObject,\r\n}, {\r\n    name: '$object-assign',\r\n    fn: ops.$objectAssign,\r\n}, {\r\n    name: '$json-stringify',\r\n    fn: ops.$jsonStringify,\r\n}, {\r\n    name: '$now',\r\n    fn: ops.$now,\r\n}, {\r\n    name: '$datetime-from-iso',\r\n    fn: ops.$datetimeFromIso,\r\n}, {\r\n    name: '$datetime',\r\n    fn: ops.$datetime,\r\n}, {\r\n    name: '$datetime-lc',\r\n    fn: ops.$datetimeLc,\r\n}, {\r\n    name: '$datetime-to-iso-string',\r\n    fn: ops.$datetimeToIsoString,\r\n}, {\r\n    name: '$datetime-to-components',\r\n    fn: ops.$datetimeToComponents,\r\n}, {\r\n    name: '$datetime-to-components-lc',\r\n    fn: ops.$datetimeToComponentsLc,\r\n}, {\r\n    name: '$json-parse',\r\n    fn: ops.$jsonParse,\r\n}, {\r\n    name: '$match',\r\n    fn: ops.$match,\r\n}, {\r\n    name: '$console-log',\r\n    fn: ops.$consoleLog,\r\n}, {\r\n    name: '$console-error',\r\n    fn: ops.$consoleError,\r\n}, {\r\n    name: '$console-trace',\r\n    fn: ops.$consoleTrace,\r\n}, {\r\n    name: '$console-time',\r\n    fn: ops.$consoleTime,\r\n}, {\r\n    name: '$console-time-end',\r\n    fn: ops.$consoleTimeEnd,\r\n}, {\r\n    name: '$console-time-log',\r\n    fn: ops.$consoleTimeLog,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$scope',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            list[1],\r\n            list[2],\r\n            ...(list.slice(3).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$local',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($local ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$global',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($__global expr1 ... exprN)\r\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\r\n        return [{symbol: '$__global'},\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-let', // alias of $local\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$capture',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__capture'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$refun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($refun name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '<-',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (<- name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defmacro',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defmacro name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defmacro'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$call',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($call thisArg symbol arg1 ... argN)\r\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\r\n        checkParamsLength('$call', list, 3);\r\n\r\n        return [{symbol: '$__call'},\r\n            list[1],\r\n            quote(state, list[2]),\r\n            ...(list.slice(3)),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$try',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($try expr catch-expr)\r\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\r\n        return [{symbol: '$__try'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if cond t-expr f-expr)\r\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\r\n        return [{symbol: '$__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if-null',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if-null cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '??',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (?? cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$cond',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($cond cond1 expr1 ... condN exprN)\r\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        return [{symbol: '$__cond'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($while condition expr1 exprN)\r\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-while condition expr1 exprN)\r\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($until condition expr1 exprN)\r\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-until condition expr1 exprN)\r\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$repeat',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($repeat i of n-times expr1 exprN)\r\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__repeat'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($for x of list expr1 exprN)\r\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__for'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$get',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\r\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        return [{symbol: '$__get'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$let',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$let', list, 3, 3);\r\n\r\n        return [{symbol: '$__let'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-defvar',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$clisp-defvar', list, 3, 3);\r\n\r\n        return [{symbol: '$global'},\r\n            [{symbol: '$__let'},\r\n                quote(state, list[1]),\r\n                list[2]\r\n            ],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\r\n        checkParamsLength('$set', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-setq', // alias of $set\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-setq symbol expr)\r\n        //  -> S expr  : ($__set 'symbol expr)\r\n        checkParamsLength('$clisp-setq', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$and',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($and expr1 ... exprN)\r\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\r\n        return [{symbol: '$__and'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$or',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($or expr1 ... exprN)\r\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\r\n        return [{symbol: '$__or'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$gensym',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($gensym)\r\n        // S expression: ($gensym name)\r\n        //  -> S expr  : ($__gensym 'name)\r\n        return [\r\n            {symbol: '$__gensym'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '#',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (# (name value...)...)\r\n        //  -> S expr  : ($__# '(name value...)...)\r\n        return [\r\n            {symbol: '$__#'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [\r\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\r\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\r\n\r\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\r\n\r\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\r\n\r\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\r\n\r\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\r\n\r\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\r\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\r\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\r\n\r\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\r\n];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './core.operator';\r\nimport macros             from './core.macro';\r\nimport symbols            from './core.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\n\r\n\r\n\r\nexport const $bitLShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<< number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitLShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car << cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car >>> (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitLShift = $bitLShift(null as any, null as any);\r\n\r\n\r\nexport const $bitSRShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitSRShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >> cdr : (car & 0x080000000) ? -1 : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitSRShift = $bitSRShift(null as any, null as any);\r\n\r\n\r\nexport const $bitURShift = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>>> number shift)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitURShift', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    car = toNumber(car);\r\n    cdr = toNumber(cdr);\r\n\r\n    if (0 <= cdr) {\r\n        return cdr < 32 ? car >>> cdr : 0;\r\n    } else {\r\n        return cdr > -32 ? car << (-cdr) : 0;\r\n    }\r\n};\r\nexport const $$bitURShift = $bitURShift(null as any, null as any);\r\n\r\n\r\nexport const $bitNot = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-not number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitNot', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    return ~toNumber(car);\r\n};\r\nexport const $$bitNot = $bitNot(null as any, null as any);\r\n\r\n\r\nexport const $bitAnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-and numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitAnd', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) & toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitAnd = $bitAnd(null as any, null as any);\r\n\r\n\r\nexport const $bitOr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-or numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitOr', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) | toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitOr = $bitOr(null as any, null as any);\r\n\r\n\r\nexport const $bitXor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($bit-xor numberA numberB)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$bitXor', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ^ toNumber(curr), toNumber(car));\r\n};\r\nexport const $$bitXor = $bitXor(null as any, null as any);\r\n\r\n\r\nexport const $add = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (+ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$add', args, 1);\r\n\r\n    return args.reduce((prev, curr) => toNumber(prev) + toNumber(curr), 0);\r\n};\r\nexport const $$add = $add(null as any, null as any);\r\n\r\n\r\nexport const $sub = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (- number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sub', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const last = args.slice(1);\r\n    if (last.length === 0) {\r\n        // negate\r\n        return -toNumber(car);\r\n    } else {\r\n        // subtract\r\n        return args.slice(1).reduce((prev, curr) => toNumber(prev) - toNumber(curr), toNumber(car));\r\n    }\r\n};\r\nexport const $$sub = $sub(null as any, null as any);\r\n\r\n\r\nexport const $mul = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (* number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mul', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) * toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mul = $mul(null as any, null as any);\r\n\r\n\r\nexport const $sup = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (** number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sup', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ** toNumber(curr), toNumber(car));\r\n};\r\nexport const $$sup = $sup(null as any, null as any);\r\n\r\n\r\nexport const $div = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (/ number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$div', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) / toNumber(curr), toNumber(car));\r\n};\r\nexport const $$div = $div(null as any, null as any);\r\n\r\n\r\nexport const $mod = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (% number1 ... numberN)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$mod', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) % toNumber(curr), toNumber(car));\r\n};\r\nexport const $$mod = $mod(null as any, null as any);\r\n\r\n\r\nexport const $max = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($max val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.max(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$max = $max(null as any, null as any);\r\n\r\n\r\nexport const $min = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($min val1 ... valN)\r\n    //  -> S expr  : value\r\n    return Math.min(...(args.map(x => toNumber(x))));\r\n};\r\nexport const $$min = $min(null as any, null as any);\r\n\r\n\r\nexport const $avg = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($avg val1 ... valN)\r\n    //  -> S expr  : value\r\n    const a = args.map(x => toNumber(x));\r\n    return a.length > 0 ? a.reduce((prev, curr) => prev + curr, 0) / a.length : NaN;\r\n};\r\nexport const $$avg = $avg(null as any, null as any);\r\n\r\n\r\nexport const $floor = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($floor number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$floor', args, 1, 1);\r\n\r\n    return Math.floor(toNumber($$first(...args)));\r\n};\r\nexport const $$floor = $floor(null as any, null as any);\r\n\r\n\r\nexport const $ceil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($ceil number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$ceil', args, 1, 1);\r\n\r\n    return Math.ceil(toNumber($$first(...args)));\r\n};\r\nexport const $$ceil = $ceil(null as any, null as any);\r\n\r\n\r\nexport const $round = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($round number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$round', args, 1, 1);\r\n\r\n    return Math.round(toNumber($$first(...args)));\r\n};\r\nexport const $$round = $round(null as any, null as any);\r\n\r\n\r\nexport const $abs = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($abs number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$abs', args, 1, 1);\r\n\r\n    return Math.abs(toNumber($$first(...args)));\r\n};\r\nexport const $$abs = $abs(null as any, null as any);\r\n\r\n\r\nexport const $sign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sign number)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$sign', args, 1, 1);\r\n\r\n    return Math.sign(toNumber($$first(...args)));\r\n};\r\nexport const $$sign = $sign(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './arithmetic.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '<<',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '$bit-l-shift',\r\n    fn: ops.$bitLShift,\r\n}, {\r\n    name: '>>',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '$bit-sr-shift',\r\n    fn: ops.$bitSRShift,\r\n}, {\r\n    name: '>>>',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-ur-shift',\r\n    fn: ops.$bitURShift,\r\n}, {\r\n    name: '$bit-not',\r\n    fn: ops.$bitNot,\r\n}, {\r\n    name: '$bit-and',\r\n    fn: ops.$bitAnd,\r\n}, {\r\n    name: '$bit-or',\r\n    fn: ops.$bitOr,\r\n}, {\r\n    name: '$bit-xor',\r\n    fn: ops.$bitXor,\r\n}, {\r\n    name: '+',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$add',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '$sum',\r\n    fn: ops.$add,\r\n}, {\r\n    name: '-',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$sub',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '$neg',\r\n    fn: ops.$sub,\r\n}, {\r\n    name: '*',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '$mul',\r\n    fn: ops.$mul,\r\n}, {\r\n    name: '**',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '$sup',\r\n    fn: ops.$sup,\r\n}, {\r\n    name: '/',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '$div',\r\n    fn: ops.$div,\r\n}, {\r\n    name: '%',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$mod',\r\n    fn: ops.$mod,\r\n}, {\r\n    name: '$max',\r\n    fn: ops.$max,\r\n}, {\r\n    name: '$min',\r\n    fn: ops.$min,\r\n}, {\r\n    name: '$avg',\r\n    fn: ops.$avg,\r\n}, {\r\n    name: '$floor',\r\n    fn: ops.$floor,\r\n}, {\r\n    name: '$ceil',\r\n    fn: ops.$ceil,\r\n}, {\r\n    name: '$round',\r\n    fn: ops.$round,\r\n}, {\r\n    name: '$abs',\r\n    fn: ops.$abs,\r\n}, {\r\n    name: '$sign',\r\n    fn: ops.$sign,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$incl',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($incl name)\r\n        //  -> S expr  : ($set name ($add name 1))\r\n        checkParamsLength('$incl', list, 2, 2);\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], 1],\r\n        ];\r\n    },\r\n}, {\r\n    name: '++',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (++ name)\r\n        //  -> S expr  : ($set name ($add name 1))\r\n        checkParamsLength('++', list, 2, 2);\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], 1],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$decl',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($decl name)\r\n        //  -> S expr  : ($set name ($add name -1))\r\n        checkParamsLength('$decl', list, 2, 2);\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], -1],\r\n        ];\r\n    },\r\n}, {\r\n    name: '--',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (-- name)\r\n        //  -> S expr  : ($set name ($add name -1))\r\n        checkParamsLength('--', list, 2, 2);\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], -1],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$incln',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($incln name v)\r\n        //  -> S expr  : ($set name ($add name v))\r\n        checkParamsLength('$incln', list, 3, 3);\r\n        if (typeof list[2] !== 'number') {\r\n            throw new Error(`[SX] $incln: Invalid parameter: arg(1) is not number.`);\r\n        }\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], list[2]],\r\n        ];\r\n    },\r\n}, {\r\n    name: '+=',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (++ name v)\r\n        //  -> S expr  : ($set name ($add name v))\r\n        checkParamsLength('+=', list, 3, 3);\r\n        if (typeof list[2] !== 'number') {\r\n            throw new Error(`[SX] +=: Invalid parameter: arg(1) is not number.`);\r\n        }\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], list[2]],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$decln',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($decln name v)\r\n        //  -> S expr  : ($set name ($add name -v))\r\n        checkParamsLength('$decln', list, 3, 3);\r\n        if (typeof list[2] !== 'number') {\r\n            throw new Error(`[SX] $decln: Invalid parameter: arg(1) is not number.`);\r\n        }\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\r\n        ];\r\n    },\r\n}, {\r\n    name: '-=',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (-- name)\r\n        //  -> S expr  : ($set name ($add name -v))\r\n        checkParamsLength('-=', list, 3, 3);\r\n        if (typeof list[2] !== 'number') {\r\n            throw new Error(`[SX] -=: Invalid parameter: arg(1) is not number.`);\r\n        }\r\n\r\n        return [{symbol: '$set'},\r\n            list[1],\r\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './arithmetic.operator';\r\nimport macros             from './arithmetic.macro';\r\nimport symbols            from './arithmetic.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2017, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport class Query<T> {\r\n    public constructor(public data: T[]) {\r\n    }\r\n\r\n    public orderBy(condition: Array<string | string[/* colName: string, ('asc' | 'desc') */]> | ((a: T, b: T) => number)): Query<T> {\r\n        let fn: (a: T, b: T) => number;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (typeof c === 'string') {\r\n                        if (x[c] > y[c]) return 1;\r\n                        if (x[c] < y[c]) return -1;\r\n                    } else {\r\n                        const desc = c[1] === 'desc' ? -1 : 1;\r\n                        if (x[c[0]] > y[c[0]]) return 1 * desc;\r\n                        if (x[c[0]] < y[c[0]]) return -1 * desc;\r\n                    }\r\n                }\r\n                return 0;\r\n            };\r\n        } else {\r\n            fn = condition;\r\n        }\r\n        return new Query(this.data.slice(0).sort(fn));\r\n    }\r\n\r\n    public groupBy(condition: string[/* colName: string */] | ((a: T, b: T, index: number, array: T[]) => boolean)): Query<T[]> {\r\n        let fn: (a: T, b: T, index: number, array: T[]) => boolean;\r\n        if (Array.isArray(condition)) {\r\n            fn = (x: T, y: T) => {\r\n                for (const c of condition) {\r\n                    if (x[c] !== y[c]) return false;\r\n                }\r\n                return true;\r\n            };\r\n        } else{\r\n            fn = condition;\r\n        }\r\n        const r: T[][] = [];\r\n        let start = 0;\r\n        let i = 1;\r\n        for (; i < this.data.length; i++) {\r\n            if (! fn(this.data[start], this.data[i], i, this.data)) {\r\n                r.push(this.data.slice(start, i));\r\n                start = i;\r\n            }\r\n        }\r\n        r.push(this.data.slice(start, i));\r\n        return new Query(r);\r\n    }\r\n\r\n    public groupEvery(n: number | {single: number, first?: number, intermediate: number, last?: number}): Query<T[]> {\r\n        if (typeof n === 'number') {\r\n            return this.groupBy((a, b, index, array) => {\r\n                if ((index % n) === 0) return false;\r\n                return true;\r\n            });\r\n        } else {\r\n            const w = Object.assign({first: n.intermediate, last: n.intermediate}, n);\r\n            const r = this.groupBy((a, b, index, array) => {\r\n                if (w.single >= array.length) {\r\n                    if ((index % w.single) === 0) return false;\r\n                    return true;\r\n                } else if (index <= w.first) {\r\n                    if ((index % w.first) === 0) return false;\r\n                    return true;\r\n                } else {\r\n                    if (((index - w.first) % w.intermediate) === 0) return false;\r\n                    return true;\r\n                }\r\n            });\r\n            if (r.data.length === 1) {\r\n                if (w.single < r.data[0].length) {\r\n                    r.data.push([]);\r\n                }\r\n            } else {\r\n                if (w.first < r.data[0].length) {\r\n                    // case of w.first === 0\r\n                    r.data.unshift([]);\r\n                }\r\n            }\r\n            if (r.data.length > 1) {\r\n                if (r.data[r.data.length - 1].length > w.last) {\r\n                    r.data.push([]);\r\n                }\r\n            }\r\n            return r;\r\n        }\r\n    }\r\n\r\n    public where(fn: (value: T, index: number, array: T[]) => boolean): Query<T> {\r\n        return new Query(this.data.filter(fn));\r\n    }\r\n\r\n    public select(): T[];\r\n    public select<R>(fn: (value: T, index: number, array: T[]) => R): R[];\r\n    public select<R>(fn?: (value: T, index: number, array: T[]) => R): Array<R | T> {\r\n        return fn ? this.data.map(fn) : this.data as any;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function query<T>(data: T[]): Query<T> {\r\n    return new Query<T>(data);\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { toNumber,\r\n         evaluate }          from '../../evaluate';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond }  from '../core/core.fn';\r\nimport { query }             from '../../../lib/data';\r\n\r\n\r\n\r\nexport const $range = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($range start end)\r\n    // S expression: ($range start end step)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$range', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const start = toNumber(car) || 0;\r\n    const stop = toNumber(cdr) || 0;\r\n\r\n    const step = (args.length > 2 ? toNumber(args[2]) || 0 : 0) || (start <= stop ? 1 : -1);\r\n    const n = Math.sign(stop - start) + Math.sign(step) !== 0 ?\r\n        (Math.floor((Math.abs(stop - start) / Math.abs(step))) + 1) : 0;\r\n\r\n    state.evalCount += n;\r\n    evaluate(state, 0);\r\n    return Array.from({length: n}, (x, i) => start + i * step);\r\n};\r\n\r\n\r\nexport const $length = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($length listOrString)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$length', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('length' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.length;\r\n    }\r\n    throw new Error(`[SX] $length: Invalid argument type: object has no property 'length'.`);\r\n};\r\nexport const $$length = $length(null as any, null as any);\r\n\r\n\r\nexport const $trim = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trim', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trim();\r\n    }\r\n    throw new Error(`[SX] $trim: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trim = $trim(null as any, null as any);\r\n\r\n\r\nexport const $trimHead = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-head string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimHead', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimLeft();\r\n    }\r\n    throw new Error(`[SX] $trimHead: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimHead = $trimHead(null as any, null as any);\r\n\r\n\r\nexport const $trimTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($trim-tail string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$trimTail', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (typeof car === 'string') {\r\n        return car.trimRight();\r\n    }\r\n    throw new Error(`[SX] $trimTail: Invalid argument type: args[0] is not string.`);\r\n};\r\nexport const $$trimTail = $trimTail(null as any, null as any);\r\n\r\n\r\nexport const $replaceAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($replace-all src-string match-string replacement-string)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$replaceAll', args, 3, 3);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string' && typeof args[2] === 'string') {\r\n        return args[0].split(args[1]).join(args[2]);\r\n    }\r\n    throw new Error(`[SX] $replaceAll: Invalid argument type: args[0] or [1] or [2] is not string.`);\r\n};\r\nexport const $$replaceAll = $replaceAll(null as any, null as any);\r\n\r\n\r\nexport const $split = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($split src-string match-string)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$split', args, 2, 2);\r\n\r\n    if (typeof args[0] === 'string' && typeof args[1] === 'string') {\r\n        return args[0].split(args[1]);\r\n    }\r\n    throw new Error(`[SX] $split: Invalid argument type: args[0] or [1] is not string.`);\r\n};\r\nexport const $$split = $split(null as any, null as any);\r\n\r\n\r\nexport const $join = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($join '(str1 ... strN) separator)\r\n    //  -> S expr  : (string ... string)\r\n    checkParamsLength('$join', args, 1, 2);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        if (args.length > 1) {\r\n            if (typeof args[1] === 'string') {\r\n                return args[0].join(args[1]);\r\n            }\r\n            throw new Error(`[SX] $join: Invalid argument type: args[1] is not string.`);\r\n        } else {\r\n            return args[0].join();\r\n        }\r\n    }\r\n    throw new Error(`[SX] $join: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$join = $join(null as any, null as any);\r\n\r\n\r\nexport const $concat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($concat listOrString1 ... listOrStringN)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$concat', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    switch (typeof car) {\r\n    case 'object':\r\n        if (! ('concat' in car)) {\r\n            break;\r\n        }\r\n        // FALL_THRU\r\n    case 'string':\r\n        return car.concat(...args.slice(1));\r\n    }\r\n    throw new Error(`[SX] $concat: Invalid argument type: object has no property 'concat'.`);\r\n};\r\nexport const $$concat = $concat(null as any, null as any);\r\n\r\n\r\nexport const $slice = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($slice start end listOrString)\r\n    // S expression: ($slice start listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$slice', args, 2, 3);\r\n\r\n    if (args.length === 3) {\r\n        if (typeof args[2] === 'string' || Array.isArray(args[2])) {\r\n            return args[2].slice(toNumber(args[0]), toNumber(args[1]));\r\n        }\r\n    }\r\n    if (args.length === 2) {\r\n        if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n            return args[1].slice(toNumber(args[0]));\r\n        }\r\n    }\r\n    throw new Error(`[SX] $slice: Invalid argument type: args[${args.length - 1}] is not string or array.`);\r\n};\r\nexport const $$slice = $slice(null as any, null as any);\r\n\r\n\r\nexport const $top = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($top n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$top', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        return args[1].slice(0, toNumber(args[0]));\r\n    }\r\n    throw new Error(`[SX] $top: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$top = $top(null as any, null as any);\r\n\r\n\r\nexport const $tail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($tail n listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$tail', args, 2, 2);\r\n\r\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\r\n        const n = -toNumber(args[0]);\r\n        return args[1].slice(n >= 0 || Number.isNaN(n) ? args[1].length : n);\r\n    }\r\n    throw new Error(`[SX] $tail: Invalid argument type: args[1] is not string or array.`);\r\n};\r\nexport const $$tail = $tail(null as any, null as any);\r\n\r\n\r\nexport const $push = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($push list value)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$push', args, 2, 2);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        args[0].push(args[1]);\r\n        return args[0];\r\n    }\r\n    throw new Error(`[SX] $push: Invalid argument type: args[1] is not array.`);\r\n};\r\nexport const $$push = $push(null as any, null as any);\r\n\r\n\r\nexport const $pop = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($pop list)\r\n    //  -> S expr  : value\r\n    checkParamsLength('$pop', args, 1, 1);\r\n\r\n    if (typeof Array.isArray(args[0])) {\r\n        const v = args[0].pop();\r\n        return v;\r\n    }\r\n    throw new Error(`[SX] $pop: Invalid argument type: args[1] is not array.`);\r\n};\r\nexport const $$pop = $pop(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__at = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__at index listOrString)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__at', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return cdr[car];\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__at = $__at(null as any, null as any);\r\n\r\n\r\nexport const $reverse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverse = $reverse(null as any, null as any);\r\n\r\n\r\nexport const $reverseDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reverse! listOrString)\r\n    //  -> S expr  : listOrString\r\n    checkParamsLength('$reverse!', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.reverse();\r\n    }\r\n    throw new Error(`[SX] $reverse!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reverseDestructive = $reverseDestructive(null as any, null as any);\r\n\r\n\r\nexport const $find = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($find list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$find', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.find(cdr);\r\n    }\r\n    throw new Error(`[SX] $find: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$find = $find(null as any, null as any);\r\n\r\n\r\nexport const $filter = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($filter list (lambda (v index array) (... boolean)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$filter', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.filter(cdr);\r\n    }\r\n    throw new Error(`[SX] $filter: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$filter = $filter(null as any, null as any);\r\n\r\n\r\nexport const $map = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($map list (lambda (v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$map', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.map(cdr);\r\n    }\r\n    throw new Error(`[SX] $map: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$map = $map(null as any, null as any);\r\n\r\n\r\nexport const $reduce = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduce', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduce(cdr);\r\n        } else {\r\n            return car.reduce(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduce: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduce = $reduce(null as any, null as any);\r\n\r\n\r\nexport const $reduceFromTail = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)) initial-value)\r\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$reduceFromTail', args, 2, 3);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        if (args.length < 3) {\r\n            return car.reduceRight(cdr);\r\n        } else {\r\n            return car.reduceRight(cdr, args[2]);\r\n        }\r\n    }\r\n    throw new Error(`[SX] $reduceFromTail: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$reduceFromTail = $reduceFromTail(null as any, null as any);\r\n\r\n\r\nexport const $sort = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.slice(0).sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sort = $sort(null as any, null as any);\r\n\r\n\r\nexport const $sortDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($sort! list (lambda (a b) (... number_a-b)))\r\n    //  -> S expr  : list\r\n    checkParamsLength('$sort!', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car)) {\r\n        return car.sort(cdr);\r\n    }\r\n    throw new Error(`[SX] $sort!: Invalid argument type: args[0] is not array.`);\r\n};\r\nexport const $$sortDestructive = $sortDestructive(null as any, null as any);\r\n\r\n\r\nexport const $groupEvery = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-every optionsOrNumber (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-every', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-every: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupEvery(car).select();\r\n};\r\nexport const $$groupEvery = $groupEvery(null as any, null as any);\r\n\r\n\r\nexport const $groupBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($group-by conditions (x1 ... xN))\r\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\r\n    checkParamsLength('$group-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $group-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).groupBy(car).select();\r\n};\r\nexport const $$groupBy = $groupBy(null as any, null as any);\r\n\r\n\r\nexport const $orderBy = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($order-by conditions (x1 ... xN))\r\n    //  -> S expr  : (x1 ... xN)\r\n    checkParamsLength('$order-by', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $order-by: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).orderBy(car).select();\r\n};\r\nexport const $$orderBy = $orderBy(null as any, null as any);\r\n\r\n\r\nexport const $where = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($where (-> (v index array) ... boolean) (x1 ... xN))\r\n    //  -> S expr  : (x'1 ... x'M)\r\n    checkParamsLength('$where', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    if (typeof args[0] !== 'function') {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[0] is not function.`);\r\n    }\r\n    if (! Array.isArray(cdr)) {\r\n        throw new Error(`[SX] $where: Invalid argument type: args[1] is not array.`);\r\n    }\r\n\r\n    return query(cdr as any[]).where(car).select();\r\n};\r\nexport const $$where = $where(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './sequence.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$range',\r\n    fn: ops.$range,\r\n}, {\r\n    name: '$length',\r\n    fn: ops.$length,\r\n}, {\r\n    name: '$trim',\r\n    fn: ops.$trim,\r\n}, {\r\n    name: '$trim-head',\r\n    fn: ops.$trimHead,\r\n}, {\r\n    name: '$trim-tail',\r\n    fn: ops.$trimTail,\r\n}, {\r\n    name: '$replace-all',\r\n    fn: ops.$replaceAll,\r\n}, {\r\n    name: '$split',\r\n    fn: ops.$split,\r\n}, {\r\n    name: '$join',\r\n    fn: ops.$join,\r\n}, {\r\n    name: '$concat',\r\n    fn: ops.$concat,\r\n}, {\r\n    name: '$slice',\r\n    fn: ops.$slice,\r\n}, {\r\n    name: '$top',\r\n    fn: ops.$top,\r\n}, {\r\n    name: '$tail',\r\n    fn: ops.$tail,\r\n}, {\r\n    name: '$push',\r\n    fn: ops.$push,\r\n}, {\r\n    name: '$pop',\r\n    fn: ops.$pop,\r\n}, {\r\n    name: '$__at',\r\n    fn: ops.$__at,\r\n}, {\r\n    name: '$reverse',\r\n    fn: ops.$reverse,\r\n}, {\r\n    name: '$reverse!',\r\n    fn: ops.$reverseDestructive,\r\n}, {\r\n    name: '$find',\r\n    fn: ops.$find,\r\n}, {\r\n    name: '$filter',\r\n    fn: ops.$filter,\r\n}, {\r\n    name: '$map',\r\n    fn: ops.$map,\r\n}, {\r\n    name: '$reduce',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-head',\r\n    fn: ops.$reduce,\r\n}, {\r\n    name: '$reduce-from-tail',\r\n    fn: ops.$reduceFromTail,\r\n}, {\r\n    name: '$sort',\r\n    fn: ops.$sort,\r\n}, {\r\n    name: '$sort!',\r\n    fn: ops.$sortDestructive,\r\n}, {\r\n    name: '$group-every',\r\n    fn: ops.$groupEvery,\r\n}, {\r\n    name: '$group-by',\r\n    fn: ops.$groupBy,\r\n}, {\r\n    name: '$order-by',\r\n    fn: ops.$orderBy,\r\n}, {\r\n    name: '$where',\r\n    fn: ops.$where,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState } from '../../types';\r\nimport { isSymbol }      from '../../ast';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$[',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($[ index ] listOrObject)\r\n        //  -> S expr  : ($__at listOrObject)\r\n        const symOf = isSymbol(list[2], ']');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing ']' keyword.`);\r\n        }\r\n        return [{symbol: '$__at'},\r\n            list[1],\r\n            list[3],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './sequence.operator';\r\nimport macros             from './sequence.macro';\r\nimport symbols            from './sequence.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken }             from '../../types';\r\nimport { isSymbol,\r\n         quote }               from '../../ast';\r\nimport { evaluate,\r\n         getScope }            from '../../evaluate';\r\nimport { checkParamsLength,\r\n         checkUnsafeVarNames } from '../../errors';\r\nimport { $$first,\r\n         $$firstAndSecond,\r\n         $__scope,\r\n         $$boolean }           from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputIf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputIf cond 'expr)\r\n    //  -> (if cond is true ) S expr  : expr\r\n    //  -> (if cond is false) S expr  : ()\r\n    checkParamsLength('$__outputIf', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        if (2 < args.length) {\r\n            r.push({symbol: state.config.reservedNames.Template}, ...args.slice(1));\r\n            r = evaluate(state, r);\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__outputForOf = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__outputForOf list 'expr)\r\n    //  -> S expr  : (Template expr ... expr)\r\n    checkParamsLength('$__outputForOf', args, 2);\r\n\r\n    const car = $$first(...args);\r\n    const r: SxToken[] = [];\r\n    if (Array.isArray(car)) {\r\n        for (let i = 0; i < car.length; i++) {\r\n            const x = car[i];\r\n            const v = $__scope(state, name)(true, true, [\r\n                ['$data', quote(state, x)],\r\n                ['$index', i],\r\n                ['$array', quote(state, car)],\r\n                ['$parent', quote(state, getScope(state).scope)],\r\n            ], ...args.slice(1));\r\n\r\n            if (2 < args.length && Array.isArray(v)) {\r\n                r.push(...v);\r\n            } else {\r\n                r.push(v);\r\n            }\r\n        }\r\n    } else {\r\n        throw new Error(`[SX] $__outputForOf: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    // All of r items are already evaluated.\r\n    return evaluate(state,\r\n        ([{symbol: state.config.reservedNames.Template}] as SxToken[])\r\n        .concat(r.map(z => [{symbol: state.config.reservedNames.quote}, z])));\r\n};\r\n\r\n\r\nexport const $jsxProps = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (@ (name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n            switch (keyName) {\r\n            case 'style':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (style) ...)\r\n                        //  -> JSON    : {..., style: \"\", ...}\r\n                        r[keyName] = \"\";\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (style \"styleName1: styleValue1; ...\" ...) ...)\r\n                        // S expression: (@ ... (style (styleName1 styleValue1) ...) ...)\r\n                        //  -> JSON    : {..., style: {styleName1: styleValue1}, ...}\r\n                        const styles: object = {};\r\n                        for (const s of x.slice(1)) {\r\n                            if (Array.isArray(s) && 1 < s.length) {\r\n                                styles[String(evaluate(state, s[0]))] = String(evaluate(state, s[1]));\r\n                            } else if (typeof s === 'string') {\r\n                                for (const v of s.split(';')) {\r\n                                    const matched = /^\\s*(\\S+)\\s*:\\s*(.*?)\\s*$/.exec(v);\r\n                                    if (matched) {\r\n                                        styles[matched[1]] = matched[2];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        r[keyName] = styles;\r\n                    }\r\n                }\r\n                break;\r\n            case 'class': case 'styleClass':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: [], ...}\r\n                        r[keyName] = [];\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: [className1 className2 ...], ...}\r\n                        let classes: any[] = [];\r\n                        for (const c of x.slice(1)) {\r\n                            if (Array.isArray(c)) {\r\n                                classes = classes.concat(c.map(z => evaluate(state, z)));\r\n                            } else if (typeof c === 'string') {\r\n                                classes = classes.concat(c.split(' '));\r\n                            }\r\n                        }\r\n                        const cs: string[] = [];\r\n                        const fn: (a: any[]) => void = (a) => a\r\n                            .forEach(c => (c === null || c === void 0) ?\r\n                                void 0 :\r\n                                (Array.isArray(c) ? fn(c) : cs.push(String(c))));\r\n                        fn(classes);\r\n                        r[keyName] = cs;\r\n                    }\r\n                }\r\n                break;\r\n            case 'className':\r\n                {\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (class) ...)\r\n                        //  -> JSON    : {..., class: \"\", ...}\r\n                        r[keyName] = '';\r\n                    } else if (x.length >= 2) {\r\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\r\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\r\n                        //  -> JSON    : {..., class: \"className1 className2 ...\", ...}\r\n                        let classes: string = '';\r\n                        for (const c of x.slice(1)) {\r\n                            let fragment = '';\r\n                            if (Array.isArray(c)) {\r\n                                const cs: string[] = [];\r\n                                const fn: (a: any[]) => void = (a) => a\r\n                                    .map(z => evaluate(state, z))\r\n                                    .forEach(z => (z === null || z === void 0) ?\r\n                                        void 0 :\r\n                                        (Array.isArray(z) ? fn(z) : cs.push(String(z))));\r\n                                fn(c);\r\n                                fragment = cs.join(' ');\r\n                            } else if (typeof c === 'string') {\r\n                                fragment = c;\r\n                            }\r\n                            if (0 < classes.length) classes += ' ' + fragment;\r\n                            else classes = fragment;\r\n                        }\r\n                        r[keyName] = classes;\r\n                    }\r\n                }\r\n                break;\r\n            case 'dangerouslySetInnerHTML':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__html: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__html: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__html:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            case 'setInnerText':\r\n                {\r\n                    if (x.length === 1) {\r\n                        r[keyName] = {__text: ''};\r\n                    } else if (x.length >= 2) {\r\n                        r[keyName] = {__text: evaluate(state, x[1])};\r\n                    } else {\r\n                        r[keyName] = {__text:\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)))\r\n                        };\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                {\r\n                    checkUnsafeVarNames('$jsxProps', keyName);\r\n                    if (x.length === 1) {\r\n                        // S expression: (@ ... (keyName) ...)\r\n                        //  -> JSON    : {..., keyName: true, ...}\r\n                        r[keyName] = true;\r\n                    } else if (x.length === 2) {\r\n                        // S expression: (@ ... (keyName value) ...)\r\n                        //  -> JSON    : {..., keyName: value, ...}\r\n                        r[keyName] = evaluate(state, x[1]);\r\n                    } else {\r\n                        // S expression: (@ ... (keyName value1 value2 ...) ...)\r\n                        //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                        r[keyName] =\r\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                            .concat(x.slice(1)));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $jsxProps: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nfunction getJsxTagsParams(state: SxParserState, ...args: any[]) {\r\n    let children = args;\r\n    let props: any = {};\r\n    if (0 < args.length && Array.isArray(args[0])) {\r\n        const sym = isSymbol(args[0][0], '@');\r\n\r\n        if (sym) {\r\n            props = $jsxProps(state, '')(...args[0].slice(1));\r\n            children = children.slice(1);\r\n        }\r\n    }\r\n    return {props, children};\r\n}\r\n\r\n\r\nexport const $jsxStandardTag = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(name, props, ...children);\r\n};\r\n\r\n\r\nexport const $jsxComponentTag = (component: any) => (state: SxParserState, name: string) => (...args: any[]) => {\r\n    const {props, children} = getJsxTagsParams(state, ...args);\r\n    return (state.config.jsx as any)(component, props, ...children);\r\n};\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './jsx.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$=__if',\r\n    fn: ops.$__outputIf,\r\n}, {\r\n    name: '$=__for',\r\n    fn: ops.$__outputForOf,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState } from '../../types';\r\nimport { quote }         from '../../ast';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '@',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        return quote(state, list);\r\n    },\r\n}, {\r\n    name: '$=if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=if cond expr)\r\n        //  -> S expr  : ($=__if cond 'expr)\r\n        return [\r\n            {symbol: '$=__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$=for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($=for list expr)\r\n        //  -> S expr  : ($=__for list 'expr)\r\n        return [\r\n            {symbol: '$=__for'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig,\r\n         LsxConfig }        from '../../types';\r\nimport operators            from './jsx.operator';\r\nimport macros               from './jsx.macro';\r\nimport symbols              from './jsx.symbol';\r\n\r\nimport { $jsxStandardTag,\r\n         $jsxComponentTag } from './jsx.fn';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig, lsxConf: LsxConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n\r\n    const components =\r\n        Object.entries(lsxConf.components)\r\n        .map(x => ({name: x[0], fn: $jsxComponentTag(x[1])}));\r\n\r\n    config.funcs = config.funcs.concat(\r\n        {name: config.reservedNames.Template, fn: $jsxComponentTag(lsxConf.jsxFlagment)},\r\n        ...components\r\n    );\r\n\r\n    config.funcSymbolResolverFallback = $jsxStandardTag;\r\n    config.jsx = lsxConf.jsx;\r\n    config.JsxFragment = lsxConf.jsxFlagment;\r\n\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState }     from '../../types';\r\nimport { checkParamsLength } from '../../errors';\r\nimport { $__let,\r\n         $__set  }           from '../core/core.fn';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__letAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let-async 'nameStrOrSymbol promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__letAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__let(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__letAsync = $__letAsync(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__setAsync = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set-async 'nameOrListOfNameOrIndex promise)\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$__setAsync', args, 2, 2);\r\n\r\n    let promise: Promise<any> = args[1];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    promise = promise.then(v => {\r\n        try {\r\n            $__set(state, '')(args[0], v);\r\n            return v;\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__setAsync = $__setAsync(null as any, null as any);\r\n\r\n\r\nexport const $then = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($then promise (lambda (val) ...) (lambda (err) ...))\r\n    //  -> S expr  : promise\r\n    checkParamsLength('$then', args, 2, 3);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    if (typeof args[2] === 'function') {\r\n        promise = promise.then(args[1], args[2]);\r\n    } else {\r\n        if (typeof args[1] !== 'function') {\r\n            throw new Error(`[SX] $then: Invalid argument(s): args[1] is not function.`);\r\n        }\r\n        promise = promise.then(args[1]);\r\n    }\r\n    return promise;\r\n};\r\nexport const $$then = $then(null as any, null as any);\r\n\r\n\r\nexport const $resolveAll = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-all promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n    return Promise.all(promises);\r\n};\r\nexport const $$resolveAll = $resolveAll(null as any, null as any);\r\n\r\n\r\nexport const $resolveAny = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-any promise1 ... promiseN)\r\n    //  -> S expr  : promise\r\n    const promises: Array<Promise<any>> = args.slice(0);\r\n    for (let i = 0; i < promises.length; i++) {\r\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\r\n            promises[i] = Promise.resolve(promises[i]);\r\n        }\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/39940152/get-first-fulfilled-promise\r\n    // firstOf: This will return the value of the first fulfilled promise,\r\n    //          or if all reject, an array of rejection reasons.\r\n    const invert  = (p: Promise<any>) => new Promise((res, rej) => p.then(rej, res));\r\n    const firstOf = (ps: Array<Promise<any>>) => invert(Promise.all(ps.map(invert)));\r\n\r\n    return firstOf(promises);\r\n};\r\nexport const $$resolveAny = $resolveAny(null as any, null as any);\r\n\r\n\r\nexport const $resolvePipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-pipe promise<val1> (lambda (val1) ... promiseOrVal2) (lambda (val2) ... promiseOrVal3) ... (lambda (valN-1) ... promiseOrValN))\r\n    //  -> S expr  : promise\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolvePipe', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n    let p = promise;\r\n    for (const l of lambdas) {\r\n        p = p.then(l);\r\n    }\r\n    return p;\r\n};\r\nexport const $$resolvePipe = $resolvePipe(null as any, null as any);\r\n\r\n\r\nexport const $resolveFork = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($resolve-fork promise<val1> (lambda (val1) ... promiseOrVal2a) ... (lambda (val1) ... promiseOrVal2z))\r\n    //  -> S expr  : (promise<val2a> ... promise<val2z>)\r\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\r\n    checkParamsLength('$resolveFork', args, 1);\r\n\r\n    let promise: Promise<any> = args[0];\r\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\r\n        promise = Promise.resolve(promise);\r\n    }\r\n    const lambdas = args.slice(1);\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        if (typeof lambdas[i] !== 'function') {\r\n            const v = lambdas[i];\r\n            lambdas[i] = () => v;\r\n        }\r\n    }\r\n\r\n    const resolvers = new Array(lambdas.length);\r\n    const rejectors = new Array(lambdas.length);\r\n\r\n    const pa: Array<Promise<any>> = [];\r\n    for (let i = 0; i < lambdas.length; i++) {\r\n        pa.push(new Promise<any>((resolve: any, reject: any) => {\r\n            resolvers[i] = (v: any) => {\r\n                let lp: Promise<any> = lambdas[i](v);\r\n                if (typeof lp !== 'object' || typeof lp.then !== 'function') {\r\n                    lp = Promise.resolve(lp);\r\n                }\r\n\r\n                lp\r\n                .then(x => resolve(x))\r\n                .catch(e => reject(e));\r\n            };\r\n            rejectors[i] = reject;\r\n        }));\r\n    }\r\n\r\n    promise.then(\r\n        v => resolvers.forEach(f => f(v)),\r\n        e => rejectors.forEach(f => f(e))\r\n    );\r\n\r\n    return pa;\r\n};\r\nexport const $$resolveFork = $resolveFork(null as any, null as any);\r\n\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './concurrent.fn';\r\n\r\n\r\n\r\nexport const funcs: SxFuncInfo[] = [{\r\n    name: '$__let-async',\r\n    fn: ops.$__letAsync,\r\n}, {\r\n    name: '$__set-async',\r\n    fn: ops.$__setAsync,\r\n}, {\r\n    name: '$then',\r\n    fn: ops.$then,\r\n}, {\r\n    name: '$resolve-all',\r\n    fn: ops.$resolveAll,\r\n}, {\r\n    name: '$resolve-any',\r\n    fn: ops.$resolveAny,\r\n}, {\r\n    name: '$resolve-pipe',\r\n    fn: ops.$resolvePipe,\r\n}, {\r\n    name: '$resolve-fork',\r\n    fn: ops.$resolveFork,\r\n}];\r\n\r\n\r\nexport default funcs;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$let-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let-async nameStrOrSymbol promise)\r\n        //  -> S expr  : ($__let-async 'nameStrOrSymbol promise)\r\n        checkParamsLength('$let-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__let-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set-async',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set-async nameOrListOfNameOrIndex promise)\r\n        //  -> S expr  : ($__set-async 'nameOrListOfNameOrIndex promise)\r\n        checkParamsLength('$set-async', list, 3, 3);\r\n\r\n        return [{symbol: '$__set-async'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport default macros;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig } from '../../types';\r\nimport operators          from './concurrent.operator';\r\nimport macros             from './concurrent.macro';\r\nimport symbols            from './concurrent.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || []).concat(operators);\r\n    config.macros = (config.macros || []).concat(macros);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxFuncInfo,\r\n         SxSymbolInfo,\r\n         SxReservedNames,\r\n         SxParserConfig,\r\n         SxParserState,\r\n         SxToken,\r\n         LsxConfig,\r\n         SExpressionTemplateFn,\r\n         SExpressionAsyncTemplateFn } from './types';\r\nimport { parse }            from './parser';\r\nimport { evaluate }         from './evaluate';\r\nimport installCore          from './operators/core';\r\nimport installArithmetic    from './operators/arithmetic';\r\nimport installSequence      from './operators/sequence';\r\nimport installJsx           from './operators/jsx';\r\nimport installConcurrent    from './operators/concurrent';\r\n\r\n\r\n\r\nexport const defaultReservedNames: SxReservedNames = {\r\n    eval: '$eval',\r\n    quote: '$quote',\r\n    backquote: '$backquote',\r\n    unquote: '$unquote',\r\n    spread: '$spread',\r\n    splice: '$splice',\r\n\r\n    car: '$car',\r\n    cdr: '$cdr',\r\n    cons: '$cons',\r\n    atom: '$atom',\r\n    eq: '$eq',\r\n    list: '$list',\r\n\r\n    let: '$clisp-let',\r\n    lambda: '$lambda',\r\n    self: '$self',\r\n    defun: '$defun',\r\n\r\n    if: '$if',\r\n    cond: '$cond',\r\n\r\n    while: '$while',\r\n    doWhile: '$do-while',\r\n    until: '$until',\r\n    doUntil: '$do-until',\r\n\r\n    get: '$get',\r\n    defvar: '$clisp-defvar',\r\n    setq: '$clisp-setq',\r\n    set: '$set',\r\n    call: '$call',\r\n\r\n    not: '$not',\r\n    and: '$and',\r\n    or: '$or',\r\n\r\n    isSymbol: '$is-symbol',\r\n    gensym: '$gensym',\r\n    raise: '$raise',\r\n    catch: '$catch',\r\n\r\n    Template: 'Template',\r\n};\r\n\r\nexport const defaultConfig: SxParserConfig = {\r\n    raiseOnUnresolvedSymbol: false,\r\n    enableEvaluate: true,\r\n    enableHereDoc: true,\r\n    enableSpread: true,\r\n    enableSplice: true,\r\n    enableShorthands: true,\r\n    enableVerbatimStringLiteral: true,\r\n    enableTailCallOptimization: true,\r\n    stripComments: false,\r\n    wrapExternalValue: true,\r\n    returnMultipleRoot: false,\r\n    maxEvalCount: 0,\r\n\r\n    reservedNames: defaultReservedNames,\r\n    symbols: [],\r\n    macros: [],\r\n    funcs: [],\r\n};\r\n\r\n\r\n\r\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\r\n    return {\r\n        strings: typeof strings === 'string' ? [strings] : strings,\r\n        values: values || [],\r\n\r\n        index: 0,\r\n        pos: 0,\r\n        line: 0,\r\n\r\n        evalCount: 0,\r\n\r\n        scopes: [{isBlockLocal: false, scope: globals}],\r\n\r\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\r\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\r\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\r\n\r\n        config,\r\n    };\r\n}\r\n\r\n\r\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\r\n    state.strings = typeof strings === 'string' ? [strings] : strings;\r\n    state.values = values || [];\r\n    state.index = 0;\r\n    state.pos = 0;\r\n    state.line = 0;\r\n    state.evalCount = 0;\r\n    return state;\r\n}\r\n\r\n\r\n\r\n\r\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fRepl;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = async (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n\r\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\r\n                    s[i] = await s[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\r\n            if (config.enableEvaluate) {\r\n                for (let i = 0; i < s.length; i++) {\r\n                    s[i] = evaluate(stat, s[i]);\r\n                }\r\n            }\r\n\r\n            if (config.returnMultipleRoot) {\r\n                return s.length === 1 ? s[0] : s;\r\n            } else {\r\n                return s[s.length - 1];\r\n            }\r\n        };\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return execSync(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fReplSync;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\n\r\nexport const S = (() => {\r\n    const config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config.enableEvaluate = false;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\nexport const L = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\nexport const LS = L;\r\nexport const lisp = L;\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const L_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LS_async = L_async;\r\n// tslint:disable-next-line:variable-name\r\nexport const lisp_async = L_async;\r\n\r\n\r\n\r\nexport const LM = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpression(config);\r\n})();\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const LM_async = (() => {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n    config.reservedNames = Object.assign({}, config.reservedNames, {\r\n        Template: '$concat',\r\n    });\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n\r\n    config.stripComments = true;\r\n    config.returnMultipleRoot = true;\r\n\r\n    return SExpressionAsync(config);\r\n})();\r\n\r\n\r\n\r\nexport function LSX<R = SxToken>(lsxConf: LsxConfig): SExpressionTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpression(config) as any;\r\n}\r\n\r\n\r\n\r\nexport function LSX_async<R = SxToken>(lsxConf: LsxConfig): SExpressionAsyncTemplateFn<R> {\r\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\r\n\r\n    config = installCore(config);\r\n    config = installArithmetic(config);\r\n    config = installSequence(config);\r\n    config = installConcurrent(config);\r\n    config = installJsx(config, lsxConf);\r\n\r\n    config.stripComments = true;\r\n\r\n    return SExpressionAsync(config) as any;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SExpressionTemplateFn,\r\n         SExpressionAsyncTemplateFn } from './types';\r\n\r\n\r\n\r\nexport function runScriptTags(lisp: SExpressionTemplateFn | SExpressionAsyncTemplateFn, globals?: object, contentType = 'text/lisp') {\r\n    const codes = document.querySelectorAll(`script[type=\"${contentType}\"]`);\r\n    const cs = [];\r\n    for (let i = 0; i < codes.length; i++) {\r\n        cs.push(codes[i].innerHTML);\r\n    }\r\n    lisp = lisp.appendGlobals(globals || {});\r\n    return lisp(cs.join('\\n'));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nexport * from './s-exp/s-expression';\r\nexport * from './s-exp/browser';\r\n\r\n\r\nexport { default as installCore }         from './s-exp/operators/core';\r\nexport { default as installArithmetic }   from './s-exp/operators/arithmetic';\r\nexport { default as installSequence }     from './s-exp/operators/sequence';\r\nexport { default as installJsx }          from './s-exp/operators/jsx';\r\nexport { default as installConcurrent }   from './s-exp/operators/concurrent';\r\n\r\n\r\nimport { default as coreOperators }       from './s-exp/operators/core/core.operator';\r\nimport { default as coreMacros }          from './s-exp/operators/core/core.macro';\r\nimport { default as coreSymbols }         from './s-exp/operators/core/core.symbol';\r\n\r\nimport { default as arithmeticOperators } from './s-exp/operators/arithmetic/arithmetic.operator';\r\nimport { default as arithmeticMacros }    from './s-exp/operators/arithmetic/arithmetic.macro';\r\nimport { default as arithmeticSymbols }   from './s-exp/operators/arithmetic/arithmetic.symbol';\r\n\r\nimport { default as sequenceOperators }   from './s-exp/operators/sequence/sequence.operator';\r\nimport { default as sequenceMacros }      from './s-exp/operators/sequence/sequence.macro';\r\nimport { default as sequenceSymbols }     from './s-exp/operators/sequence/sequence.symbol';\r\n\r\nimport { default as jsxOperators }        from './s-exp/operators/jsx/jsx.operator';\r\nimport { default as jsxMacros }           from './s-exp/operators/jsx/jsx.macro';\r\nimport { default as jsxSymbols }          from './s-exp/operators/jsx/jsx.symbol';\r\n\r\nimport { default as concurrentOperators } from './s-exp/operators/concurrent/concurrent.operator';\r\nimport { default as concurrentMacros }    from './s-exp/operators/concurrent/concurrent.macro';\r\nimport { default as concurrentSymbols }   from './s-exp/operators/concurrent/concurrent.symbol';\r\n\r\n\r\nexport const builtinOperators = {\r\n    core: coreOperators,\r\n    arithmetic: arithmeticOperators,\r\n    sequence: sequenceOperators,\r\n    jsx: jsxOperators,\r\n    concurrent: concurrentOperators,\r\n};\r\n\r\nexport const builtinMacros = {\r\n    core: coreMacros,\r\n    arithmetic: arithmeticMacros,\r\n    sequence: sequenceMacros,\r\n    jsx: jsxMacros,\r\n    concurrent: concurrentMacros,\r\n};\r\n\r\nexport const builtinSymbols = {\r\n    core: coreSymbols,\r\n    arithmetic: arithmeticSymbols,\r\n    sequence: sequenceSymbols,\r\n    jsx: jsxSymbols,\r\n    concurrent: concurrentSymbols,\r\n};\r\n"],"sourceRoot":""}