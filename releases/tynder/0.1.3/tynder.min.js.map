{"version":3,"sources":["webpack://tynder/webpack/universalModuleDefinition","webpack://tynder/webpack/bootstrap","webpack://tynder/./node_modules/liyad/src/s-exp/errors.ts","webpack://tynder/./node_modules/liyad/src/s-exp/ast.ts","webpack://tynder/./src/types/tynder-schema-types.ts","webpack://tynder/./src/types.ts","webpack://tynder/./node_modules/liyad/src/s-exp/evaluate.ts","webpack://tynder/./src/operators.ts","webpack://tynder/./node_modules/liyad/src/s-exp/compile.ops/helpers.ts","webpack://tynder/./src/lib/escape.ts","webpack://tynder/./src/lib/util.ts","webpack://tynder/./src/lib/errors.ts","webpack://tynder/./src/lib/resolver.ts","webpack://tynder/./src/lib/reporter.ts","webpack://tynder/./src/validator.ts","webpack://tynder/./node_modules/liyad/src/s-exp/types.ts","webpack://tynder/./src/picker.ts","webpack://tynder/./node_modules/liyad/src/s-exp/consts.ts","webpack://tynder/./node_modules/liyad/src/s-exp/compile.ts","webpack://tynder/./node_modules/liyad/src/s-exp/compile.ops/index.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/types.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/parser.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/object-parser.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.fn.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.operator.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.macro.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.symbol.ts","webpack://tynder/./node_modules/liyad/src/s-exp/parser.ts","webpack://tynder/./node_modules/liyad/src/s-exp/defaults.ts","webpack://tynder/./node_modules/liyad/src/s-exp/interpreters/index.ts","webpack://tynder/./src/compiler.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/string-parser.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/index.ts","webpack://tynder/./src/lib/codegen-ts.ts","webpack://tynder/./src/lib/codegen-json-schema.ts","webpack://tynder/./src/lib/codegen-proto3.ts","webpack://tynder/./src/lib/codegen-graphql.ts","webpack://tynder/./src/serializer.ts","webpack://tynder/./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setEvaluationCount","state","evalCount","config","maxEvalCount","checkParamsLength","args","min","max","length","Error","objConstructor","constructor","funConstructor","Function","checkUnsafeVarNames","varName","checkUnsafeVarNamesEx","target","con","__proto__","quote","x","symbol","reservedNames","backquote","wrapByUnquote","unquote","spread","splice","isSymbol","ErrorTypes","toNumber","NaN","Number","resolveSplice","enableSplice","Array","isArray","slice","concat","resolveMacro","macroInfo","macroMap","lastErr","r1","formalArgs","fn","actualArgs","matchResult","matchMacroArgs","Boolean","lastIsSpread","error","next","resolveValueSymbolScope","nullIfNotDefined","scopes","localScope","scope","capturedScopes","isBlockLocal","globalScope","getGlobalScope","getScope","resolveValueSymbol","symInfo","symbolMap","valueSymbolResolverFallback","raiseOnUnresolvedSymbol","collectCapturedVariables","names","getCapturedScopes","a","unshift","assign","installScope","push","uninstallScope","pop","macroName","nm","startsWith","endsWith","tpos","lastIndexOf","tname","optimizeTailCall","fnBody","front","tail","if","self","varBaseName","tempVarsSyms","map","idx","until","let","set","evaluate","sym","resolveUnquote","eval","sprs","reverse","funcInfo","funcMap","v","funcSymbolResolverFallback","resolveFunctionSymbol","JSON","stringify","wrapExternalValue","car","cdr","dotted","picked","ty","kind","members","member","find","m2","operator","operands","omit","partial","optional","optTy","typeName","intersect","types","filter","lastTy","Map","from","values","oneOf","primitiveValue","ret","subtract","primitive","primitiveName","substring","regexpPatternStringType","pattern","repeated","option","sequenceOf","seq","sequence","enumType","ar","objectType","revMembers","membersProps","withName","additionalProps","checkRecursiveExtends","base","symlinkTargetName","baseTypes","z","derived","exts","ext","symlinkType","withTypeName","withOriginalTypeName","originalTypeName","withDocComment","docComment","withRange","minValue","maxValue","opt","withMinValue","withMaxValue","withGreaterThan","greaterThanValue","withLessThan","lessThanValue","withMinLength","minLength","withMaxLength","maxLength","withMatch","withMsg","messages","message","withMsgId","messageId","applyMacros","tok","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","checkUnsafeVarNames_dynamic","escapeString","replace","globalObj","dummyTargetObject","isUnsafeVarNames","ValidationError","ctx","super","updateSchema","original","schema","has","resolved","resolveSymbols","ctx2","nestLevel","symlinkStack","findIndex","link","link2","mergeTypeAndSymlink","baseSymlinks","d2","operators","ctx3","ty2","resolverOps","resolveSchema","ent","entries","errorTypeNames","defaultMessages","invalidDefinition","required","typeUnmatched","additionalPropUnmatched","repeatQtyUnmatched","sequenceUnmatched","valueRangeUnmatched","valuePatternUnmatched","valueLengthUnmatched","valueUnmatched","getErrorMessage","errType","InvalidDefinition","Required","TypeUnmatched","AdditionalPropUnmatched","RepeatQtyUnmatched","SequenceUnmatched","ValueRangeUnmatched","ValuePatternUnmatched","ValueLengthUnmatched","ValueUnmatched","nvl","alt","findTopObjectAssertion","typeStack","getExpectedType","String","join","formatErrorMessage","msg","data","tr","topRepeatable","dict","source","flags","dataPath","parentType","substitutions","RegExp","reportError","errorMessages","dataPathArray","pt","pi","isSet","constraints","cSrces","cSrc","pat","val","errors","code","reportErrorWithPush","tyidx","NumberPattern","validateRoot","dataIndex","validateNeverTypeAssertion","mapper","validateUnknownTypeAssertion","Math","trunc","err","valueRangeErr","valueLengthErr","test","validatePrimitiveTypeAssertion","validatePrimitiveValueTypeAssertion","retVals","validateRepeatedAssertion","dIdx","sIdx","spreadLen","optionalOmitted","checkSpreadQuantity","ts","index","checkOptionalQuantity","savedErrLen","validateSequenceAssertion","tyOne","validateOneOfAssertion","validateEnumAssertion","retVal","checkAll","dataMembers","Set","noAdditionalProps","add","includes","delete","getAdditionalMembers","allowImplicit","matchedAssertions","ap","at","hasError","size","validateObjectAssertion","validate","getType","FatalError","MaxEvaluationCountError","ScriptTerminationError","where","pickMapper","pickRoot","pick","patch","needle","merge","k","compileCore","_$_vars","compileValue","b","compFnBody","varNames","varsCount","compileToken","body","ops","arr","varNamesCount","varDefs","makeScope","scoped","varNamesCopy","enableTailCallOptimization","thiz","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","compileLambda","registerOperators","raise","quoted","vName","symName","checkNameCalled","checkNamePos","str","not","w1","w0","hasSpread","ParseError","parserInput","src","context","start","end","makeErrorMessage","input","split","e","makeMessage","zeroWidth","helper","succeeded","tokens","zeroWidthError","beginning","pos","quantify","parser","matched","first","parsers","last","or","reduce","transform","trans","ctxTrans","t2","lookAhead","lookBehind","applyProductionRules","lexer","lexerInput","lexResult","completed","check","maxApply","rules","rule","rtol","len","nextSrc","objSequence","comparator","objClass","needles","some","objClassNot","$car","$$first","$cdr","$cons","$$firstAndSecond","$first","$second","$$second","$last","$rest","$firstAndSecond","$atom","$eq","$notEq","$list","$__scope","returnMultiple","kv","kvSym","kvName","xSym","xName","$__lambda","fa","enableSpread","$comp$__lambda","compile","$apply","apply","$raise","$pipe","$__let","$boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$typeof","tyName","$symbol","$isSymbol","$isNull","$isNil","$isUndefined","$isList","$isString","$isNumber","$isNaN","isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","assignBlacklist","$objectAssign","$jsonStringify","$jsonParse","parse","$now","Date","now","$datetimeFromIso","dt","getTime","$datetime","year","padStart","$datetimeLc","$datetimeToIsoString","toISOString","$datetimeToComponents","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getUTCDay","$datetimeToComponentsLc","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","getDay","$match","enableRegExpMatchOperators","exec","$consoleLog","console","log","$consoleError","$consoleTrace","trace","$consoleTime","time","$consoleTimeEnd","timeEnd","$consoleTimeLog","timeLog","st","info","fArgs","aArgs","list","q","inprog","path","subst","tempVarSym","keyName","compilationOperators","macros","compilationMacros","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","isEOF","ch","trim","isNumberFirstChar","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","line","strings","getChar","virtualEof","disableEscape","eof","eofSeq","ch1","ch2","fromCodePoint","parseInt","lookAheads","chs","skipWhitespaces","parseNumber","parseSymbol","enableShorthands","match","ws","parseStringOrComment","valuesStartSeq","valuesStopChar","allowPhysicalEof","eofSeqs","parseList","parseString","parseHereDoc","attrs","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","ahead","isSpliceUnquote","aheads","enableHereDoc","isHereDoc","Template","ahs","enableVerbatimStringLiteral","listStopChar","initialList","stripComments","defaultConfig","enableEvaluate","enableCompilationOperators","returnMultipleRoot","cons","atom","eq","lambda","defun","cond","while","doWhile","doUntil","defvar","setq","and","gensym","catch","symbols","funcs","initState","globals","resetState","$s","params","rawToToken","cls","charClass","notCls","codePointAt","charClassNot","clsFn","charClassByNeedleFn","cat","concatTokens","once","repeat","qty","combine","erase","isAlpha","isUpper","isLower","isNumber","isNonZeroNumber","isBinNum","isOctNum","isHexNum","isAlNum","isSpace","isSpaceWithinSingleLine","isControl","isWord","isNewline","isAny","binSep","octSep","hexSep","decimalIntegerNumber","bigDecimalIntegerNumber","floatingPointNumber","classes","alpha","upper","lower","num","nonzero","bin","oct","hex","alnum","space","spaceWithinSingleLine","ctrl","newline","word","any","numbers","prefixes","int","bigint","float","behind","getStringParsers","rawToken","$o","getObjectParsers","directiveLineComment","lineComment","hashLineComment","blockComment","commentOrSpace","trueValue","falseValue","nullValue","undefinedValue","positiveInfinityValue","negativeInfinityValue","nanValue","binaryIntegerValue","octalIntegerValue","decimalIntegerValue","bigDecimalIntegerValue","BigInt","floatingPointNumberValue","parseFloat","numberValue","stringEscapeSeq","signleQuotStringValue","doubleQuotStringValue","backQuotStringValue","stringValue","regexpStringValue","symbolName","decoratorSymbolName","simpleConstExpr","objKey","listValue","ast","token","objectValue","objectKeyValuePair","constExpr","primitiveValueNoNullUndefined","primitiveTypeName","additionalPropPrimitiveTypeName","nullUndefinedTypeName","simpleTypeName","sequenceType","spreadOrComplexType","arraySizeFactorInner","arraySizeFactor","complexArrayType","complexType","partialType","pickOrOmitType","genericOrSimpleType","spreadType","decorator","decoratorsClause","complexTypeInnerRoot","edge","interfaceDefInner","complexTypeInnerWOSinpleArrayType","op","binaryOp","op1","op2","isOperator","complexTypeExprRule3","complexTypeExprRule2","complexTypeExprRule1","typeDef","text","interfaceExtendsClause","interfaceKey","interfaceKeyTypePair","separator","interfaceDef","enumKeyValue","enumDef","internalDef","exportedDef","defStatement","externalTypeDef","importStatement","definition","program","lisp","install","conf","startup","f","evaluateAST","repl","fRepl","sync","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","installer","SExpression","mapTyToTySet","gensymCount","def","tySet","exported","external","noOutput","ref","export","redef","passthru","passThruCodeBlock","directive","greaterThan","lessThan","formatTypeScriptCodeDocComment","indent","indexOf","trimLeft","generateTypeScriptCodeInner","isInterface","generateTypeScriptCodePrimitive","toString","generateTypeScriptCodePrimitiveValue","generateTypeScriptCodeRepeated","generateTypeScriptCodeSequence","generateTypeScriptCodeOneOf","generateTypeScriptCodeOptional","generateTypeScriptCodeEnum","sep","memberLines","additionalPropsLines","ak","formatAdditionalPropsName","generateTypeScriptCodeObject","generateTypeScriptCode","indent0","indent1","addMetaInfo","a2","changed","description","minItems","maxItems","minimum","maximum","exclusiveMinimum","exclusiveMaximum","generateJsonSchemaInner","$ref","type","items","anyOf","enum","properties","patternProperties","patternPropsCount","additionalProperties","generateJsonSchemaObject","$schema","definitions","generateJsonSchema","asTs","formatProto3CodeDocComment","generateProto3CodeInner","generateProto3CodePrimitive","generateProto3CodePrimitiveValue","generateProto3CodeRepeated","generateProto3CodeOptional","generateProto3CodeEnum","count","generateProto3CodeObject","generateProto3Code","formatGraphQlCodeDocComment","generateGraphQlCodeInner","generateGraphQlCodeOneOf","generateGraphQlCodePrimitive","generateGraphQlCodePrimitiveValue","generateGraphQlCodeRepeated","generateGraphQlCodeEnum","generateGraphQlCodeObject","generateGraphQlCode","serializeInner","serializeToObject","version","current","serialize","deserializeInner","deserializeFromObject","obj","deserialize"],"mappings":"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","file":"tynder.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tynder\"] = factory();\n\telse\n\t\troot[\"tynder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         MaxEvaluationCountError } from './types';\r\nimport { globalObj }               from './consts';\r\n\r\n\r\n\r\nexport function setEvaluationCount(state: SxParserState) {\r\n    state.evalCount++;\r\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\r\n        throw new MaxEvaluationCountError();\r\n    }\r\n}\r\n\r\n\r\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\r\n    if (args.length < min) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\r\n    }\r\n    if (max && max < args.length) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\r\n    }\r\n    return args;\r\n}\r\n\r\n\r\nconst objConstructor = ({}).constructor; // NOTE: objConstructor            === Object\r\nconst funConstructor = Function;         // NOTE: ({}).toString.constructor === Function\r\n\r\nexport function checkUnsafeVarNames(name: string, varName: string) {\r\n    if (varName === '__proto__' ||\r\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\r\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (varName === 'prototype' || varName === 'constructor') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (objConstructor.hasOwnProperty(varName)) {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (varName === 'call' || varName === 'arguments' || varName === 'caller') {\r\n        // NOTE: arguments, caller are not accessible in strict mode\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    return varName;\r\n}\r\n\r\n\r\nexport function checkUnsafeVarNamesEx(name: string, target: any, varName: string) {\r\n    if (target === globalObj ||\r\n        varName === '__proto__' ||\r\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\r\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (varName === 'prototype' || varName === 'constructor') {\r\n        if (target === null || target === void 0 || typeof target === 'function') {\r\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n        }\r\n    }\r\n    if (target === null || target === void 0 || target === objConstructor) {\r\n        if (objConstructor.hasOwnProperty(varName)) {\r\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n        }\r\n    }\r\n    if (target === null || target === void 0 || target === funConstructor) {\r\n        // checking 'call', 'arguments', 'caller', ...\r\n        let con: any = funConstructor;\r\n        while (con) {\r\n            if (con.hasOwnProperty(varName)) {\r\n                throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n            }\r\n            con = con.__proto__;\r\n        }\r\n    }\r\n    if (typeof target === 'function') {\r\n        if (!target.hasOwnProperty(varName)) {\r\n            // function's prototypes' members\r\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n        }\r\n    }\r\n    return varName;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol }     from './types';\r\n\r\n\r\n\r\nexport function quote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.quote}, x];\r\n}\r\n\r\n\r\nexport function isQuoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.quote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function backquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.backquote}, x];\r\n}\r\n\r\n\r\nexport function isBackquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.backquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function wrapByUnquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.unquote}, x];\r\n}\r\n\r\n\r\nexport function isUnquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.unquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function spread(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.spread}, x];\r\n}\r\n\r\n\r\nexport function splice(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.splice}, x];\r\n}\r\n\r\n\r\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\r\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\r\n        if (name !== void 0) {\r\n            return x.symbol === name ? x : null;\r\n        } else {\r\n            return x;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport type PrimitiveValueTypes = number | bigint | string | boolean | null | undefined;                                            // TODO: Function\nexport type PrimitiveValueTypeNames = 'number' | 'integer' | 'bigint' | 'string' | 'boolean' | 'null' | 'undefined';                // TODO: Function, DateStr, DateTimeStr\nexport type OptionalPrimitiveValueTypeNames = 'number?' | 'integer?' | 'bigint?' | 'string?' | 'boolean?' | 'null?' | 'undefined?'; // TODO: Function?, DateStr?, DateTimeStr?\nexport type PlaceholderTypeNames = 'never' | 'any' | 'unknown';\nexport type OptionalPlaceholderTypeNames = 'never?' | 'any?' | 'unknown?';\n\n\n\nexport enum ErrorTypes {\n    InvalidDefinition = 1,\n    Required,                // (all)\n    TypeUnmatched,           // Never/Unknown/Primitive/Object\n    AdditionalPropUnmatched, // Additional prop\n    RepeatQtyUnmatched,      // Repeated/Spread\n    SequenceUnmatched,       // Sequence\n    ValueRangeUnmatched,     // Primitive: minValue, maxValue, greaterThanValue, lessThanValue\n    ValuePatternUnmatched,   // Primitive: pattern\n    ValueLengthUnmatched,    // Primitive: minLength, maxLength\n    ValueUnmatched,          // PrimitiveValue\n}\n\n\nexport type ErrorMessages = Partial<{\n    invalidDefinition: string,\n    required: string,\n    typeUnmatched: string,\n    additionalPropUnmatched: string,\n    repeatQtyUnmatched: string,\n    sequenceUnmatched: string,\n    valueRangeUnmatched: string,\n    valuePatternUnmatched: string,\n    valueLengthUnmatched: string,\n    valueUnmatched: string,\n}>;\n\n\nexport interface TypeAssertionBase {\n    messageId?: string;\n    message?: string;           // Only one of 'message' or 'messages' can be set.\n    messages?: ErrorMessages;   // Only one of 'message' or 'messages' can be set.\n    name?: string;              // Member name or 'typeName' below. For error reporting and codegen.\n    typeName?: string;          // Named user defined 'type' or 'interface' name. For error reporting and codegen.\n    originalTypeName?: string;  // To keep right hand side type name of `type Y = X;`.\n    docComment?: string;        // Doc comment.\n    passThruCodeBlock?: string; // Store a pass-thru code block (e.g. import statement). use it with kind===never\n    noOutput?: boolean;         // If true, skip code generation.\n}\n\n\nexport interface NeverTypeAssertion extends TypeAssertionBase {\n    kind: 'never';\n}\n\n\nexport interface AnyTypeAssertion extends TypeAssertionBase {\n    kind: 'any';\n}\n\n\nexport interface UnknownTypeAssertion extends TypeAssertionBase {\n    kind: 'unknown';\n}\n\n\nexport interface PrimitiveTypeAssertionConstraints {\n    minValue?: number | string | null; // TODO: bigint\n    maxValue?: number | string | null; // TODO: bigint\n    greaterThanValue?: number | string | null;\n    lessThanValue?: number | string | null;\n    minLength?: number | null;\n    maxLength?: number | null;\n    pattern?: RegExp | null;\n}\n\n\nexport interface PrimitiveTypeAssertion extends TypeAssertionBase, PrimitiveTypeAssertionConstraints {\n    kind: 'primitive';\n    primitiveName: PrimitiveValueTypeNames;\n}\n\n\nexport interface PrimitiveValueTypeAssertion extends TypeAssertionBase {\n    kind: 'primitive-value';\n    value: PrimitiveValueTypes;\n    primitiveName?: 'bigint'; // for deserializer hinting\n}\n\n\nexport interface RepeatedAssertionConstraints {\n    min: number | null;\n    max: number | null;\n}\n\n\nexport interface RepeatedAssertion extends TypeAssertionBase, RepeatedAssertionConstraints {\n    kind: 'repeated';\n    repeated: TypeAssertion;\n}\n\n\nexport interface SpreadAssertion extends TypeAssertionBase, RepeatedAssertionConstraints {\n    kind: 'spread';\n    spread: TypeAssertion;\n}\n\n\nexport interface SequenceAssertion extends TypeAssertionBase {\n    kind: 'sequence';\n    sequence: TypeAssertion[];\n}\n\n\nexport interface OneOfAssertion extends TypeAssertionBase {\n    kind: 'one-of';\n    oneOf: TypeAssertion[];\n}\n\n\nexport interface OptionalAssertion extends TypeAssertionBase {\n    kind: 'optional';\n    optional: TypeAssertion;\n}\n\n\nexport interface EnumAssertion extends TypeAssertionBase {\n    kind: 'enum';\n    values: Array<[\n        string,           // enum key\n        number | string,  // enum value\n        string?,          // doc comment\n    ]>;\n}\n\n\nexport type ObjectAssertionMember = [\n    string,         // name\n    TypeAssertion,  // type\n] | [\n    string,         // name\n    TypeAssertion,  // type\n    boolean,        // If true, defined by ancestor types\n] | [\n    string,         // name\n    TypeAssertion,  // type\n    boolean,        // If true, defined by ancestor types\n    string,         // doc comment\n];\n\n\n\nexport type AdditionalPropsKey = Array<'string' | 'number' | RegExp>;\n\n\nexport type AdditionalPropsMember = [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n] | [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n    boolean,             // If true, defined by ancestor types\n] | [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n    boolean,             // If true, defined by ancestor types\n    string,              // doc comment\n];\n\n\nexport interface ObjectAssertion extends TypeAssertionBase {\n    kind: 'object';\n    members: ObjectAssertionMember[];\n    additionalProps?: AdditionalPropsMember[];\n    baseTypes?: Array<ObjectAssertion | AssertionSymlink>;\n}\n\n\nexport interface AssertionSymlink extends TypeAssertionBase {\n    kind: 'symlink';\n    symlinkTargetName: string;\n}\n\n\n// TODO: Add it to resolve backref in type operator's operands\nexport interface AssertionOperator extends TypeAssertionBase {\n    kind: 'operator';\n    operator: string;\n    operands: Array<TypeAssertion | string>;\n}\n\n\nexport type TypeAssertion =\n    NeverTypeAssertion |\n    AnyTypeAssertion |\n    UnknownTypeAssertion |\n    PrimitiveTypeAssertion |\n    PrimitiveValueTypeAssertion |\n    RepeatedAssertion |\n    SpreadAssertion |\n    SequenceAssertion |\n    OneOfAssertion |\n    OptionalAssertion |\n    EnumAssertion |\n    ObjectAssertion |\n    AssertionSymlink |\n    AssertionOperator;\n\n\nexport interface SerializedSchemaInfo {\n    version: string;\n    ns: {\n        [namespaceName: string]: {\n            [typeName: string]: TypeAssertion;\n        }\n    };\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { PrimitiveTypeAssertionConstraints,\n         RepeatedAssertionConstraints,\n         ErrorMessages,\n         TypeAssertion } from './types/tynder-schema-types';\n\nexport * from './types/tynder-schema-types';\n\n\n\n// https://stackoverflow.com/questions/41980195/recursive-partialt-in-typescript\nexport type RecursivePartial<T> = {\n    [P in keyof T]?:\n      T[P] extends (infer U)[] ? RecursivePartial<U>[] :\n      T[P] extends object ? RecursivePartial<T[P]> :\n      T[P];\n};\n\n\nexport type TypeAssertionErrorMessageConstraints =\n    Partial<Omit<PrimitiveTypeAssertionConstraints &\n        RepeatedAssertionConstraints, 'pattern'> &\n        {pattern: string}>;\n\n\nexport interface TypeAssertionErrorMessage {\n    code: string;\n    message: string;\n    dataPath: string;\n    constraints: TypeAssertionErrorMessageConstraints;\n    value?: any; // Only number, bigint, string, boolean, undefined, null\n}\n\n\nexport interface ValidationContext {\n    checkAll?: boolean;\n    noAdditionalProps?: boolean;\n    errorMessages?: ErrorMessages;\n\n    // maxDepth: number;\n    // depth: number;\n    mapper?: (value: any, ty: TypeAssertion) => any;\n\n    // === returned values ===\n    errors: TypeAssertionErrorMessage[];\n\n    // === internal use ===\n    typeStack: Array<                 // For error reporting (keyword substitutions)\n        TypeAssertion |\n        [TypeAssertion,\n         number | string | undefined] // [1]: data index\n        >;\n                                      // NOTE: DO NOT reassign!\n                                      //   Push or pop items instead of reassign.\n    schema?: TypeAssertionMap;        //   To resolve 'symlink' assertion,\n                                      //   the context need to have a schema instance.\n}\n\n\nexport interface TypeAssertionSetValue {\n    ty: TypeAssertion;\n    exported: boolean;\n    resolved: boolean;\n}\n\n\nexport type TypeAssertionMap = Map<string, TypeAssertionSetValue>;\n\n\nexport interface SymbolResolverOperators {\n    [propName: string]: (...args: Array<TypeAssertion | string>) => TypeAssertion;\n}\n\nexport interface SymbolResolverContext {\n    nestLevel: number;\n    symlinkStack: string[]; // For detecting recursive type\n    operators?: SymbolResolverOperators; // TODO: Add it to resolve backref in type operator's operands\n}\n\n\nexport interface CodegenContext {\n    nestLevel: number;\n    schema?: TypeAssertionMap; // To resolve 'symlink' assertion, the context need to have a schema instance.\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedPair,\r\n         SxDottedFragment,\r\n         SxToken,\r\n         SxScope,\r\n         CapturedScopes,\r\n         SxMacroInfo }           from './types';\r\nimport { isSymbol }              from './ast';\r\nimport { setEvaluationCount,\r\n         checkUnsafeVarNamesEx } from './errors';\r\n\r\n\r\n\r\nexport function toNumber(x: any) {\r\n    switch (typeof x) {\r\n    case 'object': case 'symbol': case 'function':\r\n        return NaN;\r\n    default:\r\n        return Number(x);\r\n    }\r\n}\r\n\r\n\r\nexport function resolveUnquote(state: SxParserState, r: SxToken[]) {\r\n    for (let i = 0; i < r.length; i++) {\r\n        const symUnquote = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.unquote);\r\n        if (symUnquote) {\r\n            r = r.slice(0, i).concat([evaluate(state, (r[i] as SxToken[])[1])], r.slice(i + 1));\r\n        }\r\n        if (Array.isArray(r[i])) {\r\n            r = r.slice(0);\r\n            r[i] = resolveUnquote(state, r[i] as SxToken[]);\r\n        }\r\n    }\r\n    return resolveSplice(state, r);\r\n}\r\n\r\n\r\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\r\n    if (state.config.enableSplice) {\r\n        for (let i = r.length - 1; i >= 0; i--) {\r\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\r\n            if (symSplice) {\r\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function resolveMacro(state: SxParserState, x: SxSymbol, r: SxToken[]) {\r\n    const macroInfo = state.macroMap.get(x.symbol);\r\n    let lastErr = null;\r\n    if (macroInfo) {\r\n        let m: SxMacroInfo | undefined = macroInfo;\r\n        const r1 = r.slice(1);\r\n        while (m) {\r\n            if (m.formalArgs) {\r\n                const matchResult = matchMacroArgs(state, x.symbol, m.formalArgs, Boolean(m.lastIsSpread), r1);\r\n                if (! matchResult.error) {\r\n                    return {\r\n                        fn: m.fn(state, x.symbol, matchResult.formalArgs as SxSymbol[]),\r\n                        actualArgs: r.slice(0, 1).concat(matchResult.actualArgs as SxToken[]),\r\n                    };\r\n                }\r\n                lastErr = matchResult.error;\r\n                m = m.next;\r\n            } else {\r\n                return {\r\n                    fn: m.fn(state, x.symbol),\r\n                    actualArgs: r,\r\n                };\r\n            }\r\n        }\r\n        if (lastErr) {\r\n            throw new Error(lastErr);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\r\n    if (typeof x === 'function') {\r\n        return x;\r\n    }\r\n    const funcInfo = state.funcMap.get(x.symbol);\r\n    if (funcInfo) {\r\n        return funcInfo.fn(state, x.symbol);\r\n    } else {\r\n        const v = resolveValueSymbol(state, x);\r\n        if (typeof v === 'function') {\r\n            return v;\r\n        }\r\n        if (state.config.funcSymbolResolverFallback) {\r\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\r\n            return localScope.scope;\r\n        }\r\n        if (localScope.capturedScopes &&\r\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\r\n            return localScope.capturedScopes[x.symbol];\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    const globalScope = getGlobalScope(state);\r\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\r\n        return globalScope.scope;\r\n    }\r\n    return nullIfNotDefined ? null : getScope(state).scope;\r\n}\r\n\r\n\r\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\r\n    const scope = resolveValueSymbolScope(state, x, true);\r\n    if (scope) {\r\n        return scope[x.symbol];\r\n    }\r\n    const symInfo = state.symbolMap.get(x.symbol);\r\n    if (symInfo) {\r\n        return symInfo.fn(state, x.symbol);\r\n    } else {\r\n        if (state.config.valueSymbolResolverFallback) {\r\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\r\n    const capturedScopes: CapturedScopes = {};\r\n    for (const n of names) {\r\n        const scope = resolveValueSymbolScope(state, n, true);\r\n        if (scope === null) {\r\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\r\n        }\r\n        checkUnsafeVarNamesEx('collectCapturedVariables', capturedScopes, n.symbol);\r\n        capturedScopes[n.symbol] = scope;\r\n    }\r\n    return capturedScopes;\r\n}\r\n\r\n\r\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\r\n    const a: CapturedScopes[] = [];\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope.capturedScopes) {\r\n            a.unshift(localScope.capturedScopes);\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\r\n}\r\n\r\n\r\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\r\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\r\n}\r\n\r\n\r\nexport function uninstallScope(state: SxParserState): any {\r\n    if (state.scopes.length < 2) {\r\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\r\n    }\r\n    return state.scopes.pop();\r\n}\r\n\r\n\r\nexport function getScope(state: SxParserState) {\r\n    return state.scopes[state.scopes.length - 1];\r\n}\r\n\r\n\r\nexport function getGlobalScope(state: SxParserState) {\r\n    return state.scopes[0];\r\n}\r\n\r\n\r\nexport function matchMacroArgs(\r\n        state: SxParserState, macroName: string,\r\n        formalArgs: SxSymbol[], lastIsSpread: boolean, actualArgs: SxToken[]) {\r\n\r\n    formalArgs = formalArgs.slice(0);\r\n    actualArgs = actualArgs.slice(0);\r\n    if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n        return ({ error: `[SX] macro call (${macroName}): Actual args too short: actual ${\r\n            actualArgs.length} / formal ${formalArgs.length}.` });\r\n    }\r\n    for (let i = formalArgs.length - (lastIsSpread ? 2 : 1); i >= 0; i--) {\r\n        let nm = formalArgs[i].symbol;\r\n        if (nm.startsWith('!')) {\r\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1);\r\n            nm = formalArgs[i].symbol;\r\n\r\n            if (! isSymbol(actualArgs[i])) {\r\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\r\n            }\r\n        } else if (nm.startsWith('<') && nm.endsWith('>')) {\r\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1, -1);\r\n            nm = formalArgs[i].symbol;\r\n\r\n            if (isSymbol(actualArgs[i], nm)) {\r\n                formalArgs = formalArgs.slice(0, i).concat(formalArgs.slice(i + 1));\r\n                actualArgs = actualArgs.slice(0, i).concat(actualArgs.slice(i + 1));\r\n            } else {\r\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not expected symbol.` });\r\n            }\r\n        } else {\r\n            const tpos = nm.lastIndexOf(':');\r\n            if (0 < tpos) {\r\n                const tname = nm.slice(tpos + 1);\r\n                switch (tname) {\r\n                case 'number':\r\n                    if (typeof actualArgs[i] !== 'number') {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not number.` });\r\n                    }\r\n                    break;\r\n                case 'string':\r\n                    if (typeof actualArgs[i] !== 'string') {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not string.` });\r\n                    }\r\n                    break;\r\n                case 'function':\r\n                    if (! (Array.isArray(actualArgs[i]) && isSymbol((actualArgs[i] as any)[0]))) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not function.` });\r\n                    }\r\n                    break;\r\n                case 'list':\r\n                    if (! Array.isArray(actualArgs[i])) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not list.` });\r\n                    }\r\n                    break;\r\n                case 'symbol':\r\n                    if (! isSymbol(actualArgs[i])) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\r\n                    }\r\n                    break;\r\n                case 'any':\r\n                    break;\r\n                default:\r\n                    return ({ error: `[SX] macro call (${macroName}): Formal arg(${i}: ${nm}) is unknown type ${tname}.` });\r\n                }\r\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(0, tpos);\r\n            }\r\n        }\r\n    }\r\n    return ({ formalArgs, actualArgs });\r\n}\r\n\r\n\r\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //    formalArgs: 'sym1 ... 'symN\r\n    //        fnBody: 'expr1 ... 'exprN\r\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\r\n        const front = fnBody.slice(0, fnBody.length - 1);\r\n        const tail = fnBody[fnBody.length - 1];\r\n        if (tail && (typeof tail[0] === 'object') && tail[0].symbol === state.config.reservedNames.if) {\r\n            // S expression: ($if cond t-expr f-expr)\r\n            if (Array.isArray(tail[3]) && (typeof tail[3][0] === 'object') && tail[3][0].symbol === state.config.reservedNames.self) {\r\n                // S expression (recursive):\r\n                //     (                                 ;; fnBody\r\n                //         expr1 ... exprN-1             ;; front\r\n                //         ($if cond                     ;; tail[0] [1]\r\n                //             t-expr                    ;;     [2]\r\n                //             ($self                    ;;     [3]\r\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\r\n                //     )\r\n                //\r\n                //  -> S exp (tail call optimization):\r\n                //     (                                                                  ;; fnBody\r\n                //         ($until cond                                                   ;; tail[1]\r\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\r\n                //                 expr1 ... exprN-1                                      ;; front\r\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\r\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\r\n                //             )                                                          ;;\r\n                //         )                                                              ;;\r\n                //         expr1 ... exprN-1                                              ;; front\r\n                //         t-expr                                                         ;; tail[2]\r\n                //     )\r\n\r\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\r\n\r\n                return [\r\n                    [{symbol: state.config.reservedNames.until}, tail[1],\r\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\r\n                            ...front,\r\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\r\n                            ...(tempVarsSyms.map((x, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\r\n                        ],\r\n                    ],\r\n                    ...front,\r\n                    tail[2],\r\n                ];\r\n            }\r\n        }\r\n    }\r\n    return fnBody;\r\n}\r\n\r\n\r\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\r\n    setEvaluationCount(state);\r\n\r\n    if (x === null || x === void 0) {\r\n        return x;\r\n    }\r\n    let r: SxToken = x;\r\n\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                return r;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym, r);\r\n                if (m) {\r\n                    r = m.fn(m.actualArgs as SxToken[]);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n\r\n    if (Array.isArray(r)) {\r\n        r = r.slice(0);\r\n        if (0 < r.length) {\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                if (sym.symbol === state.config.reservedNames.quote) {\r\n                    return r.slice(1, 2)[0];\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.backquote) {\r\n                    r = r.slice(1, 2)[0];\r\n                    if (Array.isArray(r)) {\r\n                        r = resolveUnquote(state, r);\r\n                    }\r\n                    return r;\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.eval) {\r\n                    return evaluate(state, evaluate(state, r.slice(1, 2)[0]));\r\n                }\r\n            }\r\n\r\n            const sprs = [];\r\n            for (let i = 1; i < r.length; i++) {\r\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\r\n                if (symSpr) {\r\n                    sprs.push(i);\r\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\r\n                    r[i] = Array.isArray(a) ? a : [a];\r\n                } else {\r\n                    r[i] = evaluate(state, r[i]);\r\n                }\r\n            }\r\n            for (const i of sprs.reverse()) {\r\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\r\n            }\r\n\r\n            let fn: any;\r\n            if (typeof r[0] === 'function') {\r\n                fn = r[0];\r\n            } else if (sym) {\r\n                fn = resolveFunctionSymbol(state, sym);\r\n            } else {\r\n                fn = evaluate(state, r[0]);\r\n            }\r\n\r\n            if (typeof fn === 'function') {\r\n                r = (fn as any)(...(r.slice(1)));\r\n            } else {\r\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\r\n            }\r\n        }\r\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\r\n        r = (r as SxExternalValue).value;\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\r\n        r = resolveValueSymbol(state, r as SxSymbol);\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\r\n        const car = evaluate(state, (r as SxDottedPair).car);\r\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\r\n        if (Array.isArray(cdr)) {\r\n            const a = (cdr as any[]).slice(0);\r\n            a.unshift(car);\r\n            r = a;\r\n        } else {\r\n            r = { car, cdr };\r\n        }\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\r\n        r = [\r\n            evaluate(state, (r as SxDottedFragment).dotted),\r\n        ];\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\r\n        r = [];\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { NeverTypeAssertion,\n         AnyTypeAssertion,\n         UnknownTypeAssertion,\n         PrimitiveValueTypes,\n         PrimitiveValueTypeNames,\n         OptionalPrimitiveValueTypeNames,\n         PlaceholderTypeNames,\n         OptionalPlaceholderTypeNames,\n         ErrorMessages,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         ObjectAssertionMember,\n         AdditionalPropsKey,\n         AdditionalPropsMember,\n         ObjectAssertion,\n         AssertionSymlink,\n         AssertionOperator,\n         TypeAssertion }    from './types';\nimport { dummyTargetObject,\n         isUnsafeVarNames } from './lib/util';\n\n\n\n// emulate Pick<T> // ex. Pick<Foo, 'a' | 'b'>\nexport function picked(ty: TypeAssertion, ...names: string[]): ObjectAssertion | AssertionOperator {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const name of names) {\n                const member = ty.members.find(x => x[0] === name);\n                if (member) {\n                    if (member[2]) {\n                        const m2: ObjectAssertionMember = [...member] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.push(m2);\n                    } else {\n                        members.push(member);\n                    }\n                }\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'picked',\n                operands: [ty, ...names],\n            });\n        }\n    default:\n        return ({\n            kind: 'object',\n            members: [],\n        });\n    }\n}\n\n\n// emulate Omit<T> // ex. Omit<Foo, 'a' | 'b'>\nexport function omit(ty: TypeAssertion, ...names: string[]): ObjectAssertion | AssertionOperator {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const member of ty.members) {\n                if (! names.find(name => member[0] === name)) {\n                    if (member[2]) {\n                        const m2: ObjectAssertionMember = [...member] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.push(m2);\n                    } else {\n                        members.push(member);\n                    }\n                }\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'omit',\n                operands: [ty, ...names],\n            });\n        }\n    default:\n        return ({\n            kind: 'object',\n            members: [],\n        });\n    }\n}\n\n\n// emulate Partial<T>\nexport function partial(ty: TypeAssertion): TypeAssertion {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const member of ty.members) {\n                let m: ObjectAssertionMember = member[1].kind === 'optional' ?\n                    member :\n                    [member[0], optional(member[1]), ...member.slice(2)] as ObjectAssertionMember;\n                if (m[2]) {\n                    m = [...m] as any;\n                    if (3 < m.length) {\n                        m[2] = false;\n                    } else {\n                        m.length = 2;\n                    }\n                }\n                m[1].name = m[0];\n                const optTy = {...(m[1] as OptionalAssertion).optional};\n                (m[1] as OptionalAssertion).optional = optTy;\n                if (optTy.name && optTy.name !== optTy.typeName) {\n                    delete optTy.name;\n                }\n                if (!optTy.name && optTy.typeName) {\n                    optTy.name = optTy.typeName;\n                }\n                members.push(m);\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'partial',\n                operands: [ty],\n            });\n        }\n    default:\n        return ty;\n    }\n}\n\n\n// intersection (a & b)\nexport function intersect(...types: TypeAssertion[]): TypeAssertion {\n    if (types.length === 0) {\n        throw new Error(`Empty intersection type is not allowed.`);\n    }\n    if (0 < types.filter(x => x && typeof x === 'object' &&\n            (x.kind === 'symlink' || x.kind === 'operator')).length) {\n        return ({\n            kind: 'operator',\n            operator: 'intersect',\n            operands: types.slice(),\n        });\n    }\n    let lastTy: TypeAssertion | null = null;\n    const members = new Map<string, ObjectAssertionMember>();\n\n    for (const ty of types) {\n        if (ty && typeof ty === 'object') {\n            if (lastTy && lastTy.kind !== ty.kind) {\n                return ({\n                    kind: 'never',\n                });\n            }\n            lastTy = ty;\n            if (ty.kind === 'object') {\n                for (const m of ty.members) {\n                    if (m[2]) {\n                        const m2: ObjectAssertionMember = [...m] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.set(m[0], m2); // Overwrite if exists\n                    } else {\n                        members.set(m[0], m);  // Overwrite if exists\n                    }\n                }\n            }\n        } else {\n            return ({\n                kind: 'never',\n            });\n        }\n    }\n    if (lastTy && lastTy.kind !== 'object') {\n        return lastTy;\n    } else {\n        return ({\n            kind: 'object',\n            members: Array.from(members.values()),\n        });\n    }\n}\n\n\n// union (a | b)\nexport function oneOf(...types: Array<PrimitiveValueTypes | TypeAssertion>): TypeAssertion {\n    if (types.length === 0) {\n        throw new Error(`Empty union type is not allowed.`);\n    }\n    if (types.length === 1) {\n        const ty = types[0];\n        if (ty && typeof ty === 'object') {\n            return ty;\n        } else {\n            return primitiveValue(ty);\n        }\n    }\n    const ret: OneOfAssertion = {\n        kind: 'one-of',\n        oneOf: [],\n    };\n    for (const ty of types) {\n        // TODO: remove same type\n        if (ty && typeof ty === 'object') {\n            if (ty.kind === 'one-of') {\n                ret.oneOf = ret.oneOf.concat(ty.oneOf);\n            } else {\n                ret.oneOf.push(ty);\n            }\n        } else {\n            ret.oneOf.push(primitiveValue(ty));\n        }\n    }\n    return ret;\n}\n\n\n// subtraction (a - b)\nexport function subtract(...types: TypeAssertion[]): ObjectAssertion | AssertionOperator {\n    if (types.length === 0) {\n        throw new Error(`Empty subtraction type is not allowed.`);\n    }\n    if (0 < types.filter(x => x && typeof x === 'object' &&\n            (x.kind === 'symlink' || x.kind === 'operator')).length) {\n        return ({\n            kind: 'operator',\n            operator: 'subtract',\n            operands: types.slice(),\n        });\n    }\n    let ret = types[0];\n    if (!ret || typeof ret !== 'object' || ret.kind !== 'object') {\n        throw new Error(`First parameter of subtraction type should be 'object'.`);\n    }\n    for (const ty of types.slice(1)) {\n        if (ty && typeof ty === 'object' && ty.kind === 'object') {\n            ret = omit(ret, ...ty.members.map(m => m[0]));\n        }\n    }\n    return ret;\n}\n\n\nexport function primitive(typeName: PrimitiveValueTypeNames |\n                                    OptionalPrimitiveValueTypeNames |\n                                    PlaceholderTypeNames |\n                                    OptionalPlaceholderTypeNames):\n        PrimitiveTypeAssertion | OptionalAssertion | NeverTypeAssertion | AnyTypeAssertion | UnknownTypeAssertion {\n    switch (typeName) {\n    case 'never':\n        return ({\n            kind: 'never',\n        });\n    case 'any':\n        return ({\n            kind: 'any',\n        });\n    case 'unknown':\n        return ({\n            kind: 'unknown',\n        });\n    case 'number':\n        // FALL_THRU\n    case 'integer':\n        // FALL_THRU\n    case 'bigint':\n        // FALL_THRU\n    case 'string':\n        // FALL_THRU\n    case 'boolean':\n        // FALL_THRU\n    case 'null':\n        // FALL_THRU\n    case 'undefined':\n        return ({\n            kind: 'primitive',\n            primitiveName: typeName,\n        });\n    case 'never?':\n        return (optional({\n            kind: 'never',\n        }));\n    case 'any?':\n        return (optional({\n            kind: 'any',\n        }));\n    case 'unknown?':\n        return (optional({\n            kind: 'unknown',\n        }));\n    case 'number?':\n        // FALL_THRU\n    case 'integer?':\n        // FALL_THRU\n    case 'bigint?':\n        // FALL_THRU\n    case 'string?':\n        // FALL_THRU\n    case 'boolean?':\n        // FALL_THRU\n    case 'null?':\n        // FALL_THRU\n    case 'undefined?':\n        return (optional({\n            kind: 'primitive',\n            primitiveName: typeName.substring(0, typeName.length - 1) as any,\n        }));\n    default:\n        throw new Error(`Unknown primitive type assertion: ${typeName}`);\n    }\n    // TODO: Function, DateStr, DateTimeStr, Funtion?, DateStr?, DateTimeStr?\n}\n\n\nexport function regexpPatternStringType(pattern: RegExp): PrimitiveTypeAssertion {\n    return ({\n        kind: 'primitive',\n        primitiveName: 'string',\n        pattern,\n    });\n}\n\n\nexport function primitiveValue(value: PrimitiveValueTypes): PrimitiveValueTypeAssertion {\n    if (value === null || value === void 0) {\n        return ({\n            kind: 'primitive-value',\n            value,\n        });\n    } else switch (typeof value) {\n    case 'number':\n        // FALL_THRU\n    case 'bigint':\n        // FALL_THRU\n    case 'string':\n        // FALL_THRU\n    case 'boolean':\n        return ({\n            kind: 'primitive-value',\n            value,\n        });\n    default:\n        throw new Error(`Unknown primitive value assertion: ${value}`);\n    }\n}\n\n\nexport function optional(ty: PrimitiveValueTypes | TypeAssertion): OptionalAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        if (ty.kind === 'optional') {\n            return ty;\n        } else {\n            return ({\n                kind: 'optional',\n                optional: ty,\n                ...(ty.typeName ? {typeName: ty.typeName} : {}),\n            });\n        }\n    } else {\n        return ({\n            kind: 'optional',\n            optional: primitiveValue(ty),\n        });\n    }\n}\n\n\nexport function repeated(\n        ty: PrimitiveValueTypeNames | TypeAssertion, option?:\n        Partial<Pick<RepeatedAssertion, 'max'> & Pick<RepeatedAssertion, 'min'>>): RepeatedAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        return ({\n            kind: 'repeated',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            repeated: ty,\n        });\n    } else {\n        return ({\n            kind: 'repeated',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            repeated: primitive(ty),\n        });\n    }\n}\n\n\nexport function sequenceOf(...seq: Array<PrimitiveValueTypes | TypeAssertion>): SequenceAssertion {\n    return ({\n        kind: 'sequence',\n        sequence: seq.map(ty => ty && typeof ty === 'object' && ty.kind ? ty : primitiveValue(ty)),\n    });\n}\n\n\nexport function spread(\n        ty: PrimitiveValueTypes | TypeAssertion,\n        option?: Partial<Pick<SpreadAssertion, 'max'> & Pick<SpreadAssertion, 'min'>>): SpreadAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        return ({\n            kind: 'spread',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            spread: ty,\n        });\n    } else {\n        return ({\n            kind: 'spread',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            spread: primitiveValue(ty),\n        });\n    }\n}\n\n\nexport function enumType(...values: Array<[string, number | string | null, string?]>): EnumAssertion {\n    const ar = values.slice();\n    let value = 0;\n    for (let i = 0; i < ar.length; i++) {\n        if (isUnsafeVarNames(dummyTargetObject, ar[i][0])) {\n            throw new Error(`Unsafe symbol name is appeared in enum assertion: ${ar[i][0]}`);\n        }\n\n        if (ar[i][1] === null || ar[i][1] === void 0) {\n            ar[i][1] = value++;\n        } else if (typeof ar[i][1] === 'number') {\n            value = (ar[i][1] as number) + 1;\n        }\n        if (! ar[i][2]) {\n            ar[i].length = 2;\n        }\n    }\n    return ({\n        kind: 'enum',\n        values: ar as Array<[string, number | string, string?]>,\n    });\n}\n\n\nexport function objectType(\n        ...members: Array<[\n            string | AdditionalPropsKey,\n            PrimitiveValueTypes | TypeAssertion,\n            string?\n        ]>): ObjectAssertion {\n    const revMembers = members.slice().reverse();\n    for (const x of members) {\n        if (typeof x[0] === 'string') {\n            if (isUnsafeVarNames(dummyTargetObject, x[0])) {\n                throw new Error(`Unsafe symbol name is appeared in object assertion: ${x[0]}`);\n            }\n            if (members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n                throw new Error(`Duplicated member is found: ${x[0]}`);\n            }\n        }\n    }\n\n    const membersProps: ObjectAssertionMember[] = (members\n        .filter(\n            x => typeof x[0] === 'string') as\n                Array<[string, PrimitiveValueTypes | TypeAssertion, string?]>)\n        .map(\n            x => x[1] && typeof x[1] === 'object' && x[1].kind ?\n                [x[0], withName(x[1], x[0]), x[2]] :\n                [x[0], withName(primitiveValue(x[1]), x[0]), x[2]])\n        .map(\n            x => (x[2] ?\n                [x[0], x[1], false, ...x.slice(2)] :\n                [x[0], x[1]]) as ObjectAssertionMember);\n\n    const additionalProps: AdditionalPropsMember[] = (members\n        .filter(x => typeof x[0] !== 'string') as Array<[\n            AdditionalPropsKey,\n            PrimitiveValueTypes | TypeAssertion,\n            string?\n        ]>)\n        .map(x => x[1] && typeof x[1] === 'object' && x[1].kind ?\n            x :\n            [x[0], primitiveValue(x[1]), x[2]])\n        .map(\n            x => (x[2] ?\n                [x[0], x[1], false, ...x.slice(2)] :\n                [x[0], x[1]]) as AdditionalPropsMember);\n\n    return ({\n        ...{\n            kind: 'object',\n            members: membersProps,\n        },\n        ...(0 < additionalProps.length ? {\n            additionalProps,\n        } : {}),\n    });\n}\n\n\nfunction checkRecursiveExtends(ty: ObjectAssertion, base: ObjectAssertion | AssertionSymlink): boolean {\n    if (ty === base) {\n        return false;\n    }\n    if (ty.typeName &&\n        (ty.typeName === base.typeName ||\n         (base.kind === 'symlink' && ty.typeName === base.symlinkTargetName))) {\n        return false;\n    }\n    if (base.kind === 'object' && base.baseTypes) {\n        for (const z of base.baseTypes) {\n            if (! checkRecursiveExtends(ty, z)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\nexport function derived(ty: ObjectAssertion, ...exts: TypeAssertion[]): ObjectAssertion {\n    const ret: ObjectAssertion = {\n        kind: 'object',\n        members: [],\n        baseTypes: [],\n    };\n\n    for (const ext of exts) {\n        switch (ext.kind) {\n        case 'object':\n            if (! checkRecursiveExtends(ty, ext)) {\n                throw new Error(`Recursive extend is found: ${ty.name || '(unnamed)'}`);\n            }\n            for (const m of ext.members) {\n                if (! ret.members.find(x => x[0] === m[0])) {\n                    ret.members.push([m[0], m[1], true, ...m.slice(3)] as ObjectAssertionMember);\n                }\n                // TODO: Check for different types with the same name.\n            }\n        // FALL_THRU\n        case 'symlink':\n            (ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>).push(ext);\n            break;\n        case 'operator':\n            {\n                throw new Error(`Unresolved type operator is found: ${ext.operator}`);\n            }\n        }\n        // NOTE: 'symlink' base types will resolved by calling `resolveSymbols()`.\n        //       `resolveSymbols()` will call `derived()` after resolve symlink exts.\n    }\n    ret.members = ty.members.concat(ret.members);\n    if (ty.baseTypes) {\n        ret.baseTypes = ty.baseTypes\n            .filter(x => x.kind !== 'symlink')\n            .concat(ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>);\n    }\n    if ((ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>).length === 0) {\n        delete ret.baseTypes;\n    }\n\n    const revMembers = ret.members.slice().reverse();\n    for (const x of ret.members) {\n        if (ret.members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n            throw new Error(`Duplicated member is found: ${x[0]} in ${ty.name || '(unnamed)'}`);\n        }\n    }\n\n    let additionalProps: AdditionalPropsMember[] = [];\n    if (ret.baseTypes) {\n        for (const base of ret.baseTypes) {\n            if (base.kind === 'object') {\n                if (base.additionalProps && 0 < base.additionalProps.length) {\n                    additionalProps = additionalProps.concat(\n                        base.additionalProps.map(x =>\n                            [x[0], x[1], true, ...x.slice(3)] as AdditionalPropsMember));\n                }\n            }\n            // NOTE: 'symlink' base types will resolved by calling `resolveSymbols()`.\n            //       `resolveSymbols()` will call `derived()` after resolve symlink exts.\n        }\n    }\n    if (ty.additionalProps && 0 < ty.additionalProps.length) {\n        additionalProps = additionalProps.concat(ty.additionalProps); // TODO: concat order\n    }\n    if (0 < additionalProps.length) {\n        ret.additionalProps = additionalProps;\n    }\n\n    return ret;\n}\n\n\nexport function symlinkType(name: string): AssertionSymlink {\n    return ({\n        kind: 'symlink',\n        symlinkTargetName: name,\n    });\n}\n\n\nexport function withName(ty: TypeAssertion, name: string) {\n    if (! name) {\n        return ty;\n    }\n    return ({...ty, name});\n}\n\n\nexport function withTypeName(ty: TypeAssertion, typeName: string) {\n    if (! typeName) {\n        return ty;\n    }\n    return ({...ty, typeName});\n}\n\n\nexport function withOriginalTypeName(ty: TypeAssertion, originalTypeName: string) {\n    if (! originalTypeName) {\n        return ty;\n    }\n    return ({...ty, originalTypeName});\n}\n\n\nexport function withDocComment(ty: TypeAssertion, docComment: string) {\n    if (! docComment) {\n        return ty;\n    }\n    return ({...ty, docComment});\n}\n\n\nexport function withRange(minValue: number | string, maxValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minValue !== 'number' && typeof minValue !== 'string') {\n            throw new Error(`Decorator '@range' parameter 'minValue' should be number or string.`);\n        }\n        if (typeof maxValue !== 'number' && typeof maxValue !== 'string') {\n            throw new Error(`Decorator '@range' parameter 'maxValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@range' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minValue, maxValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@range' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minValue, maxValue});\n        }\n    };\n}\n\n\nexport function withMinValue(minValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minValue !== 'number' && typeof minValue !== 'string') {\n            throw new Error(`Decorator '@minValue' parameter 'minValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@minValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@minValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minValue});\n        }\n    };\n}\n\n\nexport function withMaxValue(maxValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof maxValue !== 'number' && typeof maxValue !== 'string') {\n            throw new Error(`Decorator '@maxValue' parameter 'maxValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, maxValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, maxValue});\n        }\n    };\n}\n\n\nexport function withGreaterThan(greaterThanValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof greaterThanValue !== 'number' && typeof greaterThanValue !== 'string') {\n            throw new Error(`Decorator '@greaterThan' parameter 'greaterThan' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@greaterThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, greaterThanValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@greaterThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, greaterThanValue});\n        }\n    };\n}\n\n\nexport function withLessThan(lessThanValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof lessThanValue !== 'number' && typeof lessThanValue !== 'string') {\n            throw new Error(`Decorator '@lessThan' parameter 'lessThan' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@lessThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, lessThanValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@lessThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, lessThanValue});\n        }\n    };\n}\n\n\nexport function withMinLength(minLength: number) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minLength !== 'number') {\n            throw new Error(`Decorator '@minLength' parameter 'minLength' should be number.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@minLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minLength}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@minLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minLength});\n        }\n    };\n}\n\n\nexport function withMaxLength(maxLength: number) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof maxLength !== 'number') {\n            throw new Error(`Decorator '@maxLength' parameter 'maxLength' should be number.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, maxLength}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, maxLength});\n        }\n    };\n}\n\n\nexport function withMatch(pattern: RegExp) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof pattern !== 'object') {\n            throw new Error(`Decorator '@match' parameter 'pattern' should be RegExp.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@match' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, pattern}});\n        } else {\n            if (!ty || ty.kind !== 'primitive' || ty.primitiveName !== 'string') {\n                throw new Error(`Decorator '@match' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, pattern});\n        }\n    };\n}\n\n\nexport function withMsg<T extends TypeAssertion>(messages: string | ErrorMessages): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            if (typeof messages === 'string') {\n                const ret = ({\n                    ...ty,\n                    message: messages,\n                    optional: {...(ty as OptionalAssertion).optional, message: messages},\n                });\n                delete ret.messages;\n                delete ret.optional.messages;\n                return ret;\n            } else {\n                const ret = ({\n                    ...ty,\n                    messages,\n                    optional: {...(ty as OptionalAssertion).optional, messages},\n                });\n                delete ret.message;\n                delete ret.optional.message;\n                return ret;\n            }\n        } else {\n            if (typeof messages === 'string') {\n                const ret = ({...ty, message: messages});\n                delete ret.messages;\n                return ret;\n            } else {\n                const ret = ({...ty, messages});\n                delete ret.message;\n                return ret;\n            }\n        }\n    };\n}\n\n\nexport function withMsgId<T extends TypeAssertion>(messageId: string): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            return ({\n                ...ty,\n                messageId,\n                optional: {...(ty as OptionalAssertion).optional, messageId},\n            });\n        } else {\n            return ({...ty, messageId});\n        }\n    };\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken }             from '../types';\r\nimport { isSymbol }            from '../ast';\r\nimport { resolveSplice,\r\n         resolveMacro,\r\n         resolveValueSymbol,\r\n         getScope }            from '../evaluate';\r\nimport { setEvaluationCount,\r\n         checkUnsafeVarNamesEx,\r\n         checkUnsafeVarNames } from '../errors';\r\n\r\n\r\n\r\nexport function applyMacros(state: SxParserState, tok: SxToken) {\r\n    let r: SxToken = tok;\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                break;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym, r);\r\n                if (m) {\r\n                    r = m.fn(m.actualArgs as SxToken[]);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function stripQuote(state: SxParserState, tok: SxToken) {\r\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\r\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\r\n    }\r\n    return (tok as any)[1];\r\n}\r\n\r\n\r\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\r\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\r\n        return (tok as any)[1];\r\n    } else {\r\n        return tok;\r\n    }\r\n}\r\n\r\n\r\nexport function getScope_stateApplied(state: SxParserState) {\r\n    return (function() { return getScope(state); });\r\n}\r\n\r\n\r\nexport function resolveValueSymbol_dynamic(state: SxParserState, varName: string) {\r\n    checkUnsafeVarNames('(compiler)resolveValueSymbol_dynamic', varName);\r\n    return (function(){ return resolveValueSymbol(state, {symbol: varName}); });\r\n}\r\n\r\nexport function checkUnsafeVarNames_dynamic(name: string) {\r\n    return (function(varName: string){ return checkUnsafeVarNames(name, varName); });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport function escapeString(s: string) {\n    return (s\n        .replace(/\\x08/g, '\\\\b')\n        .replace(/\\f/g, '\\\\f')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\v/g, '\\\\v')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\'/g, '\\\\\\'')\n        .replace(/\\\"/g, '\\\\\\\"')\n        .replace(/\\`/g, '\\\\\\`')\n    );\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\n// tslint:disable-next-line:function-constructor\nconst globalObj = Function('return this')();\nconst objConstructor = ({}).constructor; // NOTE: objConstructor            === Object\nconst funConstructor = Function;         // NOTE: ({}).toString.constructor === Function\n\n\nexport const dummyTargetObject = {};\n\n\nexport function isUnsafeVarNames(target: any, varName: string) {\n    if (target === globalObj ||\n        varName === '__proto__' ||\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\n        return true;\n    }\n    if (varName === 'prototype' || varName === 'constructor') {\n        if (target === null || target === void 0 || typeof target === 'function') {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === objConstructor) {\n        if (objConstructor.hasOwnProperty(varName)) {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === funConstructor) {\n        // checking 'call', 'arguments', 'caller', ...\n        let con: any = funConstructor;\n        while (con) {\n            if (con.hasOwnProperty(varName)) {\n                return true;\n            }\n            con = con.__proto__;\n        }\n    }\n    if (typeof target === 'function') {\n        if (!target.hasOwnProperty(varName)) {\n            // function's prototypes' members\n            return true;\n        }\n    }\n    return false;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         ValidationContext } from '../types';\n\n\n\nexport class ValidationError extends Error {\n    public ty?: TypeAssertion;\n    public ctx?: ValidationContext;\n    public constructor(message: string, ty?: TypeAssertion, ctx?: ValidationContext) {\n        super(message);\n        this.ty = ty;\n        this.ctx = ctx;\n    }\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         TypeAssertionMap,\n         TypeAssertionSetValue,\n         AssertionSymlink,\n         SymbolResolverOperators,\n         SymbolResolverContext } from '../types';\nimport * as operators            from '../operators';\n\n\n\nfunction mergeTypeAndSymlink(ty: TypeAssertion, link: AssertionSymlink): TypeAssertion {\n    const link2 = {...link};\n    delete link2.kind;\n    delete link2.symlinkTargetName;\n    return ({...ty, ...link2} as any as TypeAssertion);\n}\n\n\nfunction updateSchema(original: TypeAssertion, schema: TypeAssertionMap, ty: TypeAssertion, typeName: string | undefined) {\n    if (typeName && schema.has(typeName)) {\n        const z: TypeAssertionSetValue = schema.get(typeName) as TypeAssertionSetValue;\n        if (z.ty === original) {\n            schema.set(typeName, {...z, ty, resolved: true});\n        }\n    }\n    return ty;\n}\n\n\nexport function resolveSymbols(schema: TypeAssertionMap, ty: TypeAssertion, ctx: SymbolResolverContext): TypeAssertion {\n    const ctx2 = {...ctx, nestLevel: ctx.nestLevel + 1};\n    switch (ty.kind) {\n    case 'symlink':\n        {\n            const x = schema.get(ty.symlinkTargetName);\n            if (! x) {\n                throw new Error(`Undefined symbol '${ty.symlinkTargetName}' is referred.`);\n            }\n            if (0 <= ctx.symlinkStack.findIndex(s => s === ty.symlinkTargetName)) {\n                return ty;\n            }\n            return (\n                resolveSymbols(\n                    schema,\n                    mergeTypeAndSymlink(x.ty, ty),\n                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.symlinkTargetName]},\n                )\n            );\n        }\n    case 'repeated':\n        return updateSchema(ty, schema, {\n            ...ty,\n            repeated: resolveSymbols(schema, ty.repeated, ctx2),\n        }, ty.typeName);\n    case 'spread':\n        return updateSchema(ty, schema, {\n            ...ty,\n            spread: resolveSymbols(schema, ty.spread, ctx2),\n        }, ty.typeName);\n    case 'sequence':\n        return updateSchema(ty, schema, {\n            ...ty,\n            sequence: ty.sequence.map(x => resolveSymbols(schema, x, ctx2)),\n        }, ty.typeName);\n    case 'one-of':\n        return updateSchema(ty, schema, {\n            ...ty,\n            oneOf: ty.oneOf.map(x => resolveSymbols(schema, x, ctx2)),\n        }, ty.typeName);\n    case 'optional':\n        return updateSchema(ty, schema, {\n            ...ty,\n            optional: resolveSymbols(schema, ty.optional, ctx2),\n        }, ty.typeName);\n    case 'object':\n        {\n            if (0 < ctx.nestLevel && ty.typeName && 0 <= ctx.symlinkStack.findIndex(s => s === ty.typeName)) {\n                if (schema.has(ty.typeName)) {\n                    const z = schema.get(ty.typeName) as TypeAssertionSetValue;\n                    if (z.resolved) {\n                        return z.ty;\n                    }\n                }\n            }\n\n            const baseSymlinks = ty.baseTypes?.filter(x => x.kind === 'symlink') as AssertionSymlink[];\n            if (baseSymlinks && baseSymlinks.length > 0) {\n                const exts = baseSymlinks\n                    .map(x => resolveSymbols(schema, x, ctx2))\n                    .filter(x => x.kind === 'object');\n                // TODO: if x.kind !== 'object' items exist -> error?\n                const d2 = resolveSymbols(\n                    schema,\n                    operators.derived({\n                        ...ty,\n                        ...(ty.baseTypes ? {\n                            baseTypes: ty.baseTypes.filter(x => x.kind !== 'symlink'),\n                        } : {}),\n                    }, ...exts),\n                    ty.typeName ?\n                        {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2,\n                );\n                return updateSchema(ty, schema, {\n                    ...ty,\n                    ...d2,\n                }, ty.typeName);\n            } else {\n                return updateSchema(ty, schema, {\n                    ...{\n                        ...ty,\n                        members: ty.members\n                            .map(x => [\n                                x[0],\n                                resolveSymbols(schema, x[1], ty.typeName ?\n                                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2),\n                                ...x.slice(2),\n                            ] as any),\n                    },\n                    ...(ty.additionalProps && 0 < ty.additionalProps.length ? {\n                        additionalProps: ty.additionalProps\n                            .map(x => [\n                                x[0],\n                                resolveSymbols(schema, x[1], ty.typeName ?\n                                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2),\n                                ...x.slice(2),\n                            ] as any),\n                    } : {}),\n                }, ty.typeName);\n            }\n        }\n    case 'operator':\n        if (ctx2.operators) {\n            const ctx3 = ty.typeName ?\n                {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2;\n            const operands = ty.operands.map(x => {\n                if (typeof x === 'object' && x.kind) {\n                    return resolveSymbols(schema, x, ctx3);\n                }\n                return x;\n            });\n            if (0 < operands.filter(x => x && typeof x === 'object' &&\n                    (x.kind === 'symlink' || x.kind === 'operator')).length) {\n                throw new Error(`Unresolved type operator is found: ${ty.operator}`);\n            }\n            if (! ctx2.operators[ty.operator]) {\n                throw new Error(`Undefined type operator is found: ${ty.operator}`);\n            }\n            const ty2 = {...ty};\n            delete ty2.operator;\n            delete ty2.operands;\n            return updateSchema(\n                ty, schema,\n                {\n                    ...ty2,\n                    ...resolveSymbols(schema, ctx2.operators[ty.operator](...operands), ctx3),\n                },\n                ty.typeName,\n            );\n        } else {\n            return ty;\n        }\n    default:\n        return ty;\n    }\n}\n\n\nconst resolverOps: SymbolResolverOperators = {\n    picked: operators.picked,\n    omit: operators.omit,\n    partial: operators.partial,\n    intersect: operators.intersect,\n    subtract: operators.subtract,\n};\n\n\nexport function resolveSchema(schema: TypeAssertionMap): TypeAssertionMap {\n    for (const ent of schema.entries()) {\n        const ty = resolveSymbols(schema, ent[1].ty, {nestLevel: 0, symlinkStack: [ent[0]], operators: resolverOps});\n        ent[1].ty = ty;\n    }\n\n    return schema;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ErrorTypes,\n         ErrorMessages,\n         TypeAssertionErrorMessageConstraints,\n         TypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         OptionalAssertion,\n         ObjectAssertion,\n         ValidationContext } from '../types';\nimport { escapeString }      from './escape';\n\n\nexport const errorTypeNames = [\n    '',\n    'InvalidDefinition',\n    'Required',\n    'TypeUnmatched',\n    'AdditionalPropUnmatched',\n    'RepeatQtyUnmatched',\n    'SequenceUnmatched',\n    'ValueRangeUnmatched',\n    'ValuePatternUnmatched',\n    'ValueLengthUnmatched',\n    'ValueUnmatched',\n];\n\n\nexport const defaultMessages: ErrorMessages = {\n    invalidDefinition:       '\"%{name}\" of \"%{parentType}\" type definition is invalid.',\n    required:                '\"%{name}\" of \"%{parentType}\" is required.',\n    typeUnmatched:           '\"%{name}\" of \"%{parentType}\" should be type \"%{expectedType}\".',\n    additionalPropUnmatched: '\"%{addtionalProps}\" of \"%{parentType}\" are not matched to additional property patterns.',\n    repeatQtyUnmatched:      '\"%{name}\" of \"%{parentType}\" should repeat %{repeatQty} times.',\n    sequenceUnmatched:       '\"%{name}\" of \"%{parentType}\" sequence is not matched',\n    valueRangeUnmatched:     '\"%{name}\" of \"%{parentType}\" value should be in the range %{minValue} to %{maxValue}.',\n    valuePatternUnmatched:   '\"%{name}\" of \"%{parentType}\" value should be matched to pattern \"%{pattern}\"',\n    valueLengthUnmatched:    '\"%{name}\" of \"%{parentType}\" length should be in the range %{minLength} to %{maxLength}.',\n    valueUnmatched:          '\"%{name}\" of \"%{parentType}\" value should be \"%{expectedValue}\".',\n};\n\n\ntype TopRepeatable = RepeatedAssertion | SpreadAssertion | OptionalAssertion | null;\n\n\ninterface ReportErrorArguments {\n    ctx: ValidationContext;\n    substitutions?: [[string, string]]; // addtional or overwritten substitution values\n}\n\n\nfunction getErrorMessage(errType: ErrorTypes, ...messages: ErrorMessages[]) {\n    for (const m of messages) {\n        switch (errType) {\n        case ErrorTypes.InvalidDefinition:\n            if (m.invalidDefinition) {\n                return m.invalidDefinition;\n            }\n            break;\n        case ErrorTypes.Required:\n            if (m.required) {\n                return m.required;\n            }\n            break;\n        case ErrorTypes.TypeUnmatched:\n            if (m.typeUnmatched) {\n                return m.typeUnmatched;\n            }\n            break;\n        case ErrorTypes.AdditionalPropUnmatched:\n            if (m.additionalPropUnmatched) {\n                return m.additionalPropUnmatched;\n            }\n            break;\n        case ErrorTypes.RepeatQtyUnmatched:\n            if (m.repeatQtyUnmatched) {\n                return m.repeatQtyUnmatched;\n            }\n            break;\n        case ErrorTypes.SequenceUnmatched:\n            if (m.sequenceUnmatched) {\n                return m.sequenceUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueRangeUnmatched:\n            if (m.valueRangeUnmatched) {\n                return m.valueRangeUnmatched;\n            }\n            break;\n        case ErrorTypes.ValuePatternUnmatched:\n            if (m.valuePatternUnmatched) {\n                return m.valuePatternUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueLengthUnmatched:\n            if (m.valueLengthUnmatched) {\n                return m.valueLengthUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueUnmatched:\n            if (m.valueUnmatched) {\n                return m.valueUnmatched;\n            }\n            break;\n        }\n    }\n    return '';\n}\n\n\nfunction nvl(v: any, alt: any) {\n    return (\n        v !== null && v !== void 0 ? v : alt\n    );\n}\n\n\nfunction findTopNamedAssertion(ctx: ValidationContext): TypeAssertion | null {\n    const ret = ctx.typeStack\n        .slice()\n        .reverse()\n        .map(x => Array.isArray(x) ? x[0] : x)\n        .find(x => x.name && x.name !== x.typeName) || null;\n    return ret;\n}\n\n\nfunction findTopObjectAssertion(ctx: ValidationContext): ObjectAssertion | null {\n    const ret = ctx.typeStack\n        .slice()\n        .reverse()\n        .map(x => Array.isArray(x) ? x[0] : x)\n        .find(x => x.kind === 'object') as ObjectAssertion || null;\n    return ret;\n}\n\n\nfunction findTopRepeatableAssertion(ctx: ValidationContext): TopRepeatable {\n    const ret = ctx.typeStack\n        .slice()\n        .reverse()\n        .map(x => Array.isArray(x) ? x[0] : x)\n        .find(x => x.kind === 'repeated' || x.kind === 'spread' || x.kind === 'optional'\n                ) as RepeatedAssertion | SpreadAssertion | OptionalAssertion || null;\n    return ret;\n}\n\n\nfunction getExpectedType(ty: TypeAssertion): string {\n    switch (ty.kind) {\n    case 'repeated':\n        return `(repeated ${getExpectedType(ty.repeated)})`;\n    case 'spread':\n        return getExpectedType(ty.spread);\n    case 'sequence':\n        return '(sequence)';\n    case 'primitive':\n        return ty.primitiveName;\n    case 'primitive-value':\n        return `(value ${\n            typeof ty.value === 'string' ?\n                `'${String(ty.value)}'` :\n                String(ty.value)})`;\n    case 'optional':\n        return getExpectedType(ty.optional);\n    case 'one-of':\n        return `(one of ${ty.oneOf.map(x => getExpectedType(x)).join(', ')}`;\n    case 'never': case 'any': case 'unknown':\n        return ty.kind;\n    case 'symlink':\n        return ty.symlinkTargetName;\n    default:\n        return ty.typeName ? ty.typeName : '?';\n    }\n}\n\n\nexport function formatErrorMessage(\n        msg: string, data: any, ty: TypeAssertion,\n        args: ReportErrorArguments,\n        values: {dataPath: string, topRepeatable: TopRepeatable, parentType: string}) {\n\n    let ret = msg;\n    // TODO: complex type object members' custom error messages are not displayed?\n    // TODO: escapeString() is needed?\n\n    const tr = values.topRepeatable;\n\n    const dict = new Map<string, string>([\n        ['expectedType',\n            escapeString(getExpectedType(ty))],\n        ['type',\n            escapeString(typeof data)],\n        ['expectedValue',\n            escapeString(\n                ty.kind === 'primitive-value' ?\n                    String(ty.value) :\n                ty.kind === 'enum' ?\n                    ty.typeName ?\n                        `enum member of ${ty.typeName}` :\n                        '?' :\n                '?')],\n        ['value',\n            escapeString(String(data))],\n        ['repeatQty',\n            escapeString(\n                tr ?\n                    tr.kind !== 'optional' ? `${\n                        nvl(tr.min, '')}${\n                            (tr.min !== null && tr.min !== void 0) ||\n                            (tr.max !== null && tr.max !== void 0) ? '..' : ''}${\n                            nvl(tr.max, '')}` :\n                        '0..1' :\n                    '?')],\n        ['minValue',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.minValue, nvl(ty.greaterThanValue, '(smallest)'))}` : '?')],\n        ['maxValue',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.maxValue, nvl(ty.lessThanValue, '(biggest)'))}` : '?')],\n        ['pattern',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${ty.pattern ? `/${ty.pattern.source}/${ty.pattern.flags}` : '(pattern)'}` : '?')],\n        ['minLength',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.minLength, '0')}` : '?')],\n        ['maxLength',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.maxLength, '(biggest)')}` : '?')],\n        ['name',\n            escapeString(\n                `${ty.kind !== 'repeated' && values.dataPath.endsWith('repeated)') ?\n                    'repeated item of ' :\n                   ty.kind !== 'sequence' && values.dataPath.endsWith('sequence)') ?\n                    'sequence item of ' : ''}${\n                (ty.name && ty.name !== ty.typeName ? ty.name : null) ||\n                    findTopNamedAssertion(args.ctx)?.name || '?'}`)],\n        ['parentType',\n            escapeString(\n                findTopObjectAssertion(args.ctx)?.typeName || ty.typeName || values.parentType || '?')],\n        ['dataPath',\n            values.dataPath],\n\n        ...(args.substitutions || []),\n    ]);\n\n    for (const ent of dict.entries()) {\n        ret = ret.replace(new RegExp(`%{${ent[0]}}`), ent[1]);\n    }\n\n    return ret;\n}\n\n\nexport function reportError(\n        errType: ErrorTypes, data: any, ty: TypeAssertion,\n        args: ReportErrorArguments) {\n\n    const messages: ErrorMessages[] = [];\n    if (ty.messages) {\n        messages.push(ty.messages);\n    }\n    if (args.ctx.errorMessages) {\n        messages.push(args.ctx.errorMessages);\n    }\n    messages.push(defaultMessages);\n\n    let parentType = '';\n    const dataPathArray: string[] = [];\n    for (let i = 0; i < args.ctx.typeStack.length; i++) {\n        const p = args.ctx.typeStack[i];\n        const next = args.ctx.typeStack[i + 1];\n        const pt = Array.isArray(p) ? p[0] : p;\n        const pi = Array.isArray(next) ? next[1] : void 0;\n\n        let isSet = false;\n        if (pt.kind === 'repeated') {\n            if (i !== args.ctx.typeStack.length - 1) {\n                if (pt.name) {\n                    dataPathArray.push(`${pt.name}.(${pi !== void 0 ? `${pi}:` : ''}repeated)`);\n                } else {\n                    dataPathArray.push(`(repeated)`);\n                }\n                isSet = true;\n            }\n        } else if (pt.kind === 'sequence') {\n            if (i !== args.ctx.typeStack.length - 1) {\n                if (pt.name) {\n                    dataPathArray.push(`${pt.name}.(${pi !== void 0 ? `${pi}:` : ''}sequence)`);\n                } else {\n                    dataPathArray.push(`(sequence)`);\n                }\n                isSet = true;\n            }\n        }\n        if (! isSet) {\n            if (pt.name) {\n                dataPathArray.push(`${pt.name}`);\n            } else if (pt.typeName) {\n                dataPathArray.push(`${pt.typeName}`);\n            }\n        }\n        if (!parentType && pt.typeName) {\n            parentType = pt.typeName;\n        }\n    }\n    const dataPath = dataPathArray.join('.');\n\n    const topRepeatable: TopRepeatable = findTopRepeatableAssertion(args.ctx);\n    const values = {dataPath, topRepeatable, parentType};\n\n    const constraints: TypeAssertionErrorMessageConstraints = {};\n    const cSrces: TypeAssertionErrorMessageConstraints[] = [ty as any];\n    if (errType === ErrorTypes.RepeatQtyUnmatched && topRepeatable) {\n        cSrces.unshift(topRepeatable as any);\n    }\n    for (const cSrc of cSrces) {\n        if (nvl(cSrc.minValue, false)) {\n            constraints.minValue = cSrc.minValue;\n        }\n        if (nvl(cSrc.maxValue, false)) {\n            constraints.maxValue = cSrc.maxValue;\n        }\n        if (nvl(cSrc.greaterThanValue, false)) {\n            constraints.greaterThanValue = cSrc.greaterThanValue;\n        }\n        if (nvl(cSrc.lessThanValue, false)) {\n            constraints.lessThanValue = cSrc.lessThanValue;\n        }\n        if (nvl(cSrc.minLength, false)) {\n            constraints.minLength = cSrc.minLength;\n        }\n        if (nvl(cSrc.maxLength, false)) {\n            constraints.maxLength = cSrc.maxLength;\n        }\n        if (nvl(cSrc.pattern, false)) {\n            const pat = cSrc.pattern as any as RegExp;\n            constraints.pattern = `/${pat.source}/${pat.flags}`;\n        }\n        if (nvl(cSrc.min, false)) {\n            constraints.min = cSrc.min;\n        }\n        if (nvl(cSrc.max, false)) {\n            constraints.max = cSrc.max;\n        }\n    }\n\n    const val: {value?: any} = {};\n    switch (typeof data) {\n    case 'number': case 'bigint': case 'string': case 'boolean': case 'undefined':\n        val.value = data;\n        break;\n    case 'object':\n        if (data === null) {\n            val.value = data;\n        }\n    }\n\n    if (ty.messageId) {\n        args.ctx.errors.push({\n            code: `${ty.messageId}-${errorTypeNames[errType]}`,\n            message: formatErrorMessage(ty.message ?\n                ty.message :\n                getErrorMessage(errType, ...messages), data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    } else if (ty.message) {\n        args.ctx.errors.push({\n            code: `${errorTypeNames[errType]}`,\n            message: formatErrorMessage(ty.message, data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    } else {\n        args.ctx.errors.push({\n            code: `${errorTypeNames[errType]}`,\n            message: formatErrorMessage(getErrorMessage(errType, ...messages), data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    }\n}\n\n\nexport function reportErrorWithPush(\n        errType: ErrorTypes, data: any,\n        tyidx: [TypeAssertion, number | string | undefined],\n        args: ReportErrorArguments) {\n\n    try {\n        args.ctx.typeStack.push(tyidx);\n        reportError(errType, data, tyidx[0], args);\n    } finally {\n        args.ctx.typeStack.pop();\n    }\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ErrorTypes,\n         NeverTypeAssertion,\n         AnyTypeAssertion,\n         UnknownTypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SequenceAssertion,\n         SpreadAssertion,\n         OptionalAssertion,\n         OneOfAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertion,\n         ValidationContext,\n         TypeAssertionMap }    from './types';\nimport { ValidationError }     from './lib/errors';\nimport { isUnsafeVarNames }    from './lib/util';\nimport { reportError,\n         reportErrorWithPush } from './lib/reporter';\nimport { resolveSymbols }      from './lib/resolver';\n\n\n\nfunction validateNeverTypeAssertion<T>(\n    data: any, ty: NeverTypeAssertion, ctx: ValidationContext): null {\n\n    reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nfunction validateAnyTypeAssertion<T>(\n    data: any, ty: AnyTypeAssertion, ctx: ValidationContext): {value: T} {\n\n    // always matched\n    return ({value: ctx.mapper ? ctx.mapper(data, ty) : data});\n}\n\n\nfunction validateUnknownTypeAssertion<T>(\n    data: any, ty: UnknownTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    // always matched\n    return ({value: ctx.mapper ? ctx.mapper(data, ty) : data});\n}\n\n\nfunction validatePrimitiveTypeAssertion<T>(\n    data: any, ty: PrimitiveTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (ty.primitiveName === 'null') {\n        if (data !== null) {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n    } else if (ty.primitiveName === 'integer') {\n        if (typeof data !== 'number') {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n        if (Math.trunc(data) !== data) {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n    } else if (typeof data !== ty.primitiveName) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    // TODO: Function, DateStr, DateTimeStr\n\n    let err = false;\n    let valueRangeErr = false;\n    switch (typeof ty.minValue) {\n    case 'number': case 'string':\n        if (data < ty.minValue) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.maxValue) {\n    case 'number': case 'string':\n        if (data > ty.maxValue) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.greaterThanValue) {\n    case 'number': case 'string':\n        if (data <= ty.greaterThanValue) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.lessThanValue) {\n    case 'number': case 'string':\n        if (data >= ty.lessThanValue) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n\n    let valueLengthErr = false;\n    switch (typeof ty.minLength) {\n    case 'number':\n        if (typeof data !== 'string' || data.length < ty.minLength) {\n            if (! valueLengthErr) {\n                reportError(ErrorTypes.ValueLengthUnmatched, data, ty, {ctx});\n            }\n            valueLengthErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.maxLength) {\n    case 'number':\n        if (typeof data !== 'string' || data.length > ty.maxLength) {\n            if (! valueLengthErr) {\n                reportError(ErrorTypes.ValueLengthUnmatched, data, ty, {ctx});\n            }\n            valueLengthErr = true;\n            err = true;\n        }\n    }\n\n    if (ty.pattern) {\n        if (! ty.pattern.test(data)) {\n            reportError(ErrorTypes.ValuePatternUnmatched, data, ty, {ctx});\n            err = true;\n        }\n    }\n    const ret = !err ?\n        {value: ctx.mapper ? ctx.mapper(data, ty) : data} :\n        null;\n    return ret;\n}\n\n\nfunction validatePrimitiveValueTypeAssertion<T>(\n    data: any, ty: PrimitiveValueTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    const ret = data === ty.value ?\n        {value: ctx.mapper ? ctx.mapper(data, ty) : data} :\n        null;\n    if (! ret) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n    }\n    return ret;\n}\n\n\nfunction validateRepeatedAssertion<T>(\n    data: any, ty: RepeatedAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (! Array.isArray(data)) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    if (typeof ty.min === 'number' && data.length < ty.min) {\n        reportError(ErrorTypes.RepeatQtyUnmatched, data, ty, {ctx});\n        return null;\n    }\n    if (typeof ty.max === 'number' && data.length > ty.max) {\n        reportError(ErrorTypes.RepeatQtyUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    const retVals: any[] = [];\n    for (let i = 0; i < data.length; i++) {\n        const x = data[i];\n        const r = validateRoot<T>(x, ty.repeated, ctx, i);\n        if (! r) {\n            return null;\n        }\n        retVals.push(r.value);\n    }\n    return {value: retVals as any};\n}\n\n\nfunction validateSequenceAssertion<T>(\n    data: any, ty: SequenceAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (! Array.isArray(data)) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    let dIdx = 0, // index of data\n        sIdx = 0; // index of types\n    let spreadLen = 0;\n    let optionalOmitted = false;\n\n    const checkSpreadQuantity = (ts: SpreadAssertion, index: number) => {\n        if (typeof ts.min === 'number' && spreadLen < ts.min) {\n            reportErrorWithPush(\n                spreadLen === 0 ?\n                    ErrorTypes.TypeUnmatched :\n                    ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        if (typeof ts.max === 'number' && spreadLen > ts.max) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        return ts;\n    };\n\n    const checkOptionalQuantity = (ts: OptionalAssertion, index: number) => {\n        if (spreadLen === 0) {\n            // All subsequent 'optional' assertions should be 'spreadLen === 0'.\n            optionalOmitted = true;\n        } else if (optionalOmitted) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        } else if (spreadLen > 1) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        return ts;\n    };\n\n    const retVals: any[] = [];\n    while (dIdx < data.length && sIdx < ty.sequence.length) {\n        const ts = ty.sequence[sIdx];\n        if (ts.kind === 'spread') {\n            const savedErrLen = ctx.errors.length;\n            const r = validateRoot<T>(data[dIdx], ts.spread, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                spreadLen++;\n            } else {\n                // End of spreading\n                // rollback reported errors\n                ctx.errors.length = savedErrLen;\n                if (! checkSpreadQuantity(ts, dIdx)) {\n                    return null;\n                }\n                spreadLen = 0;\n                sIdx++;\n            }\n        } else if (ts.kind === 'optional') {\n            const savedErrLen = ctx.errors.length;\n            const r = validateRoot<T>(data[dIdx], ts.optional, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                spreadLen++;\n            } else {\n                // End of spreading\n                // rollback reported errors\n                ctx.errors.length = savedErrLen;\n                if (! checkOptionalQuantity(ts, dIdx)) {\n                    return null;\n                }\n                spreadLen = 0;\n                sIdx++;\n            }\n        } else {\n            const r = validateRoot<T>(data[dIdx], ts, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                sIdx++;\n            } else {\n                return null;\n            }\n        }\n    }\n    while (sIdx < ty.sequence.length) {\n        const ts = ty.sequence[sIdx];\n        if (ts.kind === 'spread') {\n            if (! checkSpreadQuantity(ts, dIdx)) {\n                return null;\n            }\n            spreadLen = 0;\n            sIdx++;\n        } else if (ts.kind === 'optional') {\n            if (! checkOptionalQuantity(ts, dIdx)) {\n                return null;\n            }\n            spreadLen = 0;\n            sIdx++;\n        } else {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, dIdx], {ctx});\n            return null;\n        }\n    }\n\n    const ret = data.length === dIdx ? {value: retVals as any} : null;\n    if (! ret) {\n        reportError(ErrorTypes.SequenceUnmatched, data, ty, {ctx});\n    }\n    return ret;\n}\n\n\nfunction validateOneOfAssertion<T>(\n    data: any, ty: OneOfAssertion, ctx: ValidationContext): {value: T} | null {\n\n    for (const tyOne of ty.oneOf) {\n        const savedErrLen = ctx.errors.length;\n        const r = validateRoot<T>(data, tyOne, ctx);\n        if (! r) {\n            // rollback reported errors\n            ctx.errors.length = savedErrLen;\n            continue;\n        }\n        return r;\n    }\n    reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nfunction validateEnumAssertion<T>(\n    data: any, ty: EnumAssertion, ctx: ValidationContext): {value: T} | null {\n\n    for (const v of ty.values) {\n        if (data === v[1]) {\n            return ({value: ctx.mapper ? ctx.mapper(data, ty) : data});\n        }\n    }\n    reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nconst NumberPattern = /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)$/;\n\n\nfunction validateObjectAssertion<T>(\n    data: any, ty: ObjectAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let retVal = Array.isArray(data) ? [...data] : {...data};\n    const revMembers = ty.members.slice().reverse();\n    for (const x of ty.members) {\n        if (ty.members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(\n                `Duplicated member is found: ${x[0]} in ${ty.name || '(unnamed)'}`, ty, ctx);\n        }\n    }\n\n    if (data === null || typeof data !== 'object') {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        if (ctx && ctx.checkAll) {\n            retVal = null;\n        } else {\n            return null;\n        }\n    } else {\n        const dataMembers = new Set<string>();\n        if (ctx.noAdditionalProps || ty.additionalProps && 0 < ty.additionalProps.length) {\n            if (! Array.isArray(data)) {\n                for (const m in data) {\n                    if (Object.prototype.hasOwnProperty.call(data, m)) {\n                        dataMembers.add(m);\n                    }\n                }\n            }\n        }\n        if (ctx.noAdditionalProps && Array.isArray(data) && 0 < data.length) {\n            const aps = ty.additionalProps || [];\n            if (aps.filter(x => x[0].includes('number')).length === 0) {\n                reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                    ctx,\n                    substitutions: [['addtionalProps', '[number]']],\n                });\n                if (ctx && ctx.checkAll) {\n                    retVal = null;\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        for (const x of ty.members) {\n            dataMembers.delete(x[0]);\n            if (Object.prototype.hasOwnProperty.call(data, x[0])) {\n                const ret = validateRoot<T>(\n                    data[x[0]],\n                    x[1].kind === 'optional' ?  // TODO: set name at compile time\n                        {\n                            ...x[1].optional,\n                            name: x[0],\n                            message: x[1].message,\n                            messages: x[1].messages,\n                            messageId: x[1].messageId,\n                        } : x[1],\n                    ctx);\n\n                if (ret) {\n                    if (retVal) {\n                        if (isUnsafeVarNames(retVal, x[0])) {\n                            continue;\n                        }\n                        retVal[x[0]] = ret.value;\n                    }\n                } else {\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            } else {\n                if (x[1].kind !== 'optional') {\n                    reportErrorWithPush(ErrorTypes.Required, data, [x[1], void 0], {ctx});\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        if (ty.additionalProps && 0 < ty.additionalProps.length) {\n            function* getAdditionalMembers() {\n                for (const m of dataMembers.values()) {\n                    yield m;\n                }\n                if (Array.isArray(data)) {\n                    for (let i = 0; i < data.length; i++) {\n                        yield String(i);\n                    }\n                }\n            }\n            for (const m of getAdditionalMembers()) {\n                let allowImplicit = false;\n                const matchedAssertions: TypeAssertion[] = [];\n\n                for (const ap of ty.additionalProps) {\n                    for (const pt of ap[0]) {\n                        const at = ap[1];\n                        if (pt === 'number') {\n                            if (NumberPattern.test(m)) {\n                                matchedAssertions.push(at);\n                            }\n                        } else if (pt === 'string') {\n                            matchedAssertions.push(at);\n                        } else {\n                            if (pt.test(m)) {\n                                matchedAssertions.push(at);\n                            }\n                        }\n                        if (at.kind === 'optional') {\n                            allowImplicit = true;\n                        }\n                    }\n                }\n                if (matchedAssertions.length === 0) {\n                    if (allowImplicit) {\n                        continue;\n                    }\n                    reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                        ctx,\n                        substitutions: [['addtionalProps', m]],\n                    });\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                        continue;\n                    } else {\n                        return null;\n                    }\n                }\n\n                dataMembers.delete(m);\n                let hasError = false;\n                const savedErrLen = ctx.errors.length;\n\n                for (const at of matchedAssertions) {\n                    const ret = validateRoot<T>(data[m], at.kind === 'optional' ?\n                        {\n                            ...at.optional,\n                            message: at.message,\n                            messages: at.messages,\n                            messageId: at.messageId,\n                            name: m,\n                        } : {\n                            ...at,\n                            name: m,\n                        }, ctx);\n                    if (ret) {\n                        if (retVal) {\n                            hasError = false;\n                            ctx.errors.length = savedErrLen;\n                            if (isUnsafeVarNames(retVal, m)) {\n                                continue;\n                            }\n                            retVal[m] = ret.value;\n                        }\n                        break;\n                    } else {\n                        hasError = true;\n                    }\n                }\n                if (hasError) {\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        if (ctx.noAdditionalProps && 0 < dataMembers.size) {\n            reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                ctx,\n                substitutions: [['addtionalProps', Array.from(dataMembers.values()).join(', ')]],\n            });\n            if (ctx && ctx.checkAll) {\n                retVal = null;\n            } else {\n                return null;\n            }\n        }\n    }\n    if (! retVal) {\n        // TODO: Child is unmatched. reportError?\n        // TODO: report object's custom error message\n    }\n    return retVal ? {value: (ctx && ctx.mapper) ? ctx.mapper(retVal, ty) : retVal} : null;\n}\n\n\nexport function validateRoot<T>(\n    data: any, ty: TypeAssertion, ctx: ValidationContext, dataIndex?: number | string): {value: T} | null {\n\n    try {\n        ctx.typeStack.push(\n            typeof dataIndex === 'number' || typeof dataIndex === 'string' ?\n            [ty, dataIndex] : ty);\n\n        switch (ty.kind) {\n        case 'never':\n            return validateNeverTypeAssertion(data, ty, ctx);\n        case 'any':\n            return validateAnyTypeAssertion(data, ty, ctx);\n        case 'unknown':\n            return validateUnknownTypeAssertion(data, ty, ctx);\n        case 'primitive':\n            return validatePrimitiveTypeAssertion(data, ty, ctx);\n        case 'primitive-value':\n            return validatePrimitiveValueTypeAssertion(data, ty, ctx);\n        case 'repeated':\n            return validateRepeatedAssertion(data, ty, ctx);\n        case 'sequence':\n            return validateSequenceAssertion(data, ty, ctx);\n        case 'one-of':\n            return validateOneOfAssertion(data, ty, ctx);\n        case 'enum':\n            return validateEnumAssertion(data, ty, ctx);\n        case 'object':\n            return validateObjectAssertion(data, ty, ctx);\n        case 'symlink':\n            if (ctx.schema) {\n                return validateRoot<T>(data, resolveSymbols(ctx.schema, ty, {nestLevel: 0, symlinkStack: []}), ctx);\n            }\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unresolved symbol '${ty.symlinkTargetName}' is appeared.`, ty, ctx);\n        case 'operator':\n            if (ctx.schema) {\n                return validateRoot<T>(data, resolveSymbols(ctx.schema, ty, {nestLevel: 0, symlinkStack: []}), ctx);\n            }\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unresolved type operator is found: ${ty.operator}`, ty, ctx);\n        case 'spread': case 'optional':\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unexpected type assertion: ${(ty as any).kind}`, ty, ctx);\n        default:\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unknown type assertion: ${(ty as any).kind}`, ty, ctx);\n        }\n    } finally {\n        ctx.typeStack.pop();\n    }\n}\n\n\nexport function validate<T>(\n    data: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): {value: T} | null {\n\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n    };\n    try {\n        return validateRoot<T>(data, ty, ctx2);\n    } finally {\n        if (ctx) {\n            ctx.errors = ctx2.errors;\n        }\n    }\n}\n\n\nexport function getType(schema: TypeAssertionMap, name: string): TypeAssertion {\n    if (schema.has(name)) {\n        return schema.get(name)?.ty as TypeAssertion;\n    }\n    throw new Error(`Undefined type name is referred: ${name}`);\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport type SxMacro = (state: SxParserState, name: string, formalArgs?: SxSymbol[]) => (list: SxToken[]) => SxToken;\r\n\r\nexport interface SxMacroInfo {\r\n    name: string;\r\n    fn: SxMacro;\r\n\r\n    formalArgs?: SxSymbol[];\r\n    lastIsSpread?: boolean;\r\n    next?: SxMacroInfo;\r\n}\r\n\r\n\r\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\r\n\r\nexport interface SxFuncInfo {\r\n    name: string;\r\n    fn: SxFunc;\r\n\r\n    // TODO: overloading\r\n    // formalArgs?: SxSymbol[];\r\n    // lastIsSpread?: boolean;\r\n    // next?: SxFuncInfo;\r\n}\r\n\r\n\r\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\r\n\r\nexport interface SxSymbolInfo {\r\n    name: string;\r\n    fn: SxSymbolResolver;\r\n}\r\n\r\n\r\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\r\n\r\nexport interface SxScope {\r\n    isBlockLocal: boolean;\r\n    scope: any;           // { [s: string]: any; };\r\n    capturedScopes?: CapturedScopes;\r\n}\r\n\r\n\r\nexport interface SxReservedNames {\r\n    eval: string;\r\n    quote: string;\r\n    backquote: string;\r\n    unquote: string;\r\n    spread: string;\r\n    splice: string;\r\n\r\n    car: string;\r\n    cdr: string;\r\n    cons: string;\r\n    atom: string;\r\n    eq: string;\r\n    list: string;\r\n\r\n    let: string;\r\n    lambda: string;\r\n    self: string;\r\n    defun: string;\r\n    thiz: string;\r\n\r\n    if: string;\r\n    cond: string;\r\n\r\n    while: string;\r\n    doWhile: string;\r\n    until: string;\r\n    doUntil: string;\r\n\r\n    get: string;\r\n    defvar: string;\r\n    setq: string;\r\n    set: string;\r\n    call: string;\r\n\r\n    not: string;\r\n    and: string;\r\n    or: string;\r\n\r\n    isSymbol: string;\r\n    gensym: string;\r\n    raise: string;\r\n    catch: string;\r\n\r\n    Template: string;\r\n}\r\n\r\nexport interface SxParserConfig {\r\n    raiseOnUnresolvedSymbol: boolean;\r\n    enableEvaluate: boolean;\r\n    enableHereDoc: boolean;\r\n    enableSpread: boolean;\r\n    enableSplice: boolean;\r\n    enableShorthands: boolean;\r\n    enableVerbatimStringLiteral: boolean;\r\n    enableTailCallOptimization: boolean;\r\n    enableRegExpMatchOperators: boolean; // IMPORTANT: Turn off to prevent ReDoS when executing untrusted code\r\n    enableCompilationOperators: boolean; // IMPORTANT: Turn off to prevent DoS when executing untrusted code\r\n    stripComments: boolean;\r\n    wrapExternalValue: boolean;\r\n    reservedNames: SxReservedNames;\r\n    returnMultipleRoot: boolean;\r\n    maxEvalCount: number;                // IMPORTANT: Set positive value to prevent DoS when executing untrusted code\r\n\r\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\r\n    JsxFragment?: any;\r\n\r\n    funcs: SxFuncInfo[];\r\n    macros: SxMacroInfo[];\r\n    symbols: SxSymbolInfo[];\r\n\r\n    funcSymbolResolverFallback?: SxFunc;\r\n    valueSymbolResolverFallback?: SxSymbolResolver;\r\n}\r\n\r\nexport interface SxParserState {\r\n    strings: TemplateStringsArray | string[];\r\n    values: any[];\r\n\r\n    index: number;\r\n    pos: number;\r\n    line: number;\r\n\r\n    evalCount: number;\r\n\r\n    scopes: SxScope[];\r\n\r\n    macroMap: Map<string, SxMacroInfo>;\r\n    funcMap: Map<string, SxFuncInfo>;\r\n    symbolMap: Map<string, SxSymbolInfo>;\r\n\r\n    config: SxParserConfig;\r\n}\r\n\r\nexport interface SxEof {\r\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\r\n    eofSeq?: string;\r\n}\r\n\r\nexport interface SxExternalValue {\r\n    value: any;\r\n}\r\n\r\nexport interface SxSymbol {\r\n    'symbol': string;\r\n\r\n    // TODO: debug info\r\n    // _fileName?: string;\r\n    // _line?: number;\r\n    // _col?: number;\r\n}\r\n\r\nexport interface SxComment {\r\n    comment: string;\r\n}\r\n\r\nexport interface SxDottedPair {\r\n    car: SxToken; // left\r\n    cdr: SxToken; // right\r\n}\r\n\r\nexport interface SxDottedFragment {\r\n    dotted: SxToken; // right\r\n}\r\n\r\n\r\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\r\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\r\nexport type SxChar = string | SxEof | SxExternalValue;\r\nexport type SxAtom = SxSymbol | string | number | boolean | null;\r\nexport type SxList = SxDottedPair | SxAtom[];\r\n\r\n\r\n\r\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\r\n\r\n\r\nexport interface CompilerContext {\r\n    _$_vars: any[];\r\n    varsCount: number;\r\n    varNames: Map<string, string>;\r\n    varNamesCount: number;\r\n    varDefs: string;\r\n    ops: Map<string, CompilerOperator>;\r\n    makeScope: (scoped: () => void) => void;\r\n    compileToken: (body: any[], i: number) => string;\r\n}\r\n\r\n\r\nexport interface LsxConfig {\r\n    jsx: (comp: any, props: any, ...children: any[]) => any;\r\n    jsxFlagment: any;\r\n    components: object;\r\n}\r\n\r\n\r\nexport class FatalError extends Error {\r\n    public constructor(message?: string | undefined) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n\r\nexport class MaxEvaluationCountError extends FatalError {\r\n    public constructor() {\r\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\r\n    }\r\n}\r\n\r\n\r\nexport class ScriptTerminationError extends FatalError {\r\n    public constructor(where: string) {\r\n        super(`[SX] ${where}: Unexpected termination of script.`);\r\n    }\r\n}\r\n\r\n\r\nexport interface SExpressionRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\r\n}\r\n\r\n\r\nexport interface SExpressionTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    evaluateAST: (ast: SxToken[]) => R;\r\n    repl: () => SExpressionRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\r\n    repl: () => SExpressionAsyncRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { RecursivePartial,\n         TypeAssertion,\n         ValidationContext } from './types';\nimport { ValidationError }   from './lib/errors';\nimport { isUnsafeVarNames }  from './lib/util';\nimport { validate }          from './validator';\n\n\n\nfunction pickMapper(value: any, ty: TypeAssertion) {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const ret = Array.isArray(value) ? [] : {};\n\n            const dataMembers = new Set<string>();\n            if (! Array.isArray(value)) {\n                for (const m in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, m)) {\n                        dataMembers.add(m);\n                    }\n                }\n            }\n\n            for (const x of ty.members) {\n                if (Object.hasOwnProperty.call(value, x[0])) {\n                    dataMembers.delete(x[0]);\n                    ret[x[0]] = value[x[0]];\n                }\n            }\n            if (ty.additionalProps && 0 < ty.additionalProps.length) {\n                function* getAdditionalMembers() {\n                    for (const m of dataMembers.values()) {\n                        yield m;\n                    }\n                    if (Array.isArray(value)) {\n                        for (let i = 0; i < value.length; i++) {\n                            yield String(i);\n                        }\n                    }\n                }\n                for (const m of getAdditionalMembers()) {\n                    ret[m] = value[m];\n                }\n            }\n            return ret;\n        }\n    default:\n        return value;\n    }\n}\n\n\nexport function pickRoot<T>(data: T, ty: TypeAssertion, ctx: ValidationContext): T {\n    switch (ty.kind) {\n    case 'never':\n        throw new ValidationError(`Type unmatched: ${(ty as any).kind}`, ty, ctx);\n    case 'any':\n        // FALL_THRU\n    case 'unknown':\n        // FALL_THRU\n    case 'primitive':\n        // FALL_THRU\n    case 'primitive-value':\n        // FALL_THRU\n    case 'repeated':\n        // FALL_THRU\n    case 'sequence':\n        // FALL_THRU\n    case 'one-of':\n        // FALL_THRU\n    case 'enum':\n        // FALL_THRU\n    case 'object':\n        {\n            const r = validate<T>(data, ty, ctx);\n            if (r) {\n                return r.value;\n            } else {\n                throw new ValidationError('Validation failed.', ty, ctx);\n            }\n        }\n    case 'spread': case 'optional': case 'symlink': case 'operator':\n        throw new ValidationError(`Unexpected type assertion: ${(ty as any).kind}`, ty, ctx);\n    default:\n        throw new ValidationError(`Unknown type assertion: ${(ty as any).kind}`, ty, ctx);\n    }\n}\n\n\nexport function pick<T>(data: T, ty: TypeAssertion, ctx?: Partial<ValidationContext>): RecursivePartial<T> {\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n        mapper: pickMapper,\n    };\n    try {\n        return pickRoot<T>(data, ty, ctx2);\n    } finally {\n        if (ctx) {\n            ctx.errors = ctx2.errors;\n        }\n    }\n}\n\n\nfunction merge(data: any, needle: any) {\n    if (data === null || data === void 0) {\n        return needle;\n    }\n    switch (typeof data) {\n    case 'object':\n        if (Array.isArray(data)) {\n            return [...needle];\n        } else {\n            const r: any = {...data};\n            for (const k in needle) {\n                if (Object.prototype.hasOwnProperty.call(needle, k)) {\n                    if (isUnsafeVarNames(r, k)) {\n                        continue;\n                    }\n                    r[k] = merge(r[k], needle[k]);\n                }\n            }\n            return r;\n        }\n    default:\n        return needle;\n    }\n}\n\n\nexport function patch<T>(data: T, needle: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): T {\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n    };\n    const validated = pick<T>(needle, ty, ctx2);\n    return merge(data, validated);\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n// tslint:disable-next-line:function-constructor\r\nexport const globalObj = Function('return this')();\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         SxFuncInfo,\r\n         CompilerOperator,\r\n         CompilerContext  }           from './types';\r\nimport { isSymbol }                   from './ast';\r\nimport { getCapturedScopes,\r\n         optimizeTailCall }           from './evaluate';\r\nimport { checkUnsafeVarNamesEx }      from './errors';\r\nimport { applyMacros,\r\n         stripQuoteOrPass,\r\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\r\nimport { registerOperators }          from './compile.ops';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\r\n\r\n    function makeScope(scoped: () => void) {\r\n        const varNamesCopy = new Map<string, string>();\r\n        for (const x of ctx.varNames.entries()) {\r\n            varNamesCopy.set(x[0], x[1]);\r\n        }\r\n        scoped();\r\n        ctx.varNames = varNamesCopy;\r\n    }\r\n\r\n\r\n    function compileValue(b: any) {\r\n        let compFnBody = '';\r\n        if (b === null) {\r\n            compFnBody += '(null)';\r\n        } else if (b === void 0) {\r\n            compFnBody += '(void 0)';\r\n        } else switch (typeof b) {\r\n        case 'boolean': case 'number':\r\n            compFnBody += `(${String(b)})`;\r\n            break;\r\n        case 'object':\r\n            if (isSymbol(b)) {\r\n                const sym = b as SxSymbol;\r\n                checkUnsafeVarNamesEx('(compiler)compileValue', ctx.varNames, sym.symbol);\r\n                if (ctx.varNames.has(sym.symbol)) {\r\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\r\n                } else {\r\n                    _$_vars[ctx.varsCount] = sym.symbol;\r\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n                }\r\n                break;\r\n            } else {}\r\n            // FALL_THRU\r\n        default:\r\n            _$_vars[ctx.varsCount] = b;\r\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n            break;\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    function compileToken(body: any[], i: number) {\r\n        let compFnBody = '';\r\n        const b = body[i];\r\n        if (Array.isArray(b)) {\r\n            if (0 < b.length) {\r\n                const r: SxToken = applyMacros(state, b);\r\n                if (Array.isArray(r)) {\r\n                    if (0 < r.length) {\r\n                        if (isSymbol(r[0])) {\r\n                            const sym = r[0] as SxSymbol;\r\n                            const args = r.slice(1);\r\n                            checkUnsafeVarNamesEx('(compiler)compileToken', ops, sym.symbol);\r\n                            if (ops.has(sym.symbol)) {\r\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\r\n                            } else {\r\n                                if (sym.symbol === state.config.reservedNames.spread) {\r\n                                    compFnBody += `...(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else if (state.funcMap.has(sym.symbol)) {\r\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                } else if (ctx.varNames.has(sym.symbol)) {\r\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else {\r\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            switch (typeof r[0]) {\r\n                            case 'function':\r\n                                _$_vars[ctx.varsCount] = r[0];\r\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                break;\r\n                            default:\r\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        compFnBody += '([])';\r\n                    }\r\n                } else {\r\n                    compFnBody += compileValue(b);\r\n                }\r\n            } else {\r\n                compFnBody += '([])';\r\n            }\r\n        } else {\r\n            compFnBody += compileValue(b);\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    const ctx: CompilerContext = {\r\n        _$_vars,\r\n        varsCount: 1,\r\n        varNames: new Map<string, string>(),\r\n        varNamesCount: 0,\r\n        varDefs: 'var x0;',\r\n        ops: new Map<string, CompilerOperator>(),\r\n        makeScope,\r\n        compileToken,\r\n    };\r\n\r\n    registerOperators(state, ctx);\r\n    const ops = ctx.ops;\r\n\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    // set 'this' object\r\n    ctx.varNames.set(state.config.reservedNames.thiz, `(this===(Function('return this')())?null:(this===void 0?null:this))`);\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n    if (capturedScopes) {\r\n        for (const x in capturedScopes) {\r\n            if (Object.prototype.hasOwnProperty.call(capturedScopes, x)) {\r\n                _$_vars[ctx.varsCount++] = x;\r\n                _$_vars[ctx.varsCount] = capturedScopes[x];\r\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\r\n                ctx.varsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const compFormalArgs = `${formalArgs.map((x, i) => {\r\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\r\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\r\n    }).join(',')}`;\r\n\r\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\r\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\r\n}\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\r\n    // tslint:disable-next-line:no-eval\r\n    _$_vars[0] = eval(code);\r\n    return _$_vars[0];\r\n}\r\n\r\n\r\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\r\n    // tslint:disable-next-line:variable-name\r\n    const _$_vars: any[] = [];\r\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         CompilerContext }             from '../types';\r\nimport { isSymbol }                    from '../ast';\r\nimport { checkParamsLength,\r\n         checkUnsafeVarNamesEx,\r\n         checkUnsafeVarNames }         from '../errors';\r\nimport { stripQuote,\r\n         stripQuoteOrPass,\r\n         getScope_stateApplied,\r\n         resolveValueSymbol_dynamic,\r\n         checkUnsafeVarNames_dynamic } from './helpers';\r\n\r\n\r\n\r\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\r\n    const {\r\n        _$_vars,\r\n        ops,\r\n        makeScope,\r\n        compileToken,\r\n    } = ctx;\r\n\r\n\r\n    ops.set(state.config.reservedNames.quote, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.self, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        compFnBody += `((_$_vars[0])(${\r\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if condition 't-expr 'f-expr)\r\n        //  -> (if condition is true ) S expr  : t-expr\r\n        //  -> (if condition is false) S expr  : f-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if', args, 2, 3);\r\n        compFnBody += `(${compileToken(r, 1)}?(${\r\n            compileToken([stripQuote(state, r[2])], 0)}):(${\r\n            compileToken([stripQuote(state, r[3])], 0)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if-null condition 'null-expr)\r\n        //  -> (if condition is not null ) S expr  : condition\r\n        //  -> (if condition is null)      S expr  : null-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\r\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\r\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        //  -> (if (eval condI) is true ) S expr  : exprI\r\n        //  -> (if no matched)            S expr  : null\r\n        let compFnBody = '';\r\n        {\r\n            checkParamsLength('compileToken:$__cond', args, 1);\r\n            compFnBody += `(`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\r\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\r\n            }\r\n            compFnBody += `null`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `)`;\r\n            }\r\n            compFnBody += `)`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__while', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n        //  -> (if n > 0) S expr  : exprN\r\n        //  -> (else)     S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__repeat', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n        //  -> (if list.length > 0) S expr  : exprN\r\n        //  -> (else)               S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__for', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n        //  -> (else)               S expr  : exprN\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__scope', args, 2);\r\n        // r[1]: isBlockLocal\r\n        // r[2]: returnMultiple\r\n        if (! Array.isArray(r[3])) {\r\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\r\n        }\r\n        makeScope(() => {\r\n            for (const x of stripQuote(state, r[3]) as any[]) {\r\n                let name = '';\r\n                if (Array.isArray(x)) {\r\n                    if (x.length < 1) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\r\n                    }\r\n                    if (! isSymbol(x[0])) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\r\n                    }\r\n                    name = x[0].symbol;\r\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\r\n                } else {\r\n                    if (! isSymbol(x)) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\r\n                    }\r\n                    name = x.symbol;\r\n                }\r\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n                ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n            }\r\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\r\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__try 'expr 'catch-expr)\r\n        //  ->                               S expr  : expr\r\n        //  -> (if error is raised in expr)  S expr  : catch-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__try', args, 1, 2);\r\n        compFnBody += `((()=>{try{${\r\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\r\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\r\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\r\n        makeScope(() => {\r\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\r\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\r\n            compFnBody += `${\r\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.raise, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($raise 'expr)\r\n        //  -> S expr  : -\r\n        let compFnBody = '';\r\n        compFnBody += `((()=>{throw ${\r\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($boolean any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\r\n        compFnBody += `((x0=${compileToken(args, 0)\r\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__get', args, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__let 'nameStrOrSymbol expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__let', args, 2, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        if (! ctx.varNames.has(name)) {\r\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n        }\r\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__set', args, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ?\r\n            quoted.symbol :\r\n            (typeof quoted === 'string' ?\r\n                quoted :\r\n                (Array.isArray(quoted) ?\r\n                    (isSymbol(quoted[0]) ?\r\n                        quoted[0].symbol :\r\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\r\n                    ) :\r\n                    null\r\n                )\r\n            );\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = checkUnsafeVarNames('compileToken:$__set', symName);\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        let checkNameCalled = false;\r\n        let checkNamePos = '';\r\n        const checkName = (str: string) => {\r\n            if (! checkNameCalled) {\r\n                _$_vars[ctx.varsCount] = checkUnsafeVarNames_dynamic('compileToken:$__set');\r\n                checkNamePos = String(ctx.varsCount++);\r\n                checkNameCalled = true;\r\n            }\r\n            return `(_$_vars[${checkNamePos}](${str}))`;\r\n        };\r\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                checkName(compileToken(arr, idx))}]`).join('')}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.not, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$not', args, 1, 1);\r\n        compFnBody += `(!${compileToken(args, 0)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__and 'expr1 ... 'exprN)\r\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n        //  -> (else)                                                     S expr  : expr-i (false left most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__and', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__or 'expr1 ... 'exprN)\r\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n        //  -> (else)                                                  S expr  : expr-i (false right most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__or', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($eq arg1 arg2)\r\n        //  -> (if arg1 === arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:===', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not-eq arg1 arg2)\r\n        //  -> (if arg1 !== arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (== a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (!= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (< a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (> a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($concat listOrString1 ... listOrStringN)\r\n        //  -> S expr  : listOrString\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$concat', args, 1);\r\n        let w1 = '';\r\n        if (Array.isArray(args[0]) && isSymbol((args[0] as any)[0], state.config.reservedNames.spread)) {\r\n            const w0 = compileToken(args[0] as any, 1);\r\n            w1 = `(${w0}[0]).concat((${w0}.length>1?${w0}[1]:(typeof ${w0}[0]==='string'?'':[])),`;\r\n        } else {\r\n            w1 = `${compileToken(args as any, 0)}.concat(`;\r\n        }\r\n        compFnBody += `(${w1}${\r\n            args.slice(1).map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (+ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n            };return _$_rv.reduce((x,y)=>x+y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (- number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:-', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return (_$_rv.length>1?(_$_rv.reduce((x,y)=>x-y)):(_$_rv.length>0?-_$_rv[0]:NaN));})())`;\r\n        } else {\r\n            compFnBody += `(${r.length > 2 ?\r\n                args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\r\n                `-(${String(compileToken(r, 1))})`})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (* number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:*', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x*y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (** number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:**', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x**y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (/ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:/', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x/y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (% number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:%', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x%y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<< number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-not number)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\r\n        compFnBody += `(~(${compileToken(r, 1)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-and numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-or numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-xor numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\r\n        return compFnBody;\r\n    });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nexport interface ParserInputWithCtx<T extends ArrayLike<T[number]>, C> {\r\n    src: T;\r\n    start: number;\r\n    end: number;\r\n    context: C;\r\n}\r\nexport type ParserInput<T extends ArrayLike<T[number]>> = ParserInputWithCtx<T, undefined>;\r\nexport type StringParserInputWithCtx<C> = ParserInputWithCtx<string, C>;\r\nexport type StringParserInput = StringParserInputWithCtx<undefined>;\r\n\r\nexport class ParseError extends Error {}\r\n\r\n\r\nexport function parserInput<T extends ArrayLike<T[number]>>(src: T): ParserInputWithCtx<T, undefined>;\r\nexport function parserInput<T extends ArrayLike<T[number]>, C>(src: T, context: C): ParserInputWithCtx<T, C>;\r\nexport function parserInput<T extends ArrayLike<T[number]>, C>(src: T, context?: C): ParserInputWithCtx<T, C> {\r\n    return ({\r\n        src,\r\n        start: 0,\r\n        end: src.length,\r\n        context: context as any,\r\n    });\r\n}\r\n\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ParserFnSucceededResult<T extends ArrayLike<T[number]>, C, R> =\r\n    {succeeded: true, next: ParserInputWithCtx<T, C>, tokens: R[]};\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ParserFnFailedResult<T extends ArrayLike<T[number]>, C, R> =\r\n    {succeeded: false, error: boolean, src: T, pos: number, message: string};\r\n\r\nexport type ParserFnWithCtx<T extends ArrayLike<T[number]>, C, R> =\r\n    (input: ParserInputWithCtx<T, C>) =>\r\n        ParserFnSucceededResult<T, C, R> |\r\n        ParserFnFailedResult<T, C, R>;\r\n\r\nexport type ParserFn<T extends ArrayLike<T[number]>, R> = ParserFnWithCtx<T, undefined, R>;\r\nexport type StringParserFnWithCtx<C, R> = ParserFnWithCtx<string, C, R>;\r\nexport type StringParserFn<R> = StringParserFnWithCtx<undefined, R>;\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { ParserInputWithCtx,\r\n         ParseError,\r\n         parserInput,\r\n         ParserFnFailedResult,\r\n         ParserFnWithCtx } from './types';\r\n\r\n\r\n\r\nexport function makeErrorMessage<T extends ArrayLike<T[number]>, C>(\r\n        input: ParserInputWithCtx<T, C>, message?: string) {\r\n\r\n    let src = '';\r\n    if (typeof input.src === 'string') {\r\n        src = input.src.slice(Math.max(input.start - 5, 0), input.start + 55);\r\n\r\n        let ar = src.split(/\\r\\n|\\n|\\r/);\r\n        ar = ar.slice(0, 1)\r\n            .concat('          ^~~~~~~~')\r\n            .concat(...ar.slice(1));\r\n        src = ar.join('\\n') + '\\n\\n';\r\n    } else {\r\n        src = '     (object)\\n          ^~~~~~~~';\r\n        try {\r\n            src = '     ' +\r\n                JSON.stringify((input.src as any).slice(Math.max(input.start - 10, 0), input.start)) + '\\n          ' +\r\n                JSON.stringify((input.src as any).slice(input.start, input.start + 1)) + '\\n          ' +\r\n                JSON.stringify((input.src as any).slice(input.start + 1, input.start + 10));\r\n\r\n            let ar = src.split(/\\r\\n|\\n|\\r/);\r\n            ar = ar.slice(0, 2)\r\n                .concat('          ^~~~~~~~')\r\n                .concat(...ar.slice(2));\r\n            src = ar.join('\\n') + '\\n\\n';\r\n        } catch (e) {}\r\n    }\r\n\r\n    return (`parse error occured at position:${\r\n        input.start} ${\r\n        message ? ` ${message}` : ''}\\n     ${src}`);\r\n}\r\n\r\n\r\nexport function makeMessage<T extends ArrayLike<T[number]>, C>(\r\n        input: ParserInputWithCtx<T, C>, message?: string) {\r\n\r\n    return (`parse faild at position:${input.start} ${message ? ` ${message}` : ''}`);\r\n}\r\n\r\n\r\nexport function zeroWidth<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return ({\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function zeroWidthError<T extends ArrayLike<T[number]>, C, R>(\r\n        message: string\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        throw new ParseError(makeErrorMessage(input, message));\r\n        // return ({\r\n        //     succeeded: false,\r\n        //     error: true,\r\n        //     src: input.src,\r\n        //     pos: input.start,\r\n        //     message: makeErrorMessage(input, message),\r\n        // });\r\n    });\r\n}\r\n\r\n\r\nexport function beginning<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return (input.start === 0 ? {\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        } : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: makeMessage(input, 'operator \"beginning\"'),\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function end<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return (input.start === input.end ? {\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        } : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: makeMessage(input, 'operator \"end\"'),\r\n        });\r\n    });\r\n}\r\n\r\n// TODO: match by callback function parser\r\n// TODO: `nesting` parser\r\n\r\n\r\nexport function quantify<T extends ArrayLike<T[number]>, C, R>(\r\n        min?: number, max?: number\r\n        ): (parser: ParserFnWithCtx<T, C, R>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    min = min || 0;\r\n    return (parser => {\r\n        return (input => {\r\n            let next = input;\r\n            const matched: Array<{next: ParserInputWithCtx<T, C>, tokens: R[]}> = [];\r\n\r\n            for (;;) {\r\n                const x = parser(next);\r\n                if (x.succeeded) {\r\n                    next = x.next;\r\n                    matched.push({next: x.next, tokens: x.tokens});\r\n                    if (max && max === matched.length) {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if (x.error) {\r\n                        return x;\r\n                    }\r\n                    if (matched.length >= (min as number)) {\r\n                        break;\r\n                    } else {\r\n                        return ({\r\n                            succeeded: false,\r\n                            error: false,\r\n                            src: next.src,\r\n                            pos: next.start,\r\n                            message: makeMessage(next, 'operator \"quantify\"'),\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            if (matched.length > 0) {\r\n                const r: R[] = [];\r\n                for (const x of matched) {\r\n                    r.push(...x.tokens);\r\n                }\r\n                return ({\r\n                    succeeded: true,\r\n                    next: (matched[matched.length - 1]).next,\r\n                    tokens: r,\r\n                });\r\n            } else {\r\n                return ({\r\n                    succeeded: true,\r\n                    next: {\r\n                        src: input.src,\r\n                        start: input.start,\r\n                        end: input.end,\r\n                        context: input.context,\r\n                    },\r\n                    tokens: [],\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function first<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        let matched: {next: ParserInputWithCtx<T, C>, tokens: R[]} | null = null;\r\n\r\n        let last: ParserFnFailedResult<T, C, R> | null = null;\r\n        for (const parser of parsers) {\r\n            const x = parser(input);\r\n            if (x.succeeded) {\r\n                matched = {next: x.next, tokens: x.tokens};\r\n                break;\r\n            }\r\n            if (last) {\r\n                if (x.error) {\r\n                    if (!last.error || last.pos < x.pos) {\r\n                        last = x;\r\n                    }\r\n                } else if (last.pos < x.pos) {\r\n                    last = x;\r\n                }\r\n            } else {\r\n                last = x;\r\n            }\r\n        }\r\n\r\n        return (matched ? {\r\n            succeeded: true, next: matched.next, tokens: matched.tokens\r\n        } : last ? last : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: makeMessage(input, 'operator \"first\"'),\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function or<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        const matched: Array<{next: ParserInputWithCtx<T, C>, tokens: R[]}> = [];\r\n\r\n        let last: ParserFnFailedResult<T, C, R> | null = null;\r\n        for (const parser of parsers) {\r\n            const x = parser(input);\r\n            if (x.succeeded) {\r\n                matched.push({next: x.next, tokens: x.tokens});\r\n            } else {\r\n                if (last) {\r\n                    if (x.error) {\r\n                        if (!last.error || last.pos < x.pos) {\r\n                            last = x;\r\n                        }\r\n                    } else if (last.pos < x.pos) {\r\n                        last = x;\r\n                    }\r\n                } else {\r\n                    last = x;\r\n                }\r\n            }\r\n        }\r\n        if (matched.length > 0) {\r\n            const z = matched.reduce((a, b) => a.next.start >= b.next.start ? a : b);\r\n            return ({succeeded: true, next: z.next, tokens: z.tokens});\r\n        }\r\n\r\n        return (last ? last : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: makeMessage(input, 'operator \"or\"'),\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function transform<T extends ArrayLike<T[number]>, C, R>(\r\n        trans?: ((tokens: R[], input: ParserInputWithCtx<T, C>) => R[]), ctxTrans?: ((context: C) => C)\r\n        ): (...parsers: Array<ParserFnWithCtx<T, C, R>>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return ((...parsers) => {\r\n        return (input => {\r\n            let next = input;\r\n            const tokens: R[] = [];\r\n\r\n            for (const parser of parsers) {\r\n                const x = parser(next);\r\n                if (! x.succeeded) {\r\n                    return x;\r\n                }\r\n                next = x.next;\r\n                tokens.push(...x.tokens);\r\n            }\r\n\r\n            // TODO: report errors while transforming\r\n            const t2 = trans ? trans(tokens, input) : tokens;\r\n            return ({\r\n                succeeded: true,\r\n                next: ctxTrans ? {\r\n                    src: next.src,\r\n                    start: next.start,\r\n                    end: next.end,\r\n                    context: ctxTrans(next.context),\r\n                } : next,\r\n                tokens: t2,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function combine<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return transform<T, C, R>()(...parsers);\r\n}\r\n\r\n\r\nexport function lookAhead<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        let next = input;\r\n\r\n        for (const parser of parsers) {\r\n            const x = parser(next);\r\n            if (! x.succeeded) {\r\n                return x;\r\n            }\r\n            next = x.next;\r\n        }\r\n\r\n        return ({\r\n            succeeded: true,\r\n            next: input,\r\n            tokens: [],\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function lookBehind<T extends ArrayLike<T[number]>, C, R>(\r\n        n: number, helper?: () => R): (\r\n            ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n            ) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return ((...parsers) => {\r\n        return (input => {\r\n            if (input.start - n < 0) {\r\n                return ({\r\n                    succeeded: false,\r\n                    error: false,\r\n                    src: input.src,\r\n                    pos: input.start,\r\n                    message: makeMessage(input, 'lookBehind: src is too short'),\r\n                });\r\n            }\r\n            let next = {\r\n                src: input.src,\r\n                start: input.start - n,\r\n                end: input.end,\r\n                context: input.context,\r\n            };\r\n\r\n            for (const parser of parsers) {\r\n                const x = parser(next);\r\n                if (! x.succeeded) {\r\n                    return x;\r\n                }\r\n                next = x.next;\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: input,\r\n                tokens: helper ? [helper()] : [],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ApplyProductionRulesArg<T extends ArrayLike<T[number]>, C, R> = {\r\n    rules: Array<ParserFnWithCtx<R[], C, R> |\r\n           {parser: ParserFnWithCtx<R[], C, R>, rtol: boolean}>,\r\n    maxApply?: number,\r\n    check: ParserFnWithCtx<R[], C, R>,\r\n};\r\n\r\nexport function applyProductionRules<T extends ArrayLike<T[number]>, C, R>(\r\n        args: ApplyProductionRulesArg<T, C, R>\r\n        ): (lexer: ParserFnWithCtx<T, C, R>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return (lexer => {\r\n        return (lexerInput => {\r\n            const lexResult = lexer(lexerInput);\r\n            if (! lexResult.succeeded) {\r\n                return lexResult;\r\n            }\r\n\r\n            const input = parserInput<R[], C>(lexResult.tokens, lexerInput.context);\r\n            let next = input;\r\n            let completed = false;\r\n\r\n            if (args.check(next).succeeded) {\r\n                return ({\r\n                    succeeded: true,\r\n                    next: lexResult.next,\r\n                    tokens: lexResult.tokens,\r\n                });\r\n            }\r\n\r\n            completed: for (let i = 0;\r\n                    args.maxApply !== void 0 ? i < args.maxApply : true; i++) {\r\n                let matched = false;\r\n\r\n                rules: for (const rule of args.rules) {\r\n                    const {parser, rtol} =\r\n                        typeof rule === 'function' ?\r\n                            {parser: rule, rtol: false} : rule;\r\n                    const len = next.src.length;\r\n\r\n                    for (let s = 0; s <= len; s++) {\r\n                        const x = parser({\r\n                            src: next.src,\r\n                            start: rtol ? len - s : s,\r\n                            end: next.src.length,\r\n                            context: next.context,\r\n                        });\r\n                        if (x.succeeded) {\r\n                            matched = true;\r\n                            const nextSrc = next.src.slice(0, rtol ? len - s : s);\r\n                            nextSrc.push(...x.tokens);\r\n                            nextSrc.push(...next.src.slice(x.next.start));\r\n                            next = {\r\n                                src: nextSrc,\r\n                                start: 0,\r\n                                end: nextSrc.length,\r\n                                context: x.next.context,\r\n                            };\r\n                            if (args.check(next).succeeded) {\r\n                                completed = true;\r\n                                break completed;\r\n                            }\r\n                            break rules;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (! matched) {\r\n                    break;\r\n                }\r\n            }\r\n            if (! completed) {\r\n                if (! args.check(next).succeeded) {\r\n                    throw new ParseError(makeErrorMessage(input));\r\n                }\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: lexResult.next,\r\n                tokens: next.src,\r\n            });\r\n        });\r\n    });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { ParserFnWithCtx } from './types';\r\nimport { makeMessage,\r\n         zeroWidth,\r\n         zeroWidthError,\r\n         beginning,\r\n         end,\r\n         quantify,\r\n         first,\r\n         or,\r\n         transform,\r\n         lookAhead,\r\n         lookBehind,\r\n         ApplyProductionRulesArg,\r\n         applyProductionRules } from './parser';\r\n\r\n\r\n\r\nexport function objSequence<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (needle: T) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return (needle => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            let matched = true;\r\n\r\n            if (len >= needle.length) {\r\n                for (let i = 0; i < needle.length; i++) {\r\n                    if (! comparator(input.src[input.start + i], needle[i])) {\r\n                        matched = false;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                matched = false;\r\n            }\r\n\r\n            return (matched ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needle.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needle)],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: makeMessage(input, `operator \"objSequence(${needle})\"`),\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClass<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (...needles: Array<T[number]>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            let index = -1;\r\n\r\n            const succeeded = len > 0 ? needles.some((needle, idx) => {\r\n                if (comparator(input.src[input.start], needle)) {\r\n                    index = idx;\r\n                    return true;\r\n                }\r\n            }) : false;\r\n\r\n            return (succeeded ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needles[index])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: makeMessage(input, `operator \"objClass(${needles.join(',')})\"`),\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClassNot<T extends ArrayLike<T[number]>, C, R>(\r\n    helper: (token: T[number]) => R,\r\n    comparator: (a: T[number], b: T[number]) => boolean,\r\n    ): (...needles: Array<T[number]>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n\r\n            if (len > 0) {\r\n                for (const needle of needles) {\r\n                    let matched = true;\r\n\r\n                    if (! comparator(input.src[input.start], needle)) {\r\n                        matched = false;\r\n                        break;\r\n                    }\r\n\r\n                    if (matched) {\r\n                        return ({\r\n                            succeeded: false,\r\n                            error: false,\r\n                            src: input.src,\r\n                            pos: input.start,\r\n                            message: makeMessage(input, `operator \"objClassNot(${needles.join(',')})\"`),\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(input.src[input.start])],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClassByNeedleFn<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (needle: (src: T[number]) => boolean) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return (needle => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            const matched = len > 0 ? needle(input.src[input.start]) : false;\r\n\r\n            return (matched ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(input.src[input.start])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: makeMessage(input, `operator \"objClassByNeedleFn\"`),\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function getObjectParsers<T extends ArrayLike<T[number]>, C, R>(\r\n        params: {\r\n            rawToToken: (rawToken: T[number]) => R,\r\n            concatTokens: (tokens: R[]) => R[],\r\n            comparator: (a: T[number], b: T[number]) => boolean,\r\n        }) {\r\n\r\n    const clsFn = objClassByNeedleFn<T, C, R>(params.rawToToken, params.comparator);\r\n\r\n    const isAny = clsFn(src => true);\r\n\r\n    // TODO: reduce unneccessary call for adding types.\r\n    return ({\r\n        seq: objSequence<T, C, R>(params.rawToToken, params.comparator),\r\n        cls: objClass<T, C, R>(params.rawToToken, params.comparator),\r\n        notCls: objClassNot<T, C, R>(params.rawToToken, params.comparator),\r\n        clsFn,\r\n        classes: {\r\n            any: isAny,\r\n        },\r\n        cat: transform<T, C, R>(params.concatTokens),\r\n        once: quantify<T, C, R>(1, 1),\r\n        repeat: quantify<T, C, R>(),\r\n        qty: (min?: number, max?: number) => quantify<T, C, R>(min, max), // TODO:\r\n        zeroWidth: (helper?: () => R) => zeroWidth<T, C, R>(helper),      // TODO:\r\n        err: (message: string) => zeroWidthError<T, C, R>(message),       // TODO:\r\n        beginning: (helper?: () => R) => beginning<T, C, R>(helper),      // TODO:\r\n        end: (helper?: () => R) => end<T, C, R>(helper),                  // TODO:\r\n        first: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => first<T, C, R>(...parsers), // TODO:\r\n        or: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => or<T, C, R>(...parsers),       // TODO:\r\n        combine: transform<T, C, R>(),\r\n        erase: transform<T, C, R>(tokens => []),\r\n        trans: (fn: (tokens: R[]) => R[]) => transform<T, C, R>(fn),                            // TODO:\r\n        ahead: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => lookAhead<T, C, R>(...parsers), // TODO:\r\n        behind: (n: number, helper?: () => R) => lookBehind<T, C, R>(n, helper),\r\n        rules: (args: ApplyProductionRulesArg<T, C, R>) => applyProductionRules<T, C, R>(args), // TODO:\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         FatalError,\r\n         CapturedScopes,\r\n         SxMacroInfo }           from '../../types';\r\nimport { globalObj }             from '../../consts';\r\nimport { isSymbol,\r\n         quote }                 from '../../ast';\r\nimport { evaluate,\r\n         resolveValueSymbolScope,\r\n         collectCapturedVariables,\r\n         getCapturedScopes,\r\n         getScope,\r\n         getGlobalScope,\r\n         installScope,\r\n         uninstallScope,\r\n         optimizeTailCall,\r\n         toNumber }              from '../../evaluate';\r\nimport { compileLambda }         from '../../compile';\r\nimport { checkParamsLength,\r\n         checkUnsafeVarNamesEx } from '../../errors';\r\n\r\n\r\n\r\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($car '(first second ... last))\r\n    //  -> S expr  : first\r\n    checkParamsLength('$car', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car[0];\r\n};\r\nexport const $$car = $car(null as any, null as any);\r\n\r\n\r\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cdr '(first second ... last))\r\n    //  -> S expr  : (second ... last)\r\n    checkParamsLength('$cdr', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car.slice(1);\r\n};\r\nexport const $$cdr = $cdr(null as any, null as any);\r\n\r\n\r\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\r\n    //  -> S expr  : (arg1 arg2-item1 ...)\r\n    // S expression: ($cons arg1 nilOrNull ... argN)\r\n    //  -> S expr  : (arg1)\r\n    // S expression: ($cons arg1 arg2 ... argN)\r\n    //  -> S expr  : arg1.arg2\r\n    checkParamsLength('$cons', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (car === null) {\r\n        car = [];\r\n    }\r\n    if (cdr === null) {\r\n        cdr = [];\r\n    }\r\n\r\n    if (Array.isArray(cdr)) {\r\n        cdr = cdr.slice(0);\r\n        cdr.unshift(car);\r\n        return cdr;\r\n    } else {\r\n        return {car, cdr};\r\n    }\r\n};\r\nexport const $$cons = $cons(null as any, null as any);\r\n\r\n\r\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first first second ... last)\r\n    //  -> S expr  : first\r\n    // S expression: ($first)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(0, 1);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$first = $first(null as any, null as any);\r\n\r\n\r\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($second first second ... last)\r\n    //  -> S expr  : second\r\n    // S expression: ($second first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1, 2);\r\n    return (cdr.length === 1) ? cdr[0] : null;\r\n};\r\nexport const $$second = $second(null as any, null as any);\r\n\r\n\r\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($last first second ... last)\r\n    //  -> S expr  : last\r\n    // S expression: ($last)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(args.length - 1, args.length);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$last = $last(null as any, null as any);\r\n\r\n\r\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($rest first second ... last)\r\n    //  -> S expr  : (second ... last)\r\n    // S expression: ($rest first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1);\r\n    return (0 < cdr.length) ? cdr : null;\r\n};\r\nexport const $$rest = $rest(null as any, null as any);\r\n\r\n\r\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first-and-second first second ... last)\r\n    //  -> S expr  : first.second\r\n    let car: any = args.slice(0, 1);\r\n    car = (car.length === 1) ? car[0] : null;\r\n\r\n    let cdr: any = args.slice(1, 2);\r\n    cdr = (cdr.length === 1) ? cdr[0] : null;\r\n\r\n    return {car, cdr};\r\n};\r\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\r\n\r\n\r\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($atom arg1 ...)\r\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\r\n    //  -> (if arg1 is nil or anything else) S expr  : true\r\n    checkParamsLength('$atom', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n\r\n    if (car === null || car === void 0) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(car)) {\r\n        if (car.length === 0) return  true;\r\n        else                  return false;\r\n    }\r\n\r\n    switch (typeof car) {\r\n    case 'number': case 'string': case 'function': case 'boolean':\r\n        return true;\r\n    case 'object':\r\n        return isSymbol(car) ? true : false;\r\n    }\r\n    return false;\r\n};\r\nexport const $$atom = $atom(null as any, null as any);\r\n\r\n\r\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($eq arg1 arg2)\r\n    //  -> (if arg1 === arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$eq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car === cdr;\r\n};\r\nexport const $$eq = $eq(null as any, null as any);\r\n\r\n\r\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not-eq arg1 arg2)\r\n    //  -> (if arg1 !== arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$notEq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car !== cdr;\r\n};\r\nexport const $$notEq = $notEq(null as any, null as any);\r\n\r\n\r\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\r\n    // S expression: ($list arg1 ... argN)\r\n    //  -> S expr  : (arg1 ... argN)\r\n    args.slice(0);\r\nexport const $$list = $list(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\r\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__scope', args, 3);\r\n\r\n    const isBlockLocal = $$first(...args);\r\n    const returnMultiple = $$second(...args);\r\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\r\n    let r: SxToken = null;\r\n\r\n    const scope: any = {};\r\n    if (Array.isArray(car)) {\r\n        for (const x of car) {\r\n            if (Array.isArray(x)) {\r\n                const kv = $$firstAndSecond(...x);\r\n                const kvSym = isSymbol(kv.car);\r\n                const kvName = kvSym ? kvSym.symbol : String(kv.car);\r\n                checkUnsafeVarNamesEx('$__scope', scope, kvName);\r\n                scope[kvName] = evaluate(state, kv.cdr);\r\n            } else {\r\n                const xSym = isSymbol(x);\r\n                const xName = xSym ? xSym.symbol : String(x);\r\n                checkUnsafeVarNamesEx('$__scope', scope, xName);\r\n                scope[xName] = null;\r\n            }\r\n        }\r\n    }\r\n    installScope(state, scope, isBlockLocal, capturedScopes);\r\n\r\n    try {\r\n        if (4 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(3)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(3)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__globalScope', args, 1);\r\n\r\n    const returnMultiple = $$first(...args);\r\n    const cdr = $$second(...args);\r\n    let r: SxToken = null;\r\n\r\n    installScope(state, getGlobalScope(state).scope, true);\r\n    try {\r\n        if (2 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(1)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(1)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : exprN\r\n    checkParamsLength('$__capture', args, 1);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let r: SxToken = null;\r\n\r\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\r\n    installScope(state, {}, true, capturedScopes);\r\n    try {\r\n        for (const x of args.slice(1)) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    let fnBody = args.slice(1);\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = function(this: any, ...actualArgs: any[]) {\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] func call: Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        // TODO: add type checking\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            [state.config.reservedNames.thiz, this === globalObj || this === void 0 ? null : quote(state, this)],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(1);\r\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $__lambda(state, name)(...args.slice(1));\r\n\r\n    checkUnsafeVarNamesEx('$__defun', state.funcMap, car.symbol);\r\n    // TODO: overloading\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn,\r\n        // formalArgs: ,\r\n        // lastIsSpread: ,\r\n        // next: ,\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\r\n\r\n    checkUnsafeVarNamesEx('$$__defun', state.funcMap, car.symbol);\r\n    // TODO: overloading\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn,\r\n        // formalArgs: ,\r\n        // lastIsSpread: ,\r\n        // next: ,\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($refun 'name)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__refun', args, 1, 1);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n\r\n    checkUnsafeVarNamesEx('$__refun', state.funcMap, car.symbol);\r\n    const info = state.funcMap.get(car.symbol);\r\n    if (!info) {\r\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\r\n    }\r\n    return info.fn(state, car.symbol);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defmacro = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defmacro', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const formalArgs: SxSymbol[] = args[1];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__defmacro: Invalid argument(s): args[1] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(2);\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (fArgs: SxSymbol[]) => (...aArgs: any[]) => {\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(fArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === fArgs.length - 1) ?\r\n                        aArgs.slice(index) : aArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n\r\n    const m: SxMacroInfo = {\r\n        name: car.symbol,\r\n        fn: (st: SxParserState, nm: string, fArgs: SxSymbol[]) => (list: SxToken[]) => fn(fArgs)(...(list.slice(1))),\r\n        formalArgs,\r\n        lastIsSpread,\r\n    };\r\n\r\n    checkUnsafeVarNamesEx('$__defmacro', state.macroMap, car.symbol);\r\n\r\n    if (state.macroMap.has(car.symbol)) {\r\n        let curr = state.macroMap.get(car.symbol);\r\n        (curr as SxMacroInfo).next = m;\r\n        if (curr && curr.formalArgs) {\r\n            if (curr.formalArgs.length < formalArgs.length) {\r\n                state.macroMap.set(car.symbol, m);\r\n                m.next = curr;\r\n            } else {\r\n                let prev = curr;\r\n                curr = curr.next;\r\n                while (curr) {\r\n                    if (curr.formalArgs) {\r\n                        if (curr.formalArgs.length < formalArgs.length) {\r\n                            prev.next = m;\r\n                            m.next = curr;\r\n                            break;\r\n                        }\r\n                    }\r\n                    prev = curr;\r\n                    curr = curr.next;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        state.macroMap.set(car.symbol, m);\r\n    }\r\n    return fn;\r\n};\r\n\r\n\r\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($apply fn arg1 ... argN)\r\n    //  -> S expr  : fn'\r\n    checkParamsLength('$apply', args, 1);\r\n\r\n    const car: () => any = $$first(...args);\r\n    if (typeof car !== 'function') {\r\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\r\n    }\r\n\r\n    return (\r\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\r\n    );\r\n};\r\nexport const $$apply = $apply(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__call', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const sym = isSymbol(cdr);\r\n    const xName = sym ? sym.symbol : evaluate(state, cdr) as any;\r\n\r\n    checkUnsafeVarNamesEx('$__call', car, xName);\r\n\r\n    return Function.prototype.apply.call(\r\n        car[xName],\r\n        car,\r\n        args.slice(2)\r\n    );\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__try 'expr 'catch-expr)\r\n    //  ->                               S expr  : expr\r\n    //  -> (if error is raised in expr)  S expr  : catch-expr\r\n    checkParamsLength('$__try', args, 1, 2);\r\n\r\n    let r: SxToken = [];\r\n    try {\r\n        r = evaluate(state, args[0]);\r\n    } catch (e) {\r\n        if (e instanceof FatalError) {\r\n            throw e;\r\n        }\r\n        if (1 < args.length) {\r\n            r = $__scope(state, name)(true, false, [\r\n                ['$error', quote(state, e)],\r\n                ['$parent', quote(state, getScope(state))],\r\n            ], args[1]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($raise 'expr)\r\n    //  -> S expr  : -\r\n    const car = $$first(...args);\r\n    throw car;\r\n};\r\nexport const $$raise = $raise(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if condition 't-expr 'f-expr)\r\n    //  -> (if condition is true ) S expr  : t-expr\r\n    //  -> (if condition is false) S expr  : f-expr\r\n    checkParamsLength('$__if', args, 2, 3);\r\n\r\n    const car = $$first(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        r = evaluate(state, args[1]);\r\n    } else {\r\n        if (2 < args.length) {\r\n            r = evaluate(state, args[2]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if-null condition 'null-expr)\r\n    //  -> (if condition is not null ) S expr  : condition\r\n    //  -> (if condition is null)      S expr  : null-expr\r\n    checkParamsLength('$__ifNull', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if (! $$ambiguousEq(car, null)) {\r\n        r = car;\r\n    } else {\r\n        r = evaluate(state, cdr);\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n    //  -> (if (eval condI) is true ) S expr  : exprI\r\n    //  -> (if no matched)            S expr  : null\r\n    checkParamsLength('$__cond', args, 1);\r\n\r\n    for (let i = 0; i < args.length - 1; i += 2) {\r\n        const c = args[i];\r\n        const x = args[i + 1];\r\n        if ($$boolean(evaluate(state, c))) {\r\n            return evaluate(state, x);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__while', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$boolean(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doWhile', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$boolean(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__until', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$not(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doUntil', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$not(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n    //  -> (if n > 0) S expr  : exprN\r\n    //  -> (else)     S expr  : null\r\n    checkParamsLength('$__repeat', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n\r\n    checkUnsafeVarNamesEx('$__repeat', {}, sym.symbol); // NOTE: pass dummy target object.\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const n = toNumber($$second(...args));\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (let i = 0; i < n; i++) {\r\n        scope[sym.symbol] = i;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n    //  -> (if list.length > 0) S expr  : exprN\r\n    //  -> (else)               S expr  : null\r\n    checkParamsLength('$__for', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n\r\n    checkUnsafeVarNamesEx('$__for', {}, sym.symbol); // NOTE: pass dummy target object.\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const list = $$second(...args);\r\n    if (! Array.isArray(list)) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\r\n    }\r\n\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (const q of list) {\r\n        scope[sym.symbol] = q;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get v fn1 ... fnN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$pipe', args, 1);\r\n\r\n    let v = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n        v = args[i](v);\r\n    }\r\n    return v;\r\n};\r\nexport const $$pipe = $pipe(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__get', args, 1);\r\n\r\n    let v: any = null;\r\n    let sym = isSymbol(args[0]);\r\n\r\n    if (!sym) {\r\n        switch (typeof args[0]) {\r\n        case 'string': case 'number':\r\n            sym = {symbol: String(args[0])};\r\n            break;\r\n        default:\r\n            v = evaluate(state, args[0]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (sym) {\r\n        const scope = resolveValueSymbolScope(state, sym, true);\r\n        if (! scope) {\r\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\r\n        }\r\n        v = scope[sym.symbol];\r\n    }\r\n\r\n    for (let i = 1; i < args.length; i++) {\r\n        let q: any = args[i];\r\n        let inprog = true;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                v = q(v);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = v.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                checkUnsafeVarNamesEx('$__get', v, q);\r\n                v = v[q];\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n            }\r\n        }\r\n    }\r\n    return v;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let 'nameStrOrSymbol expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__let', args, 2, 2);\r\n\r\n    let sym = isSymbol($$first(...args));\r\n\r\n    if (! sym) {\r\n        if (typeof args[0] === 'string') {\r\n            sym = {symbol: args[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    checkUnsafeVarNamesEx('$__let', {}, sym.symbol); // NOTE: pass dummy target object.\r\n\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n    scope[sym.symbol] = args[1];\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__set', args, 2, 2);\r\n\r\n    let path: any = [];\r\n\r\n    if (Array.isArray(args[0])) {\r\n        path = args[0];\r\n    } else {\r\n        path.push(args[0]);\r\n    }\r\n\r\n    let sym = isSymbol(path[0]);\r\n\r\n    if (! sym) {\r\n        if (typeof path[0] === 'string') {\r\n            checkUnsafeVarNamesEx('$__set', {}, path[0]); // NOTE: pass dummy target object.\r\n            sym = {symbol: path[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    let scope = resolveValueSymbolScope(state, sym, true);\r\n    if (scope === null) {\r\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\r\n    }\r\n\r\n    let subst = false;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        let q: any = path[i];\r\n        let inprog = true;\r\n        const last = i === path.length - 1;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                scope = q(scope);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = scope.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                checkUnsafeVarNamesEx('$__set', scope, q);\r\n                if (last) {\r\n                    scope[q] = args[1];\r\n                    subst = true;\r\n                } else {\r\n                    scope = scope[q];\r\n                }\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (! subst) {\r\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\r\n    }\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($boolean any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$boolean', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car) && car.length === 0) return false;\r\n    else return Boolean(car);\r\n};\r\nexport const $$boolean = $boolean(null as any, null as any);\r\n\r\n\r\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$not', args, 1, 1);\r\n\r\n    return ! $$boolean(...args);\r\n};\r\nexport const $$not = $not(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__and 'expr1 ... 'exprN)\r\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n    //  -> (else)                                                     S expr  : expr-i (false left most)\r\n    checkParamsLength('$__and', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if (! $$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__and = $__and(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__or 'expr1 ... 'exprN)\r\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n    //  -> (else)                                                  S expr  : expr-i (false right most)\r\n    checkParamsLength('$__or', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if ($$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__or = $__or(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (== a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ambiguousEq', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car) && car.length === 0) car = null;\r\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\r\n    if (car === void 0) car = null;\r\n    if (cdr === void 0) cdr = null;\r\n    // tslint:disable-next-line:triple-equals\r\n    return car == cdr;\r\n};\r\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (!= a b)\r\n    //  -> S expr  : boolean\r\n    return ! $$ambiguousEq(...args);\r\n};\r\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\r\n\r\n\r\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (< a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$lt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) < toNumber(cdr);\r\n};\r\nexport const $$lt = $lt(null as any, null as any);\r\n\r\n\r\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$le', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) <= toNumber(cdr);\r\n};\r\nexport const $$le = $le(null as any, null as any);\r\n\r\n\r\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (> a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$gt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) > toNumber(cdr);\r\n};\r\nexport const $$gt = $gt(null as any, null as any);\r\n\r\n\r\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ge', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) >= toNumber(cdr);\r\n};\r\nexport const $$ge = $ge(null as any, null as any);\r\n\r\n\r\nexport const $typeof = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($typeof x)\r\n    //  -> S expr  : 'null' | 'bigint' | 'boolean' | 'function' | 'number' | 'string' | 'undefined' |\r\n    //               'js-symbol' | 'list' | 'object'\r\n    checkParamsLength('$typeof', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (car === null) {\r\n        return 'null';\r\n    }\r\n    const tyName = typeof car;\r\n    switch (tyName) {\r\n    case 'object':\r\n        if (Array.isArray(car)) {\r\n            return 'list';\r\n        } else {\r\n            return 'object';\r\n        }\r\n    case 'symbol':\r\n        return 'js-symbol';\r\n    default:\r\n        return tyName;\r\n    }\r\n};\r\nexport const $$typeof = $typeof(null as any, null as any);\r\n\r\n\r\nexport const $symbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($symbol)\r\n    // S expression: ($symbol name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$symbol', args, 1, 1);\r\n\r\n    if (typeof args[0] === 'string') {\r\n        return {symbol: args[0]};\r\n    } else {\r\n        throw new Error(`[SX] $symbol: Invalid argument(s): item(s) of args[0] is not string.`);\r\n    }\r\n};\r\nexport const $$symbol = $symbol(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__gensym = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__gensym)\r\n    // S expression: ($__gensym name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$__gensym', args, 0, 1);\r\n\r\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\r\n    if (args.length === 1) {\r\n        const a = isSymbol(args[0]);\r\n        if (a) {\r\n            $__let(state, '')(a, tempVarSym);\r\n        } else if (typeof args[0] === 'string') {\r\n            $__let(state, '')({symbol: args[0]}, tempVarSym);\r\n        } else {\r\n            throw new Error(`[SX] $__gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n        }\r\n    }\r\n    return tempVarSym;\r\n};\r\n\r\n\r\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-symbol x)\r\n    // S expression: ($is-symbol x name)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isSymbol', args, 1, 2);\r\n\r\n    if (args.length === 1) {\r\n        return (isSymbol(args[0]) ? true : false);\r\n    } else {\r\n        if (typeof args[1] === 'string') {\r\n            return (isSymbol(args[0], args[1]) ? true : false);\r\n        } else {\r\n            throw new Error(`[SX] $isSymbol: Invalid argument(s): item(s) of args[1] is not string.`);\r\n        }\r\n    }\r\n};\r\nexport const $$isSymbol = $isSymbol(null as any, null as any);\r\n\r\n\r\nexport const $isNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-null x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNull', args, 1, 1);\r\n\r\n    return $$first(...args) === null;\r\n};\r\nexport const $$isNull = $isNull(null as any, null as any);\r\n\r\n\r\nexport const $isNil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-nil x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNil', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    return Array.isArray(car) && car.length === 0;\r\n};\r\nexport const $$isNil = $isNil(null as any, null as any);\r\n\r\n\r\nexport const $isUndefined = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-undefined x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isUndefined', args, 1, 1);\r\n\r\n    return $$first(...args) === void 0;\r\n};\r\nexport const $$isUndefined = $isUndefined(null as any, null as any);\r\n\r\n\r\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-list x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isList', args, 1, 1);\r\n\r\n    return Array.isArray($$first(...args));\r\n};\r\nexport const $$isList = $isList(null as any, null as any);\r\n\r\n\r\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-string x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isString', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'string';\r\n};\r\nexport const $$isString = $isString(null as any, null as any);\r\n\r\n\r\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-number x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNumber', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'number';\r\n};\r\nexport const $$isNumber = $isNumber(null as any, null as any);\r\n\r\n\r\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-NaN x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNaN', args, 1, 1);\r\n\r\n    return Number.isNaN($$first(...args));\r\n};\r\nexport const $$isNaN = $isNaN(null as any, null as any);\r\n\r\n\r\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-finate x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isFinite', args, 1, 1);\r\n\r\n    return Number.isFinite($$first(...args));\r\n};\r\nexport const $$isFinite = $isFinite(null as any, null as any);\r\n\r\n\r\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-integer x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isInteger', args, 1, 1);\r\n\r\n    return Number.isInteger($$first(...args));\r\n};\r\nexport const $$isInteger = $isInteger(null as any, null as any);\r\n\r\n\r\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-string x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$toString', args, 1, 1);\r\n\r\n    return String($$first(...args));\r\n};\r\nexport const $$toString = $toString(null as any, null as any);\r\n\r\n\r\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-number x)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$toNumber', args, 1, 1);\r\n\r\n    return toNumber($$first(...args));\r\n};\r\nexport const $$toNumber = $toNumber(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__# '(name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n\r\n            checkUnsafeVarNamesEx('$__#', r, keyName);\r\n            if (x.length === 1) {\r\n                // S expression: (# ... (keyName) ...)\r\n                //  -> JSON    : {..., keyName: true, ...}\r\n                r[keyName] = true;\r\n            } else if (x.length === 2) {\r\n                // S expression: (# ... (keyName value) ...)\r\n                //  -> JSON    : {..., keyName: value, ...}\r\n                r[keyName] = evaluate(state, x[1]);\r\n            } else {\r\n                // S expression: (# ... (keyName value1 value2 ...) ...)\r\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                r[keyName] =\r\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                    .concat(x.slice(1)));\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nconst assignBlacklist = [\r\n    globalObj,\r\n    (Object as any).__proto__,\r\n    ({} as any).__proto__,\r\n    (Function as any).__proto__,\r\n];\r\n\r\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($object-assign x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$objectAssign', args, 1);\r\n\r\n    if (assignBlacklist.includes(args[0])) {\r\n        throw new Error(`[SX] $objectAssign: Invalid argument: args[0] is blacklisted object.`);\r\n    }\r\n    return Object.assign(args[0], ...(args.slice(1)));\r\n};\r\nexport const $$objectAssign = $objectAssign(null as any, null as any);\r\n\r\n\r\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-stringify x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$jsonStringify', args, 1, 1);\r\n\r\n    return JSON.stringify($$first(...args));\r\n};\r\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\r\n\r\n\r\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-parse x)\r\n    //  -> S expr  : object\r\n    checkParamsLength('$jsonParse', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    return JSON.parse(s);\r\n};\r\nexport const $$jsonParse = $jsonParse(null as any, null as any);\r\n\r\n\r\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($now)\r\n    //  -> S expr  : number\r\n    return Date.now();\r\n};\r\nexport const $$now = $now(null as any, null as any);\r\n\r\n\r\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-from-iso str)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\r\n\r\n\r\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime year month1-12 day)\r\n    // S expression: ($datetime year month1-12 day hours)\r\n    // S expression: ($datetime year month1-12 day hours minutes)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetime', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n        s += 'Z';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetime = $datetime(null as any, null as any);\r\n\r\n\r\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-lc year month1-12 day)\r\n    // S expression: ($datetime-lc year month1-12 day hours)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeLc', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n    } else {\r\n        s += 'T00:00:00.000';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-iso-string number)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\r\n    }\r\n    return dt.toISOString();\r\n};\r\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getUTCFullYear(),\r\n        dt.getUTCMonth() + 1,\r\n        dt.getUTCDate(),\r\n        dt.getUTCHours(),\r\n        dt.getUTCMinutes(),\r\n        dt.getUTCSeconds(),\r\n        dt.getUTCMilliseconds(),\r\n        0, // TZ\r\n        dt.getUTCDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components-lc number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getFullYear(),\r\n        dt.getMonth() + 1,\r\n        dt.getDate(),\r\n        dt.getHours(),\r\n        dt.getMinutes(),\r\n        dt.getSeconds(),\r\n        dt.getMilliseconds(),\r\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\r\n                                 // If your time zone is UTC+2:00, +120 will be returned.\r\n        dt.getDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\r\n\r\n\r\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($match pattern-str string)\r\n    // S expression: ($match pattern-str options-str string)\r\n    //  -> S expr  : array\r\n    checkParamsLength('$match', args, 2, 3);\r\n\r\n    if (! state.config.enableRegExpMatchOperators) {\r\n        throw new Error(`[SX] $match: Operator is disabled by configuration.`);\r\n    }\r\n\r\n    if (args.length === 2) {\r\n        const m = new RegExp(args[0]);\r\n        return m.exec(args[1]);\r\n    } else {\r\n        const m = new RegExp(args[0], args[1]);\r\n        return m.exec(args[2]);\r\n    }\r\n};\r\nexport const $$match = $match(null as any, null as any);\r\n\r\n\r\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-log expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.log(...args);\r\n    return null;\r\n};\r\nexport const $$consoleLog = $consoleLog(null as any, null as any);\r\n\r\n\r\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-error expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.error(...args);\r\n    return null;\r\n};\r\nexport const $$consoleError = $consoleError(null as any, null as any);\r\n\r\n\r\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-trace expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.trace(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\r\n\r\n\r\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time)\r\n    // S expression: ($console-time label)\r\n    //  -> S expr  : null\r\n    console.time(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTime = $consoleTime(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-end)\r\n    // S expression: ($console-time-end label)\r\n    //  -> S expr  : null\r\n    console.timeEnd(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-log label)\r\n    // S expression: ($console-time-log label value ... value)\r\n    //  -> S expr  : null\r\n    (console as any).timeLog(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './core.fn';\r\n\r\n\r\n\r\nexport const operators: SxFuncInfo[] = [{\r\n    name: '$car',\r\n    fn: ops.$car,\r\n}, {\r\n    name: '$cdr',\r\n    fn: ops.$cdr,\r\n}, {\r\n    name: '$cons',\r\n    fn: ops.$cons,\r\n}, {\r\n    name: '$first',\r\n    fn: ops.$first,\r\n}, {\r\n    name: '$second',\r\n    fn: ops.$second,\r\n}, {\r\n    name: '$last',\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$progn', // alias of $last\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$rest',\r\n    fn: ops.$rest,\r\n}, {\r\n    name: '$first-and-second',\r\n    fn: ops.$firstAndSecond,\r\n}, {\r\n    name: '$atom',\r\n    fn: ops.$atom,\r\n}, {\r\n    name: '$eq',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '===',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '$not-eq',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '!==',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '$list',\r\n    fn: ops.$list,\r\n}, {\r\n    name: '$__scope',\r\n    fn: ops.$__scope,\r\n}, {\r\n    name: '$__global',\r\n    fn: ops.$__globalScope,\r\n}, {\r\n    name: '$__capture',\r\n    fn: ops.$__capture,\r\n}, {\r\n    name: '$__lambda',\r\n    fn: ops.$__lambda,\r\n}, {\r\n    name: '$__defun',\r\n    fn: ops.$__defun,\r\n}, {\r\n    name: '$__refun',\r\n    fn: ops.$__refun,\r\n}, {\r\n    name: '$__defmacro',\r\n    fn: ops.$__defmacro,\r\n}, {\r\n    name: '$apply',\r\n    fn: ops.$apply,\r\n}, {\r\n    name: '$__call',\r\n    fn: ops.$__call,\r\n}, {\r\n    name: '$__try',\r\n    fn: ops.$__try,\r\n}, {\r\n    name: '$raise',\r\n    fn: ops.$raise,\r\n}, {\r\n    name: '$__if',\r\n    fn: ops.$__if,\r\n}, {\r\n    name: '$__if-null',\r\n    fn: ops.$__ifNull,\r\n}, {\r\n    name: '$__cond',\r\n    fn: ops.$__cond,\r\n}, {\r\n    name: '$__while',\r\n    fn: ops.$__while,\r\n}, {\r\n    name: '$__do-while',\r\n    fn: ops.$__doWhile,\r\n}, {\r\n    name: '$__until',\r\n    fn: ops.$__until,\r\n}, {\r\n    name: '$__do-until',\r\n    fn: ops.$__doUntil,\r\n}, {\r\n    name: '$__repeat',\r\n    fn: ops.$__repeat,\r\n}, {\r\n    name: '$__for',\r\n    fn: ops.$__for,\r\n}, {\r\n    name: '$pipe',\r\n    fn: ops.$pipe,\r\n}, {\r\n    name: '$__get',\r\n    fn: ops.$__get,\r\n}, {\r\n    name: '$__let',\r\n    fn: ops.$__let,\r\n}, {\r\n    name: '$__set',\r\n    fn: ops.$__set,\r\n}, {\r\n    name: '$boolean',\r\n    fn: ops.$boolean,\r\n}, {\r\n    name: '$not',\r\n    fn: ops.$not,\r\n}, {\r\n    name: '$__and',\r\n    fn: ops.$__and,\r\n}, {\r\n    name: '$__or',\r\n    fn: ops.$__or,\r\n}, {\r\n    name: '==',\r\n    fn: ops.$ambiguousEq,\r\n}, {\r\n    name: '!=',\r\n    fn: ops.$ambiguousNotEq,\r\n}, {\r\n    name: '<',\r\n    fn: ops.$lt,\r\n}, {\r\n    name: '<=',\r\n    fn: ops.$le,\r\n}, {\r\n    name: '>',\r\n    fn: ops.$gt,\r\n}, {\r\n    name: '>=',\r\n    fn: ops.$ge,\r\n}, {\r\n    name: '$typeof',\r\n    fn: ops.$typeof,\r\n}, {\r\n    name: '$symbol',\r\n    fn: ops.$symbol,\r\n}, {\r\n    name: '$__gensym',\r\n    fn: ops.$__gensym,\r\n}, {\r\n    name: '$is-symbol',\r\n    fn: ops.$isSymbol,\r\n}, {\r\n    name: '$is-null',\r\n    fn: ops.$isNull,\r\n}, {\r\n    name: '$is-nil',\r\n    fn: ops.$isNil,\r\n}, {\r\n    name: '$is-undefined',\r\n    fn: ops.$isUndefined,\r\n}, {\r\n    name: '$is-list',\r\n    fn: ops.$isList,\r\n}, {\r\n    name: '$is-string',\r\n    fn: ops.$isString,\r\n}, {\r\n    name: '$is-number',\r\n    fn: ops.$isNumber,\r\n}, {\r\n    name: '$is-NaN',\r\n    fn: ops.$isNaN,\r\n}, {\r\n    name: '$is-finite',\r\n    fn: ops.$isFinite,\r\n}, {\r\n    name: '$is-integer',\r\n    fn: ops.$isInteger,\r\n}, {\r\n    name: '$to-string',\r\n    fn: ops.$toString,\r\n}, {\r\n    name: '$to-number',\r\n    fn: ops.$toNumber,\r\n}, {\r\n    name: '$__#',\r\n    fn: ops.$__toObject,\r\n}, {\r\n    name: '$object-assign',\r\n    fn: ops.$objectAssign,\r\n}, {\r\n    name: '$json-stringify',\r\n    fn: ops.$jsonStringify,\r\n}, {\r\n    name: '$now',\r\n    fn: ops.$now,\r\n}, {\r\n    name: '$datetime-from-iso',\r\n    fn: ops.$datetimeFromIso,\r\n}, {\r\n    name: '$datetime',\r\n    fn: ops.$datetime,\r\n}, {\r\n    name: '$datetime-lc',\r\n    fn: ops.$datetimeLc,\r\n}, {\r\n    name: '$datetime-to-iso-string',\r\n    fn: ops.$datetimeToIsoString,\r\n}, {\r\n    name: '$datetime-to-components',\r\n    fn: ops.$datetimeToComponents,\r\n}, {\r\n    name: '$datetime-to-components-lc',\r\n    fn: ops.$datetimeToComponentsLc,\r\n}, {\r\n    name: '$json-parse',\r\n    fn: ops.$jsonParse,\r\n}, {\r\n    name: '$match',\r\n    fn: ops.$match,\r\n}, {\r\n    name: '$console-log',\r\n    fn: ops.$consoleLog,\r\n}, {\r\n    name: '$console-error',\r\n    fn: ops.$consoleError,\r\n}, {\r\n    name: '$console-trace',\r\n    fn: ops.$consoleTrace,\r\n}, {\r\n    name: '$console-time',\r\n    fn: ops.$consoleTime,\r\n}, {\r\n    name: '$console-time-end',\r\n    fn: ops.$consoleTimeEnd,\r\n}, {\r\n    name: '$console-time-log',\r\n    fn: ops.$consoleTimeLog,\r\n}];\r\n\r\n\r\nexport const compilationOperators: SxFuncInfo[] = [{\r\n    name: '$$__lambda',\r\n    fn: ops.$comp$__lambda,\r\n}, {\r\n    name: '$$__defun',\r\n    fn: ops.$comp$__defun,\r\n}];\r\n\r\n\r\n// for backword compatibility\r\nexport default ([] as SxFuncInfo[]).concat(operators, compilationOperators);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$scope',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            list[1],\r\n            list[2],\r\n            ...(list.slice(3).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$local',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($local ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$global',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($__global expr1 ... exprN)\r\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\r\n        return [{symbol: '$__global'},\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-let', // alias of $local\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$capture',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__capture'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$refun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($refun name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '<-',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (<- name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defmacro',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defmacro name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defmacro'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$call',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($call thisArg symbol arg1 ... argN)\r\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\r\n        checkParamsLength('$call', list, 3);\r\n\r\n        return [{symbol: '$__call'},\r\n            list[1],\r\n            quote(state, list[2]),\r\n            ...(list.slice(3)),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$try',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($try expr catch-expr)\r\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\r\n        return [{symbol: '$__try'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if cond t-expr f-expr)\r\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\r\n        return [{symbol: '$__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if-null',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if-null cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '??',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (?? cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$cond',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($cond cond1 expr1 ... condN exprN)\r\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        return [{symbol: '$__cond'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($while condition expr1 exprN)\r\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-while condition expr1 exprN)\r\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($until condition expr1 exprN)\r\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-until condition expr1 exprN)\r\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$repeat',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($repeat i of n-times expr1 exprN)\r\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__repeat'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($for x of list expr1 exprN)\r\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__for'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$get',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\r\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        return [{symbol: '$__get'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$let',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$let', list, 3, 3);\r\n\r\n        return [{symbol: '$__let'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-defvar',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$clisp-defvar', list, 3, 3);\r\n\r\n        return [{symbol: '$global'},\r\n            [{symbol: '$__let'},\r\n                quote(state, list[1]),\r\n                list[2]\r\n            ],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\r\n        checkParamsLength('$set', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-setq', // alias of $set\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-setq symbol expr)\r\n        //  -> S expr  : ($__set 'symbol expr)\r\n        checkParamsLength('$clisp-setq', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$and',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($and expr1 ... exprN)\r\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\r\n        return [{symbol: '$__and'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$or',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($or expr1 ... exprN)\r\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\r\n        return [{symbol: '$__or'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$gensym',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($gensym)\r\n        // S expression: ($gensym name)\r\n        //  -> S expr  : ($__gensym 'name)\r\n        return [\r\n            {symbol: '$__gensym'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '#',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (# (name value...)...)\r\n        //  -> S expr  : ($__# '(name value...)...)\r\n        return [\r\n            {symbol: '$__#'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport const compilationMacros: SxMacroInfo[] = [{\r\n    name: '$$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\n// for backword compatibility\r\nexport default ([] as SxMacroInfo[]).concat(macros, compilationMacros);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [\r\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\r\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\r\n\r\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\r\n\r\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\r\n\r\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\r\n\r\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\r\n\r\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\r\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\r\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\r\n\r\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\r\n];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxEof,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedFragment,\r\n         SxComment,\r\n         SxToken,\r\n         SxChar,\r\n         ScriptTerminationError } from './types';\r\nimport { quote,\r\n         backquote,\r\n         wrapByUnquote,\r\n         spread,\r\n         splice }                 from './ast';\r\n\r\n\r\n\r\nfunction isEOF(ch: SxChar): boolean {\r\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\r\n}\r\n\r\n\r\nfunction isSpace(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && ch.trim().length === 0;\r\n}\r\n\r\n\r\nfunction isNumberFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isSymbolFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' &&\r\n        !isSpace(ch) &&\r\n        !isNumberFirstChar(ch);\r\n}\r\n\r\n\r\n\r\nfunction lookCurrentLineHint(state: SxParserState): string {\r\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\r\n        state.strings.length > state.index ?\r\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\r\n}\r\n\r\n\r\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    if (state.strings.length <= state.index) {\r\n        return {eof: true};\r\n    }\r\n    if (state.strings[state.index].length <= state.pos) {\r\n        if ((! state.values) || (state.values.length <= state.index)) {\r\n            state.pos = 0;\r\n            state.index++;\r\n            return getChar(state);\r\n        } else {\r\n            const ch = {value: state.values[state.index]};\r\n            state.pos = 0;\r\n            state.index++;\r\n            return ch;\r\n        }\r\n    }\r\n    if (virtualEof) {\r\n        for (const v of virtualEof) {\r\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\r\n            if (ch === v) {\r\n                state.pos += v.length;\r\n                state.line += ch.split('\\n').length - 1;\r\n                return { eof: false , eofSeq: v };\r\n            }\r\n        }\r\n    }\r\n    {\r\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n        state.pos++;\r\n\r\n        if (ch === '\\n') {\r\n            state.line++;\r\n        }\r\n\r\n        if ((! disableEscape) && ch === '\\\\') {\r\n            if (state.strings[state.index].length <= state.pos) {\r\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n            state.pos++;\r\n\r\n            switch (ch) {\r\n            case 'b':\r\n                ch = '\\b';\r\n                break;\r\n            case 't':\r\n                ch = '\\t';\r\n                break;\r\n            case 'n':\r\n                ch = '\\n';\r\n                break;\r\n            case 'v':\r\n                ch = '\\v';\r\n                break;\r\n            case 'f':\r\n                ch = '\\f';\r\n                break;\r\n            case 'r':\r\n                ch = '\\r';\r\n                break;\r\n            case 'U': case 'u':\r\n                {\r\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\r\n                        let ch1 = '';\r\n                        for (let i = 0; i < 6; i++) {\r\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\r\n                            if (ch2 === '}') {\r\n                                if (i === 0) {\r\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                                }\r\n                                state.pos += i;\r\n                                break;\r\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\r\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            ch1 += ch2;\r\n                        }\r\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos++;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    } else {\r\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\r\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos += 4;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return ch;\r\n    }\r\n}\r\n\r\n\r\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    const chs: SxChar[] = [];\r\n\r\n    try {\r\n        for (let i = 0; i < n; i++) {\r\n            chs.push(getChar(state, virtualEof, disableEscape));\r\n        }\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return chs;\r\n}\r\n\r\n\r\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    let ch: SxChar;\r\n\r\n    try {\r\n        ch = getChar(state, virtualEof, disableEscape);\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return ch;\r\n}\r\n\r\n\r\nfunction skipWhitespaces(state: SxParserState): void {\r\n    let ch = lookAhead(state);\r\n    while (!isEOF(ch) && isSpace(ch)) {\r\n        getChar(state);\r\n        ch = lookAhead(state);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\r\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n    }\r\n    return Number(s);\r\n}\r\n\r\n\r\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (isSpace(ch)) {\r\n                break;\r\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\r\n                break;\r\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                getChar(state, virtualEof);\r\n                const v = (ch as SxExternalValue).value;\r\n                s += String(ch);\r\n            } else {\r\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (state.config.enableShorthands) {\r\n        let m: RegExpMatchArray | null = null;\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        if (m = s.match(/^:((?:\\:[^=:]+?)+?)=$/)) {\r\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\r\n            const ws = m[1].slice(1).split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.set},\r\n                        ws\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^:((?:\\:[^@:]+?)+?)@([^@:]+?)$/)) {\r\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\r\n            const ws = m[1].slice(1).split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.call},\r\n                        [{symbol: state.config.reservedNames.get}, ...ws],\r\n                        {symbol: m[2]},\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^:((?:\\:[^:]+?)+?)$/)) {\r\n            // ::foo:bar:baz -> ($get foo bar baz)\r\n            const ws = m[1].slice(1).split(':');\r\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\r\n            return z as any;\r\n        }\r\n    }\r\n\r\n    return {symbol: s};\r\n}\r\n\r\n\r\nfunction parseStringOrComment(\r\n        state: SxParserState, eof: string[],\r\n        valuesStartSeq: string | null,\r\n        valuesStopChar: string,\r\n        disableEscape: boolean,\r\n        allowPhysicalEof: boolean,\r\n    ): { strings: string[], values: any[] } {\r\n\r\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\r\n    const strings: string[] = [];\r\n    const values: any[] = [];\r\n\r\n    for (;;) {\r\n        let s = '';\r\n        let ch = lookAhead(state, eofSeqs, disableEscape);\r\n\r\n        while (! isEOF(ch)) {\r\n            if (typeof ch === 'string') {\r\n                getChar(state, eofSeqs, disableEscape);\r\n                s += ch;\r\n            } else {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state, eofSeqs, disableEscape);\r\n                    const v = (ch as SxExternalValue).value;\r\n                    s += String(ch);\r\n                } else {\r\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            }\r\n\r\n            ch = lookAhead(state, eofSeqs, disableEscape);\r\n        }\r\n\r\n        getChar(state, eofSeqs, disableEscape);\r\n\r\n        if ((ch as SxEof).eof === true) {\r\n            if (! allowPhysicalEof) {\r\n                throw new ScriptTerminationError('parseStringOrComment');\r\n            }\r\n        }\r\n\r\n        strings.push(s);\r\n\r\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\r\n            values.push(parseList(state, valuesStopChar, []));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { strings, values };\r\n}\r\n\r\n\r\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\r\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape, false).strings[0];\r\n}\r\n\r\n\r\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\r\n    const q: SxToken[] = [symbol];\r\n\r\n    if (attrs) {\r\n        q.push(attrs);\r\n    }\r\n\r\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false, false);\r\n    for (let i = 0; i < inner.strings.length; i++) {\r\n        q.push(inner.strings[i]);\r\n        if (i < inner.values.length) {\r\n            q.push(inner.values[i]);\r\n        }\r\n    }\r\n\r\n    return q;\r\n}\r\n\r\n\r\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false, true).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['|#'], null, ')', false, false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseOneToken(state: SxParserState): SxToken {\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case ')':\r\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n\r\n        case '(':\r\n            getChar(state);\r\n            return parseList(state, ')', []);\r\n\r\n        case \"'\": case \"`\": case ',':\r\n            {\r\n                getChar(state);\r\n                const ahead = lookAhead(state);\r\n                let isSpliceUnquote = false;\r\n                if (ch === ',' && ahead === '@') {\r\n                    getChar(state);\r\n                    isSpliceUnquote = true;\r\n                }\r\n                skipWhitespaces(state);\r\n                const ret = (ch === \"'\" ?\r\n                        quote :\r\n                        (ch === \"`\" ? backquote : wrapByUnquote))\r\n                    (state, parseOneToken(state)\r\n                );\r\n                return (isSpliceUnquote ? splice(state, ret) : ret);\r\n            }\r\n\r\n        case \".\":\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 2);\r\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    skipWhitespaces(state);\r\n                    return spread(state, parseOneToken(state));\r\n                } else {\r\n                    skipWhitespaces(state);\r\n                    return {dotted: parseOneToken(state)};\r\n                }\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            return parseSingleLineComment(state);\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseMultiLineComment(state);\r\n                } else {\r\n                    return parseSymbol(state);\r\n                }\r\n            }\r\n\r\n        case '\"':\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 4);\r\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\r\n                    let isHereDoc = true;\r\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\r\n                        // here doc\r\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\r\n                        if (aheads[2] === '+' || aheads[2] === '-') {\r\n                            if (! isNumberAfterSignChar(aheads[3])) {\r\n                                isHereDoc = false;\r\n                            }\r\n                        }\r\n                        // here doc\r\n                    } else if (isSymbolFirstChar(aheads[2])) {\r\n                        isHereDoc = false;\r\n                    } else {\r\n                        // here doc\r\n                    }\r\n                    getChar(state);\r\n                    getChar(state);\r\n\r\n                    let sym: SxSymbol | number | null = null;\r\n                    let attrs: SxToken[] | null = null;\r\n                    if (isHereDoc) {\r\n                        sym = {symbol: state.config.reservedNames.Template};\r\n                    } else {\r\n                        sym = parseSymbol(state, ['@']);\r\n                        if (sym === null) {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        if (typeof sym === 'number') {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        const ahs = lookAheads(state, 2);\r\n                        if (ahs[0] === '@') {\r\n                            if (ahs[1] !== '{') {\r\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            getChar(state);\r\n                            getChar(state);\r\n                            const a = parseList(state, '}', [{symbol: '@'}]);\r\n                            if (Array.isArray(a)) {\r\n                                attrs = a;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return parseHereDoc(state, sym, attrs);\r\n                } else {\r\n                    return parseString(state, false);\r\n                }\r\n            }\r\n\r\n        case '@':\r\n            if (state.config.enableVerbatimStringLiteral) {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '\"') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseString(state, true);\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            if (typeof ch !== 'string') {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state);\r\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\r\n                } else {\r\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            } else if (isSpace(ch)) {\r\n                break;\r\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\r\n                if (ch === '+' || ch === '-') {\r\n                    const aheads = lookAheads(state, 2);\r\n                    if (! isNumberAfterSignChar(aheads[1])) {\r\n                        return parseSymbol(state);\r\n                    }\r\n                }\r\n                return parseNumber(state);\r\n            } else if (isSymbolFirstChar(ch)) {\r\n                return parseSymbol(state);\r\n            } else {\r\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseOneToken');\r\n}\r\n\r\n\r\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\r\n    const r: SxToken[] = initialList.slice(0);\r\n    let dotted = false;\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case listStopChar:\r\n            getChar(state);\r\n            if (dotted) {\r\n                return r[0];\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        default:\r\n            {\r\n                const t = parseOneToken(state);\r\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\r\n                    if (r.length !== 1) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    dotted = true;\r\n                    if (Array.isArray(t)) {\r\n                        t.unshift(r.pop() as SxToken);\r\n                        r.push(t);\r\n                    } else {\r\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\r\n                    }\r\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                    if (! state.config.stripComments) {\r\n                        r.push(t);\r\n                    }\r\n                } else {\r\n                    if (dotted) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    r.push(t);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseList');\r\n}\r\n\r\n\r\n\r\nexport function parse(state: SxParserState) {\r\n    const r: SxToken[] = [];\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case '(':\r\n            getChar(state);\r\n            r.push(parseList(state, ')', []));\r\n            break;\r\n\r\n        case \"'\": case \"`\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                for (;;) {\r\n                    const t = parseOneToken(state);\r\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                        if (! state.config.stripComments) {\r\n                            r.push(t);\r\n                        }\r\n                    } else {\r\n                        r.push((ch === \"'\" ? quote : backquote)(state, t));\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            if (state.config.stripComments) {\r\n                parseSingleLineComment(state);\r\n            } else {\r\n                r.push(parseSingleLineComment(state));\r\n            }\r\n            break;\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseMultiLineComment(state);\r\n                    } else {\r\n                        r.push(parseMultiLineComment(state));\r\n                    }\r\n                } else {\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseSingleLineComment(state);\r\n                    } else {\r\n                        r.push(parseSingleLineComment(state));\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case '\"':\r\n            {\r\n                const aheads = lookAheads(state, 3);\r\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\r\n                    r.push(parseOneToken(state));\r\n                    break;\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxReservedNames,\r\n         SxParserConfig } from './types';\r\n\r\n\r\n\r\nexport const defaultReservedNames: SxReservedNames = {\r\n    eval: '$eval',\r\n    quote: '$quote',\r\n    backquote: '$backquote',\r\n    unquote: '$unquote',\r\n    spread: '$spread',\r\n    splice: '$splice',\r\n\r\n    car: '$car',\r\n    cdr: '$cdr',\r\n    cons: '$cons',\r\n    atom: '$atom',\r\n    eq: '$eq',\r\n    list: '$list',\r\n\r\n    let: '$clisp-let',\r\n    lambda: '$lambda',\r\n    self: '$self',\r\n    defun: '$defun',\r\n    thiz: '$this',\r\n\r\n    if: '$if',\r\n    cond: '$cond',\r\n\r\n    while: '$while',\r\n    doWhile: '$do-while',\r\n    until: '$until',\r\n    doUntil: '$do-until',\r\n\r\n    get: '$get',\r\n    defvar: '$clisp-defvar',\r\n    setq: '$clisp-setq',\r\n    set: '$set',\r\n    call: '$call',\r\n\r\n    not: '$not',\r\n    and: '$and',\r\n    or: '$or',\r\n\r\n    isSymbol: '$is-symbol',\r\n    gensym: '$gensym',\r\n    raise: '$raise',\r\n    catch: '$catch',\r\n\r\n    Template: 'Template',\r\n};\r\n\r\nexport const defaultConfig: SxParserConfig = {\r\n    raiseOnUnresolvedSymbol: false,\r\n    enableEvaluate: true,\r\n    enableHereDoc: true,\r\n    enableSpread: true,\r\n    enableSplice: true,\r\n    enableShorthands: true,\r\n    enableVerbatimStringLiteral: true,\r\n    enableTailCallOptimization: true,\r\n    enableRegExpMatchOperators: true,\r\n    enableCompilationOperators: true,\r\n    stripComments: false,\r\n    wrapExternalValue: true,\r\n    returnMultipleRoot: false,\r\n    maxEvalCount: 0,\r\n\r\n    reservedNames: defaultReservedNames,\r\n    symbols: [],\r\n    macros: [],\r\n    funcs: [],\r\n};\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxFuncInfo,\r\n         SxSymbolInfo,\r\n         SxParserConfig,\r\n         SxParserState,\r\n         SxToken,\r\n         SExpressionTemplateFn,\r\n         SExpressionAsyncTemplateFn } from '../types';\r\nimport { parse }                      from '../parser';\r\nimport { evaluate }                   from '../evaluate';\r\nimport { defaultConfig }              from '../defaults';\r\n\r\n\r\n\r\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\r\n    return {\r\n        strings: typeof strings === 'string' ? [strings] : strings,\r\n        values: values || [],\r\n\r\n        index: 0,\r\n        pos: 0,\r\n        line: 0,\r\n\r\n        evalCount: 0,\r\n\r\n        scopes: [{isBlockLocal: false, scope: globals}],\r\n\r\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\r\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\r\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\r\n\r\n        config,\r\n    };\r\n}\r\n\r\n\r\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\r\n    state.strings = typeof strings === 'string' ? [strings] : strings;\r\n    state.values = values || [];\r\n    state.index = 0;\r\n    state.pos = 0;\r\n    state.line = 0;\r\n    state.evalCount = 0;\r\n    return state;\r\n}\r\n\r\n\r\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fRepl;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = async (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n\r\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\r\n                    s[i] = await s[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\r\n            if (config.enableEvaluate) {\r\n                for (let i = 0; i < s.length; i++) {\r\n                    s[i] = evaluate(stat, s[i]);\r\n                }\r\n            }\r\n\r\n            if (config.returnMultipleRoot) {\r\n                return s.length === 1 ? s[0] : s;\r\n            } else {\r\n                return s[s.length - 1];\r\n            }\r\n        };\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return execSync(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fReplSync;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { parserInput,\n         ParserFnWithCtx }       from 'fruitsconfits/modules/lib/types';\nimport { getStringParsers }      from 'fruitsconfits/modules/lib/string-parser';\nimport { getObjectParsers }      from 'fruitsconfits/modules/lib/object-parser';\nimport { SxTokenChild,\n         SxToken,\n         SxSymbol,\n         SxParserConfig }        from 'liyad/modules/s-exp/types';\nimport installCore               from 'liyad/modules/s-exp/operators/core';\nimport { SExpression }           from 'liyad/modules/s-exp/interpreters';\nimport { defaultConfig }         from 'liyad/modules/s-exp/defaults';\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         ErrorMessages,\n         TypeAssertionSetValue,\n         TypeAssertionMap }      from './types';\nimport * as operators            from './operators';\nimport { resolveSchema }         from './lib/resolver';\nimport { dummyTargetObject,\n         isUnsafeVarNames }      from './lib/util';\n\n\n\ninterface SxOp {\n    'op': string;\n}\n\ntype AstChild = SxTokenChild | SxOp | undefined;\n\ninterface Ctx {\n    docComment?: string;\n}\ntype Ast = SxToken | AstChild | SxOp | undefined;\n\nconst $s = getStringParsers<Ctx, Ast>({\n    rawToToken: rawToken => rawToken,\n    concatTokens: tokens => (tokens.length ?\n        [tokens.reduce((a, b) => String(a) + b)] : []),\n});\n\nconst $o = getObjectParsers<Ast[], Ctx, Ast>({\n    rawToToken: rawToken => rawToken,\n    concatTokens: tokens => (tokens.length ?\n        [tokens.reduce((a, b) => String(a) + b)] : []),\n    comparator: (a, b) => a === b,\n});\n\nconst {seq, cls, notCls, clsFn, classes, numbers, cat,\n       once, repeat, qty, zeroWidth, err, beginning, end,\n       first, or, combine, erase, trans, ahead, rules} = $s;\n\n\nconst directiveLineComment =\n    trans(tokens => [[{symbol: 'directive'}, ...tokens]])(\n        erase(qty(2)(cls('/'))),\n        erase(repeat(classes.space)),\n        cat(seq('@tynder-'), repeat(classes.alnum)), // [0]\n        erase(repeat(classes.space)),\n        cat(repeat(notCls('\\r\\n', '\\n', '\\r'))),     // [1]\n        erase(classes.newline), );\n\nconst lineComment =\n    combine(\n        erase(qty(2)(cls('/'))),\n        ahead(repeat(classes.space),\n              notCls('@tynder-'), ),\n        repeat(notCls('\\r\\n', '\\n', '\\r')),\n        classes.newline, );\n\nconst hashLineComment =\n    combine(\n        seq('#'),\n        repeat(notCls('\\r\\n', '\\n', '\\r')),\n        classes.newline, );\n\nconst docComment =\n    combine(\n        seq('/**'),\n        repeat(classes.space),\n        input => {\n            const ret = cat(repeat(notCls('*/')))(input);\n            if (ret.succeeded) {\n                // define a reducer\n                const ctx2 = {...ret.next.context}; // NOTE: context is immutable\n                ctx2.docComment = (ret.tokens[0] as string).trim();\n                ret.next.context = ctx2;\n            }\n            return ret;\n        },\n        seq('*/'), );\n\nconst blockComment =\n    combine(\n        seq('/*'),\n        repeat(notCls('*/')),\n        seq('*/'), );\n\nconst commentOrSpace =\n    first(classes.space, lineComment, hashLineComment, docComment, blockComment);\n\n\nconst trueValue =\n    trans(tokens => [true])\n    (seq('true'));\n\nconst falseValue =\n    trans(tokens => [false])\n    (seq('false'));\n\nconst nullValue =\n    trans(tokens => [null])\n    (seq('null'));\n\nconst undefinedValue =\n    trans(tokens => [void 0])\n    (seq('undefined'));\n\nconst positiveInfinityValue =\n    trans(tokens => [Number.POSITIVE_INFINITY])\n    (qty(0, 1)(seq('+')), seq('Infinity'));\n\nconst negativeInfinityValue =\n    trans(tokens => [Number.NEGATIVE_INFINITY])\n    (seq('-Infinity'));\n\nconst nanValue =\n    trans(tokens => [Number.NaN])\n    (seq('NaN'));\n\n\nconst binaryIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 2)])\n    (numbers.bin(seq('0b')));\n\nconst octalIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 8)])\n    (numbers.oct(seq('0o'), seq('0')));\n\nconst hexIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 16)])\n    (numbers.hex(seq('0x'), seq('0X')));\n\nconst decimalIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 10)])\n    (numbers.int);\n\nconst bigDecimalIntegerValue =\n    trans(tokens => [BigInt((tokens as string[])[0].replace(/_/g, '')) as any])\n    (numbers.bigint);\n\nconst floatingPointNumberValue =\n    trans(tokens => [Number.parseFloat((tokens as string[])[0].replace(/_/g, ''))])\n    (numbers.float);\n\nconst numberValue =\n    first(octalIntegerValue,\n          hexIntegerValue,\n          binaryIntegerValue,\n          bigDecimalIntegerValue,\n          floatingPointNumberValue,\n          decimalIntegerValue,\n          positiveInfinityValue,\n          negativeInfinityValue,\n          nanValue, );\n\n\nconst stringEscapeSeq = first(\n    trans(t => ['\\''])(seq('\\\\\\'')),\n    trans(t => ['\\\"'])(seq('\\\\\"')),\n    trans(t => ['\\`'])(seq('\\\\`')),\n    trans(t => ['/'])(seq('\\\\/')),\n    trans(t => ['\\\\'])(seq('\\\\\\\\')),\n    trans(t => [''])(seq('\\\\\\r\\n')),\n    trans(t => [''])(seq('\\\\\\r')),\n    trans(t => [''])(seq('\\\\\\n')),\n    trans(t => ['\\n'])(seq('\\\\n')),\n    trans(t => ['\\r'])(seq('\\\\r')),\n    trans(t => ['\\v'])(seq('\\\\v')),\n    trans(t => ['\\t'])(seq('\\\\t')),\n    trans(t => ['\\b'])(seq('\\\\b')),\n    trans(t => ['\\f'])(seq('\\\\f')),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\u')),\n                qty(4, 4)(classes.hex), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\u{')),\n                qty(1, 6)(classes.hex),\n                erase(seq('}')), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\x')),\n                qty(2, 2)(classes.hex), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 8))])(\n        cat(erase(seq('\\\\')),\n                qty(3, 3)(classes.oct), )));\n\nconst signleQuotStringValue =\n    trans(tokens => [tokens[0]])(\n        erase(seq(\"'\")),\n            cat(repeat(first(\n                stringEscapeSeq,\n                combine(cls('\\r', '\\n'), err('Line breaks within strings are not allowed.')),\n                notCls(\"'\"),\n            ))),\n        erase(seq(\"'\")), );\n\nconst doubleQuotStringValue =\n    trans(tokens => [tokens[0]])(\n        erase(seq('\"')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                combine(cls('\\r', '\\n'), err('Line breaks within strings are not allowed.')),\n                notCls('\"'),\n            ))),\n        erase(seq('\"')), );\n\nconst backQuotStringValue =\n    trans(tokens => [tokens[0]])(\n        erase(seq('`')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                notCls('`'),\n            ))),\n        erase(seq('`')), );\n\nconst stringValue =\n    first(signleQuotStringValue, doubleQuotStringValue, backQuotStringValue);\n\nconst regexpStringValue =\n    // TODO: '/' ']' '\\\\' in character class '[]' is not parsed correctly.\n    trans(tokens => [{value: tokens[1] ?\n            new RegExp(tokens[0] as string, tokens[1] as string) :\n            new RegExp(tokens[0] as string)}])(\n        erase(seq('/')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                notCls('/'),\n            ))),\n        erase(seq('/')),\n        cat(qty(0)(cls('g', 'i', 'm', 's', 'u', 'y'))), );\n\n\nconst symbolName =\n    trans(tokens => tokens)\n    (cat(combine(classes.alpha, repeat(classes.alnum))));\n\nconst decoratorSymbolName =\n    trans(tokens => [{symbol: (tokens as string[])[0]}])\n    (cat(combine(seq('@'), classes.alpha, repeat(classes.alnum))));\n\n\nconst simpleConstExpr =\n    first(trueValue, falseValue, nullValue, undefinedValue,\n          numberValue, stringValue, );\n\nconst objKey =\n    first(stringValue, symbolName);\n\nconst listValue = first(\n    trans(tokens => [[]])(erase(\n        seq('['),\n            repeat(commentOrSpace),\n        seq(']'), )),\n    trans(tokens => {\n        const ast: Ast = [{symbol: '$list'}];\n        for (const token of tokens) {\n            ast.push(token as any);\n        }\n        return [ast];\n    })(\n        erase(seq('[')),\n            combine(\n                erase(repeat(commentOrSpace)),\n                first(input => listValue(input),   // NOTE: recursive definitions\n                      input => objectValue(input), //       should place as lambda.\n                      simpleConstExpr,\n                      ),\n                erase(repeat(commentOrSpace)), ),\n            repeat(combine(\n                erase(repeat(commentOrSpace),\n                      seq(','),\n                      repeat(commentOrSpace)),\n                first(input => listValue(input),   // NOTE: recursive definitions\n                      input => objectValue(input), //       should place as lambda.\n                      simpleConstExpr,\n                      ),\n                erase(repeat(commentOrSpace)), )),\n            qty(0, 1)(erase(\n                seq(','),\n                repeat(commentOrSpace), )),\n            first(ahead(seq(']')), err('listValue: Unexpected token has appeared.')),\n        erase(seq(']')),\n    ), );\n\nconst objectKeyValuePair =\n    combine(\n        objKey,\n        erase(repeat(commentOrSpace),\n              first(seq(':'), err('\":\" is needed.')),\n              repeat(commentOrSpace)),\n        first(input => listValue(input),   // NOTE: recursive definitions\n              input => objectValue(input), //       should place as lambda.\n              simpleConstExpr,\n              err('object value is needed.')), );\n\nconst objectValue = first(\n    trans(tokens => [[{symbol: '#'}]])(erase(\n        seq('{'),\n            repeat(commentOrSpace),\n        seq('}'),\n    )),\n    trans(tokens => {\n        const ast: Ast = [{symbol: '#'}];\n        for (let i = 0; i < tokens.length; i += 2) {\n            if (isUnsafeVarNames(dummyTargetObject, tokens[i] as string)) {\n                throw new Error(`Unsafe symbol name is appeared in object literal: ${tokens[i]}`);\n            }\n            ast.push([tokens[i], tokens[i + 1]]);\n        }\n        return [ast];\n    })(\n        erase(seq('{')),\n            combine(\n                erase(repeat(commentOrSpace)),\n                objectKeyValuePair,\n                erase(repeat(commentOrSpace)), ),\n            repeat(combine(\n                erase(seq(','),\n                      repeat(commentOrSpace)),\n                objectKeyValuePair,\n                erase(repeat(commentOrSpace)), )),\n            qty(0, 1)(erase(\n                seq(','),\n                repeat(commentOrSpace), )),\n            first(ahead(seq('}')), err('objectValue: Unexpected token has appeared.')),\n        erase(seq('}')),\n    ), );\n\nconst constExpr =\n    first(simpleConstExpr,\n          listValue,\n          objectValue, );\n\n\n// const primitiveValue = trans(tokens => [[{symbol: 'primitiveValue'}, tokens[0]]])(\n//     first(trueValue, falseValue, nullValue, undefinedValue,\n//           numberValue, stringValue, ));\n\nconst primitiveValueNoNullUndefined =\n    trans(tokens => [[{symbol: 'primitiveValue'}, tokens[0]]])(\n        first(trueValue, falseValue,\n              numberValue, stringValue, ));\n\n\nconst primitiveTypeName =\n    trans(tokens => [[{symbol: 'primitive'}, tokens[0]]])(\n        first(seq('number?'), seq('integer?'), seq('bigint?'), seq('string?'), seq('boolean?'), // TODO: '?' is allowed in the sequence assertion\n              seq('number'), seq('integer'), seq('bigint'), seq('string'), seq('boolean'), ));  // TODO: function\n\nconst additionalPropPrimitiveTypeName =\n    first(seq('number'), seq('string'));\n\nconst nullUndefinedTypeName =\n    trans(tokens => [[{symbol: 'primitive'}, tokens[0]]])(\n        first(seq('null'), seq('undefined'), seq('any'), seq('unknown'), seq('never')), );\n\nconst simpleTypeName =\n    first(primitiveTypeName,\n          nullUndefinedTypeName,\n          trans(tokens =>\n                [[{symbol: 'ref'}, tokens[0]]])(\n            ahead(notCls('Array', 'Partial', 'Pick', 'Omit')),\n            symbolName, ));\n\n\nconst sequenceType =\n    trans(tokens => [[{symbol: 'sequenceOf'}, ...tokens]])(\n        combine(\n            erase(seq('[')),\n                combine(\n                    erase(repeat(commentOrSpace)),\n                    input => spreadOrComplexType(first(seq(','), seq(']')))(input),\n                    erase(repeat(commentOrSpace)), ),\n                repeat(combine(\n                    erase(seq(','),\n                        repeat(commentOrSpace)),\n                    input => spreadOrComplexType(first(seq(','), seq(']')))(input),\n                    erase(repeat(commentOrSpace)), )),\n                qty(0, 1)(erase(\n                    seq(','),\n                    repeat(commentOrSpace), )),\n                first(ahead(seq(']')), err('sequenceType: Unexpected token has appeared.')),\n            erase(seq(']')), ));\n\n\nconst arraySizeFactorInner =\n    first(\n        trans(tokens => [[{symbol: '#'}, ['max', tokens[0]]]])(\n            erase(seq('..')),\n            erase(repeat(commentOrSpace)),\n            decimalIntegerValue, ),\n        trans(tokens => [[{symbol: '#'}, ['min', tokens[0]], ['max', tokens[1]]]])(\n            decimalIntegerValue,\n            erase(repeat(commentOrSpace)),\n            erase(seq('..')),\n            erase(repeat(commentOrSpace)),\n            decimalIntegerValue, ),\n        trans(tokens => [[{symbol: '#'}, ['min', tokens[0]]]])(\n            decimalIntegerValue,\n            erase(repeat(commentOrSpace)),\n            erase(seq('..')), ),\n        trans(tokens => [[{symbol: '#'}, ['max', tokens[0]]]])(\n            decimalIntegerValue, ));\n\nconst arraySizeFactor =\n    trans(tokens =>\n        tokens.length > 0 ?\n            tokens :\n            [[{symbol: '#'}]])(\n        erase(seq('[')),\n            erase(repeat(commentOrSpace)),\n            qty(0, 1)(arraySizeFactorInner),\n            erase(repeat(commentOrSpace)),\n        erase(seq(']')), );\n\nconst complexArrayType =\n    trans(tokens => [[{symbol: 'repeated'}, tokens[0], tokens[1]]])(\n        erase(seq('Array')),\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            first(input => complexType(first(seq(','), seq('>')))(input),\n                  err('type is expected in Array type.'), ),        // [0]\n            erase(repeat(commentOrSpace)),\n            qty(0, 1)(combine(\n                erase(seq(',')),\n                erase(repeat(commentOrSpace)),\n                arraySizeFactorInner,                               // [1]\n                erase(repeat(commentOrSpace)), )),\n        first(ahead(seq('>')),\n              err('\\'>\\' is expected in Array type.'), ),\n        erase(seq('>')), );\n\nconst partialType =\n    trans(tokens => [[{symbol: 'partial'}, tokens[0], tokens[1]]])(\n        erase(seq('Partial')),\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            first(input => complexType(first(seq(','), seq('>')))(input),\n                  err('type is expected in Partial type.'), ),      // [0]\n            erase(repeat(commentOrSpace)),\n        first(ahead(seq('>')),\n              err('\\'>\\' is expected in Partial type.'), ),\n        erase(seq('>')), );\n\nconst pickOrOmitType =\n    trans(tokens => [[{symbol: tokens[0] === 'Pick' ? 'picked' : 'omit'}, tokens[1], ...tokens.slice(2)]])(\n        first(seq('Pick'),\n              seq('Omit'), ),                                       // [0]\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            first(input => complexType(first(seq(','), seq('>')))(input),\n                  err('type is expected in Partial type.'), ),      // [1]\n            erase(repeat(commentOrSpace)),\n            combine(\n                erase(seq(',')),\n                erase(repeat(commentOrSpace)),\n                    stringValue,                                    // [2]\n                    qty(0)(combine(\n                        erase(repeat(commentOrSpace)),\n                        erase(seq('|')),\n                        erase(repeat(commentOrSpace)),\n                        stringValue, )),                            // [3],...\n                erase(repeat(commentOrSpace)), ),\n        first(ahead(seq('>')),\n              err('\\'>\\' is expected in Pick|Omit type.'), ),\n        erase(seq('>')), );\n\nconst genericOrSimpleType =\n    trans(tokens => [tokens[0]])(                     // remove generics parameters\n        simpleTypeName,                               // [0]\n        erase(repeat(commentOrSpace)),\n        qty(0, 1)(combine(\n            erase(seq('<')),\n                combine(                              // [1]\n                    erase(repeat(commentOrSpace)),\n                    first(input => complexType(first(seq(','), seq('>')))(input),\n                          err('type is expected in generic type.'), ),\n                    erase(repeat(commentOrSpace)), ),\n                repeat(combine(                       // [2]...\n                    erase(seq(','),\n                          repeat(commentOrSpace)),\n                    first(input => complexType(first(seq(','), seq('>')))(input),\n                          err('type is expected in generic type.'), ),\n                    erase(repeat(commentOrSpace)), )),\n                qty(0, 1)(erase(\n                    seq(','),\n                    repeat(commentOrSpace), )),\n                first(ahead(seq('>')), err('genericType: Unexpected token has appeared.')),\n            erase(seq('>')), )));\n\nconst spreadType =\n    trans(tokens => [[{symbol: 'spread'}, tokens[0], tokens[1]]])(\n        erase(seq('...')),\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            input => complexType(first(seq(','), seq('>')))(input),\n            erase(repeat(commentOrSpace)),\n            qty(0, 1)(combine(\n                erase(seq(',')),\n                erase(repeat(commentOrSpace)),\n                arraySizeFactorInner,\n                erase(repeat(commentOrSpace)), )),\n        erase(seq('>')), );\n\n\nconst decorator =\n    trans(tokens => [tokens])(\n        decoratorSymbolName,\n        qty(0, 1)(first(\n            combine(erase(\n                seq('('),\n                    repeat(commentOrSpace),\n                seq(')'), )),\n            combine(\n                erase(seq('(')),\n                    combine(\n                        erase(repeat(commentOrSpace)),\n                        first(regexpStringValue, constExpr),\n                        erase(repeat(commentOrSpace)), ),\n                    repeat(combine(\n                        erase(repeat(commentOrSpace)),\n                        erase(seq(',')),\n                        erase(repeat(commentOrSpace)),\n                        first(regexpStringValue, constExpr),\n                        erase(repeat(commentOrSpace)), )),\n                    qty(0, 1)(erase(\n                        seq(','),\n                        repeat(commentOrSpace), )),\n                erase(seq(')')),\n            ), )));\n\nconst decoratorsClause =\n    trans(tokens => tokens)(\n        repeat(combine(\n            decorator,\n            erase(repeat(commentOrSpace)), )));\n\n\nconst complexTypeInnerWOSinpleArrayType = (edge: ParserFnWithCtx<string, Ctx, Ast>) =>\n    first(primitiveValueNoNullUndefined,\n          genericOrSimpleType,\n          partialType,\n          pickOrOmitType,\n          complexArrayType,\n          sequenceType,\n          input => interfaceDefInner(seq(','))(input), );\n\nconst complexTypeInnerRoot: (separator: ParserFnWithCtx<string, Ctx, Ast>) => ParserFnWithCtx<string, Ctx, Ast> =\n    (edge: ParserFnWithCtx<string, Ctx, Ast>) =>\n    trans(tokens => {\n            let ty = [{symbol: '$pipe'}, tokens[1], ...(tokens[0] as Ast[])];\n            if (tokens[2] !== null) {\n                for (const z of tokens[2] as Ast[]) {\n                    ty = [{symbol: 'repeated'}, ty, z];\n                }\n            }\n            return ([[\n                ty,\n                ...(tokens[3] ? [tokens[3]] : []),\n                ...tokens.slice(4),\n            ]]);\n        })(                                                              // [0]\n        trans(tokens => [tokens])(qty(0, 1)(decoratorsClause)),          // [1]\n        first(                                                           // [2]\n            input => complexTypeInnerWOSinpleArrayType(edge)(input),\n            combine(\n                erase(seq('(')),\n                    erase(repeat(commentOrSpace)),\n                    input => complexType(edge)(input),\n                    erase(repeat(commentOrSpace)),\n                erase(seq(')')), )),\n            combine(\n                trans(tokens => tokens[0] !== null ? [tokens] : [null])(\n                    first(\n                        qty(1)(combine(\n                            erase(repeat(commentOrSpace)),\n                            arraySizeFactor,\n                        )),\n                        zeroWidth(() => null), )),\n            combine(first(\n                trans(tokens => [tokens[0], ...(tokens[1] as Ast[])])(\n                    qty(1)(combine(\n                        erase(repeat(commentOrSpace)),\n                        trans(tokens => [{op: tokens[0]} as any])(or(seq('&'), seq('|'), seq('-'))),\n                        erase(repeat(commentOrSpace)),\n                        input => complexTypeInnerRoot(edge)(input), ))),\n                trans(tokens => [])(), ))));\n\n\nconst binaryOp = (op: string, op1: any, op2: any) => {\n    return [{symbol: op}, op1, op2];\n};\n\nconst isOperator = (v: any, op: string) => {\n    if (typeof v === 'object' && v.op === op) {\n        return true;\n    }\n    return false;\n};\n\nconst isValue = (v: any) => {\n    // TODO: check type\n    return true;\n};\n\n\n// production rules:\n//   S -> S \"&\" S\nconst complexTypeExprRule3 = $o.trans(tokens => [binaryOp('intersect', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, '&')),\n    $o.clsFn(t => isValue(t)),\n);\n\n// production rules:\n//   S -> S \"|\" S\nconst complexTypeExprRule2 = $o.trans(tokens => [binaryOp('oneOf', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, '|')),\n    $o.clsFn(t => isValue(t)),\n);\n\n// production rules:\n//   S -> S \"-\" S\nconst complexTypeExprRule1 = $o.trans(tokens => [binaryOp('subtract', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, '-')),\n    $o.clsFn(t => isValue(t)),\n);\n\nconst complexType = (edge: ParserFnWithCtx<string, Ctx, Ast>) => rules({\n    rules: [\n        complexTypeExprRule3,\n        complexTypeExprRule2,\n        complexTypeExprRule1,\n    ],\n    check: $o.combine($o.classes.any, $o.end()),\n})(trans(tokens => tokens[0] as Ast[])(complexTypeInnerRoot(edge)));\n\n\nconst spreadOrComplexType: (separator: ParserFnWithCtx<string, Ctx, Ast>) => ParserFnWithCtx<string, Ctx, Ast> =\n    (edge: ParserFnWithCtx<string, Ctx, Ast>) =>\n    first(spreadType, complexType(edge));\n\n\nconst typeDef =\n    trans(tokens => [[{symbol: 'def'}, tokens[1], [{symbol: 'docComment'}, tokens[2], tokens[0] ] ]])(\n        erase(seq('type')),\n            input => {                                               // TODO: extract function\n                const ret = zeroWidth(() => [])(input);\n                if (ret.succeeded) {\n                    const text = ret.next.context.docComment;\n                    ret.next.context = {...ret.next.context};\n                    delete ret.next.context.docComment;\n                    ret.tokens.length = 0;\n                    ret.tokens.push(text ? text : null);\n                }\n                return ret;\n            },                                                       // [0]\n            erase(repeat(commentOrSpace)),\n            symbolName,                                              // [1]\n            erase(repeat(commentOrSpace)),\n        erase(seq('=')),\n            erase(repeat(commentOrSpace)),\n            input => complexType(first(seq(','), seq(';')))(input),  // [2]\n            erase(repeat(commentOrSpace)),\n        erase(seq(';')), );\n\n\nconst interfaceExtendsClause =\n    trans(tokens => [\n            [{symbol: '$list'},\n                ...tokens.map(x => [{symbol: 'ref'}, x])], ])(\n        erase(seq('extends')),\n        erase(repeat(commentOrSpace)),\n        symbolName,\n        repeat(combine(\n            erase(repeat(commentOrSpace)),\n            erase(seq(',')),\n            erase(repeat(commentOrSpace)),\n            symbolName, )));\n\nconst interfaceKey =\n    first(\n        trans(tokens => [[{symbol: '$list'}, ...tokens]])(\n            erase(seq('[')),\n                erase(repeat(commentOrSpace),\n                      objKey,\n                      repeat(commentOrSpace),\n                      seq(':'),\n                      repeat(commentOrSpace), ),\n                repeat(combine(\n                    first(regexpStringValue,\n                          additionalPropPrimitiveTypeName, ),\n                    erase(repeat(commentOrSpace),\n                          seq('|'),\n                          repeat(commentOrSpace), ))),\n                first(regexpStringValue,\n                      additionalPropPrimitiveTypeName, ),\n                erase(repeat(commentOrSpace)),\n            erase(seq(']')), ),\n        objKey, );\n\nconst interfaceKeyTypePair = (separator: ParserFnWithCtx<string, Ctx, Ast>) =>\n    trans(tokens => [\n            [{symbol: '$list'},\n                tokens[2],\n                [{symbol: '$pipe'},\n                    tokens[3] === '?' ?\n                        [{symbol: 'optional'}, tokens[4]] :\n                        tokens[4], ...(tokens[0] as Ast[]), ],\n                tokens[1], ]])(\n        trans(tokens => [tokens])(first(\n            decoratorsClause,\n            zeroWidth(() => []), )),                // [0] decorators\n        input => {\n            const ret = zeroWidth(() => [])(input);\n            if (ret.succeeded) {\n                const text = ret.next.context.docComment;\n                ret.next.context = {...ret.next.context};\n                delete ret.next.context.docComment;\n                ret.tokens.length = 0;\n                ret.tokens.push(text ? text : null);\n            }\n            return ret;\n        },                                          // [1]\n        interfaceKey,                               // [2] key\n        first(                                      // [3] '?' | ''\n            combine(\n                erase(repeat(commentOrSpace)),\n                seq('?'),\n                erase(repeat(commentOrSpace)), ),\n            zeroWidth(() => ['']), ),\n        erase(repeat(commentOrSpace),\n            first(seq(':'), err('\":\" is needed.')),\n            repeat(commentOrSpace), ),\n        first(                                      // [4] type\n            input => complexType(first(separator, seq('}')))(input),\n            err('interface member type is needed.'), ));\n\nconst interfaceDefInner: (separator: ParserFnWithCtx<string, Ctx, Ast>) => ParserFnWithCtx<string, Ctx, Ast> =\n    (separator: ParserFnWithCtx<string, Ctx, Ast>) =>\n    trans(tokens => [[{symbol: 'objectType'}, ...tokens]])(\n        first(\n            combine(erase(\n                seq('{'),\n                    repeat(commentOrSpace),\n                seq('}'), )),\n            combine(\n                erase(seq('{')),\n                    combine(\n                        erase(repeat(commentOrSpace)),\n                        interfaceKeyTypePair(separator),\n                        erase(repeat(commentOrSpace)), ),\n                    repeat(combine(\n                        erase(separator,\n                              repeat(commentOrSpace)),\n                        interfaceKeyTypePair(separator),\n                        erase(repeat(commentOrSpace)), )),\n                    qty(0, 1)(erase(\n                        separator,\n                        repeat(commentOrSpace), )),\n                    first(ahead(seq('}')), err('interfaceDefInner: Unexpected token has appeared.')),\n                erase(seq('}')), )));\n\nconst interfaceDef =\n    trans(tokens => [\n        [{symbol: 'def'},\n            tokens[1],\n            [{symbol: 'docComment'},\n                [{symbol: 'derived'}, tokens[3], [{symbol: '$spread'}, tokens[2]]],\n                tokens[0], ]]])(\n    erase(seq('interface')),\n        input => {                               // TODO: extract function\n            const ret = zeroWidth(() => [])(input);\n            if (ret.succeeded) {\n                const text = ret.next.context.docComment;\n                ret.next.context = {...ret.next.context};\n                delete ret.next.context.docComment;\n                ret.tokens.length = 0;\n                ret.tokens.push(text ? text : null);\n            }\n            return ret;\n        },                                       // [0] base types\n        erase(repeat(commentOrSpace)),\n        symbolName,                              // [1] symbol\n        erase(repeat(commentOrSpace)),\n        first(interfaceExtendsClause,            // [2]\n              zeroWidth(() => []), ),\n        erase(repeat(commentOrSpace)),\n    input => interfaceDefInner(seq(';'))(input), // [3]\n);\n\n\nconst enumKeyValue =\n    trans(tokens => [[{symbol: '$list'}, tokens[1], tokens[2], tokens[0]]])(\n        input => {\n            const ret = zeroWidth(() => [])(input);\n            if (ret.succeeded) {\n                const text = ret.next.context.docComment;\n                ret.next.context = {...ret.next.context};\n                delete ret.next.context.docComment;\n                ret.tokens.length = 0;\n                ret.tokens.push(text ? text : null);\n            }\n            return ret;\n        },                                       // [0]\n        symbolName,\n        erase(repeat(commentOrSpace)),\n        first(\n            combine(\n                erase(seq('=')),\n                erase(repeat(commentOrSpace)),\n                first(decimalIntegerValue,\n                      stringValue, ),\n                erase(repeat(commentOrSpace)), ),\n            zeroWidth(() => null), ));\n\nconst enumDef =\n    trans(tokens => [\n        [{symbol: 'def'}, tokens[1],\n            [{symbol: 'docComment'},\n                [{symbol: 'enumType'}, ...tokens.slice(2)],\n                tokens[0], ]]])(\n    erase(seq('enum')),\n        input => {                               // TODO: extract function\n            const ret = zeroWidth(() => [])(input);\n            if (ret.succeeded) {\n                const text = ret.next.context.docComment;\n                ret.next.context = {...ret.next.context};\n                delete ret.next.context.docComment;\n                ret.tokens.length = 0;\n                ret.tokens.push(text ? text : null);\n            }\n            return ret;\n        },                                       // [0]\n        erase(repeat(commentOrSpace)),\n        symbolName,\n        erase(repeat(commentOrSpace)),\n    first(\n        combine(erase(\n            seq('{'),\n                repeat(commentOrSpace),\n            seq('}'), )),\n        combine(\n            erase(seq('{')),\n                combine(\n                    erase(repeat(commentOrSpace)),\n                    enumKeyValue,\n                    erase(repeat(commentOrSpace)), ),\n                repeat(combine(\n                    erase(seq(','),\n                          repeat(commentOrSpace)),\n                    enumKeyValue,\n                    erase(repeat(commentOrSpace)), )),\n                qty(0, 1)(erase(\n                    seq(','),\n                    repeat(commentOrSpace), )),\n                first(ahead(seq('}')), err('enumDef: Unexpected token has appeared.')),\n            erase(seq('}')), )));\n\n\nconst internalDef =\n    first(typeDef,\n          interfaceDef,\n          enumDef, );\n\n\nconst exportedDef =\n    trans(tokens => [[{symbol: 'export'}, tokens[0]]])(\n        erase(seq('export'),\n              repeat(commentOrSpace), ),\n        internalDef, );\n\n\nconst defStatement =\n    trans(tokens => [\n        [{symbol: '$local'}, [\n                [{symbol: '_ty'}, tokens[1]],\n            ],\n            [{symbol: 'redef'},\n                {symbol: '_ty'},\n                [{symbol: '$pipe'}, {symbol: '_ty'}, ...(tokens[0] as Ast[])], ]]])(\n        trans(tokens => [tokens])(first(\n            decoratorsClause,\n            zeroWidth(() => []), )),      // [0] decorators\n        first(exportedDef,                // [1] body\n              internalDef), );\n\n\nconst externalTypeDef =\n    trans(tokens => [[{symbol: 'external'}, ...tokens]])(\n        erase(seq('external')),\n            erase(repeat(commentOrSpace)),\n            symbolName,\n            repeat(combine(\n                erase(repeat(commentOrSpace)),\n                erase(cls(',')),\n                erase(repeat(commentOrSpace)),\n                symbolName,\n                erase(repeat(commentOrSpace)),\n            )),\n            erase(repeat(commentOrSpace)),\n        erase(cls(';')), );\n\nconst importStatement =\n    trans(tokens => [[{symbol: 'passthru'}, tokens[0]]])(\n        cat(seq('import'),\n            repeat(commentOrSpace),\n            cat(repeat(notCls(';'))),\n            cls(';'), ));\n\n\nconst definition =\n    first(directiveLineComment,\n          defStatement,\n          externalTypeDef,\n          importStatement, );\n\nconst program =\n    combine(\n        erase(repeat(commentOrSpace)),\n        repeat(combine(\n            definition,\n            erase(repeat(commentOrSpace)), )),\n        end(), );\n\n\nexport function parse(s: string) {\n    const z = program(parserInput(s, {/* TODO: set initial state to the context */}));\n    if (! z.succeeded) {\n        throw new Error(z.message);\n    }\n    return z.tokens;\n}\n\n\nconst lisp = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n    config = installCore(config);\n    config.stripComments = true;\n    return SExpression(config);\n})();\n\n\n// tslint:disable: object-literal-key-quotes\nexport function compile(s: string) {\n    const mapTyToTySet = new Map<TypeAssertion, TypeAssertionSetValue>();\n    const schema: TypeAssertionMap = new Map<string, TypeAssertionSetValue>();\n    let gensymCount = 0;\n\n    const def = (name: SxSymbol | string, ty: TypeAssertion): TypeAssertion => {\n        let ret = ty;\n\n        const sym = typeof name === 'string' ? name : name.symbol;\n        if (isUnsafeVarNames(dummyTargetObject, sym)) {\n            throw new Error(`Unsafe symbol name is appeared: ${sym}`);\n        }\n\n        if (! mapTyToTySet.has(ret)) {\n            const originalTypeName = ret.typeName;\n            ret = operators.withName(operators.withTypeName(\n                originalTypeName ?\n                    operators.withOriginalTypeName(ret, originalTypeName) :\n                    ret,\n                sym), sym);\n        }\n\n        const tySet = mapTyToTySet.has(ret) ?\n            mapTyToTySet.get(ret) as TypeAssertionSetValue :\n            {ty: ret, exported: false, resolved: false};\n\n        schema.set(sym, tySet);\n\n        if (! mapTyToTySet.has(ret)) {\n            // TODO: aliases are not exported correctly\n            mapTyToTySet.set(ret, tySet);\n        }\n        return ret;\n    };\n\n    const ref = (name: SxSymbol | string): TypeAssertion => {\n        const sym = typeof name === 'string' ? name : name.symbol;\n        if (isUnsafeVarNames(dummyTargetObject, sym)) {\n            throw new Error(`Unsafe symbol name is appeared: ${sym}`);\n        }\n\n        if (! schema.has(sym)) {\n            return ({\n                kind: 'symlink',\n                symlinkTargetName: sym,\n                name: sym,\n                typeName: sym,\n            });\n        }\n        let ty = (schema.get(sym) as TypeAssertionSetValue).ty;\n        if (ty.noOutput) {\n            ty = {...ty};\n            delete ty.noOutput;\n        }\n        return ty;\n    };\n\n    const external = (...names: string[]) => {\n        for (const name of names) {\n            const ty = def(name, operators.primitive('any'));\n            ty.noOutput = true;\n        }\n    };\n\n    lisp.setGlobals({\n        picked: operators.picked,\n        omit: operators.omit,\n        partial: operators.partial,\n        intersect: operators.intersect,\n        oneOf: operators.oneOf,\n        subtract: operators.subtract,\n        primitive: operators.primitive,\n        primitiveValue: operators.primitiveValue,\n        optional: operators.optional,\n        repeated: operators.repeated,\n        sequenceOf: operators.sequenceOf,\n        spread: operators.spread,\n        enumType: operators.enumType,\n        objectType: operators.objectType,\n        derived: operators.derived,\n        def,\n        ref,\n        export: (ty: TypeAssertion) => {\n            // NOTE: 'ty' should already be registered to 'mapTyToTySet' and 'schema'\n            const tySet = mapTyToTySet.has(ty) ?\n                mapTyToTySet.get(ty) as TypeAssertionSetValue :\n                {ty, exported: false, resolved: false};\n            tySet.exported = true;\n            return ty;\n        },\n        redef: (original: TypeAssertion, ty: TypeAssertion) => {\n            if (original === ty) {\n                return ty;\n            }\n            // NOTE: 'ty' should already be registered to 'mapTyToTySet' and 'schema'\n            const tySet = mapTyToTySet.has(original) ?\n                mapTyToTySet.get(original) as TypeAssertionSetValue :\n                {ty: original, exported: false, resolved: false};\n            tySet.ty = ty;\n            mapTyToTySet.set(tySet.ty, tySet);\n            if (ty.name) {\n                schema.set(ty.name, tySet);\n            }\n            return tySet.ty;\n        },\n        external,\n        passthru: (str: string) => {\n            const ty: TypeAssertion = {\n                kind: 'never',\n                passThruCodeBlock: str,\n            };\n            schema.set(`__$$$gensym_${gensymCount++}$$$__`, {ty, exported: false, resolved: false});\n            return ty;\n        },\n        directive: (name: string, body: string) => {\n            switch (name) {\n            case '@tynder-external':\n                external(...body.split(',').map(x => x.trim()));\n                break;\n            default:\n                throw new Error(`Unknown directive is appeared: ${name}`);\n            }\n            return [];\n        },\n        docComment: operators.withDocComment,\n        '@range': (minValue: number | string, maxValue: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withRange(minValue, maxValue)(ty),\n        '@minValue': (minValue: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMinValue(minValue)(ty),\n        '@maxValue': (maxValue: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMaxValue(maxValue)(ty),\n        '@greaterThan': (greaterThan: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withGreaterThan(greaterThan)(ty),\n        '@lessThan': (lessThan: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withLessThan(lessThan)(ty),\n        '@minLength': (minLength: number) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMinLength(minLength)(ty),\n        '@maxLength': (maxLength: number) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMaxLength(maxLength)(ty),\n        '@match': (pattern: RegExp) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMatch(pattern)(ty),\n        '@msg': (messages: string | ErrorMessages) => (ty: TypeAssertion) =>\n            operators.withMsg(messages)(ty),\n        '@msgId': (messageId: string) => (ty: TypeAssertion) =>\n            operators.withMsgId(messageId)(ty),\n    });\n\n    const z = parse(s);\n    lisp.evaluateAST(z as SxToken[]);\n\n    return resolveSchema(schema);\n}\n// tslint:enable: object-literal-key-quotes\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { StringParserFnWithCtx } from './types';\r\nimport { makeMessage,\r\n         zeroWidth,\r\n         zeroWidthError,\r\n         beginning,\r\n         end,\r\n         quantify,\r\n         first,\r\n         or,\r\n         transform,\r\n         lookAhead,\r\n         lookBehind,\r\n         ApplyProductionRulesArg,\r\n         applyProductionRules } from './parser';\r\n\r\n\r\n\r\nexport function charSequence<C, R>(\r\n        helper: (token: string) => R\r\n        ): (needle: string) => StringParserFnWithCtx<C, R> {\r\n\r\n    return (needle => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            return (src.startsWith(needle) ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needle.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needle)],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: makeMessage(input, `operator \"charSequence(${needle})\"`),\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClass<C, R>(\r\n        helper: (token: string) => R\r\n        ): (...needles: string[]) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            let index = -1;\r\n\r\n            const succeeded = needles.some((needle, idx) => {\r\n                const matched = src.startsWith(needle);\r\n                if (matched) {\r\n                    index = idx;\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            return (succeeded ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needles[index].length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needles[index])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: makeMessage(input, `operator \"charClass(${needles.join(',')})\"`),\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClassNot<C, R>(\r\n    helper: (token: string) => R\r\n    ): (...needles: string[]) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n\r\n            for (const needle of needles) {\r\n                const matched = src.startsWith(needle);\r\n                if (matched) {\r\n                    return ({\r\n                        succeeded: false,\r\n                        error: false,\r\n                        src: input.src,\r\n                        pos: input.start,\r\n                        message: makeMessage(input, `operator \"charClassNot(${needles.join(',')})\"`),\r\n                    });\r\n                }\r\n            }\r\n            const p = input.src.codePointAt(input.start);\r\n            if (p === void 0) {\r\n                return ({\r\n                    succeeded: false,\r\n                    error: false,\r\n                    src: input.src,\r\n                    pos: input.start,\r\n                    message: makeMessage(input, `operator \"charClassNot(${needles.join(',')})\"`),\r\n                });\r\n            }\r\n            const c = String.fromCodePoint(p);\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + c.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(c)],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClassByNeedleFn<C, R>(\r\n        helper: (token: string) => R\r\n        ): (needle: (src: string) => number) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return (needle => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            const len = needle(src);\r\n\r\n            return (len >= 0 ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + len,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(src.substring(0, len))],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: makeMessage(input, `operator \"charClassByNeedleFn\"`),\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function getStringParsers<C, R>(\r\n        params: {\r\n            rawToToken: (rawToken: string) => R,\r\n            concatTokens: (tokens: R[]) => R[],\r\n        }) {\r\n\r\n    const seq = charSequence<C, R>(params.rawToToken);\r\n    const cls = charClass<C, R>(params.rawToToken);\r\n    const notCls = charClassNot<C, R>(params.rawToToken);\r\n    const clsFn = charClassByNeedleFn<C, R>(params.rawToToken);\r\n    const cat = transform<string, C, R>(params.concatTokens);\r\n    const once = quantify<string, C, R>(1, 1);\r\n    const repeat = quantify<string, C, R>();\r\n    // TODO: reduce unneccessary call for adding types.\r\n    const qty = (min?: number, max?: number) => quantify<string, C, R>(min, max);\r\n    const combine = transform<string, C, R>();\r\n    const erase = transform<string, C, R>(tokens => []);\r\n\r\n    const isAlpha = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'Z') ||\r\n            ('a' <= c && c <= 'z')) ? c.length : -1);\r\n    });\r\n\r\n    const isUpper = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('A' <= c && c <= 'Z') ? c.length : -1);\r\n    });\r\n\r\n    const isLower = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('a' <= c && c <= 'z') ? c.length : -1);\r\n    });\r\n\r\n    const isNumber = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '9') ? c.length : -1);\r\n    });\r\n\r\n    const isNonZeroNumber = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('1' <= c && c <= '9') ? c.length : -1);\r\n    });\r\n\r\n    const isBinNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '1') ? c.length : -1);\r\n    });\r\n\r\n    const isOctNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '7') ? c.length : -1);\r\n    });\r\n\r\n    const isHexNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'F') ||\r\n            ('a' <= c && c <= 'f') ||\r\n            ('0' <= c && c <= '9')) ? c.length : -1);\r\n    });\r\n\r\n    const isAlNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'Z') ||\r\n            ('a' <= c && c <= 'z') ||\r\n            ('0' <= c && c <= '9')) ? c.length : -1);\r\n    });\r\n\r\n    const isSpace = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((' \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n            '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n            '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c) ? c.length : -1);\r\n    });\r\n\r\n    const isSpaceWithinSingleLine = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((' \\f\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n            '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n            '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c) ? c.length : -1);\r\n    });\r\n\r\n    const isControl = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            (0x0000 <= p && p <= 0x001f) ||\r\n            (0x007f <= p && p <= 0x009f)) ? c.length : -1);\r\n    });\r\n\r\n    const isWord = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ((' \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n              '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n              '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c)) ||\r\n            ((0x0000 <= p && p <= 0x001f) ||\r\n             (0x007f <= p && p <= 0x009f)) ?\r\n            -1 : c.length);\r\n    });\r\n\r\n    const isNewline = cls('\\r\\n', '\\n', '\\r');\r\n\r\n    const isAny = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return c.length;\r\n    });\r\n\r\n\r\n    const binSep =\r\n        first(isBinNum, cls('_'));\r\n    const octSep =\r\n        first(isOctNum, cls('_'));\r\n    const hexSep =\r\n        first(isHexNum, cls('_'));\r\n\r\n    const binaryIntegerNumber = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isBinNum), repeat(binSep)), );\r\n    const octalIntegerNumber = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isOctNum), repeat(octSep)), );\r\n    const hexIntegerValue = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isHexNum), repeat(hexSep)), );\r\n    const decimalIntegerNumber =\r\n        combine(cat(qty(0, 1)(cls('+', '-')),\r\n            first(combine(once(isNonZeroNumber), repeat(first(isNumber, cls('_')))),\r\n                seq('0'), )));\r\n    const bigDecimalIntegerNumber =\r\n        combine(cat(decimalIntegerNumber,\r\n            erase(seq('n')), ));\r\n    const floatingPointNumber =\r\n        combine(cat(qty(0, 1)(cls('+', '-')),\r\n            first(combine(once(isNonZeroNumber), repeat(first(isNumber, cls('_')))),\r\n                seq('0'), ),\r\n            qty(0, 1)(combine(seq('.'),\r\n                qty(1)(first(isNumber, cls('_'))), )),\r\n            qty(0, 1)(combine(cls('E', 'e'), qty(0, 1)(cls('+', '-')),\r\n                first(combine(once(isNonZeroNumber), repeat(isNumber)), seq('0')), ))));\r\n\r\n    // TODO: reduce unneccessary call for adding types.\r\n    return ({\r\n        seq,\r\n        cls,\r\n        notCls,\r\n        clsFn,\r\n        classes: {\r\n            alpha: isAlpha,\r\n            upper: isUpper,\r\n            lower: isLower,\r\n            num: isNumber,\r\n            nonzero: isNonZeroNumber,\r\n            bin: isBinNum,\r\n            oct: isOctNum,\r\n            hex: isHexNum,\r\n            alnum: isAlNum,\r\n            space: isSpace,\r\n            spaceWithinSingleLine: isSpaceWithinSingleLine,\r\n            ctrl: isControl,\r\n            newline: isNewline,\r\n            word: isWord,\r\n            any: isAny,\r\n        },\r\n        numbers: {\r\n            bin: binaryIntegerNumber,\r\n            oct: octalIntegerNumber,\r\n            hex: hexIntegerValue,\r\n            int: decimalIntegerNumber,\r\n            bigint: bigDecimalIntegerNumber,\r\n            float: floatingPointNumber,\r\n        },\r\n        cat,\r\n        once,\r\n        repeat,\r\n        qty,\r\n        zeroWidth: (helper?: () => R) => zeroWidth<string, C, R>(helper), // TODO:\r\n        err: (message: string) => zeroWidthError<string, C, R>(message),  // TODO:\r\n        beginning: (helper?: () => R) => beginning<string, C, R>(helper), // TODO:\r\n        end: (helper?: () => R) => end<string, C, R>(helper),             // TODO:\r\n        first: (...parsers: Array<StringParserFnWithCtx<C, R>>) => first<string, C, R>(...parsers), // TODO:\r\n        or: (...parsers: Array<StringParserFnWithCtx<C, R>>) => or<string, C, R>(...parsers),       // TODO:\r\n        combine,\r\n        erase,\r\n        trans: (fn: (tokens: R[]) => R[]) => transform<string, C, R>(fn),                                 // TODO:\r\n        ahead: (...parsers: Array<StringParserFnWithCtx<C, R>>) => lookAhead<string, C, R>(...parsers),   // TODO:\r\n        behind: (n: number, helper?: () => R) => lookBehind<string, C, R>(n, helper),\r\n        rules: (args: ApplyProductionRulesArg<string, C, R>) => applyProductionRules<string, C, R>(args), // TODO:\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig }       from '../../types';\r\nimport { operators,\r\n         compilationOperators } from './core.operator';\r\nimport { macros,\r\n         compilationMacros }    from './core.macro';\r\nimport symbols                  from './core.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || [])\r\n        .concat(operators)\r\n        .concat(config.enableCompilationOperators ? compilationOperators : []);\r\n    config.macros = (config.macros || [])\r\n        .concat(macros)\r\n        .concat(config.enableCompilationOperators ? compilationMacros : []);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         AdditionalPropsKey,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../types';\nimport { escapeString }   from '../lib/escape';\n\n\n\nfunction formatTypeScriptCodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction generateTypeScriptCodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    // TODO: Function, DateStr, DateTimeStr\n    switch (ty.primitiveName) {\n    case 'integer':\n        return 'number';\n    default:\n        return ty.primitiveName;\n    }\n}\n\n\nfunction generateTypeScriptCodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null) {\n        return 'null';\n    }\n    if (ty.value === void 0) {\n        return 'undefined';\n    }\n    switch (typeof ty.value) {\n    case 'string':\n        return `'${escapeString(ty.value)}'`;\n    case 'bigint':\n        return `${ty.value.toString()}n`;\n    default:\n        return ty.value.toString();\n    }\n}\n\n\nfunction generateTypeScriptCodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext) {\n    return (ty.repeated.kind === 'primitive' ||\n            ty.repeated.kind === 'never' ||\n            ty.repeated.kind === 'any' ||\n            ty.repeated.kind === 'unknown' ||\n            ty.repeated.kind === 'object' ||\n            ty.repeated.kind === 'symlink' ||\n            (ty.repeated.kind === 'one-of' && ty.repeated.typeName) ?\n        `${ty.repeated.typeName ?\n            ty.repeated.typeName :\n            generateTypeScriptCodeInner(ty.repeated, false, ctx)}[]` :\n        `Array<${ty.repeated.typeName ?\n            ty.repeated.typeName :\n            generateTypeScriptCodeInner(ty.repeated, false, ctx)}>`\n    );\n}\n\n\nfunction generateTypeScriptCodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateTypeScriptCodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    return `[${\n        ty.sequence\n            .filter(x => x.kind !== 'spread')\n            .map(x => x.typeName ?\n                x.typeName :\n                generateTypeScriptCodeInner(x, false, {...ctx, nestLevel: ctx.nestLevel + 1}))\n            .join(', ')}]`;\n}\n\n\nfunction generateTypeScriptCodeOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    return `(${ty.oneOf\n        .map(x => x.typeName ?\n            x.typeName :\n            generateTypeScriptCodeInner(x, false, ctx)).join(' | ')})`;\n}\n\n\nfunction generateTypeScriptCodeOptional(ty: OptionalAssertion, ctx: CodegenContext) {\n    return generateTypeScriptCodeInner(ty.optional, false, ctx);\n}\n\n\nfunction generateTypeScriptCodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return `(${ty.values.map(x => `${x[1]}`).join(' | ')})`;\n}\n\n\nfunction formatAdditionalPropsName(ak: AdditionalPropsKey, i: number) {\n    return (`[propName${i}: ${ak.map(x => typeof x === 'string' ? x : 'string').join(' | ')}]`);\n}\n\n\nfunction generateTypeScriptCodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    if (ty.members.filter(x => !(x[2])).length === 0) {\n        return '{}';\n    }\n    const sep = isInterface ? ';\\n' : ',\\n';\n\n    const memberLines =\n        ty.members.filter(x => !(x[2]))\n        .map(x =>\n            `${formatTypeScriptCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                x[0]}${x[1].kind === 'optional' ? '?' : ''}: ${\n                x[1].typeName ?\n                    x[1].typeName :\n                    generateTypeScriptCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})}`);\n\n    const additionalPropsLines =\n        ty.additionalProps?.filter(x => !(x[2]))\n        .map((x, i) =>\n            `${formatTypeScriptCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                formatAdditionalPropsName(x[0], i)}${x[1].kind === 'optional' ? '?' : ''}: ${\n                x[1].typeName ?\n                    x[1].typeName :\n                    generateTypeScriptCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})}`) || [];\n\n    return (\n        `{\\n${memberLines.concat(additionalPropsLines).join(sep)}${sep}${'    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateTypeScriptCodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext): string {\n    switch (ty.kind) {\n    case 'never':\n        return 'never';\n    case 'any':\n        return 'any';\n    case 'unknown':\n        return 'unknown';\n    case 'primitive':\n        return generateTypeScriptCodePrimitive(ty, ctx);\n    case 'primitive-value':\n        return generateTypeScriptCodePrimitiveValue(ty, ctx);\n    case 'repeated':\n        return generateTypeScriptCodeRepeated(ty, ctx);\n    case 'spread':\n        return generateTypeScriptCodeSpread(ty, ctx);\n    case 'sequence':\n        return generateTypeScriptCodeSequence(ty, ctx);\n    case 'one-of':\n        return generateTypeScriptCodeOneOf(ty, ctx);\n    case 'optional':\n        return generateTypeScriptCodeOptional(ty, ctx);\n    case 'enum':\n        return generateTypeScriptCodeEnum(ty, ctx);\n    case 'object':\n        return generateTypeScriptCodeObject(ty, isInterface, ctx);\n    case 'symlink':\n        return ty.symlinkTargetName;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateTypeScriptCode(types: TypeAssertionMap): string {\n    let code = '';\n    const ctx = {nestLevel: 0};\n    for (const ty of types.entries()) {\n        if (ty[1].ty.noOutput) {\n            continue;\n        }\n        code += formatTypeScriptCodeDocComment(ty[1].ty, ctx.nestLevel);\n        if (ty[1].exported) {\n            code += 'export ';\n        }\n        if (ty[1].ty.kind === 'object') {\n            code += `interface ${ty[0]}${\n                ty[1].ty.baseTypes && ty[1].ty.baseTypes.length ? ` extends ${\n                    ty[1].ty.baseTypes\n                        .filter(x => x.typeName)\n                        .map(x => x.typeName)\n                        .join(', ')}` : ''} ${\n                generateTypeScriptCodeInner(ty[1].ty, true, ctx)}\\n\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            let value: number | null = 0;\n            code += `enum ${ty[0]} {\\n${\n                ty[1].ty.values\n                    .map(x => `${\n                        formatTypeScriptCodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                        indent1}${(() => {\n                            if (value !== null && x[1] === value) {\n                                value++;\n                                return `${x[0]}`;\n                            } else {\n                                if (typeof x[1] === 'number') {\n                                    value = x[1] + 1;\n                                    return `${x[0]} = ${x[1]}`;\n                                } else {\n                                    return `${x[0]} = '${escapeString(x[1])}'`;\n                                }\n                            }\n                        })()},\\n`)\n                    .join('')}${indent0}}\\n\\n`;\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            code += `${ty[1].ty.passThruCodeBlock}\\n\\n`;\n        } else {\n            code += `type ${ty[0]} = ${\n                ty[1].ty.originalTypeName ||\n                generateTypeScriptCodeInner(ty[1].ty, false, ctx)};\\n\\n`;\n        }\n    }\n    return code;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         TypeAssertionMap } from '../types';\nimport * as JsonSchema      from '../types/json-schema-types';\n\n\n\nfunction addMetaInfo(a: JsonSchema.JsonSchemaAssertion, ty: TypeAssertion) {\n    const a2 = {...a};\n    let changed = false;\n\n    if (ty.docComment) {\n        a2.description = ty.docComment;\n    }\n    switch (ty.kind) {\n    case 'repeated':\n        if (typeof ty.min === 'number') {\n            (a2 as JsonSchema.JsonSchemaArrayAssertion).minItems = ty.min;\n            changed = true;\n        }\n        if (typeof ty.max === 'number') {\n            (a2 as JsonSchema.JsonSchemaArrayAssertion).maxItems = ty.max;\n            changed = true;\n        }\n        break;\n    case 'primitive':\n        if (typeof ty.minValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).minimum = ty.minValue;\n            changed = true;\n        }\n        if (typeof ty.maxValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).maximum = ty.maxValue;\n            changed = true;\n        }\n        if (typeof ty.greaterThanValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).exclusiveMinimum = ty.greaterThanValue;\n            changed = true;\n        }\n        if (typeof ty.lessThanValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).exclusiveMaximum = ty.lessThanValue;\n            changed = true;\n        }\n        if (typeof ty.minLength === 'number') {\n            (a2 as JsonSchema.JsonSchemaStringAssertion).minLength = ty.minLength;\n            changed = true;\n        }\n        if (typeof ty.maxLength === 'number') {\n            (a2 as JsonSchema.JsonSchemaStringAssertion).maxLength = ty.maxLength;\n            changed = true;\n        }\n        if (ty.pattern) {\n            (a2 as JsonSchema.JsonSchemaStringAssertion).pattern = ty.pattern.source;\n            changed = true;\n        }\n        break;\n    }\n    return (changed ? a2 : a);\n}\n\nfunction generateJsonSchemaInner(schema: TypeAssertionMap, ty: TypeAssertion, nestLevel: number): JsonSchema.JsonSchemaAssertion {\n    if (0 < nestLevel && ty.typeName) {\n        const ret: JsonSchema.JsonSchemaRefAssertion = {\n            $ref: `#/definitions/${ty.typeName}`,\n        };\n        const r2 = addMetaInfo(ret, ty);\n        if (ret !== r2) {\n            // NOTE: `$ref` cannot have value constraints.\n            return generateJsonSchemaInner(schema, ty, 0);\n        } else {\n            return ret;\n        }\n    }\n\n    switch (ty.kind) {\n    case 'symlink':\n        {\n            const ret: JsonSchema.JsonSchemaRefAssertion = {\n                $ref: `#/definitions/${ty.symlinkTargetName}`,\n            };\n            const r2 = addMetaInfo(ret, ty);\n            if (ret !== r2) {\n                // NOTE: `$ref` cannot have value constraints.\n                const t2 = schema.get(ty.symlinkTargetName)?.ty;\n                if (t2) {\n                    return generateJsonSchemaInner(schema, t2, 0);\n                } else {\n                    // Drop constraints.\n                    return ret;\n                }\n            } else {\n                return ret;\n            }\n        }\n    case 'repeated':\n        {\n            const ret: JsonSchema.JsonSchemaArrayAssertion = {\n                type: 'array',\n                items: generateJsonSchemaInner(schema, ty.repeated, nestLevel + 1),\n            };\n            if (typeof ty.min === 'number') {\n                ret.minItems = ty.min;\n            }\n            if (typeof ty.max === 'number') {\n                ret.maxItems = ty.max;\n            }\n            return addMetaInfo(ret, ty);\n        }\n    case 'sequence':\n        {\n            const ret: JsonSchema.JsonSchemaArrayAssertion = {\n                type: 'array',\n                items: { anyOf: ty.sequence.map(x => generateJsonSchemaInner(schema, x, nestLevel + 1)) },\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'spread':\n        {\n            return generateJsonSchemaInner(schema, ty.spread, nestLevel + 1);\n        }\n    case 'one-of':\n        {\n            const ret: JsonSchema.JsonSchemaAnyOfAssertion = {\n                anyOf: ty.oneOf.map(x => generateJsonSchemaInner(schema, x, nestLevel + 1)),\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'optional':\n        {\n            const ret: JsonSchema.JsonSchemaOneOfAssertion = {\n                oneOf: [\n                    generateJsonSchemaInner(schema, ty.optional, nestLevel + 1),\n                    {type: 'null'},\n                ],\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'enum':\n        {\n            const ret: JsonSchema.JsonSchemaTsEnumAssertion = {\n                type: ['string', 'number'],\n                enum: ty.values.map(x => x[1]),\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'object':\n        {\n            const properties: JsonSchema.JsonSchemaObjectPropertyAssertion = {};\n            const patternProperties: JsonSchema.JsonSchemaObjectPropertyAssertion = {};\n            let patternPropsCount = 0;\n            const required: string[] = [];\n            for (const m of ty.members) {\n                const z = generateJsonSchemaInner(schema,\n                    m[1].kind === 'optional' ?\n                        m[1].optional :\n                        m[1],\n                    nestLevel + 1);\n\n                if (m[3]) {\n                    z.description = m[3];\n                } else {\n                    delete z.description;\n                }\n                properties[m[0]] = z;\n\n                if (m[1].kind !== 'optional') {\n                    required.push(m[0]);\n                }\n            }\n            for (const m of ty.additionalProps || []) {\n                const z = generateJsonSchemaInner(schema, m[1], nestLevel + 1);\n                if (m[3]) {\n                    z.description = m[3];\n                } else {\n                    delete z.description;\n                }\n                for (const k of m[0]) {\n                    patternPropsCount++;\n                    switch (k) {\n                    case 'number':\n                        patternProperties['^[0-9]+$'] = z;\n                        break;\n                    case 'string':\n                        patternProperties['^.*$'] = z;\n                        break;\n                    default:\n                        patternProperties[k.source] = z;\n                        break;\n                    }\n                }\n            }\n            const ret: JsonSchema.JsonSchemaObjectAssertion = {\n                type: 'object',\n                properties,\n                ...(0 < patternPropsCount ? {patternProperties} : {}),\n                ...(0 < required.length ? {required} : {}),\n                additionalProperties: false,\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'primitive':\n        {\n            switch (ty.primitiveName) {\n            case 'null': case 'undefined':\n                {\n                    const ret: JsonSchema.JsonSchemaNullAssertion = {\n                        type: 'null',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'number':\n                {\n                    const ret: JsonSchema.JsonSchemaNumberAssertion = {\n                        type: 'number',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'bigint':\n                {\n                    const ret: JsonSchema.JsonSchemaBigIntAssertion = {\n                        type: ['integer', 'string'],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'integer':\n                {\n                    const ret: JsonSchema.JsonSchemaNumberAssertion = {\n                        type: 'integer',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'string':\n                {\n                    const ret: JsonSchema.JsonSchemaStringAssertion = {\n                        type: 'string',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'boolean':\n                {\n                    const ret: JsonSchema.JsonSchemaBooleanAssertion = {\n                        type: 'boolean',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            }\n            // TODO: Function, DateStr, DateTimeStr\n        }\n    case 'primitive-value':\n        {\n            switch (typeof ty.value) {\n            case 'number':\n                {\n                    const ret: JsonSchema.JsonSchemaNumberValueAssertion = {\n                        type: 'number',\n                        enum: [ty.value],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'bigint':\n                {\n                    const ret: JsonSchema.JsonSchemaBigIntNumberValueAssertion = {\n                        type: ['integer', 'string'],\n                        enum: [ty.value.toString()],\n                    };\n                    if (BigInt(Number.MIN_SAFE_INTEGER) <= ty.value && ty.value <= BigInt(Number.MAX_SAFE_INTEGER)) {\n                        ret.enum.push(Number(ty.value));\n                    }\n                    return addMetaInfo(ret, ty);\n                }\n            case 'string':\n                {\n                    const ret: JsonSchema.JsonSchemaStringValueAssertion = {\n                        type: 'string',\n                        enum: [ty.value],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'boolean':\n                {\n                    const ret: JsonSchema.JsonSchemaBooleanValueAssertion = {\n                        type: 'boolean',\n                        enum: [ty.value],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            default:\n                throw new Error(`Unknown primitive-value assertion: ${typeof ty.value}`);\n            }\n        }\n    case 'never':\n        {\n            const ret: JsonSchema.JsonSchemaNullAssertion = {\n                type: 'null',\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'any': case 'unknown':\n        {\n            const ret: JsonSchema.JsonSchemaAnyAssertion = {\n                type: ['null', 'integer', 'number', 'string', 'boolean', 'array', 'object'],\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateJsonSchemaObject(schema: TypeAssertionMap) {\n    const ret: JsonSchema.JsonSchemaRootAssertion = {\n        $schema: 'http://json-schema.org/draft-06/schema#',\n        definitions: {},\n    };\n    for (const ty of schema.entries()) {\n        if (ty[1].ty.noOutput) {\n            continue;\n        }\n        (ret.definitions as object)[ty[0]] = generateJsonSchemaInner(schema, ty[1].ty, 0);\n    }\n    return ret;\n}\n\n\nexport function generateJsonSchema(schema: TypeAssertionMap, asTs?: boolean): string {\n    const ret = generateJsonSchemaObject(schema);\n\n    if (asTs) {\n        return (\n            `\\n// tslint:disable: object-literal-key-quotes\\n` +\n            `const schema = ${JSON.stringify(ret, null, 2)};\\nexport default schema;` +\n            `\\n// tslint:enable: object-literal-key-quotes\\n`\n        );\n    } else {\n        return JSON.stringify(ret, null, 2);\n    }\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../types';\nimport { escapeString }   from '../lib/escape';\n\n\n\nfunction formatProto3CodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction generateProto3CodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    switch (ty.primitiveName) {\n    case 'number':\n        return 'double';\n    case 'integer':\n        return 'int32';\n    case 'bigint':\n        return 'string';\n    case 'string':\n        return 'string';\n    case 'boolean':\n        return 'bool';\n    case 'undefined': case 'null': default:\n        return 'google.protobuf.Any';\n    }\n    // TODO: Function, integer, DateStr, DateTimeStr\n}\n\n\nfunction generateProto3CodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null) {\n        return 'google.protobuf.Any';\n    }\n    if (ty.value === void 0) {\n        return 'google.protobuf.Any';\n    }\n    switch (typeof ty.value) {\n    case 'number':\n        return 'double';\n    case 'bigint':\n        return 'string';\n    case 'string':\n        return 'string';\n    case 'boolean':\n        return 'bool';\n    default:\n        return 'google.protobuf.Any';\n    }\n}\n\n\nfunction generateProto3CodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext) {\n    return (`repeated ${ty.repeated.typeName ?\n            ty.repeated.typeName :\n            generateProto3CodeInner(ty.repeated, false, ctx)}`\n    );\n}\n\n\nfunction generateProto3CodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateProto3CodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    return 'google.protobuf.Any';\n}\n\n\nfunction generateProto3CodeOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    return 'google.protobuf.Any';\n}\n\n\nfunction generateProto3CodeOptional(ty: OptionalAssertion, ctx: CodegenContext) {\n    const r = generateProto3CodeInner(ty.optional, false, ctx);\n    switch (r) {\n    case 'double':\n        return 'google.protobuf.DoubleValue';\n    case 'int64':\n        return 'google.protobuf.Int64Value';\n    case 'int32':\n        return 'google.protobuf.Int32Value';\n    case 'string':\n        return 'google.protobuf.StringValue';\n    case 'bool':\n        return 'google.protobuf.BoolValue';\n    default:\n        return 'google.protobuf.Any';\n    }\n}\n\n\nfunction generateProto3CodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return `(${ty.values.map(x => `${x[1]}`).join(' | ')})`;\n}\n\n\nfunction generateProto3CodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    if (ty.members.length === 0) {\n        return '{}';\n    }\n    const sep = isInterface ? ';\\n' : ',\\n';\n    let count = 1;\n\n    const memberLines =\n        ty.members\n        .map(x =>\n            `${formatProto3CodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                x[1].typeName ?\n                    x[1].typeName :\n                    generateProto3CodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})} ${\n                x[0]} = ${count++}`);\n\n    return (\n        `{\\n${memberLines.join(sep)}${sep}${'    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateProto3CodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext): string {\n    switch (ty.kind) {\n    case 'never': case 'any': case 'unknown':\n        return 'google.protobuf.Any';\n    case 'primitive':\n        return generateProto3CodePrimitive(ty, ctx);\n    case 'primitive-value':\n        return generateProto3CodePrimitiveValue(ty, ctx);\n    case 'repeated':\n        return generateProto3CodeRepeated(ty, ctx);\n    case 'spread':\n        return generateProto3CodeSpread(ty, ctx);\n    case 'sequence':\n        return generateProto3CodeSequence(ty, ctx);\n    case 'one-of':\n        return generateProto3CodeOneOf(ty, ctx);\n    case 'optional':\n        return generateProto3CodeOptional(ty, ctx);\n    case 'enum':\n        return generateProto3CodeEnum(ty, ctx);\n    case 'object':\n        return generateProto3CodeObject(ty, isInterface, ctx);\n    case 'symlink':\n        return ty.symlinkTargetName;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateProto3Code(types: TypeAssertionMap): string {\n    let code =\n`\nsyntax = \"proto3\";\nimport \"google/protobuf/wrappers.proto\";\nimport \"google/protobuf/any.proto\";\n\n`;\n\n    const ctx = {nestLevel: 0};\n    for (const ty of types.entries()) {\n        if (ty[1].ty.noOutput) {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            code += `message ${ty[0]} {\\n${indent1}google.protobuf.Any value = 1;\\n${indent0}}\\n\\n`;\n            continue;\n        }\n        code += formatProto3CodeDocComment(ty[1].ty, ctx.nestLevel);\n        if (ty[1].ty.kind === 'object') {\n            code += `message ${ty[0]} ${\n                generateProto3CodeInner(ty[1].ty, true, ctx)}\\n\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            if (0 < ty[1].ty.values.filter(x => typeof x[1] !== 'number').length) {\n                code += `message ${ty[0]} {\\n${indent1}google.protobuf.Any value = 1;\\n${indent0}}\\n\\n`;\n            } else {\n                code += `enum ${ty[0]} {\\n${\n                    ty[1].ty.values\n                        .map(x => `${\n                            formatProto3CodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                            indent1}${(() => {\n                                if (typeof x[1] === 'number') {\n                                    return `${x[0]} = ${x[1]}`;\n                                } else {\n                                    return `${x[0]} = '${escapeString(x[1])}'`;\n                                }\n                            })()};\\n`)\n                        .join('')}${indent0}}\\n\\n`;\n            }\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            // nothing to do\n        } else {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            code += `message ${ty[0]} {\\n${indent1}${generateProto3CodeInner(ty[1].ty, false, ctx)} value = 1;\\n${indent0}}\\n\\n`;\n        }\n    }\n    return code;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../types';\n\n\n\nfunction formatGraphQlCodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction generateGraphQlCodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    switch (ty.primitiveName) {\n    case 'number':\n        return 'Float';\n    case 'integer':\n        return 'Int';\n    case 'bigint':\n        return 'BigInt';\n    case 'string':\n        return 'String';\n    case 'boolean':\n        return 'Boolean';\n    case 'undefined': case 'null': default:\n        return 'Any'; // TODO: Any is invalid type.\n    }\n    // TODO: Function, DateStr, DateTimeStr\n}\n\n\nfunction generateGraphQlCodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null) {\n        return 'Any'; // TODO: Any is invalid type.\n    }\n    if (ty.value === void 0) {\n        return 'Any'; // TODO: Any is invalid type.\n    }\n    switch (typeof ty.value) {\n        case 'number':\n            return 'Float';\n        case 'bigint':\n            return 'BigInt';\n        case 'string':\n            return 'String';\n        case 'boolean':\n            return 'Boolean';\n        default:\n            return 'Any'; // TODO: Any is invalid type.\n    }\n}\n\n\nfunction generateGraphQlCodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext) {\n    return (`[${ty.repeated.typeName ?\n            ty.repeated.typeName :\n            generateGraphQlCodeInner(ty.repeated, false, ctx)}${\n                ty.repeated.kind === 'optional' ? '' : '!'}]`\n    );\n}\n\n\nfunction generateGraphQlCodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateGraphQlCodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    return 'Any'; // TODO: Any is invalid type.\n}\n\n\nfunction generateGraphQlCodeOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    return `${ty.oneOf\n        .map(x => x.typeName ?\n            x.typeName :\n            generateGraphQlCodeInner(x, false, ctx)).join(' | ')}`;\n}\n\n\nfunction generateGraphQlCodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return `${ty.values.map(x => `${x[1]}`).join(' | ')}`; // TODO: invalid syntax\n}\n\n\nfunction generateGraphQlCodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    if (ty.members.length === 0) {\n        return '{}';\n    }\n    const sep = '\\n';\n\n    const memberLines =\n        ty.members\n        .map(x =>\n            `${formatGraphQlCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                x[0]}: ${\n                x[1].typeName ?\n                    `${x[1].typeName}` :\n                    generateGraphQlCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})}${\n                x[1].kind === 'optional' ? '' : '!'}`);\n\n    return (\n        `{\\n${memberLines.join(sep)}${sep}${'    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateGraphQlCodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext): string {\n    let ret = '';\n\n    switch (ty.kind) {\n    case 'optional':\n        return generateGraphQlCodeInner(ty.optional, isInterface, ctx);\n    case 'one-of':\n        return generateGraphQlCodeOneOf(ty, ctx); // TODO: inline union is invalid.\n    case 'spread':\n        return generateGraphQlCodeSpread(ty, ctx);\n    case 'sequence':\n        return generateGraphQlCodeSequence(ty, ctx);\n    case 'never':\n        ret = 'Any'; // TODO: Any is invalid type.\n        break;\n    case 'any':\n        ret = 'Any'; // TODO: Any is invalid type.\n        break;\n    case 'unknown':\n        ret = 'Any'; // TODO: Any is invalid type.\n        break;\n    case 'primitive':\n        ret = generateGraphQlCodePrimitive(ty, ctx);\n        break;\n    case 'primitive-value':\n        ret = generateGraphQlCodePrimitiveValue(ty, ctx);\n        break;\n    case 'repeated':\n        ret = generateGraphQlCodeRepeated(ty, ctx);\n        break;\n    case 'enum':\n        ret = generateGraphQlCodeEnum(ty, ctx);\n        break;\n    case 'object':\n        ret = generateGraphQlCodeObject(ty, isInterface, ctx);\n        break;\n    case 'symlink':\n        ret = ty.symlinkTargetName;\n        break;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n    return ret + '';\n}\n\n\nexport function generateGraphQlCode(types: TypeAssertionMap): string {\n    let code = `\\nscalar Any\\nunion BigInt = String | Int\\n\\n`;\n\n    const ctx = {nestLevel: 0};\n    for (const ty of types.entries()) {\n        if (ty[1].ty.noOutput) {\n            code += `scalar ${ty[0]}\\n\\n`;\n            continue;\n        }\n        code += formatGraphQlCodeDocComment(ty[1].ty, ctx.nestLevel);\n        if (ty[1].ty.kind === 'object') {\n            code += `type ${ty[0]} ${\n                generateGraphQlCodeInner(ty[1].ty, true, ctx)}\\n\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            code += `enum ${ty[0]} {\\n${\n                ty[1].ty.values\n                    .map(x => `${\n                        formatGraphQlCodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                        indent1}${x[0]}\\n`)\n                    .join('')}${indent0}}\\n\\n`;\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            // nothing to do\n        } else {\n            code += `union ${ty[0]} = ${generateGraphQlCodeInner(ty[1].ty, false, ctx)}\\n\\n`;\n        }\n    }\n    return code;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         ObjectAssertion,\n         SerializedSchemaInfo,\n         TypeAssertionSetValue,\n         TypeAssertionMap } from './types';\nimport { resolveSchema }    from './lib/resolver';\n\n\n\nexport const TynderSchemaVersion = 'tynder/1.0';\n\n\nfunction serializeInner(ty: TypeAssertion, nestLevel: number): TypeAssertion {\n    if (0 < nestLevel && ty.typeName) {\n        return ({\n            kind: 'symlink',\n            symlinkTargetName: ty.typeName,\n            // TODO: preserve informations (doc comments, name, typeName, ...)\n        });\n    }\n\n    const ret: TypeAssertion = {...ty};\n    switch (ret.kind) {\n    case 'never': case 'any': case 'unknown': case 'symlink': case 'operator':\n        break;\n    case 'primitive-value':\n        if (typeof ret.value === 'bigint') {\n            ret.value = String(ret.value);\n            ret.primitiveName = 'bigint';\n        }\n        break;\n    case 'primitive':\n        if (ret.pattern) {\n            ret.pattern = `/${ret.pattern.source}/${ret.pattern.flags}` as any;\n        }\n        break;\n    case 'repeated':\n        ret.repeated = serializeInner(ret.repeated, nestLevel + 1);\n        break;\n    case 'spread':\n        ret.spread = serializeInner(ret.spread, nestLevel + 1);\n        break;\n    case 'sequence':\n        ret.sequence = ret.sequence.map(x => serializeInner(x, nestLevel + 1));\n        break;\n    case 'one-of':\n        ret.oneOf = ret.oneOf.map(x => serializeInner(x, nestLevel + 1));\n        break;\n    case 'optional':\n        ret.optional = serializeInner(ret.optional, nestLevel + 1);\n        break;\n    case 'enum':\n        ret.values = ret.values.slice().map(x => x[2] === null || x[2] === void 0 ? x.slice(0, 2) : x) as any;\n        break;\n    case 'object':\n        ret.members = ret.members.map(x => [x[0], serializeInner(x[1], nestLevel + 1), ...x.slice(2)]) as any;\n        if (ret.baseTypes) {\n            // NOTE: convert 'baseTypes' to 'symlink'.\n            ret.baseTypes = ret.baseTypes.map(x => serializeInner(x, nestLevel + 1)) as ObjectAssertion[];\n        }\n        break;\n    default:\n        throw new Error(`Unknown type assertion: ${(ret as any).kind}`);\n    }\n\n    delete ret.passThruCodeBlock;\n    return ret;\n}\n\n\nexport function serializeToObject(schema: TypeAssertionMap): SerializedSchemaInfo {\n    const ret: SerializedSchemaInfo = {\n        version: TynderSchemaVersion,\n        ns: {},\n    };\n    const current = {};\n\n    for (const ty of schema.entries()) {\n        current[ty[0]] = serializeInner(ty[1].ty, 0);\n    }\n\n    ret.ns['.'] = current;\n\n    return ret;\n}\n\n\nexport function serialize(schema: TypeAssertionMap, asTs?: boolean): string {\n    const ret = serializeToObject(schema);\n\n    if (asTs) {\n        return (\n            `\\n// tslint:disable: object-literal-key-quotes\\n` +\n            `const schema = ${JSON.stringify(ret, null, 2)};\\nexport default schema;` +\n            `\\n// tslint:enable: object-literal-key-quotes\\n`\n        );\n    } else {\n        return JSON.stringify(ret, null, 2);\n    }\n}\n\n\nfunction deserializeInner(ty: TypeAssertion) {\n    const ret: TypeAssertion = {...ty};\n    switch (ret.kind) {\n    case 'never': case 'any': case 'unknown':\n    case 'enum': case 'symlink': case 'operator':\n        // NOTE: 'symlink' and 'operator' will resolved by calling 'resolveSymbols()' in 'deserialize()'.\n        break;\n    case 'primitive-value':\n        if (ret.primitiveName === 'bigint') {\n            delete ret.primitiveName;\n            ret.value = BigInt(ret.value);\n        }\n        break;\n    case 'primitive':\n        if (ret.pattern) {\n            const m = (/^\\/(.*)\\/([gimsuy]*)$/s).exec(ret.pattern as any);\n            if (m) {\n                ret.pattern = new RegExp(m[1], m[2]);\n            } else {\n                throw new Error(`Unknown pattern match assertion: ${ret.pattern as any}`);\n            }\n        }\n        break;\n    case 'repeated':\n        ret.repeated = deserializeInner(ret.repeated);\n        break;\n    case 'spread':\n        ret.spread = deserializeInner(ret.spread);\n        break;\n    case 'sequence':\n        ret.sequence = ret.sequence.map(x => deserializeInner(x));\n        break;\n    case 'one-of':\n        ret.oneOf = ret.oneOf.map(x => deserializeInner(x));\n        break;\n    case 'optional':\n        ret.optional = deserializeInner(ret.optional);\n        break;\n    case 'object':\n        ret.members = ret.members.map(x => [x[0], deserializeInner(x[1]), x.slice(2)]) as any;\n        // NOTE: keep 'baseTypes' as 'symlink'.\n        break;\n    default:\n        throw new Error(`Unknown type assertion: ${(ret as any).kind}`);\n    }\n    return ret;\n}\n\n\nexport function deserializeFromObject(obj: any) {\n    if (obj.version !== TynderSchemaVersion) {\n        throw new Error(`Unknown schema version: ${obj.version}`);\n    }\n\n    const schema: TypeAssertionMap = new Map<string, TypeAssertionSetValue>();\n    const current = obj.ns['.'];\n\n    for (const k in current) {\n        if (! Object.prototype.hasOwnProperty.call(current, k)) {\n            continue;\n        }\n        schema.set(k, {\n            ty: deserializeInner(current[k]),\n            exported: false,\n            resolved: false,\n        });\n    }\n\n    return resolveSchema(schema);\n}\n\n\nexport function deserialize(text: string) {\n    const parsed = JSON.parse(text);\n    return deserializeFromObject(parsed);\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport * from './types';\nexport * from './compiler';\nexport * from './operators';\nexport * from './codegen';\nexport * from './serializer';\nexport * from './validator';\nexport * from './picker';\n"],"sourceRoot":""}