{"version":3,"sources":["webpack://tynder/webpack/universalModuleDefinition","webpack://tynder/webpack/bootstrap","webpack://tynder/./src/types/tynder-schema-types.ts","webpack://tynder/./src/types.ts","webpack://tynder/./src/operators.ts","webpack://tynder/./src/lib/util.ts","webpack://tynder/./src/lib/escape.ts","webpack://tynder/./src/lib/errors.ts","webpack://tynder/./src/lib/resolver.ts","webpack://tynder/./src/lib/reporter.ts","webpack://tynder/./src/validator.ts","webpack://tynder/./src/picker.ts","webpack://tynder/./src/index-rt.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ErrorTypes","picked","ty","names","kind","members","member","find","x","m2","length","push","operator","operands","omit","partial","optional","slice","optTy","typeName","intersect","types","Error","filter","lastTy","Map","set","Array","from","values","oneOf","primitiveValue","ret","concat","subtract","map","primitive","primitiveName","substring","regexpPatternStringType","pattern","repeated","option","min","max","sequenceOf","seq","sequence","spread","enumType","ar","objectType","revMembers","reverse","membersProps","withName","additionalProps","checkRecursiveExtends","base","symlinkTargetName","baseTypes","z","derived","exts","ext","symlinkType","withTypeName","withOriginalTypeName","originalTypeName","withDocComment","docComment","withRange","minValue","maxValue","opt","withMinValue","withMaxValue","withGreaterThan","greaterThanValue","withLessThan","lessThanValue","withMinLength","minLength","withMaxLength","maxLength","withMatch","withMsg","messages","message","withMsgId","messageId","globalObj","Function","objConstructor","constructor","funConstructor","NumberPattern","dummyTargetObject","isUnsafeVarNames","target","varName","con","__proto__","escapeString","replace","ValidationError","ctx","super","updateSchema","original","schema","has","resolved","resolveMemberNames","rootSym","memberTreeSymbols","memberPos","addTypeName","mt","memberSym","join","k","test","memberTree","resolveSymbols","ctx2","nestLevel","symlinkStack","findIndex","ty2","xTy","link","link2","mergeTypeAndSymlink","baseSymlinks","isDeserialization","d2","operators","ctx3","resolverOps","resolveSchema","opts","ent","entries","errorTypeNames","defaultMessages","invalidDefinition","required","typeUnmatched","additionalPropUnmatched","repeatQtyUnmatched","sequenceUnmatched","valueRangeUnmatched","valuePatternUnmatched","valueLengthUnmatched","valueUnmatched","getErrorMessage","errType","InvalidDefinition","Required","TypeUnmatched","AdditionalPropUnmatched","RepeatQtyUnmatched","SequenceUnmatched","ValueRangeUnmatched","ValuePatternUnmatched","ValueLengthUnmatched","ValueUnmatched","nvl","v","alt","getExpectedType","String","formatErrorMessage","msg","data","args","tr","topRepeatable","dict","source","flags","dataPath","endsWith","entryName","parentType","substitutions","RegExp","reportError","errorMessages","dataPathEntryArray","typeStack","next","pt","isArray","pi","isSet","len","j","q","constraints","cSrces","unshift","cSrc","pat","val","errors","code","reportErrorWithPush","tyidx","pop","validateRoot","dataIndex","validateNeverTypeAssertion","mapper","validateUnknownTypeAssertion","Math","trunc","err","valueRangeErr","valueLengthErr","validatePrimitiveTypeAssertion","validatePrimitiveValueTypeAssertion","retVals","validateRepeatedAssertion","dIdx","sIdx","spreadLen","optionalOmitted","checkSpreadQuantity","ts","index","checkOptionalQuantity","savedErrLen","validateSequenceAssertion","tyOne","validateOneOfAssertion","validateEnumAssertion","retVal","checkAll","dataMembers","Set","noAdditionalProps","add","includes","delete","getAdditionalMembers","allowImplicit","matchedAssertions","ap","at","hasError","size","validateObjectAssertion","validate","getType","pickMapper","pickRoot","pick","patch","needle","merge"],"mappings":"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","file":"tynder-rt.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tynder\"] = factory();\n\telse\n\t\troot[\"tynder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport type PrimitiveValueTypes = number | bigint | string | boolean | null | undefined;                                            // TODO: Function\nexport type PrimitiveValueTypeNames = 'number' | 'integer' | 'bigint' | 'string' | 'boolean' | 'null' | 'undefined';                // TODO: Function, DateStr, DateTimeStr\nexport type OptionalPrimitiveValueTypeNames = 'number?' | 'integer?' | 'bigint?' | 'string?' | 'boolean?' | 'null?' | 'undefined?'; // TODO: Function?, DateStr?, DateTimeStr?\nexport type PlaceholderTypeNames = 'never' | 'any' | 'unknown';\nexport type OptionalPlaceholderTypeNames = 'never?' | 'any?' | 'unknown?';\n\n\n\nexport enum ErrorTypes {\n    InvalidDefinition = 1,\n    Required,                // (all)\n    TypeUnmatched,           // Never/Unknown/Primitive/Object\n    AdditionalPropUnmatched, // Additional prop\n    RepeatQtyUnmatched,      // Repeated/Spread\n    SequenceUnmatched,       // Sequence\n    ValueRangeUnmatched,     // Primitive: minValue, maxValue, greaterThanValue, lessThanValue\n    ValuePatternUnmatched,   // Primitive: pattern\n    ValueLengthUnmatched,    // Primitive: minLength, maxLength\n    ValueUnmatched,          // PrimitiveValue\n}\n\n\nexport type ErrorMessages = Partial<{\n    invalidDefinition: string,\n    required: string,\n    typeUnmatched: string,\n    additionalPropUnmatched: string,\n    repeatQtyUnmatched: string,\n    sequenceUnmatched: string,\n    valueRangeUnmatched: string,\n    valuePatternUnmatched: string,\n    valueLengthUnmatched: string,\n    valueUnmatched: string,\n}>;\n\n\nexport interface TypeAssertionBase {\n    messageId?: string;\n    message?: string;           // Only one of 'message' or 'messages' can be set.\n    messages?: ErrorMessages;   // Only one of 'message' or 'messages' can be set.\n    name?: string;              // Member name or 'typeName' below. For error reporting and codegen.\n    typeName?: string;          // Named user defined 'type' or 'interface' name. For error reporting and codegen.\n    originalTypeName?: string;  // To keep right hand side type name of `type Y = X;`.\n    docComment?: string;        // Doc comment.\n    passThruCodeBlock?: string; // Store a pass-thru code block (e.g. import statement). use it with kind===never\n    noOutput?: boolean;         // If true, skip code generation.\n}\n\n\nexport interface NeverTypeAssertion extends TypeAssertionBase {\n    kind: 'never';\n}\n\n\nexport interface AnyTypeAssertion extends TypeAssertionBase {\n    kind: 'any';\n}\n\n\nexport interface UnknownTypeAssertion extends TypeAssertionBase {\n    kind: 'unknown';\n}\n\n\nexport interface PrimitiveTypeAssertionConstraints {\n    minValue?: number | string | null; // TODO: bigint\n    maxValue?: number | string | null; // TODO: bigint\n    greaterThanValue?: number | string | null;\n    lessThanValue?: number | string | null;\n    minLength?: number | null;\n    maxLength?: number | null;\n    pattern?: RegExp | null;\n}\n\n\nexport interface PrimitiveTypeAssertion extends TypeAssertionBase, PrimitiveTypeAssertionConstraints {\n    kind: 'primitive';\n    primitiveName: PrimitiveValueTypeNames;\n}\n\n\nexport interface PrimitiveValueTypeAssertion extends TypeAssertionBase {\n    kind: 'primitive-value';\n    value: PrimitiveValueTypes;\n    primitiveName?: 'bigint'; // for deserializer hinting\n}\n\n\nexport interface RepeatedAssertionConstraints {\n    min: number | null;\n    max: number | null;\n}\n\n\nexport interface RepeatedAssertion extends TypeAssertionBase, RepeatedAssertionConstraints {\n    kind: 'repeated';\n    repeated: TypeAssertion;\n}\n\n\nexport interface SpreadAssertion extends TypeAssertionBase, RepeatedAssertionConstraints {\n    kind: 'spread';\n    spread: TypeAssertion;\n}\n\n\nexport interface SequenceAssertion extends TypeAssertionBase {\n    kind: 'sequence';\n    sequence: TypeAssertion[];\n}\n\n\nexport interface OneOfAssertion extends TypeAssertionBase {\n    kind: 'one-of';\n    oneOf: TypeAssertion[];\n}\n\n\nexport interface OptionalAssertion extends TypeAssertionBase {\n    kind: 'optional';\n    optional: TypeAssertion;\n}\n\n\nexport interface EnumAssertion extends TypeAssertionBase {\n    kind: 'enum';\n    values: Array<[\n        string,           // enum key\n        number | string,  // enum value\n        string?,          // doc comment\n    ]>;\n}\n\n\nexport type ObjectAssertionMember = [\n    string,         // name\n    TypeAssertion,  // type\n] | [\n    string,         // name\n    TypeAssertion,  // type\n    boolean,        // If true, defined by ancestor types\n] | [\n    string,         // name\n    TypeAssertion,  // type\n    boolean,        // If true, defined by ancestor types\n    string,         // doc comment\n];\n\n\n\nexport type AdditionalPropsKey = Array<'string' | 'number' | RegExp>;\n\n\nexport type AdditionalPropsMember = [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n] | [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n    boolean,             // If true, defined by ancestor types\n] | [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n    boolean,             // If true, defined by ancestor types\n    string,              // doc comment\n];\n\n\nexport interface ObjectAssertion extends TypeAssertionBase {\n    kind: 'object';\n    members: ObjectAssertionMember[];\n    additionalProps?: AdditionalPropsMember[];\n    baseTypes?: Array<ObjectAssertion | AssertionSymlink>;\n}\n\n\nexport interface AssertionSymlink extends TypeAssertionBase {\n    kind: 'symlink';\n    symlinkTargetName: string;\n    memberTree?: string[];\n}\n\n\n// TODO: Add it to resolve backref in type operator's operands\nexport interface AssertionOperator extends TypeAssertionBase {\n    kind: 'operator';\n    operator: string;\n    operands: Array<TypeAssertion | string>;\n}\n\n\nexport type TypeAssertion =\n    NeverTypeAssertion |\n    AnyTypeAssertion |\n    UnknownTypeAssertion |\n    PrimitiveTypeAssertion |\n    PrimitiveValueTypeAssertion |\n    RepeatedAssertion |\n    SpreadAssertion |\n    SequenceAssertion |\n    OneOfAssertion |\n    OptionalAssertion |\n    EnumAssertion |\n    ObjectAssertion |\n    AssertionSymlink |\n    AssertionOperator;\n\n\nexport interface SerializedSchemaInfo {\n    version: string;\n    ns: {\n        [namespaceName: string]: {\n            [typeName: string]: TypeAssertion;\n        }\n    };\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { PrimitiveTypeAssertionConstraints,\n         RepeatedAssertionConstraints,\n         ErrorMessages,\n         TypeAssertion } from './types/tynder-schema-types';\n\nexport * from './types/tynder-schema-types';\n\n\n\n// https://stackoverflow.com/questions/41980195/recursive-partialt-in-typescript\nexport type RecursivePartial<T> = {\n    [P in keyof T]?:\n      T[P] extends (infer U)[] ? RecursivePartial<U>[] :\n      T[P] extends object ? RecursivePartial<T[P]> :\n      T[P];\n};\n\n\nexport type TypeAssertionErrorMessageConstraints =\n    Partial<Omit<PrimitiveTypeAssertionConstraints &\n        RepeatedAssertionConstraints, 'pattern'> &\n        {pattern: string}>;\n\n\nexport interface TypeAssertionErrorMessage {\n    code: string;\n    message: string;\n    dataPath: string;\n    constraints: TypeAssertionErrorMessageConstraints;\n    value?: any; // Only number, bigint, string, boolean, undefined, null\n}\n\n\nexport interface ValidationContext {\n    checkAll?: boolean;\n    noAdditionalProps?: boolean;\n    errorMessages?: ErrorMessages;\n\n    // maxDepth: number;\n    // depth: number;\n    mapper?: (value: any, ty: TypeAssertion) => any;\n\n    // === returned values ===\n    errors: TypeAssertionErrorMessage[];\n\n    // === internal use ===\n    typeStack: Array<                 // For error reporting (keyword substitutions)\n        TypeAssertion |\n        [TypeAssertion,\n         number | string | undefined] // [1]: data index\n        >;\n                                      // NOTE: DO NOT reassign!\n                                      //   Push or pop items instead of reassign.\n    schema?: TypeAssertionMap;        //   To resolve 'symlink' assertion,\n                                      //   the context need to have a schema instance.\n}\n\n\nexport interface TypeAssertionSetValue {\n    ty: TypeAssertion;\n    exported: boolean;\n    resolved: boolean;\n}\n\n\nexport type TypeAssertionMap = Map<string, TypeAssertionSetValue>;\n\n\nexport interface SymbolResolverOperators {\n    [propName: string]: (...args: Array<TypeAssertion | string>) => TypeAssertion;\n}\n\n\nexport interface ResolveSymbolOptions {\n    isDeserialization?: boolean;\n}\n\nexport interface SymbolResolverContext extends ResolveSymbolOptions {\n    nestLevel: number;\n    symlinkStack: string[]; // For detecting recursive type\n    operators?: SymbolResolverOperators; // TODO: Add it to resolve backref in type operator's operands\n}\n\n\nexport interface CodegenContext {\n    nestLevel: number;\n    schema?: TypeAssertionMap; // To resolve 'symlink' assertion, the context need to have a schema instance.\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { NeverTypeAssertion,\n         AnyTypeAssertion,\n         UnknownTypeAssertion,\n         PrimitiveValueTypes,\n         PrimitiveValueTypeNames,\n         OptionalPrimitiveValueTypeNames,\n         PlaceholderTypeNames,\n         OptionalPlaceholderTypeNames,\n         ErrorMessages,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         ObjectAssertionMember,\n         AdditionalPropsKey,\n         AdditionalPropsMember,\n         ObjectAssertion,\n         AssertionSymlink,\n         AssertionOperator,\n         TypeAssertion }    from './types';\nimport { dummyTargetObject,\n         isUnsafeVarNames } from './lib/util';\n\n\n\n// emulate Pick<T> // ex. Pick<Foo, 'a' | 'b'>\nexport function picked(ty: TypeAssertion, ...names: string[]): ObjectAssertion | AssertionOperator {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const name of names) {\n                const member = ty.members.find(x => x[0] === name);\n                if (member) {\n                    if (member[2]) {\n                        const m2: ObjectAssertionMember = [...member] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.push(m2);\n                    } else {\n                        members.push(member);\n                    }\n                }\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'picked',\n                operands: [ty, ...names],\n            });\n        }\n    default:\n        return ({\n            kind: 'object',\n            members: [],\n        });\n    }\n}\n\n\n// emulate Omit<T> // ex. Omit<Foo, 'a' | 'b'>\nexport function omit(ty: TypeAssertion, ...names: string[]): ObjectAssertion | AssertionOperator {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const member of ty.members) {\n                if (! names.find(name => member[0] === name)) {\n                    if (member[2]) {\n                        const m2: ObjectAssertionMember = [...member] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.push(m2);\n                    } else {\n                        members.push(member);\n                    }\n                }\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'omit',\n                operands: [ty, ...names],\n            });\n        }\n    default:\n        return ({\n            kind: 'object',\n            members: [],\n        });\n    }\n}\n\n\n// emulate Partial<T>\nexport function partial(ty: TypeAssertion): TypeAssertion {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const member of ty.members) {\n                let m: ObjectAssertionMember = member[1].kind === 'optional' ?\n                    member :\n                    [member[0], optional(member[1]), ...member.slice(2)] as ObjectAssertionMember;\n                if (m[2]) {\n                    m = [...m] as any;\n                    if (3 < m.length) {\n                        m[2] = false;\n                    } else {\n                        m.length = 2;\n                    }\n                }\n                m[1].name = m[0];\n                const optTy = {...(m[1] as OptionalAssertion).optional};\n                (m[1] as OptionalAssertion).optional = optTy;\n                if (optTy.name && optTy.name !== optTy.typeName) {\n                    delete optTy.name;\n                }\n                if (!optTy.name && optTy.typeName) {\n                    optTy.name = optTy.typeName;\n                }\n                members.push(m);\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'partial',\n                operands: [ty],\n            });\n        }\n    default:\n        return ty;\n    }\n}\n\n\n// intersection (a & b)\nexport function intersect(...types: TypeAssertion[]): TypeAssertion {\n    if (types.length === 0) {\n        throw new Error(`Empty intersection type is not allowed.`);\n    }\n    if (0 < types.filter(x => x && typeof x === 'object' &&\n            (x.kind === 'symlink' || x.kind === 'operator')).length) {\n        return ({\n            kind: 'operator',\n            operator: 'intersect',\n            operands: types.slice(),\n        });\n    }\n    let lastTy: TypeAssertion | null = null;\n    const members = new Map<string, ObjectAssertionMember>();\n\n    for (const ty of types) {\n        if (ty && typeof ty === 'object') {\n            if (lastTy && lastTy.kind !== ty.kind) {\n                return ({\n                    kind: 'never',\n                });\n            }\n            lastTy = ty;\n            if (ty.kind === 'object') {\n                for (const m of ty.members) {\n                    if (m[2]) {\n                        const m2: ObjectAssertionMember = [...m] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.set(m[0], m2); // Overwrite if exists\n                    } else {\n                        members.set(m[0], m);  // Overwrite if exists\n                    }\n                }\n            }\n        } else {\n            return ({\n                kind: 'never',\n            });\n        }\n    }\n    if (lastTy && lastTy.kind !== 'object') {\n        return lastTy;\n    } else {\n        return ({\n            kind: 'object',\n            members: Array.from(members.values()),\n        });\n    }\n}\n\n\n// union (a | b)\nexport function oneOf(...types: Array<PrimitiveValueTypes | TypeAssertion>): TypeAssertion {\n    if (types.length === 0) {\n        throw new Error(`Empty union type is not allowed.`);\n    }\n    if (types.length === 1) {\n        const ty = types[0];\n        if (ty && typeof ty === 'object') {\n            return ty;\n        } else {\n            return primitiveValue(ty);\n        }\n    }\n    const ret: OneOfAssertion = {\n        kind: 'one-of',\n        oneOf: [],\n    };\n    for (const ty of types) {\n        // TODO: remove same type\n        if (ty && typeof ty === 'object') {\n            if (ty.kind === 'one-of') {\n                ret.oneOf = ret.oneOf.concat(ty.oneOf);\n            } else {\n                ret.oneOf.push(ty);\n            }\n        } else {\n            ret.oneOf.push(primitiveValue(ty));\n        }\n    }\n    return ret;\n}\n\n\n// subtraction (a - b)\nexport function subtract(...types: TypeAssertion[]): ObjectAssertion | AssertionOperator {\n    if (types.length === 0) {\n        throw new Error(`Empty subtraction type is not allowed.`);\n    }\n    if (0 < types.filter(x => x && typeof x === 'object' &&\n            (x.kind === 'symlink' || x.kind === 'operator')).length) {\n        return ({\n            kind: 'operator',\n            operator: 'subtract',\n            operands: types.slice(),\n        });\n    }\n    let ret = types[0];\n    if (!ret || typeof ret !== 'object' || ret.kind !== 'object') {\n        throw new Error(`First parameter of subtraction type should be 'object'.`);\n    }\n    for (const ty of types.slice(1)) {\n        if (ty && typeof ty === 'object' && ty.kind === 'object') {\n            ret = omit(ret, ...ty.members.map(m => m[0]));\n        }\n    }\n    return ret;\n}\n\n\nexport function primitive(typeName: PrimitiveValueTypeNames |\n                                    OptionalPrimitiveValueTypeNames |\n                                    PlaceholderTypeNames |\n                                    OptionalPlaceholderTypeNames):\n        PrimitiveTypeAssertion | OptionalAssertion | NeverTypeAssertion | AnyTypeAssertion | UnknownTypeAssertion {\n    switch (typeName) {\n    case 'never':\n        return ({\n            kind: 'never',\n        });\n    case 'any':\n        return ({\n            kind: 'any',\n        });\n    case 'unknown':\n        return ({\n            kind: 'unknown',\n        });\n    case 'number':\n        // FALL_THRU\n    case 'integer':\n        // FALL_THRU\n    case 'bigint':\n        // FALL_THRU\n    case 'string':\n        // FALL_THRU\n    case 'boolean':\n        // FALL_THRU\n    case 'null':\n        // FALL_THRU\n    case 'undefined':\n        return ({\n            kind: 'primitive',\n            primitiveName: typeName,\n        });\n    case 'never?':\n        return (optional({\n            kind: 'never',\n        }));\n    case 'any?':\n        return (optional({\n            kind: 'any',\n        }));\n    case 'unknown?':\n        return (optional({\n            kind: 'unknown',\n        }));\n    case 'number?':\n        // FALL_THRU\n    case 'integer?':\n        // FALL_THRU\n    case 'bigint?':\n        // FALL_THRU\n    case 'string?':\n        // FALL_THRU\n    case 'boolean?':\n        // FALL_THRU\n    case 'null?':\n        // FALL_THRU\n    case 'undefined?':\n        return (optional({\n            kind: 'primitive',\n            primitiveName: typeName.substring(0, typeName.length - 1) as any,\n        }));\n    default:\n        throw new Error(`Unknown primitive type assertion: ${typeName}`);\n    }\n    // TODO: Function, DateStr, DateTimeStr, Funtion?, DateStr?, DateTimeStr?\n}\n\n\nexport function regexpPatternStringType(pattern: RegExp): PrimitiveTypeAssertion {\n    return ({\n        kind: 'primitive',\n        primitiveName: 'string',\n        pattern,\n    });\n}\n\n\nexport function primitiveValue(value: PrimitiveValueTypes): PrimitiveValueTypeAssertion {\n    if (value === null || value === void 0) {\n        return ({\n            kind: 'primitive-value',\n            value,\n        });\n    } else switch (typeof value) {\n    case 'number':\n        // FALL_THRU\n    case 'bigint':\n        // FALL_THRU\n    case 'string':\n        // FALL_THRU\n    case 'boolean':\n        return ({\n            kind: 'primitive-value',\n            value,\n        });\n    default:\n        throw new Error(`Unknown primitive value assertion: ${value}`);\n    }\n}\n\n\nexport function optional(ty: PrimitiveValueTypes | TypeAssertion): OptionalAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        if (ty.kind === 'optional') {\n            return ty;\n        } else {\n            return ({\n                kind: 'optional',\n                optional: ty,\n                ...(ty.typeName ? {typeName: ty.typeName} : {}),\n            });\n        }\n    } else {\n        return ({\n            kind: 'optional',\n            optional: primitiveValue(ty),\n        });\n    }\n}\n\n\nexport function repeated(\n        ty: PrimitiveValueTypeNames | TypeAssertion, option?:\n        Partial<Pick<RepeatedAssertion, 'max'> & Pick<RepeatedAssertion, 'min'>>): RepeatedAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        return ({\n            kind: 'repeated',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            repeated: ty,\n        });\n    } else {\n        return ({\n            kind: 'repeated',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            repeated: primitive(ty),\n        });\n    }\n}\n\n\nexport function sequenceOf(...seq: Array<PrimitiveValueTypes | TypeAssertion>): SequenceAssertion {\n    return ({\n        kind: 'sequence',\n        sequence: seq.map(ty => ty && typeof ty === 'object' && ty.kind ? ty : primitiveValue(ty)),\n    });\n}\n\n\nexport function spread(\n        ty: PrimitiveValueTypes | TypeAssertion,\n        option?: Partial<Pick<SpreadAssertion, 'max'> & Pick<SpreadAssertion, 'min'>>): SpreadAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        return ({\n            kind: 'spread',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            spread: ty,\n        });\n    } else {\n        return ({\n            kind: 'spread',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            spread: primitiveValue(ty),\n        });\n    }\n}\n\n\nexport function enumType(...values: Array<[string, number | string | null, string?]>): EnumAssertion {\n    const ar = values.slice();\n    let value = 0;\n    for (let i = 0; i < ar.length; i++) {\n        if (isUnsafeVarNames(dummyTargetObject, ar[i][0])) {\n            throw new Error(`Unsafe symbol name is appeared in enum assertion: ${ar[i][0]}`);\n        }\n\n        if (ar[i][1] === null || ar[i][1] === void 0) {\n            ar[i][1] = value++;\n        } else if (typeof ar[i][1] === 'number') {\n            value = (ar[i][1] as number) + 1;\n        }\n        if (! ar[i][2]) {\n            ar[i].length = 2;\n        }\n    }\n    return ({\n        kind: 'enum',\n        values: ar as Array<[string, number | string, string?]>,\n    });\n}\n\n\nexport function objectType(\n        ...members: Array<[\n            string | AdditionalPropsKey,\n            PrimitiveValueTypes | TypeAssertion,\n            string?\n        ]>): ObjectAssertion {\n    const revMembers = members.slice().reverse();\n    for (const x of members) {\n        if (typeof x[0] === 'string') {\n            if (isUnsafeVarNames(dummyTargetObject, x[0])) {\n                throw new Error(`Unsafe symbol name is appeared in object assertion: ${x[0]}`);\n            }\n            if (members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n                throw new Error(`Duplicated member is found: ${x[0]}`);\n            }\n        }\n    }\n\n    const membersProps: ObjectAssertionMember[] = (members\n        .filter(\n            x => typeof x[0] === 'string') as\n                Array<[string, PrimitiveValueTypes | TypeAssertion, string?]>)\n        .map(\n            x => x[1] && typeof x[1] === 'object' && x[1].kind ?\n                [x[0], withName(x[1], x[0]), x[2]] :\n                [x[0], withName(primitiveValue(x[1]), x[0]), x[2]])\n        .map(\n            x => (x[2] ?\n                [x[0], x[1], false, ...x.slice(2)] :\n                [x[0], x[1]]) as ObjectAssertionMember);\n\n    const additionalProps: AdditionalPropsMember[] = (members\n        .filter(x => typeof x[0] !== 'string') as Array<[\n            AdditionalPropsKey,\n            PrimitiveValueTypes | TypeAssertion,\n            string?\n        ]>)\n        .map(x => x[1] && typeof x[1] === 'object' && x[1].kind ?\n            x :\n            [x[0], primitiveValue(x[1]), x[2]])\n        .map(\n            x => (x[2] ?\n                [x[0], x[1], false, ...x.slice(2)] :\n                [x[0], x[1]]) as AdditionalPropsMember);\n\n    return ({\n        ...{\n            kind: 'object',\n            members: membersProps,\n        },\n        ...(0 < additionalProps.length ? {\n            additionalProps,\n        } : {}),\n    });\n}\n\n\nfunction checkRecursiveExtends(ty: ObjectAssertion, base: ObjectAssertion | AssertionSymlink): boolean {\n    if (ty === base) {\n        return false;\n    }\n    if (ty.typeName &&\n        (ty.typeName === base.typeName ||\n         (base.kind === 'symlink' && ty.typeName === base.symlinkTargetName))) {\n        return false;\n    }\n    if (base.kind === 'object' && base.baseTypes) {\n        for (const z of base.baseTypes) {\n            if (! checkRecursiveExtends(ty, z)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\nexport function derived(ty: ObjectAssertion, ...exts: TypeAssertion[]): ObjectAssertion {\n    const ret: ObjectAssertion = {\n        kind: 'object',\n        members: [],\n        baseTypes: [],\n    };\n\n    for (const ext of exts) {\n        switch (ext.kind) {\n        case 'object':\n            if (! checkRecursiveExtends(ty, ext)) {\n                throw new Error(`Recursive extend is found: ${ty.name || '(unnamed)'}`);\n            }\n            for (const m of ext.members) {\n                if (! ret.members.find(x => x[0] === m[0])) {\n                    ret.members.push([m[0], m[1], true, ...m.slice(3)] as ObjectAssertionMember);\n                }\n                // TODO: Check for different types with the same name.\n            }\n        // FALL_THRU\n        case 'symlink':\n            (ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>).push(ext);\n            break;\n        case 'operator':\n            {\n                throw new Error(`Unresolved type operator is found: ${ext.operator}`);\n            }\n        }\n        // NOTE: 'symlink' base types will resolved by calling `resolveSymbols()`.\n        //       `resolveSymbols()` will call `derived()` after resolve symlink exts.\n    }\n    ret.members = ty.members.concat(ret.members);\n    if (ty.baseTypes) {\n        ret.baseTypes = ty.baseTypes\n            .filter(x => x.kind !== 'symlink')\n            .concat(ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>);\n    }\n    if ((ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>).length === 0) {\n        delete ret.baseTypes;\n    }\n\n    const revMembers = ret.members.slice().reverse();\n    for (const x of ret.members) {\n        if (ret.members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n            throw new Error(`Duplicated member is found: ${x[0]} in ${ty.name || '(unnamed)'}`);\n        }\n    }\n\n    let additionalProps: AdditionalPropsMember[] = [];\n    if (ret.baseTypes) {\n        for (const base of ret.baseTypes) {\n            if (base.kind === 'object') {\n                if (base.additionalProps && 0 < base.additionalProps.length) {\n                    additionalProps = additionalProps.concat(\n                        base.additionalProps.map(x =>\n                            [x[0], x[1], true, ...x.slice(3)] as AdditionalPropsMember));\n                }\n            }\n            // NOTE: 'symlink' base types will resolved by calling `resolveSymbols()`.\n            //       `resolveSymbols()` will call `derived()` after resolve symlink exts.\n        }\n    }\n    if (ty.additionalProps && 0 < ty.additionalProps.length) {\n        additionalProps = additionalProps.concat(ty.additionalProps); // TODO: concat order\n    }\n    if (0 < additionalProps.length) {\n        ret.additionalProps = additionalProps;\n    }\n\n    return ret;\n}\n\n\nexport function symlinkType(name: string): AssertionSymlink {\n    return ({\n        kind: 'symlink',\n        symlinkTargetName: name,\n    });\n}\n\n\nexport function withName(ty: TypeAssertion, name: string) {\n    if (! name) {\n        return ty;\n    }\n    return ({...ty, name});\n}\n\n\nexport function withTypeName(ty: TypeAssertion, typeName: string) {\n    if (! typeName) {\n        return ty;\n    }\n    return ({...ty, typeName});\n}\n\n\nexport function withOriginalTypeName(ty: TypeAssertion, originalTypeName: string) {\n    if (! originalTypeName) {\n        return ty;\n    }\n    return ({...ty, originalTypeName});\n}\n\n\nexport function withDocComment(ty: TypeAssertion, docComment: string) {\n    if (! docComment) {\n        return ty;\n    }\n    return ({...ty, docComment});\n}\n\n\nexport function withRange(minValue: number | string, maxValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minValue !== 'number' && typeof minValue !== 'string') {\n            throw new Error(`Decorator '@range' parameter 'minValue' should be number or string.`);\n        }\n        if (typeof maxValue !== 'number' && typeof maxValue !== 'string') {\n            throw new Error(`Decorator '@range' parameter 'maxValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@range' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minValue, maxValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@range' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minValue, maxValue});\n        }\n    };\n}\n\n\nexport function withMinValue(minValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minValue !== 'number' && typeof minValue !== 'string') {\n            throw new Error(`Decorator '@minValue' parameter 'minValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@minValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@minValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minValue});\n        }\n    };\n}\n\n\nexport function withMaxValue(maxValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof maxValue !== 'number' && typeof maxValue !== 'string') {\n            throw new Error(`Decorator '@maxValue' parameter 'maxValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, maxValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, maxValue});\n        }\n    };\n}\n\n\nexport function withGreaterThan(greaterThanValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof greaterThanValue !== 'number' && typeof greaterThanValue !== 'string') {\n            throw new Error(`Decorator '@greaterThan' parameter 'greaterThan' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@greaterThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, greaterThanValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@greaterThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, greaterThanValue});\n        }\n    };\n}\n\n\nexport function withLessThan(lessThanValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof lessThanValue !== 'number' && typeof lessThanValue !== 'string') {\n            throw new Error(`Decorator '@lessThan' parameter 'lessThan' should be number or string.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@lessThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, lessThanValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@lessThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, lessThanValue});\n        }\n    };\n}\n\n\nexport function withMinLength(minLength: number) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minLength !== 'number') {\n            throw new Error(`Decorator '@minLength' parameter 'minLength' should be number.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@minLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minLength}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@minLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minLength});\n        }\n    };\n}\n\n\nexport function withMaxLength(maxLength: number) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof maxLength !== 'number') {\n            throw new Error(`Decorator '@maxLength' parameter 'maxLength' should be number.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, maxLength}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, maxLength});\n        }\n    };\n}\n\n\nexport function withMatch(pattern: RegExp) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof pattern !== 'object') {\n            throw new Error(`Decorator '@match' parameter 'pattern' should be RegExp.`);\n        }\n        if ((ty as TypeAssertion)?.kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@match' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, pattern}});\n        } else {\n            if (!ty || ty.kind !== 'primitive' || ty.primitiveName !== 'string') {\n                throw new Error(`Decorator '@match' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, pattern});\n        }\n    };\n}\n\n\nexport function withMsg<T extends TypeAssertion>(messages: string | ErrorMessages): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            if (typeof messages === 'string') {\n                const ret = ({\n                    ...ty,\n                    message: messages,\n                    optional: {...(ty as OptionalAssertion).optional, message: messages},\n                });\n                delete ret.messages;\n                delete ret.optional.messages;\n                return ret;\n            } else {\n                const ret = ({\n                    ...ty,\n                    messages,\n                    optional: {...(ty as OptionalAssertion).optional, messages},\n                });\n                delete ret.message;\n                delete ret.optional.message;\n                return ret;\n            }\n        } else {\n            if (typeof messages === 'string') {\n                const ret = ({...ty, message: messages});\n                delete ret.messages;\n                return ret;\n            } else {\n                const ret = ({...ty, messages});\n                delete ret.message;\n                return ret;\n            }\n        }\n    };\n}\n\n\nexport function withMsgId<T extends TypeAssertion>(messageId: string): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            return ({\n                ...ty,\n                messageId,\n                optional: {...(ty as OptionalAssertion).optional, messageId},\n            });\n        } else {\n            return ({...ty, messageId});\n        }\n    };\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\n// tslint:disable-next-line:function-constructor\nconst globalObj = Function('return this')();\nconst objConstructor = ({}).constructor; // NOTE: objConstructor            === Object\nconst funConstructor = Function;         // NOTE: ({}).toString.constructor === Function\n\n\nexport const NumberPattern = /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)$/;\n\n\nexport const dummyTargetObject = {};\n\n\nexport function isUnsafeVarNames(target: any, varName: string) {\n    if (target === globalObj ||\n        varName === '__proto__' ||\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\n        return true;\n    }\n    if (varName === 'prototype' || varName === 'constructor') {\n        if (target === null || target === void 0 || typeof target === 'function') {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === objConstructor) {\n        if (objConstructor.hasOwnProperty(varName)) {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === funConstructor) {\n        // checking 'call', 'arguments', 'caller', ...\n        let con: any = funConstructor;\n        while (con) {\n            if (con.hasOwnProperty(varName)) {\n                return true;\n            }\n            con = con.__proto__;\n        }\n    }\n    if (typeof target === 'function') {\n        if (!target.hasOwnProperty(varName)) {\n            // function's prototypes' members\n            return true;\n        }\n    }\n    return false;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport function escapeString(s: string) {\n    return (s\n        .replace(/\\x08/g, '\\\\b')\n        .replace(/\\f/g, '\\\\f')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\v/g, '\\\\v')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\'/g, '\\\\\\'')\n        .replace(/\\\"/g, '\\\\\\\"')\n        .replace(/\\`/g, '\\\\\\`')\n    );\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         ValidationContext } from '../types';\n\n\n\nexport class ValidationError extends Error {\n    public ty?: TypeAssertion;\n    public ctx?: ValidationContext;\n    public constructor(message: string, ty?: TypeAssertion, ctx?: ValidationContext) {\n        super(message);\n        this.ty = ty;\n        this.ctx = ctx;\n    }\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         TypeAssertionMap,\n         TypeAssertionSetValue,\n         ObjectAssertion,\n         AssertionSymlink,\n         SymbolResolverOperators,\n         ResolveSymbolOptions,\n         SymbolResolverContext } from '../types';\nimport * as operators            from '../operators';\nimport { NumberPattern }         from '../lib/util';\n\n\n\nfunction mergeTypeAndSymlink(ty: TypeAssertion, link: AssertionSymlink): TypeAssertion {\n    const link2 = {...link};\n    delete link2.kind;\n    delete link2.symlinkTargetName;\n    delete link2.memberTree;\n    return ({...ty, ...link2} as any as TypeAssertion);\n}\n\n\nfunction updateSchema(original: TypeAssertion, schema: TypeAssertionMap, ty: TypeAssertion, typeName: string | undefined) {\n    if (typeName && schema.has(typeName)) {\n        const z: TypeAssertionSetValue = schema.get(typeName) as TypeAssertionSetValue;\n        if (z.ty === original) {\n            schema.set(typeName, {...z, ty, resolved: true});\n        }\n    }\n    return ty;\n}\n\n\nexport function resolveMemberNames(\n        ty: TypeAssertion, rootSym: string, memberTreeSymbols: string[], memberPos: number): TypeAssertion {\n\n    const addTypeName = (mt: TypeAssertion, typeName: string | undefined, memberSym: string) => {\n        if (typeName) {\n            return ({\n                ...mt,\n                typeName: memberPos === 0 ?\n                    `${rootSym}.${memberTreeSymbols.join('.')}` :\n                    `${typeName}.${memberSym}`,\n            });\n        } else {\n            return mt;\n        }\n    };\n\n    for (let i = memberPos; i < memberTreeSymbols.length; i++) {\n        const memberSym = memberTreeSymbols[i];\n\n        switch (ty.kind) {\n        case 'optional':\n            return resolveMemberNames(ty.optional, rootSym, memberTreeSymbols, i + 1);\n        case 'object':\n            for (const m of ty.members) {\n                if (memberSym === m[0]) {\n                    return addTypeName(\n                        resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1),\n                        ty.typeName,\n                        memberSym,\n                    );\n                }\n            }\n            if (ty.additionalProps) {\n                for (const m of ty.additionalProps) {\n                    for (const k of m[0]) {\n                        switch (k) {\n                        case 'number':\n                            if (NumberPattern.test(memberSym)) {\n                                return resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1);\n                            }\n                            break;\n                        case 'string':\n                            return resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1);\n                        default:\n                            if (k.test(memberSym)) {\n                                return resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1);\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            throw new Error(`Undefined member name is appeared: ${memberSym}`);\n        case 'symlink':\n            if (! ty.typeName) {\n                throw new Error(`Reference of anonymous type is appeared: ${memberSym}`);\n            }\n            return ({\n                ...{\n                    kind: 'symlink',\n                    symlinkTargetName: rootSym,\n                    name: memberSym,\n                    typeName: rootSym,\n                },\n                ...(0 < memberTreeSymbols.length ? {\n                    memberTree: memberTreeSymbols,\n                } : {}),\n            });\n        default:\n            // TODO: kind === 'operator'\n            throw new Error(`Unsupported type kind is appeared: (kind:${ty.kind}).${memberSym}`);\n        }\n    }\n    return ty;\n}\n\n\nexport function resolveSymbols(schema: TypeAssertionMap, ty: TypeAssertion, ctx: SymbolResolverContext): TypeAssertion {\n    const ctx2 = {...ctx, nestLevel: ctx.nestLevel + 1};\n    switch (ty.kind) {\n    case 'symlink':\n        {\n            const x = schema.get(ty.symlinkTargetName);\n            if (! x) {\n                throw new Error(`Undefined symbol '${ty.symlinkTargetName}' is referred.`);\n            }\n            if (0 <= ctx.symlinkStack.findIndex(s => s === ty.symlinkTargetName)) {\n                return ty;\n            }\n\n            const ty2 = {...ty};\n            let xTy = x.ty;\n            if (ty.memberTree && 0 < ty.memberTree.length) {\n                xTy = {\n                    ...resolveMemberNames(xTy, ty.symlinkTargetName, ty.memberTree, 0),\n                };\n                ty2.typeName = xTy.typeName;\n            }\n\n            return (\n                resolveSymbols(\n                    schema,\n                    mergeTypeAndSymlink(xTy, ty2),\n                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty2.symlinkTargetName]},\n                )\n            );\n        }\n    case 'repeated':\n        return updateSchema(ty, schema, {\n            ...ty,\n            repeated: resolveSymbols(schema, ty.repeated, ctx2),\n        }, ty.typeName);\n    case 'spread':\n        return updateSchema(ty, schema, {\n            ...ty,\n            spread: resolveSymbols(schema, ty.spread, ctx2),\n        }, ty.typeName);\n    case 'sequence':\n        return updateSchema(ty, schema, {\n            ...ty,\n            sequence: ty.sequence.map(x => resolveSymbols(schema, x, ctx2)),\n        }, ty.typeName);\n    case 'one-of':\n        return updateSchema(ty, schema, {\n            ...ty,\n            oneOf: ty.oneOf.map(x => resolveSymbols(schema, x, ctx2)),\n        }, ty.typeName);\n    case 'optional':\n        return updateSchema(ty, schema, {\n            ...ty,\n            optional: resolveSymbols(schema, ty.optional, ctx2),\n        }, ty.typeName);\n    case 'object':\n        {\n            if (0 < ctx.nestLevel && ty.typeName && 0 <= ctx.symlinkStack.findIndex(s => s === ty.typeName)) {\n                if (schema.has(ty.typeName)) {\n                    const z = schema.get(ty.typeName) as TypeAssertionSetValue;\n                    if (z.resolved) {\n                        return z.ty;\n                    }\n                }\n            }\n\n            const baseSymlinks = ty.baseTypes?.filter(x => x.kind === 'symlink') as AssertionSymlink[];\n            if (baseSymlinks && baseSymlinks.length > 0 && !ctx.isDeserialization) {\n                const exts = baseSymlinks\n                    .map(x => resolveSymbols(schema, x, ctx2))\n                    .filter(x => x.kind === 'object');\n                // TODO: if x.kind !== 'object' items exist -> error?\n                const d2 = resolveSymbols(\n                    schema,\n                    operators.derived({\n                        ...ty,\n                        ...(ty.baseTypes ? {\n                            baseTypes: ty.baseTypes.filter(x => x.kind !== 'symlink'),\n                        } : {}),\n                    }, ...exts),\n                    ty.typeName ?\n                        {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2,\n                );\n                return updateSchema(ty, schema, {\n                    ...ty,\n                    ...d2,\n                }, ty.typeName);\n            } else {\n                return updateSchema(ty, schema, {\n                    ...{\n                        ...ty,\n                        members: ty.members\n                            .map(x => [\n                                x[0],\n                                resolveSymbols(schema, x[1], ty.typeName ?\n                                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2),\n                                ...x.slice(2),\n                            ] as any),\n                    },\n                    ...(ty.additionalProps && 0 < ty.additionalProps.length ? {\n                        additionalProps: ty.additionalProps\n                            .map(x => [\n                                x[0],\n                                resolveSymbols(schema, x[1], ty.typeName ?\n                                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2),\n                                ...x.slice(2),\n                            ] as any),\n                    } : {}),\n                    ...(ty.baseTypes && 0 < ty.baseTypes.length ? {\n                        baseTypes: ctx.isDeserialization ?\n                            ty.baseTypes\n                                .map(x => x.kind === 'symlink' ? resolveSymbols(schema, x, ctx2) : x)\n                                .filter(x => x.kind === 'object') as ObjectAssertion[] :\n                            ty.baseTypes,\n                    } : {}),\n                }, ty.typeName);\n            }\n        }\n    case 'operator':\n        if (ctx2.operators) {\n            const ctx3 = ty.typeName ?\n                {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2;\n            const operands = ty.operands.map(x => {\n                if (typeof x === 'object' && x.kind) {\n                    return resolveSymbols(schema, x, ctx3);\n                }\n                return x;\n            });\n            if (0 < operands.filter(x => x && typeof x === 'object' &&\n                    (x.kind === 'symlink' || x.kind === 'operator')).length) {\n                throw new Error(`Unresolved type operator is found: ${ty.operator}`);\n            }\n            if (! ctx2.operators[ty.operator]) {\n                throw new Error(`Undefined type operator is found: ${ty.operator}`);\n            }\n            const ty2 = {...ty};\n            delete ty2.operator;\n            delete ty2.operands;\n            return updateSchema(\n                ty, schema,\n                {\n                    ...ty2,\n                    ...resolveSymbols(schema, ctx2.operators[ty.operator](...operands), ctx3),\n                },\n                ty.typeName,\n            );\n        } else {\n            return ty;\n        }\n    default:\n        return ty;\n    }\n}\n\n\nconst resolverOps: SymbolResolverOperators = {\n    picked: operators.picked,\n    omit: operators.omit,\n    partial: operators.partial,\n    intersect: operators.intersect,\n    subtract: operators.subtract,\n};\n\n\nexport function resolveSchema(schema: TypeAssertionMap, opts?: ResolveSymbolOptions): TypeAssertionMap {\n    for (const ent of schema.entries()) {\n        const ty = resolveSymbols(schema, ent[1].ty, {...opts, nestLevel: 0, symlinkStack: [ent[0]], operators: resolverOps});\n        ent[1].ty = ty;\n    }\n\n    return schema;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ErrorTypes,\n         ErrorMessages,\n         TypeAssertionErrorMessageConstraints,\n         TypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         OptionalAssertion,\n         ObjectAssertion,\n         ValidationContext } from '../types';\nimport { escapeString }      from './escape';\n\n\nexport const errorTypeNames = [\n    '',\n    'InvalidDefinition',\n    'Required',\n    'TypeUnmatched',\n    'AdditionalPropUnmatched',\n    'RepeatQtyUnmatched',\n    'SequenceUnmatched',\n    'ValueRangeUnmatched',\n    'ValuePatternUnmatched',\n    'ValueLengthUnmatched',\n    'ValueUnmatched',\n];\n\n\nexport const defaultMessages: ErrorMessages = {\n    invalidDefinition:       '\"%{name}\" of \"%{parentType}\" type definition is invalid.',\n    required:                '\"%{name}\" of \"%{parentType}\" is required.',\n    typeUnmatched:           '\"%{name}\" of \"%{parentType}\" should be type \"%{expectedType}\".',\n    additionalPropUnmatched: '\"%{addtionalProps}\" of \"%{parentType}\" are not matched to additional property patterns.',\n    repeatQtyUnmatched:      '\"%{name}\" of \"%{parentType}\" should repeat %{repeatQty} times.',\n    sequenceUnmatched:       '\"%{name}\" of \"%{parentType}\" sequence is not matched',\n    valueRangeUnmatched:     '\"%{name}\" of \"%{parentType}\" value should be in the range %{minValue} to %{maxValue}.',\n    valuePatternUnmatched:   '\"%{name}\" of \"%{parentType}\" value should be matched to pattern \"%{pattern}\"',\n    valueLengthUnmatched:    '\"%{name}\" of \"%{parentType}\" length should be in the range %{minLength} to %{maxLength}.',\n    valueUnmatched:          '\"%{name}\" of \"%{parentType}\" value should be \"%{expectedValue}\".',\n};\n\n\ntype TopRepeatable = RepeatedAssertion | SpreadAssertion | OptionalAssertion | null;\n\n\ninterface ReportErrorArguments {\n    ctx: ValidationContext;\n    substitutions?: [[string, string]]; // addtional or overwritten substitution values\n}\n\n\nfunction getErrorMessage(errType: ErrorTypes, ...messages: ErrorMessages[]) {\n    for (const m of messages) {\n        switch (errType) {\n        case ErrorTypes.InvalidDefinition:\n            if (m.invalidDefinition) {\n                return m.invalidDefinition;\n            }\n            break;\n        case ErrorTypes.Required:\n            if (m.required) {\n                return m.required;\n            }\n            break;\n        case ErrorTypes.TypeUnmatched:\n            if (m.typeUnmatched) {\n                return m.typeUnmatched;\n            }\n            break;\n        case ErrorTypes.AdditionalPropUnmatched:\n            if (m.additionalPropUnmatched) {\n                return m.additionalPropUnmatched;\n            }\n            break;\n        case ErrorTypes.RepeatQtyUnmatched:\n            if (m.repeatQtyUnmatched) {\n                return m.repeatQtyUnmatched;\n            }\n            break;\n        case ErrorTypes.SequenceUnmatched:\n            if (m.sequenceUnmatched) {\n                return m.sequenceUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueRangeUnmatched:\n            if (m.valueRangeUnmatched) {\n                return m.valueRangeUnmatched;\n            }\n            break;\n        case ErrorTypes.ValuePatternUnmatched:\n            if (m.valuePatternUnmatched) {\n                return m.valuePatternUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueLengthUnmatched:\n            if (m.valueLengthUnmatched) {\n                return m.valueLengthUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueUnmatched:\n            if (m.valueUnmatched) {\n                return m.valueUnmatched;\n            }\n            break;\n        }\n    }\n    return '';\n}\n\n\nfunction nvl(v: any, alt: any) {\n    return (\n        v !== null && v !== void 0 ? v : alt\n    );\n}\n\n\nfunction findTopRepeatableAssertion(ctx: ValidationContext): TopRepeatable {\n    const ret = ctx.typeStack\n        .slice()\n        .reverse()\n        .map(x => Array.isArray(x) ? x[0] : x)\n        .find(x => x.kind === 'repeated' || x.kind === 'spread' || x.kind === 'optional'\n                ) as RepeatedAssertion | SpreadAssertion | OptionalAssertion || null;\n    return ret;\n}\n\n\nfunction getExpectedType(ty: TypeAssertion): string {\n    switch (ty.kind) {\n    case 'repeated':\n        return `(repeated ${getExpectedType(ty.repeated)})`;\n    case 'spread':\n        return getExpectedType(ty.spread);\n    case 'sequence':\n        return '(sequence)';\n    case 'primitive':\n        return ty.primitiveName;\n    case 'primitive-value':\n        return `(value ${\n            typeof ty.value === 'string' ?\n                `'${String(ty.value)}'` :\n                String(ty.value)})`;\n    case 'optional':\n        return getExpectedType(ty.optional);\n    case 'one-of':\n        return `(one of ${ty.oneOf.map(x => getExpectedType(x)).join(', ')})`;\n    case 'never': case 'any': case 'unknown':\n        return ty.kind;\n    case 'symlink':\n        return ty.symlinkTargetName;\n    default:\n        return ty.typeName ? ty.typeName : '?';\n    }\n}\n\n\nexport function formatErrorMessage(\n        msg: string, data: any, ty: TypeAssertion,\n        args: ReportErrorArguments,\n        values: {dataPath: string, topRepeatable: TopRepeatable, parentType: string, entryName: string}) {\n\n    let ret = msg;\n    // TODO: complex type object members' custom error messages are not displayed?\n    // TODO: escapeString() is needed?\n\n    const tr = values.topRepeatable;\n\n    const dict = new Map<string, string>([\n        ['expectedType',\n            escapeString(getExpectedType(ty))],\n        ['type',\n            escapeString(typeof data)],\n        ['expectedValue',\n            escapeString(\n                ty.kind === 'primitive-value' ?\n                    String(ty.value) :\n                ty.kind === 'enum' ?\n                    ty.typeName ?\n                        `enum member of ${ty.typeName}` :\n                        '?' :\n                '?')],\n        ['value',\n            escapeString(String(data))],\n        ['repeatQty',\n            escapeString(\n                tr ?\n                    tr.kind !== 'optional' ? `${\n                        nvl(tr.min, '')}${\n                            (tr.min !== null && tr.min !== void 0) ||\n                            (tr.max !== null && tr.max !== void 0) ? '..' : ''}${\n                            nvl(tr.max, '')}` :\n                        '0..1' :\n                    '?')],\n        ['minValue',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.minValue, nvl(ty.greaterThanValue, '(smallest)'))}` : '?')],\n        ['maxValue',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.maxValue, nvl(ty.lessThanValue, '(biggest)'))}` : '?')],\n        ['pattern',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${ty.pattern ? `/${ty.pattern.source}/${ty.pattern.flags}` : '(pattern)'}` : '?')],\n        ['minLength',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.minLength, '0')}` : '?')],\n        ['maxLength',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.maxLength, '(biggest)')}` : '?')],\n        ['name',\n            escapeString(\n                `${ty.kind !== 'repeated' && values.dataPath.endsWith('repeated)') ?\n                    'repeated item of ' :\n                   ty.kind !== 'sequence' && values.dataPath.endsWith('sequence)') ?\n                    'sequence item of ' : ''}${\n                values.entryName || '?'}`)],\n        ['parentType',\n            escapeString(\n                values.parentType || '?')],\n        ['dataPath',\n            values.dataPath],\n\n        ...(args.substitutions || []),\n    ]);\n\n    for (const ent of dict.entries()) {\n        ret = ret.replace(new RegExp(`%{${ent[0]}}`), ent[1]);\n    }\n\n    return ret;\n}\n\n\ninterface DataPathEntry {\n    name: string;\n    kind: 'type' | 'key' | 'index';\n}\n\n\nexport function reportError(\n        errType: ErrorTypes, data: any, ty: TypeAssertion,\n        args: ReportErrorArguments) {\n\n    const messages: ErrorMessages[] = [];\n    if (ty.messages) {\n        messages.push(ty.messages);\n    }\n    if (args.ctx.errorMessages) {\n        messages.push(args.ctx.errorMessages);\n    }\n    messages.push(defaultMessages);\n\n    const dataPathEntryArray: DataPathEntry[] = [];\n\n    for (let i = 0; i < args.ctx.typeStack.length; i++) {\n        const p = args.ctx.typeStack[i];\n        const next = args.ctx.typeStack[i + 1];\n        const pt = Array.isArray(p) ? p[0] : p;\n        const pi = Array.isArray(next) ? next[1] : void 0;\n\n        let isSet = false;\n        if (pt.kind === 'repeated') {\n            if (i !== args.ctx.typeStack.length - 1) {\n                if (pt.name) {\n                    dataPathEntryArray.push({kind: 'key', name: pt.name});\n                }\n                dataPathEntryArray.push({kind: 'index', name: `(${pi !== void 0 ? `${pi}:` : ''}repeated)`});\n                isSet = true;\n            }\n        } else if (pt.kind === 'sequence') {\n            if (i !== args.ctx.typeStack.length - 1) {\n                if (pt.name) {\n                    dataPathEntryArray.push({kind: 'key', name: pt.name});\n                }\n                dataPathEntryArray.push({kind: 'index', name: `(${pi !== void 0 ? `${pi}:` : ''}sequence)`});\n                isSet = true;\n            }\n        }\n        if (! isSet) {\n            if (pt.name) {\n                if (i === 0) {\n                    if (pt.typeName) {\n                        dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n                    } else {\n                        dataPathEntryArray.push({kind: 'key', name: pt.name});\n                    }\n                } else {\n                    const len = dataPathEntryArray.length;\n                    if (len && dataPathEntryArray[len - 1].kind === 'type') {\n                        dataPathEntryArray.push({kind: 'key', name: pt.name});\n                    } else {\n                        if (pt.typeName) {\n                            dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n                        } else {\n                            dataPathEntryArray.push({kind: 'key', name: pt.name});\n                        }\n                    }\n                }\n            } else if (pt.typeName) {\n                dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n            }\n        }\n    }\n\n    let dataPath = '';\n    for (let i = 0; i < dataPathEntryArray.length; i++) {\n        const p = dataPathEntryArray[i];\n        dataPath += p.name;\n        if (i + 1 === dataPathEntryArray.length) {\n            break;\n        }\n        dataPath += p.kind === 'type' ? ':' : '.';\n    }\n\n    let parentType = '';\n    let entryName = '';\n    for (let i = dataPathEntryArray.length - 1; 0 <= i; i--) {\n        const p = dataPathEntryArray[i];\n        if (p.kind === 'type') {\n            if (i !== 0 && i === dataPathEntryArray.length - 1) {\n                const q = dataPathEntryArray[i - 1];\n                if (q.kind === 'index') {\n                    continue; // e.g.: \"File:acl.(0:repeated).ACL\"\n                }\n            }                 // else: \"File:acl.(0:repeated).ACL:target\"\n            parentType = p.name;\n            for (let j = i + 1; j < dataPathEntryArray.length; j++) {\n                const q = dataPathEntryArray[j];\n                if (q.kind === 'key') {\n                    entryName = q.name;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    if (! parentType) {\n        for (let i = args.ctx.typeStack.length - 1; 0 <= i; i--) {\n            const p = args.ctx.typeStack[i];\n            const pt = Array.isArray(p) ? p[0] : p;\n            if (pt.typeName) {\n                parentType = pt.typeName;\n            }\n        }\n    }\n\n    const topRepeatable: TopRepeatable = findTopRepeatableAssertion(args.ctx);\n    const values = {dataPath, topRepeatable, parentType, entryName};\n\n    const constraints: TypeAssertionErrorMessageConstraints = {};\n    const cSrces: TypeAssertionErrorMessageConstraints[] = [ty as any];\n\n    if (errType === ErrorTypes.RepeatQtyUnmatched && topRepeatable) {\n        cSrces.unshift(topRepeatable as any);\n    }\n\n    for (const cSrc of cSrces) {\n        if (nvl(cSrc.minValue, false)) {\n            constraints.minValue = cSrc.minValue;\n        }\n        if (nvl(cSrc.maxValue, false)) {\n            constraints.maxValue = cSrc.maxValue;\n        }\n        if (nvl(cSrc.greaterThanValue, false)) {\n            constraints.greaterThanValue = cSrc.greaterThanValue;\n        }\n        if (nvl(cSrc.lessThanValue, false)) {\n            constraints.lessThanValue = cSrc.lessThanValue;\n        }\n        if (nvl(cSrc.minLength, false)) {\n            constraints.minLength = cSrc.minLength;\n        }\n        if (nvl(cSrc.maxLength, false)) {\n            constraints.maxLength = cSrc.maxLength;\n        }\n        if (nvl(cSrc.pattern, false)) {\n            const pat = cSrc.pattern as any as RegExp;\n            constraints.pattern = `/${pat.source}/${pat.flags}`;\n        }\n        if (nvl(cSrc.min, false)) {\n            constraints.min = cSrc.min;\n        }\n        if (nvl(cSrc.max, false)) {\n            constraints.max = cSrc.max;\n        }\n    }\n\n    const val: {value?: any} = {};\n\n    switch (typeof data) {\n    case 'number': case 'bigint': case 'string': case 'boolean': case 'undefined':\n        val.value = data;\n        break;\n    case 'object':\n        if (data === null) {\n            val.value = data;\n        }\n    }\n\n    if (ty.messageId) {\n        args.ctx.errors.push({\n            code: `${ty.messageId}-${errorTypeNames[errType]}`,\n            message: formatErrorMessage(ty.message ?\n                ty.message :\n                getErrorMessage(errType, ...messages), data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    } else if (ty.message) {\n        args.ctx.errors.push({\n            code: `${errorTypeNames[errType]}`,\n            message: formatErrorMessage(ty.message, data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    } else {\n        args.ctx.errors.push({\n            code: `${errorTypeNames[errType]}`,\n            message: formatErrorMessage(getErrorMessage(errType, ...messages), data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    }\n}\n\n\nexport function reportErrorWithPush(\n        errType: ErrorTypes, data: any,\n        tyidx: [TypeAssertion, number | string | undefined],\n        args: ReportErrorArguments) {\n\n    try {\n        args.ctx.typeStack.push(tyidx);\n        reportError(errType, data, tyidx[0], args);\n    } finally {\n        args.ctx.typeStack.pop();\n    }\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ErrorTypes,\n         NeverTypeAssertion,\n         AnyTypeAssertion,\n         UnknownTypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SequenceAssertion,\n         SpreadAssertion,\n         OptionalAssertion,\n         OneOfAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertion,\n         ValidationContext,\n         TypeAssertionMap }    from './types';\nimport { ValidationError }     from './lib/errors';\nimport { NumberPattern,\n         isUnsafeVarNames }    from './lib/util';\nimport { reportError,\n         reportErrorWithPush } from './lib/reporter';\nimport { resolveSymbols }      from './lib/resolver';\n\n\n\nfunction validateNeverTypeAssertion<T>(\n    data: any, ty: NeverTypeAssertion, ctx: ValidationContext): null {\n\n    reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nfunction validateAnyTypeAssertion<T>(\n    data: any, ty: AnyTypeAssertion, ctx: ValidationContext): {value: T} {\n\n    // always matched\n    return ({value: ctx.mapper ? ctx.mapper(data, ty) : data});\n}\n\n\nfunction validateUnknownTypeAssertion<T>(\n    data: any, ty: UnknownTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    // always matched\n    return ({value: ctx.mapper ? ctx.mapper(data, ty) : data});\n}\n\n\nfunction validatePrimitiveTypeAssertion<T>(\n    data: any, ty: PrimitiveTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (ty.primitiveName === 'null') {\n        if (data !== null) {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n    } else if (ty.primitiveName === 'integer') {\n        if (typeof data !== 'number') {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n        if (Math.trunc(data) !== data) {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n    } else if (typeof data !== ty.primitiveName) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    // TODO: Function, DateStr, DateTimeStr\n\n    let err = false;\n    let valueRangeErr = false;\n    switch (typeof ty.minValue) {\n    case 'number': case 'string':\n        if (data < ty.minValue) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.maxValue) {\n    case 'number': case 'string':\n        if (data > ty.maxValue) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.greaterThanValue) {\n    case 'number': case 'string':\n        if (data <= ty.greaterThanValue) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.lessThanValue) {\n    case 'number': case 'string':\n        if (data >= ty.lessThanValue) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n\n    let valueLengthErr = false;\n    switch (typeof ty.minLength) {\n    case 'number':\n        if (typeof data !== 'string' || data.length < ty.minLength) {\n            if (! valueLengthErr) {\n                reportError(ErrorTypes.ValueLengthUnmatched, data, ty, {ctx});\n            }\n            valueLengthErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.maxLength) {\n    case 'number':\n        if (typeof data !== 'string' || data.length > ty.maxLength) {\n            if (! valueLengthErr) {\n                reportError(ErrorTypes.ValueLengthUnmatched, data, ty, {ctx});\n            }\n            valueLengthErr = true;\n            err = true;\n        }\n    }\n\n    if (ty.pattern) {\n        if (! ty.pattern.test(data)) {\n            reportError(ErrorTypes.ValuePatternUnmatched, data, ty, {ctx});\n            err = true;\n        }\n    }\n    const ret = !err ?\n        {value: ctx.mapper ? ctx.mapper(data, ty) : data} :\n        null;\n    return ret;\n}\n\n\nfunction validatePrimitiveValueTypeAssertion<T>(\n    data: any, ty: PrimitiveValueTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    const ret = data === ty.value ?\n        {value: ctx.mapper ? ctx.mapper(data, ty) : data} :\n        null;\n    if (! ret) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n    }\n    return ret;\n}\n\n\nfunction validateRepeatedAssertion<T>(\n    data: any, ty: RepeatedAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (! Array.isArray(data)) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    if (typeof ty.min === 'number' && data.length < ty.min) {\n        reportError(ErrorTypes.RepeatQtyUnmatched, data, ty, {ctx});\n        return null;\n    }\n    if (typeof ty.max === 'number' && data.length > ty.max) {\n        reportError(ErrorTypes.RepeatQtyUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    const retVals: any[] = [];\n    for (let i = 0; i < data.length; i++) {\n        const x = data[i];\n        const r = validateRoot<T>(x, ty.repeated, ctx, i);\n        if (! r) {\n            return null;\n        }\n        retVals.push(r.value);\n    }\n    return {value: retVals as any};\n}\n\n\nfunction validateSequenceAssertion<T>(\n    data: any, ty: SequenceAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (! Array.isArray(data)) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    let dIdx = 0, // index of data\n        sIdx = 0; // index of types\n    let spreadLen = 0;\n    let optionalOmitted = false;\n\n    const checkSpreadQuantity = (ts: SpreadAssertion, index: number) => {\n        if (typeof ts.min === 'number' && spreadLen < ts.min) {\n            reportErrorWithPush(\n                spreadLen === 0 ?\n                    ErrorTypes.TypeUnmatched :\n                    ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        if (typeof ts.max === 'number' && spreadLen > ts.max) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        return ts;\n    };\n\n    const checkOptionalQuantity = (ts: OptionalAssertion, index: number) => {\n        if (spreadLen === 0) {\n            // All subsequent 'optional' assertions should be 'spreadLen === 0'.\n            optionalOmitted = true;\n        } else if (optionalOmitted) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        } else if (spreadLen > 1) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        return ts;\n    };\n\n    const retVals: any[] = [];\n    while (dIdx < data.length && sIdx < ty.sequence.length) {\n        const ts = ty.sequence[sIdx];\n        if (ts.kind === 'spread') {\n            const savedErrLen = ctx.errors.length;\n            const r = validateRoot<T>(data[dIdx], ts.spread, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                spreadLen++;\n            } else {\n                // End of spreading\n                // rollback reported errors\n                ctx.errors.length = savedErrLen;\n                if (! checkSpreadQuantity(ts, dIdx)) {\n                    return null;\n                }\n                spreadLen = 0;\n                sIdx++;\n            }\n        } else if (ts.kind === 'optional') {\n            const savedErrLen = ctx.errors.length;\n            const r = validateRoot<T>(data[dIdx], ts.optional, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                spreadLen++;\n            } else {\n                // End of spreading\n                // rollback reported errors\n                ctx.errors.length = savedErrLen;\n                if (! checkOptionalQuantity(ts, dIdx)) {\n                    return null;\n                }\n                spreadLen = 0;\n                sIdx++;\n            }\n        } else {\n            const r = validateRoot<T>(data[dIdx], ts, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                sIdx++;\n            } else {\n                return null;\n            }\n        }\n    }\n    while (sIdx < ty.sequence.length) {\n        const ts = ty.sequence[sIdx];\n        if (ts.kind === 'spread') {\n            if (! checkSpreadQuantity(ts, dIdx)) {\n                return null;\n            }\n            spreadLen = 0;\n            sIdx++;\n        } else if (ts.kind === 'optional') {\n            if (! checkOptionalQuantity(ts, dIdx)) {\n                return null;\n            }\n            spreadLen = 0;\n            sIdx++;\n        } else {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, dIdx], {ctx});\n            return null;\n        }\n    }\n\n    const ret = data.length === dIdx ? {value: retVals as any} : null;\n    if (! ret) {\n        reportError(ErrorTypes.SequenceUnmatched, data, ty, {ctx});\n    }\n    return ret;\n}\n\n\nfunction validateOneOfAssertion<T>(\n    data: any, ty: OneOfAssertion, ctx: ValidationContext): {value: T} | null {\n\n    for (const tyOne of ty.oneOf) {\n        const savedErrLen = ctx.errors.length;\n        const r = validateRoot<T>(data, tyOne, ctx);\n        if (! r) {\n            // rollback reported errors\n            ctx.errors.length = savedErrLen;\n            continue;\n        }\n        return r;\n    }\n    reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nfunction validateEnumAssertion<T>(\n    data: any, ty: EnumAssertion, ctx: ValidationContext): {value: T} | null {\n\n    for (const v of ty.values) {\n        if (data === v[1]) {\n            return ({value: ctx.mapper ? ctx.mapper(data, ty) : data});\n        }\n    }\n    reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nfunction validateObjectAssertion<T>(\n    data: any, ty: ObjectAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let retVal = Array.isArray(data) ? [...data] : {...data};\n    const revMembers = ty.members.slice().reverse();\n    for (const x of ty.members) {\n        if (ty.members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(\n                `Duplicated member is found: ${x[0]} in ${ty.name || '(unnamed)'}`, ty, ctx);\n        }\n    }\n\n    if (data === null || typeof data !== 'object') {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        if (ctx && ctx.checkAll) {\n            retVal = null;\n        } else {\n            return null;\n        }\n    } else {\n        const dataMembers = new Set<string>();\n        if (ctx.noAdditionalProps || ty.additionalProps && 0 < ty.additionalProps.length) {\n            if (! Array.isArray(data)) {\n                for (const m in data) {\n                    if (Object.prototype.hasOwnProperty.call(data, m)) {\n                        dataMembers.add(m);\n                    }\n                }\n            }\n        }\n        if (ctx.noAdditionalProps && Array.isArray(data) && 0 < data.length) {\n            const aps = ty.additionalProps || [];\n            if (aps.filter(x => x[0].includes('number')).length === 0) {\n                reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                    ctx,\n                    substitutions: [['addtionalProps', '[number]']],\n                });\n                if (ctx && ctx.checkAll) {\n                    retVal = null;\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        for (const x of ty.members) {\n            dataMembers.delete(x[0]);\n            if (Object.prototype.hasOwnProperty.call(data, x[0])) {\n                const ret = validateRoot<T>(\n                    data[x[0]],\n                    x[1].kind === 'optional' ?  // TODO: set name at compile time\n                        {\n                            ...x[1].optional,\n                            name: x[0],\n                            message: x[1].message,\n                            messages: x[1].messages,\n                            messageId: x[1].messageId,\n                        } : x[1],\n                    ctx);\n\n                if (ret) {\n                    if (retVal) {\n                        if (isUnsafeVarNames(retVal, x[0])) {\n                            continue;\n                        }\n                        retVal[x[0]] = ret.value;\n                    }\n                } else {\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            } else {\n                if (x[1].kind !== 'optional') {\n                    reportErrorWithPush(ErrorTypes.Required, data, [x[1], void 0], {ctx});\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        if (ty.additionalProps && 0 < ty.additionalProps.length) {\n            function* getAdditionalMembers() {\n                for (const m of dataMembers.values()) {\n                    yield m;\n                }\n                if (Array.isArray(data)) {\n                    for (let i = 0; i < data.length; i++) {\n                        yield String(i);\n                    }\n                }\n            }\n            for (const m of getAdditionalMembers()) {\n                let allowImplicit = false;\n                const matchedAssertions: TypeAssertion[] = [];\n\n                for (const ap of ty.additionalProps) {\n                    for (const pt of ap[0]) {\n                        const at = ap[1];\n                        if (pt === 'number') {\n                            if (NumberPattern.test(m)) {\n                                matchedAssertions.push(at);\n                            }\n                        } else if (pt === 'string') {\n                            matchedAssertions.push(at);\n                        } else {\n                            if (pt.test(m)) {\n                                matchedAssertions.push(at);\n                            }\n                        }\n                        if (at.kind === 'optional') {\n                            allowImplicit = true;\n                        }\n                    }\n                }\n                if (matchedAssertions.length === 0) {\n                    if (allowImplicit) {\n                        continue;\n                    }\n                    reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                        ctx,\n                        substitutions: [['addtionalProps', m]],\n                    });\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                        continue;\n                    } else {\n                        return null;\n                    }\n                }\n\n                dataMembers.delete(m);\n                let hasError = false;\n                const savedErrLen = ctx.errors.length;\n\n                for (const at of matchedAssertions) {\n                    const ret = validateRoot<T>(data[m], at.kind === 'optional' ?\n                        {\n                            ...at.optional,\n                            message: at.message,\n                            messages: at.messages,\n                            messageId: at.messageId,\n                            name: m,\n                        } : {\n                            ...at,\n                            name: m,\n                        }, ctx);\n                    if (ret) {\n                        if (retVal) {\n                            hasError = false;\n                            ctx.errors.length = savedErrLen;\n                            if (isUnsafeVarNames(retVal, m)) {\n                                continue;\n                            }\n                            retVal[m] = ret.value;\n                        }\n                        break;\n                    } else {\n                        hasError = true;\n                    }\n                }\n                if (hasError) {\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        if (ctx.noAdditionalProps && 0 < dataMembers.size) {\n            reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                ctx,\n                substitutions: [['addtionalProps', Array.from(dataMembers.values()).join(', ')]],\n            });\n            if (ctx && ctx.checkAll) {\n                retVal = null;\n            } else {\n                return null;\n            }\n        }\n    }\n    if (! retVal) {\n        // TODO: Child is unmatched. reportError?\n        // TODO: report object's custom error message\n    }\n    return retVal ? {value: (ctx && ctx.mapper) ? ctx.mapper(retVal, ty) : retVal} : null;\n}\n\n\nexport function validateRoot<T>(\n    data: any, ty: TypeAssertion, ctx: ValidationContext, dataIndex?: number | string): {value: T} | null {\n\n    try {\n        ctx.typeStack.push(\n            typeof dataIndex === 'number' || typeof dataIndex === 'string' ?\n            [ty, dataIndex] : ty);\n\n        switch (ty.kind) {\n        case 'never':\n            return validateNeverTypeAssertion(data, ty, ctx);\n        case 'any':\n            return validateAnyTypeAssertion(data, ty, ctx);\n        case 'unknown':\n            return validateUnknownTypeAssertion(data, ty, ctx);\n        case 'primitive':\n            return validatePrimitiveTypeAssertion(data, ty, ctx);\n        case 'primitive-value':\n            return validatePrimitiveValueTypeAssertion(data, ty, ctx);\n        case 'repeated':\n            return validateRepeatedAssertion(data, ty, ctx);\n        case 'sequence':\n            return validateSequenceAssertion(data, ty, ctx);\n        case 'one-of':\n            return validateOneOfAssertion(data, ty, ctx);\n        case 'enum':\n            return validateEnumAssertion(data, ty, ctx);\n        case 'object':\n            return validateObjectAssertion(data, ty, ctx);\n        case 'symlink':\n            if (ctx.schema) {\n                return validateRoot<T>(data, resolveSymbols(ctx.schema, ty, {nestLevel: 0, symlinkStack: []}), ctx);\n            }\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unresolved symbol '${ty.symlinkTargetName}' is appeared.`, ty, ctx);\n        case 'operator':\n            if (ctx.schema) {\n                return validateRoot<T>(data, resolveSymbols(ctx.schema, ty, {nestLevel: 0, symlinkStack: []}), ctx);\n            }\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unresolved type operator is found: ${ty.operator}`, ty, ctx);\n        case 'spread': case 'optional':\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unexpected type assertion: ${(ty as any).kind}`, ty, ctx);\n        default:\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unknown type assertion: ${(ty as any).kind}`, ty, ctx);\n        }\n    } finally {\n        ctx.typeStack.pop();\n    }\n}\n\n\nexport function validate<T>(\n    data: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): {value: T} | null {\n\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n    };\n    try {\n        return validateRoot<T>(data, ty, ctx2);\n    } finally {\n        if (ctx) {\n            ctx.errors = ctx2.errors;\n        }\n    }\n}\n\n\nexport function getType(schema: TypeAssertionMap, name: string): TypeAssertion {\n    if (schema.has(name)) {\n        return schema.get(name)?.ty as TypeAssertion;\n    }\n    throw new Error(`Undefined type name is referred: ${name}`);\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { RecursivePartial,\n         TypeAssertion,\n         ValidationContext } from './types';\nimport { ValidationError }   from './lib/errors';\nimport { isUnsafeVarNames }  from './lib/util';\nimport { validate }          from './validator';\n\n\n\nfunction pickMapper(value: any, ty: TypeAssertion) {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const ret = Array.isArray(value) ? [] : {};\n\n            const dataMembers = new Set<string>();\n            if (! Array.isArray(value)) {\n                for (const m in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, m)) {\n                        dataMembers.add(m);\n                    }\n                }\n            }\n\n            for (const x of ty.members) {\n                if (Object.hasOwnProperty.call(value, x[0])) {\n                    dataMembers.delete(x[0]);\n                    ret[x[0]] = value[x[0]];\n                }\n            }\n            if (ty.additionalProps && 0 < ty.additionalProps.length) {\n                function* getAdditionalMembers() {\n                    for (const m of dataMembers.values()) {\n                        yield m;\n                    }\n                    if (Array.isArray(value)) {\n                        for (let i = 0; i < value.length; i++) {\n                            yield String(i);\n                        }\n                    }\n                }\n                for (const m of getAdditionalMembers()) {\n                    ret[m] = value[m];\n                }\n            }\n            return ret;\n        }\n    default:\n        return value;\n    }\n}\n\n\nexport function pickRoot<T>(data: T, ty: TypeAssertion, ctx: ValidationContext): T {\n    switch (ty.kind) {\n    case 'never':\n        throw new ValidationError(`Type unmatched: ${(ty as any).kind}`, ty, ctx);\n    case 'any':\n        // FALL_THRU\n    case 'unknown':\n        // FALL_THRU\n    case 'primitive':\n        // FALL_THRU\n    case 'primitive-value':\n        // FALL_THRU\n    case 'repeated':\n        // FALL_THRU\n    case 'sequence':\n        // FALL_THRU\n    case 'one-of':\n        // FALL_THRU\n    case 'enum':\n        // FALL_THRU\n    case 'object':\n        {\n            const r = validate<T>(data, ty, ctx);\n            if (r) {\n                return r.value;\n            } else {\n                throw new ValidationError('Validation failed.', ty, ctx);\n            }\n        }\n    case 'spread': case 'optional': case 'symlink': case 'operator':\n        throw new ValidationError(`Unexpected type assertion: ${(ty as any).kind}`, ty, ctx);\n    default:\n        throw new ValidationError(`Unknown type assertion: ${(ty as any).kind}`, ty, ctx);\n    }\n}\n\n\nexport function pick<T>(data: T, ty: TypeAssertion, ctx?: Partial<ValidationContext>): RecursivePartial<T> {\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n        mapper: pickMapper,\n    };\n    try {\n        return pickRoot<T>(data, ty, ctx2);\n    } finally {\n        if (ctx) {\n            ctx.errors = ctx2.errors;\n        }\n    }\n}\n\n\nfunction merge(data: any, needle: any) {\n    if (data === null || data === void 0) {\n        return needle;\n    }\n    switch (typeof data) {\n    case 'object':\n        if (Array.isArray(data)) {\n            return [...needle];\n        } else {\n            const r: any = {...data};\n            for (const k in needle) {\n                if (Object.prototype.hasOwnProperty.call(needle, k)) {\n                    if (isUnsafeVarNames(r, k)) {\n                        continue;\n                    }\n                    r[k] = merge(r[k], needle[k]);\n                }\n            }\n            return r;\n        }\n    default:\n        return needle;\n    }\n}\n\n\nexport function patch<T>(data: T, needle: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): T {\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n    };\n    const validated = pick<T>(needle, ty, ctx2);\n    return merge(data, validated);\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport * from './types';\nexport * from './operators';\nexport * from './validator';\nexport * from './picker';\n"],"sourceRoot":""}