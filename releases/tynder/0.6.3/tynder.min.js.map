{"version":3,"sources":["webpack://tynder/webpack/universalModuleDefinition","webpack://tynder/webpack/bootstrap","webpack://tynder/./node_modules/liyad/src/s-exp/errors.ts","webpack://tynder/./src/lib/util.ts","webpack://tynder/./src/types/tynder-schema-types.ts","webpack://tynder/./node_modules/liyad/src/s-exp/ast.ts","webpack://tynder/./node_modules/liyad/src/s-exp/evaluate.ts","webpack://tynder/./src/operators.ts","webpack://tynder/./node_modules/liyad/src/s-exp/compile.ops/helpers.ts","webpack://tynder/./src/lib/escape.ts","webpack://tynder/./src/lib/errors.ts","webpack://tynder/./src/lib/resolver.ts","webpack://tynder/./src/lib/reporter.ts","webpack://tynder/./src/stereotypes/noop.ts","webpack://tynder/./src/validator.ts","webpack://tynder/./node_modules/liyad/src/s-exp/types.ts","webpack://tynder/./src/picker.ts","webpack://tynder/./src/stereotypes/date.ts","webpack://tynder/./src/constraints/unique.ts","webpack://tynder/./node_modules/liyad/src/s-exp/consts.ts","webpack://tynder/./node_modules/liyad/src/s-exp/compile.ts","webpack://tynder/./node_modules/liyad/src/s-exp/compile.ops/index.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/types.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/parser.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.fn.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.operator.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.macro.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.symbol.ts","webpack://tynder/./node_modules/liyad/src/s-exp/parser.ts","webpack://tynder/./node_modules/liyad/src/s-exp/defaults.ts","webpack://tynder/./node_modules/liyad/src/s-exp/interpreters/index.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/object-parser.ts","webpack://tynder/./src/lib/compiler.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/string-parser.ts","webpack://tynder/./src/compiler.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/index.ts","webpack://tynder/./src/lib/codegen/typescript.ts","webpack://tynder/./src/lib/codegen/json-schema.ts","webpack://tynder/./src/lib/codegen/proto3.ts","webpack://tynder/./src/lib/codegen/graphql.ts","webpack://tynder/./src/lib/codegen/csharp.ts","webpack://tynder/./src/serializer.ts","webpack://tynder/./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setEvaluationCount","state","evalCount","config","maxEvalCount","checkParamsLength","args","min","max","length","Error","objConstructor","constructor","funConstructor","Function","checkUnsafeVarNames","varName","checkUnsafeVarNamesEx","target","con","__proto__","globalObj","SymbolPattern","NumberPattern","DatePattern","DateTimePattern","DateTimeNoTzPattern","dummyTargetObject","isUnsafeVarNames","nvl","v","alt","nvl2","f","ErrorTypes","quote","x","symbol","reservedNames","backquote","wrapByUnquote","unquote","spread","splice","isSymbol","toNumber","NaN","Number","resolveSplice","enableSplice","Array","isArray","slice","concat","resolveMacro","macroInfo","macroMap","lastErr","r1","formalArgs","fn","actualArgs","matchResult","matchMacroArgs","Boolean","lastIsSpread","error","next","resolveValueSymbolScope","nullIfNotDefined","scopes","localScope","scope","capturedScopes","isBlockLocal","globalScope","getGlobalScope","getScope","resolveValueSymbol","symInfo","symbolMap","valueSymbolResolverFallback","raiseOnUnresolvedSymbol","collectCapturedVariables","names","getCapturedScopes","a","unshift","assign","installScope","push","uninstallScope","pop","macroName","nm","startsWith","endsWith","tpos","lastIndexOf","tname","optimizeTailCall","fnBody","front","tail","if","self","varBaseName","tempVarsSyms","map","idx","until","let","set","evaluate","sym","resolveUnquote","eval","sprs","reverse","funcInfo","funcMap","funcSymbolResolverFallback","resolveFunctionSymbol","JSON","stringify","wrapExternalValue","car","cdr","dotted","picked","ty","kind","members","member","find","m2","operator","operands","omit","partial","optional","optTy","typeName","intersect","types","filter","lastTy","Map","from","values","oneOf","primitiveValue","ret","subtract","primitive","primitiveName","substring","regexpPatternStringType","pattern","repeated","option","sequenceOf","seq","sequence","enumType","ar","objectType","revMembers","membersProps","withName","additionalProps","checkRecursiveExtends","base","symlinkTargetName","baseTypes","z","derived","exts","ext","symlinkType","withTypeName","withOriginalTypeName","originalTypeName","withDocComment","docComment","withRange","minValue","maxValue","opt","withMinValue","withMaxValue","withGreaterThan","greaterThanValue","withLessThan","lessThanValue","withMinLength","minLength","withMaxLength","maxLength","withMatch","withStereotype","stereotype","withConstraint","customConstraints","customConstraintsArgs","withForceCast","forceCast","withRecordType","isRecordTypeField","withMeta","meta","withMsg","messages","message","withMsgId","messageId","applyMacros","tok","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","checkUnsafeVarNames_dynamic","escapeString","replace","ValidationError","ctx","super","updateSchema","original","schema","has","resolved","resolveMemberNames","rootSym","memberTreeSymbols","memberPos","addTypeName","mt","memberSym","join","k","test","memberTree","resolveSymbols","ctx2","nestLevel","symlinkStack","findIndex","ty2","xTy","link","link2","mergeTypeAndSymlink","baseSymlinks","isDeserialization","d2","operators","ctx3","resolverOps","resolveSchema","opts","ent","entries","errorTypeNames","defaultMessages","invalidDefinition","required","typeUnmatched","additionalPropUnmatched","repeatQtyUnmatched","sequenceUnmatched","valueRangeUnmatched","valuePatternUnmatched","valueLengthUnmatched","valueUnmatched","getErrorMessage","errType","InvalidDefinition","Required","TypeUnmatched","AdditionalPropUnmatched","RepeatQtyUnmatched","SequenceUnmatched","ValueRangeUnmatched","ValuePatternUnmatched","ValueLengthUnmatched","ValueUnmatched","getExpectedType","String","formatErrorMessage","msg","data","tr","topRepeatable","dict","source","flags","dataPath","entryName","parentType","substitutions","RegExp","reportError","errorMessages","dataPathEntryArray","typeStack","pt","pi","isSet","len","j","q","constraints","cSrces","cSrc","pat","val","errors","code","reportErrorWithPush","tyidx","noopStereotype","tryParse","evaluateFormula","valueOrFormula","compare","b","tyA","isNaN","doCast","checkStereotypes","stereotypes","parsed","targetType","parseFloat","Math","trunc","BigInt","checkCustomConstraints","ccName","cc","kinds","includes","check","validateRoot","dataIndex","validateNeverTypeAssertion","chkSt","styp","mapper","validateAnyTypeAssertion","validateUnknownTypeAssertion","chkTarget","styVal","err","valueRangeErr","valueLengthErr","validatePrimitiveTypeAssertion","validatePrimitiveValueTypeAssertion","retVals","validateRepeatedAssertion","dIdx","sIdx","spreadLen","optionalOmitted","checkSpreadQuantity","ts","index","checkOptionalQuantity","savedErrLen","validateSequenceAssertion","choosed","savedCtxRecordTypeFieldValidated","recordTypeFieldValidated","count","firstErrLen","tyOne","e2","checkAll","validateOneOfAssertion","validateEnumAssertion","retVal","dataMembers","Set","noAdditionalProps","add","delete","getAdditionalMembers","allowImplicit","matchedAssertions","ap","at","hasError","size","validateObjectAssertion","validate","isType","assertType","getType","FatalError","MaxEvaluationCountError","ScriptTerminationError","where","pickMapper","pickRoot","pick","patch","needle","merge","FyPattern","FormulaPattern","UtcDate","Date","year","month","date","hours","minutes","seconds","ms","setUTCDate","setUTCFullYear","setUTCMonth","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","setTime","parse","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","LcDate","setDate","setFullYear","setMonth","setHours","setMinutes","setSeconds","setMilliseconds","getTime","evaluateFormulaBase","dateCtor","errMsg","formula","split","now","today","exec","parseInt","mo","yr","dateStereotype","datetimeStereotype","mapperErrMsg","checkerGen","fields","mapped","CMP","field","compileCore","_$_vars","compileValue","compFnBody","varNames","varsCount","compileToken","body","ops","arr","varNamesCount","varDefs","makeScope","scoped","varNamesCopy","enableTailCallOptimization","thiz","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","compileLambda","registerOperators","raise","quoted","vName","symName","checkNameCalled","checkNamePos","str","not","w1","w0","hasSpread","ParseError","result","parserInput","src","context","start","end","zeroWidth","helper","input","succeeded","tokens","zeroWidthError","pos","beginning","quantify","parser","matched","first","parsers","last","or","reduce","transform","trans","ctxTrans","t2","lookAhead","lookBehind","applyProductionRules","lexer","lexerInput","lexResult","completed","maxApply","rules","rule","rtol","nextSrc","makeProgram","e","$car","$$first","$cdr","$cons","$$firstAndSecond","$first","$second","$$second","$last","$rest","$firstAndSecond","$atom","$eq","$notEq","$list","$__scope","returnMultiple","kv","kvSym","kvName","xSym","xName","$__lambda","fa","enableSpread","$comp$__lambda","compile","$apply","apply","$raise","$pipe","$__let","$boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$typeof","tyName","$symbol","$isSymbol","$isNull","$isNil","$isUndefined","$isList","$isString","$isNumber","$isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","assignBlacklist","$objectAssign","$jsonStringify","$jsonParse","$now","$datetimeFromIso","dt","$datetime","padStart","$datetimeLc","$datetimeToIsoString","toISOString","$datetimeToComponents","getUTCDay","$datetimeToComponentsLc","getTimezoneOffset","getDay","$match","enableRegExpMatchOperators","$consoleLog","console","log","$consoleError","$consoleTrace","trace","$consoleTime","time","$consoleTimeEnd","timeEnd","$consoleTimeLog","timeLog","st","info","fArgs","aArgs","list","inprog","path","subst","tempVarSym","keyName","compilationOperators","macros","compilationMacros","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","isEOF","ch","trim","isNumberFirstChar","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","line","strings","getChar","virtualEof","disableEscape","eof","eofSeq","ch1","ch2","fromCodePoint","lookAheads","chs","skipWhitespaces","parseNumber","parseSymbol","enableShorthands","match","ws","parseStringOrComment","valuesStartSeq","valuesStopChar","allowPhysicalEof","eofSeqs","parseList","parseString","parseHereDoc","attrs","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","ahead","isSpliceUnquote","aheads","enableHereDoc","isHereDoc","Template","ahs","enableVerbatimStringLiteral","listStopChar","initialList","stripComments","defaultConfig","enableEvaluate","enableCompilationOperators","returnMultipleRoot","cons","atom","eq","lambda","defun","cond","while","doWhile","doUntil","defvar","setq","and","gensym","catch","symbols","funcs","initState","globals","resetState","objSequence","comparator","objClass","needles","some","objClassNot","$s","params","rawToToken","cls","charClass","notCls","codePointAt","charClassNot","clsFn","charClassByNeedleFn","cat","concatTokens","once","repeat","qty","combine","erase","isAlpha","isUpper","isLower","isNumber","isNonZeroNumber","isBinNum","isOctNum","isHexNum","isAlNum","isSpace","isSpaceWithinSingleLine","isControl","isWord","isNewline","isAny","binSep","octSep","hexSep","decimalIntegerNumber","bigDecimalIntegerNumber","floatingPointNumber","classes","alpha","upper","lower","num","nonzero","bin","oct","hex","alnum","space","spaceWithinSingleLine","ctrl","newline","word","any","numbers","prefixes","int","bigint","float","behind","getStringParsers","rawToken","$o","getObjectParsers","directiveLineComment","directiveBlockComment","lineComment","hashLineComment","blockComment","commentOrSpace","trueValue","falseValue","nullValue","undefinedValue","positiveInfinityValue","negativeInfinityValue","nanValue","binaryIntegerValue","octalIntegerValue","decimalIntegerValue","bigDecimalIntegerValue","floatingPointNumberValue","numberValue","stringEscapeSeq","signleQuotStringValue","doubleQuotStringValue","backQuotStringValue","stringValue","regexpStringValue","symbolName","decoratorSymbolName","simpleConstExpr","objKey","listValue","ast","token","objectValue","objectKeyValuePair","constExpr","primitiveValueNoNullUndefined","primitiveTypeName","additionalPropPrimitiveTypeName","nullUndefinedTypeName","simpleOrDottedTypeName","sequenceType","spreadOrComplexType","arraySizeFactorInner","arraySizeFactor","complexArrayType","complexType","partialType","pickOrOmitType","genericOrSimpleType","spreadType","decorator","decoratorsClause","complexTypeInnerRoot","edge","interfaceDefInner","complexTypeInnerWOSinpleArrayType","op","binaryOp","op1","op2","isOperator","complexTypeExprRule3","complexTypeExprRule2","complexTypeExprRule1","setDocComment","text","typeDef","interfaceExtendsClause","interfaceKey","interfaceKeyTypePair","separator","interfaceDef","enumKeyValue","enumDef","internalDef","constDef","constDefNoErr","exportedDef","declareTypeAndEnumStatement","declareVarStatement","defStatement","externalSymbolAndType","externalTypeDef","importStatement","definition","program","lineAndCol","col","getLineAndCol","lisp","install","conf","startup","evaluateAST","repl","fRepl","sync","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","installer","SExpression","mapTyToTySet","gensymCount","def","tySet","exported","isDeclare","passthru","docCommentText","passThruCodeBlock","ref","memberNames","noOutput","redef","export","external","asConst","isConst","asDeclare","directive","parseExternalDirective","greaterThan","lessThan","formatTypeName","formatTypeScriptCodeDocComment","indent","indexOf","trimLeft","generateTypeScriptCodeInner","isInterface","generateTypeScriptCodePrimitive","toString","generateTypeScriptCodePrimitiveValue","generateTypeScriptCodeRepeated","generateTypeScriptCodeSequence","generateTypeScriptCodeOneOf","generateTypeScriptCodeOptional","generateTypeScriptCodeEnum","memberLines","additionalPropsLines","ak","formatAdditionalPropsName","propsLines","generateTypeScriptCodeObject","generateTypeScriptCode","indent0","indent1","addMetaInfo","a2","changed","description","minItems","maxItems","minimum","maximum","exclusiveMinimum","exclusiveMaximum","generateJsonSchemaInner","$ref","type","items","anyOf","enum","properties","patternProperties","patternPropsCount","additionalProperties","generateJsonSchemaObject","$schema","definitions","generateJsonSchema","asTs","generateProto3CodeInner","formatProto3CodeDocComment","appendOptionalModifier","generateProto3CodePrimitive","generateProto3CodePrimitiveValue","generateProto3CodeRepeated","generateProto3CodeOneOf","filtered","isNullableOneOf","formatMemberType","generateProto3CodeOptional","generateProto3CodeEnum","sep","generateProto3CodeObject","generateProto3Code","generateGraphQlCodeInner","formatGraphQlCodeDocComment","isUnion","generateGraphQlCodeOneOf","generateGraphQlCodePrimitive","generateGraphQlCodePrimitiveValue","generateGraphQlCodeRepeated","generateGraphQlCodeEnum","generateGraphQlCodeObject","generateGraphQlCode","generateCSharpCodeInner","formatCSharpCodeDocComment","generateCSharpCodePrimitive","generateCSharpCodePrimitiveValue","generateCSharpCodeRepeated","generateCSharpCodeOneOf","generateCSharpCodeObject","addAttributes","generateCSharpCodeOptional","generateCSharpCode","isFirst","accessModifier","TynderSchemaVersion","serializeInner","hasInfo","hasMetaInfo","serializeToObject","version","current","serialize","keys","deserializeRegExp","deserializeInner","deserializeFromObject","obj","deserialize","unique"],"mappings":"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","file":"tynder.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tynder\"] = factory();\n\telse\n\t\troot[\"tynder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         MaxEvaluationCountError } from './types';\r\nimport { globalObj }               from './consts';\r\n\r\n\r\n\r\nexport function setEvaluationCount(state: SxParserState) {\r\n    state.evalCount++;\r\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\r\n        throw new MaxEvaluationCountError();\r\n    }\r\n}\r\n\r\n\r\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\r\n    if (args.length < min) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\r\n    }\r\n    if (max && max < args.length) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\r\n    }\r\n    return args;\r\n}\r\n\r\n\r\nconst objConstructor = ({}).constructor; // NOTE: objConstructor            === Object\r\nconst funConstructor = Function;         // NOTE: ({}).toString.constructor === Function\r\n\r\nexport function checkUnsafeVarNames(name: string, varName: string) {\r\n    if (varName === '__proto__' ||\r\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\r\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (varName === 'prototype' || varName === 'constructor') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (objConstructor.hasOwnProperty(varName)) {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (varName === 'call' || varName === 'arguments' || varName === 'caller') {\r\n        // NOTE: arguments, caller are not accessible in strict mode\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    return varName;\r\n}\r\n\r\n\r\nexport function checkUnsafeVarNamesEx(name: string, target: any, varName: string) {\r\n    if (target === globalObj ||\r\n        varName === '__proto__' ||\r\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\r\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (varName === 'prototype' || varName === 'constructor') {\r\n        if (target === null || target === void 0 || typeof target === 'function') {\r\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n        }\r\n    }\r\n    if (target === null || target === void 0 || target === objConstructor) {\r\n        if (objConstructor.hasOwnProperty(varName)) {\r\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n        }\r\n    }\r\n    if (target === null || target === void 0 || target === funConstructor) {\r\n        // checking 'call', 'arguments', 'caller', ...\r\n        let con: any = funConstructor;\r\n        while (con) {\r\n            if (con.hasOwnProperty(varName)) {\r\n                throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n            }\r\n            con = con.__proto__;\r\n        }\r\n    }\r\n    if (typeof target === 'function') {\r\n        if (!target.hasOwnProperty(varName)) {\r\n            // function's prototypes' members\r\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n        }\r\n    }\r\n    return varName;\r\n}\r\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\n// tslint:disable-next-line:function-constructor\nconst globalObj = Function('return this')();\nconst objConstructor = ({}).constructor; // NOTE: objConstructor            === Object\nconst funConstructor = Function;         // NOTE: ({}).toString.constructor === Function\n\n\nexport const SymbolPattern = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\nexport const NumberPattern = /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)$/;\nexport const DatePattern = /^(\\d{4}-[01]\\d-[0-3]\\d)$/;\nexport const DateTimePattern =\n/^((?:(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d))(?:[+-][0-2]\\d:[0-5]\\d|Z))$/;\nexport const DateTimeNoTzPattern =\n   /^((?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d))$/;\n\n\nexport const dummyTargetObject = {};\n\n\nexport function isUnsafeVarNames(target: any, varName: string) {\n    if (target === globalObj ||\n        varName === '__proto__' ||\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\n        return true;\n    }\n    if (varName === 'prototype' || varName === 'constructor') {\n        if (target === null || target === void 0 || typeof target === 'function') {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === objConstructor) {\n        if (objConstructor.hasOwnProperty(varName)) {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === funConstructor) {\n        // checking 'call', 'arguments', 'caller', ...\n        let con: any = funConstructor;\n        while (con) {\n            if (con.hasOwnProperty(varName)) {\n                return true;\n            }\n            con = con.__proto__;\n        }\n    }\n    if (typeof target === 'function') {\n        if (!target.hasOwnProperty(varName)) {\n            // function's prototypes' members\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function nvl(v: any, alt: any) {\n    return (\n        v !== null && v !== void 0 ? v : alt\n    );\n}\n\n\nexport function nvl2(v: any, f: (x: any) => any, alt: any) {\n    return (\n        v !== null && v !== void 0 ? f(v) : alt\n    );\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport type PrimitiveValueTypes = number | bigint | string | boolean | null | undefined;                                            // TODO: Function\nexport type PrimitiveValueTypeNames = 'number' | 'integer' | 'bigint' | 'string' | 'boolean' | 'null' | 'undefined';                // TODO: Function, DateStr, DateTimeStr\nexport type OptionalPrimitiveValueTypeNames = 'number?' | 'integer?' | 'bigint?' | 'string?' | 'boolean?' | 'null?' | 'undefined?'; // TODO: Function?, DateStr?, DateTimeStr?\nexport type PlaceholderTypeNames = 'never' | 'any' | 'unknown';\nexport type OptionalPlaceholderTypeNames = 'never?' | 'any?' | 'unknown?';\n\n\n\nexport enum ErrorTypes {\n    InvalidDefinition = 1,\n    Required,                // (all)\n    TypeUnmatched,           // Never/Unknown/Primitive/Object\n    AdditionalPropUnmatched, // Additional prop\n    RepeatQtyUnmatched,      // Repeated/Spread\n    SequenceUnmatched,       // Sequence\n    ValueRangeUnmatched,     // Primitive: minValue, maxValue, greaterThanValue, lessThanValue\n    ValuePatternUnmatched,   // Primitive: pattern\n    ValueLengthUnmatched,    // Primitive: minLength, maxLength\n    ValueUnmatched,          // PrimitiveValue\n}\n\n\nexport type ErrorMessages = Partial<{\n    invalidDefinition: string,\n    required: string,\n    typeUnmatched: string,\n    additionalPropUnmatched: string,\n    repeatQtyUnmatched: string,\n    sequenceUnmatched: string,\n    valueRangeUnmatched: string,\n    valuePatternUnmatched: string,\n    valueLengthUnmatched: string,\n    valueUnmatched: string,\n}>;\n\n\nexport interface TypeAssertionBase {\n    messageId?: string;\n    message?: string;             // Only one of 'message' or 'messages' can be set.\n    messages?: ErrorMessages;     // Only one of 'message' or 'messages' can be set.\n    name?: string;                // Member name or 'typeName' below. For error reporting and codegen.\n    typeName?: string;            // Named user defined 'type' or 'interface' name. For error reporting and codegen.\n    originalTypeName?: string;    // To keep right hand side type name of `type Y = X;`.\n    stereotype?: string;          // `stereotype` decorator value.\n    customConstraints?: string[]; //\n    customConstraintsArgs?: {     //\n        [constraintName: string]: any;\n    };\n    forceCast?: boolean;          // `forceCast` decorator value.\n    isRecordTypeField?: boolean;  // true if `recordType` decorator is set.\n    meta?: any;                   // `meta` decorator value; user defined custom properties (meta informations).\n    docComment?: string;          // Doc comment.\n    passThruCodeBlock?: string;   // Store a pass-thru code block (e.g. import statement). use it with kind===never\n    noOutput?: boolean;           // If true, skip code generation.\n}\n\n\nexport interface NeverTypeAssertion extends TypeAssertionBase {\n    kind: 'never';\n}\n\n\nexport interface AnyTypeAssertion extends TypeAssertionBase {\n    kind: 'any';\n}\n\n\nexport interface UnknownTypeAssertion extends TypeAssertionBase {\n    kind: 'unknown';\n}\n\n\nexport interface PrimitiveTypeAssertionConstraints {\n    minValue?: number | string | null; // TODO: bigint\n    maxValue?: number | string | null; // TODO: bigint\n    greaterThanValue?: number | string | null;\n    lessThanValue?: number | string | null;\n    minLength?: number | null;\n    maxLength?: number | null;\n    pattern?: RegExp | null;\n}\n\n\nexport interface PrimitiveTypeAssertion extends TypeAssertionBase, PrimitiveTypeAssertionConstraints {\n    kind: 'primitive';\n    primitiveName: PrimitiveValueTypeNames;\n}\n\n\nexport interface PrimitiveValueTypeAssertion extends TypeAssertionBase {\n    kind: 'primitive-value';\n    value: PrimitiveValueTypes;\n    primitiveName?: 'bigint'; // for deserializer hinting\n}\n\n\nexport interface RepeatedAssertionConstraints {\n    min: number | null;\n    max: number | null;\n}\n\n\nexport interface RepeatedAssertion extends TypeAssertionBase, RepeatedAssertionConstraints {\n    kind: 'repeated';\n    repeated: TypeAssertion;\n}\n\n\nexport interface SpreadAssertion extends TypeAssertionBase, RepeatedAssertionConstraints {\n    kind: 'spread';\n    spread: TypeAssertion;\n}\n\n\nexport interface SequenceAssertion extends TypeAssertionBase {\n    kind: 'sequence';\n    sequence: TypeAssertion[];\n}\n\n\nexport interface OneOfAssertion extends TypeAssertionBase {\n    kind: 'one-of';\n    oneOf: TypeAssertion[];\n}\n\n\nexport interface OptionalAssertion extends TypeAssertionBase {\n    kind: 'optional';\n    optional: TypeAssertion;\n}\n\n\nexport interface EnumAssertion extends TypeAssertionBase {\n    kind: 'enum';\n    values: Array<[\n        string,           // enum key\n        number | string,  // enum value\n        string?,          // doc comment\n    ]>;\n    isConst?: boolean;    // If true, it is `const enum`\n}\n\n\nexport type ObjectAssertionMember = [\n    string,         // name\n    TypeAssertion,  // type\n] | [\n    string,         // name\n    TypeAssertion,  // type\n    boolean,        // If true, defined by ancestor types\n] | [\n    string,         // name\n    TypeAssertion,  // type\n    boolean,        // If true, defined by ancestor types\n    string,         // doc comment\n];\n\n\n\nexport type AdditionalPropsKey = Array<'string' | 'number' | RegExp>;\n\n\nexport type AdditionalPropsMember = [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n] | [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n    boolean,             // If true, defined by ancestor types\n] | [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n    boolean,             // If true, defined by ancestor types\n    string,              // doc comment\n];\n\n\nexport interface ObjectAssertion extends TypeAssertionBase {\n    kind: 'object';\n    members: ObjectAssertionMember[];\n    additionalProps?: AdditionalPropsMember[];\n    baseTypes?: Array<ObjectAssertion | AssertionSymlink>;\n}\n\n\nexport interface AssertionSymlink extends TypeAssertionBase {\n    kind: 'symlink';\n    symlinkTargetName: string;\n    memberTree?: string[];\n}\n\n\n// TODO: Add it to resolve backref in type operator's operands\nexport interface AssertionOperator extends TypeAssertionBase {\n    kind: 'operator';\n    operator: string;\n    operands: Array<TypeAssertion | string>;\n}\n\n\nexport type TypeAssertion =\n    NeverTypeAssertion |\n    AnyTypeAssertion |\n    UnknownTypeAssertion |\n    PrimitiveTypeAssertion |\n    PrimitiveValueTypeAssertion |\n    RepeatedAssertion |\n    SpreadAssertion |\n    SequenceAssertion |\n    OneOfAssertion |\n    OptionalAssertion |\n    EnumAssertion |\n    ObjectAssertion |\n    AssertionSymlink |\n    AssertionOperator;\n\n\nexport interface SerializedSchemaInfo {\n    version: string;\n    ns: {\n        [namespaceName: string]: {\n            [typeName: string]: TypeAssertion;\n        }\n    };\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol }     from './types';\r\n\r\n\r\n\r\nexport function quote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.quote}, x];\r\n}\r\n\r\n\r\nexport function isQuoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.quote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function backquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.backquote}, x];\r\n}\r\n\r\n\r\nexport function isBackquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.backquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function wrapByUnquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.unquote}, x];\r\n}\r\n\r\n\r\nexport function isUnquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.unquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function spread(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.spread}, x];\r\n}\r\n\r\n\r\nexport function splice(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.splice}, x];\r\n}\r\n\r\n\r\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\r\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\r\n        if (name !== void 0) {\r\n            return x.symbol === name ? x : null;\r\n        } else {\r\n            return x;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedPair,\r\n         SxDottedFragment,\r\n         SxToken,\r\n         SxScope,\r\n         CapturedScopes,\r\n         SxMacroInfo }           from './types';\r\nimport { isSymbol }              from './ast';\r\nimport { setEvaluationCount,\r\n         checkUnsafeVarNamesEx } from './errors';\r\n\r\n\r\n\r\nexport function toNumber(x: any) {\r\n    switch (typeof x) {\r\n    case 'object': case 'symbol': case 'function':\r\n        return NaN;\r\n    default:\r\n        return Number(x);\r\n    }\r\n}\r\n\r\n\r\nexport function resolveUnquote(state: SxParserState, r: SxToken[]) {\r\n    for (let i = 0; i < r.length; i++) {\r\n        const symUnquote = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.unquote);\r\n        if (symUnquote) {\r\n            r = r.slice(0, i).concat([evaluate(state, (r[i] as SxToken[])[1])], r.slice(i + 1));\r\n        }\r\n        if (Array.isArray(r[i])) {\r\n            r = r.slice(0);\r\n            r[i] = resolveUnquote(state, r[i] as SxToken[]);\r\n        }\r\n    }\r\n    return resolveSplice(state, r);\r\n}\r\n\r\n\r\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\r\n    if (state.config.enableSplice) {\r\n        for (let i = r.length - 1; i >= 0; i--) {\r\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\r\n            if (symSplice) {\r\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function resolveMacro(state: SxParserState, x: SxSymbol, r: SxToken[]) {\r\n    const macroInfo = state.macroMap.get(x.symbol);\r\n    let lastErr = null;\r\n    if (macroInfo) {\r\n        let m: SxMacroInfo | undefined = macroInfo;\r\n        const r1 = r.slice(1);\r\n        while (m) {\r\n            if (m.formalArgs) {\r\n                const matchResult = matchMacroArgs(state, x.symbol, m.formalArgs, Boolean(m.lastIsSpread), r1);\r\n                if (! matchResult.error) {\r\n                    return {\r\n                        fn: m.fn(state, x.symbol, matchResult.formalArgs as SxSymbol[]),\r\n                        actualArgs: r.slice(0, 1).concat(matchResult.actualArgs as SxToken[]),\r\n                    };\r\n                }\r\n                lastErr = matchResult.error;\r\n                m = m.next;\r\n            } else {\r\n                return {\r\n                    fn: m.fn(state, x.symbol),\r\n                    actualArgs: r,\r\n                };\r\n            }\r\n        }\r\n        if (lastErr) {\r\n            throw new Error(lastErr);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\r\n    if (typeof x === 'function') {\r\n        return x;\r\n    }\r\n    const funcInfo = state.funcMap.get(x.symbol);\r\n    if (funcInfo) {\r\n        return funcInfo.fn(state, x.symbol);\r\n    } else {\r\n        const v = resolveValueSymbol(state, x);\r\n        if (typeof v === 'function') {\r\n            return v;\r\n        }\r\n        if (state.config.funcSymbolResolverFallback) {\r\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\r\n            return localScope.scope;\r\n        }\r\n        if (localScope.capturedScopes &&\r\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\r\n            return localScope.capturedScopes[x.symbol];\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    const globalScope = getGlobalScope(state);\r\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\r\n        return globalScope.scope;\r\n    }\r\n    return nullIfNotDefined ? null : getScope(state).scope;\r\n}\r\n\r\n\r\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\r\n    const scope = resolveValueSymbolScope(state, x, true);\r\n    if (scope) {\r\n        return scope[x.symbol];\r\n    }\r\n    const symInfo = state.symbolMap.get(x.symbol);\r\n    if (symInfo) {\r\n        return symInfo.fn(state, x.symbol);\r\n    } else {\r\n        if (state.config.valueSymbolResolverFallback) {\r\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\r\n    const capturedScopes: CapturedScopes = {};\r\n    for (const n of names) {\r\n        const scope = resolveValueSymbolScope(state, n, true);\r\n        if (scope === null) {\r\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\r\n        }\r\n        checkUnsafeVarNamesEx('collectCapturedVariables', capturedScopes, n.symbol);\r\n        capturedScopes[n.symbol] = scope;\r\n    }\r\n    return capturedScopes;\r\n}\r\n\r\n\r\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\r\n    const a: CapturedScopes[] = [];\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope.capturedScopes) {\r\n            a.unshift(localScope.capturedScopes);\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\r\n}\r\n\r\n\r\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\r\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\r\n}\r\n\r\n\r\nexport function uninstallScope(state: SxParserState): any {\r\n    if (state.scopes.length < 2) {\r\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\r\n    }\r\n    return state.scopes.pop();\r\n}\r\n\r\n\r\nexport function getScope(state: SxParserState) {\r\n    return state.scopes[state.scopes.length - 1];\r\n}\r\n\r\n\r\nexport function getGlobalScope(state: SxParserState) {\r\n    return state.scopes[0];\r\n}\r\n\r\n\r\nexport function matchMacroArgs(\r\n        state: SxParserState, macroName: string,\r\n        formalArgs: SxSymbol[], lastIsSpread: boolean, actualArgs: SxToken[]) {\r\n\r\n    formalArgs = formalArgs.slice(0);\r\n    actualArgs = actualArgs.slice(0);\r\n    if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n        return ({ error: `[SX] macro call (${macroName}): Actual args too short: actual ${\r\n            actualArgs.length} / formal ${formalArgs.length}.` });\r\n    }\r\n    for (let i = formalArgs.length - (lastIsSpread ? 2 : 1); i >= 0; i--) {\r\n        let nm = formalArgs[i].symbol;\r\n        if (nm.startsWith('!')) {\r\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1);\r\n            nm = formalArgs[i].symbol;\r\n\r\n            if (! isSymbol(actualArgs[i])) {\r\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\r\n            }\r\n        } else if (nm.startsWith('<') && nm.endsWith('>')) {\r\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1, -1);\r\n            nm = formalArgs[i].symbol;\r\n\r\n            if (isSymbol(actualArgs[i], nm)) {\r\n                formalArgs = formalArgs.slice(0, i).concat(formalArgs.slice(i + 1));\r\n                actualArgs = actualArgs.slice(0, i).concat(actualArgs.slice(i + 1));\r\n            } else {\r\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not expected symbol.` });\r\n            }\r\n        } else {\r\n            const tpos = nm.lastIndexOf(':');\r\n            if (0 < tpos) {\r\n                const tname = nm.slice(tpos + 1);\r\n                switch (tname) {\r\n                case 'number':\r\n                    if (typeof actualArgs[i] !== 'number') {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not number.` });\r\n                    }\r\n                    break;\r\n                case 'string':\r\n                    if (typeof actualArgs[i] !== 'string') {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not string.` });\r\n                    }\r\n                    break;\r\n                case 'function':\r\n                    if (! (Array.isArray(actualArgs[i]) && isSymbol((actualArgs[i] as any)[0]))) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not function.` });\r\n                    }\r\n                    break;\r\n                case 'list':\r\n                    if (! Array.isArray(actualArgs[i])) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not list.` });\r\n                    }\r\n                    break;\r\n                case 'symbol':\r\n                    if (! isSymbol(actualArgs[i])) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\r\n                    }\r\n                    break;\r\n                case 'any':\r\n                    break;\r\n                default:\r\n                    return ({ error: `[SX] macro call (${macroName}): Formal arg(${i}: ${nm}) is unknown type ${tname}.` });\r\n                }\r\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(0, tpos);\r\n            }\r\n        }\r\n    }\r\n    return ({ formalArgs, actualArgs });\r\n}\r\n\r\n\r\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //    formalArgs: 'sym1 ... 'symN\r\n    //        fnBody: 'expr1 ... 'exprN\r\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\r\n        const front = fnBody.slice(0, fnBody.length - 1);\r\n        const tail = fnBody[fnBody.length - 1];\r\n        if (tail && (typeof tail[0] === 'object') && tail[0].symbol === state.config.reservedNames.if) {\r\n            // S expression: ($if cond t-expr f-expr)\r\n            if (Array.isArray(tail[3]) && (typeof tail[3][0] === 'object') && tail[3][0].symbol === state.config.reservedNames.self) {\r\n                // S expression (recursive):\r\n                //     (                                 ;; fnBody\r\n                //         expr1 ... exprN-1             ;; front\r\n                //         ($if cond                     ;; tail[0] [1]\r\n                //             t-expr                    ;;     [2]\r\n                //             ($self                    ;;     [3]\r\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\r\n                //     )\r\n                //\r\n                //  -> S exp (tail call optimization):\r\n                //     (                                                                  ;; fnBody\r\n                //         ($until cond                                                   ;; tail[1]\r\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\r\n                //                 expr1 ... exprN-1                                      ;; front\r\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\r\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\r\n                //             )                                                          ;;\r\n                //         )                                                              ;;\r\n                //         expr1 ... exprN-1                                              ;; front\r\n                //         t-expr                                                         ;; tail[2]\r\n                //     )\r\n\r\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\r\n\r\n                return [\r\n                    [{symbol: state.config.reservedNames.until}, tail[1],\r\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\r\n                            ...front,\r\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\r\n                            ...(tempVarsSyms.map((x, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\r\n                        ],\r\n                    ],\r\n                    ...front,\r\n                    tail[2],\r\n                ];\r\n            }\r\n        }\r\n    }\r\n    return fnBody;\r\n}\r\n\r\n\r\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\r\n    setEvaluationCount(state);\r\n\r\n    if (x === null || x === void 0) {\r\n        return x;\r\n    }\r\n    let r: SxToken = x;\r\n\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                return r;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym, r);\r\n                if (m) {\r\n                    r = m.fn(m.actualArgs as SxToken[]);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n\r\n    if (Array.isArray(r)) {\r\n        r = r.slice(0);\r\n        if (0 < r.length) {\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                if (sym.symbol === state.config.reservedNames.quote) {\r\n                    return r.slice(1, 2)[0];\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.backquote) {\r\n                    r = r.slice(1, 2)[0];\r\n                    if (Array.isArray(r)) {\r\n                        r = resolveUnquote(state, r);\r\n                    }\r\n                    return r;\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.eval) {\r\n                    return evaluate(state, evaluate(state, r.slice(1, 2)[0]));\r\n                }\r\n            }\r\n\r\n            const sprs = [];\r\n            for (let i = 1; i < r.length; i++) {\r\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\r\n                if (symSpr) {\r\n                    sprs.push(i);\r\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\r\n                    r[i] = Array.isArray(a) ? a : [a];\r\n                } else {\r\n                    r[i] = evaluate(state, r[i]);\r\n                }\r\n            }\r\n            for (const i of sprs.reverse()) {\r\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\r\n            }\r\n\r\n            let fn: any;\r\n            if (typeof r[0] === 'function') {\r\n                fn = r[0];\r\n            } else if (sym) {\r\n                fn = resolveFunctionSymbol(state, sym);\r\n            } else {\r\n                fn = evaluate(state, r[0]);\r\n            }\r\n\r\n            if (typeof fn === 'function') {\r\n                r = (fn as any)(...(r.slice(1)));\r\n            } else {\r\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\r\n            }\r\n        }\r\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\r\n        r = (r as SxExternalValue).value;\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\r\n        r = resolveValueSymbol(state, r as SxSymbol);\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\r\n        const car = evaluate(state, (r as SxDottedPair).car);\r\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\r\n        if (Array.isArray(cdr)) {\r\n            const a = (cdr as any[]).slice(0);\r\n            a.unshift(car);\r\n            r = a;\r\n        } else {\r\n            r = { car, cdr };\r\n        }\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\r\n        r = [\r\n            evaluate(state, (r as SxDottedFragment).dotted),\r\n        ];\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\r\n        r = [];\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { NeverTypeAssertion,\n         AnyTypeAssertion,\n         UnknownTypeAssertion,\n         PrimitiveValueTypes,\n         PrimitiveValueTypeNames,\n         OptionalPrimitiveValueTypeNames,\n         PlaceholderTypeNames,\n         OptionalPlaceholderTypeNames,\n         ErrorMessages,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         ObjectAssertionMember,\n         AdditionalPropsKey,\n         AdditionalPropsMember,\n         ObjectAssertion,\n         AssertionSymlink,\n         AssertionOperator,\n         TypeAssertion }    from './types';\nimport { dummyTargetObject,\n         isUnsafeVarNames } from './lib/util';\n\n\n\n// emulate Pick<T> // ex. Pick<Foo, 'a' | 'b'>\nexport function picked(ty: TypeAssertion, ...names: string[]): ObjectAssertion | AssertionOperator {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const name of names) {\n                const member = ty.members.find(x => x[0] === name);\n                if (member) {\n                    if (member[2]) {\n                        const m2: ObjectAssertionMember = [...member] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.push(m2);\n                    } else {\n                        members.push(member);\n                    }\n                }\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'picked',\n                operands: [ty, ...names],\n            });\n        }\n    default:\n        return ({\n            kind: 'object',\n            members: [],\n        });\n    }\n}\n\n\n// emulate Omit<T> // ex. Omit<Foo, 'a' | 'b'>\nexport function omit(ty: TypeAssertion, ...names: string[]): ObjectAssertion | AssertionOperator {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const member of ty.members) {\n                if (! names.find(name => member[0] === name)) {\n                    if (member[2]) {\n                        const m2: ObjectAssertionMember = [...member] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.push(m2);\n                    } else {\n                        members.push(member);\n                    }\n                }\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'omit',\n                operands: [ty, ...names],\n            });\n        }\n    default:\n        return ({\n            kind: 'object',\n            members: [],\n        });\n    }\n}\n\n\n// emulate Partial<T>\nexport function partial(ty: TypeAssertion): TypeAssertion {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const member of ty.members) {\n                let m: ObjectAssertionMember = member[1].kind === 'optional' ?\n                    member :\n                    [member[0], optional(member[1]), ...member.slice(2)] as ObjectAssertionMember;\n                if (m[2]) {\n                    m = [...m] as any;\n                    if (3 < m.length) {\n                        m[2] = false;\n                    } else {\n                        m.length = 2;\n                    }\n                }\n                m[1].name = m[0];\n                const optTy = {...(m[1] as OptionalAssertion).optional};\n                (m[1] as OptionalAssertion).optional = optTy;\n                if (optTy.name && optTy.name !== optTy.typeName) {\n                    delete optTy.name;\n                }\n                if (!optTy.name && optTy.typeName) {\n                    optTy.name = optTy.typeName;\n                }\n                members.push(m);\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'partial',\n                operands: [ty],\n            });\n        }\n    default:\n        return ty;\n    }\n}\n\n\n// intersection (a & b)\nexport function intersect(...types: TypeAssertion[]): TypeAssertion {\n    if (types.length === 0) {\n        throw new Error(`Empty intersection type is not allowed.`);\n    }\n    if (0 < types.filter(x => x && typeof x === 'object' &&\n            (x.kind === 'symlink' || x.kind === 'operator')).length) {\n        return ({\n            kind: 'operator',\n            operator: 'intersect',\n            operands: types.slice(),\n        });\n    }\n    let lastTy: TypeAssertion | null = null;\n    const members = new Map<string, ObjectAssertionMember>();\n\n    for (const ty of types) {\n        if (ty && typeof ty === 'object') {\n            if (lastTy && lastTy.kind !== ty.kind) {\n                return ({\n                    kind: 'never',\n                });\n            }\n            lastTy = ty;\n            if (ty.kind === 'object') {\n                for (const m of ty.members) {\n                    if (m[2]) {\n                        const m2: ObjectAssertionMember = [...m] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.set(m[0], m2); // Overwrite if exists\n                    } else {\n                        members.set(m[0], m);  // Overwrite if exists\n                    }\n                }\n            }\n        } else {\n            return ({\n                kind: 'never',\n            });\n        }\n    }\n    if (lastTy && lastTy.kind !== 'object') {\n        return lastTy;\n    } else {\n        return ({\n            kind: 'object',\n            members: Array.from(members.values()),\n        });\n    }\n}\n\n\n// union (a | b)\nexport function oneOf(...types: Array<PrimitiveValueTypes | TypeAssertion>): TypeAssertion {\n    if (types.length === 0) {\n        throw new Error(`Empty union type is not allowed.`);\n    }\n    if (types.length === 1) {\n        const ty = types[0];\n        if (ty && typeof ty === 'object') {\n            return ty;\n        } else {\n            return primitiveValue(ty);\n        }\n    }\n    const ret: OneOfAssertion = {\n        kind: 'one-of',\n        oneOf: [],\n    };\n    for (const ty of types) {\n        // TODO: remove same type\n        if (ty && typeof ty === 'object') {\n            if (ty.kind === 'one-of') {\n                ret.oneOf = ret.oneOf.concat(ty.oneOf);\n            } else {\n                ret.oneOf.push(ty);\n            }\n        } else {\n            ret.oneOf.push(primitiveValue(ty));\n        }\n    }\n    return ret;\n}\n\n\n// subtraction (a - b)\nexport function subtract(...types: TypeAssertion[]): ObjectAssertion | AssertionOperator {\n    if (types.length === 0) {\n        throw new Error(`Empty subtraction type is not allowed.`);\n    }\n    if (0 < types.filter(x => x && typeof x === 'object' &&\n            (x.kind === 'symlink' || x.kind === 'operator')).length) {\n        return ({\n            kind: 'operator',\n            operator: 'subtract',\n            operands: types.slice(),\n        });\n    }\n    let ret = types[0];\n    if (!ret || typeof ret !== 'object' || ret.kind !== 'object') {\n        throw new Error(`First parameter of subtraction type should be 'object'.`);\n    }\n    for (const ty of types.slice(1)) {\n        if (ty && typeof ty === 'object' && ty.kind === 'object') {\n            ret = omit(ret, ...ty.members.map(m => m[0]));\n        }\n    }\n    return ret;\n}\n\n\nexport function primitive(typeName: PrimitiveValueTypeNames |\n                                    OptionalPrimitiveValueTypeNames |\n                                    PlaceholderTypeNames |\n                                    OptionalPlaceholderTypeNames):\n        PrimitiveTypeAssertion | OptionalAssertion | NeverTypeAssertion | AnyTypeAssertion | UnknownTypeAssertion {\n    switch (typeName) {\n    case 'never':\n        return ({\n            kind: 'never',\n        });\n    case 'any':\n        return ({\n            kind: 'any',\n        });\n    case 'unknown':\n        return ({\n            kind: 'unknown',\n        });\n    case 'number':\n        // FALL_THRU\n    case 'integer':\n        // FALL_THRU\n    case 'bigint':\n        // FALL_THRU\n    case 'string':\n        // FALL_THRU\n    case 'boolean':\n        // FALL_THRU\n    case 'null':\n        // FALL_THRU\n    case 'undefined':\n        return ({\n            kind: 'primitive',\n            primitiveName: typeName,\n        });\n    case 'never?':\n        return (optional({\n            kind: 'never',\n        }));\n    case 'any?':\n        return (optional({\n            kind: 'any',\n        }));\n    case 'unknown?':\n        return (optional({\n            kind: 'unknown',\n        }));\n    case 'number?':\n        // FALL_THRU\n    case 'integer?':\n        // FALL_THRU\n    case 'bigint?':\n        // FALL_THRU\n    case 'string?':\n        // FALL_THRU\n    case 'boolean?':\n        // FALL_THRU\n    case 'null?':\n        // FALL_THRU\n    case 'undefined?':\n        return (optional({\n            kind: 'primitive',\n            primitiveName: typeName.substring(0, typeName.length - 1) as any,\n        }));\n    default:\n        throw new Error(`Unknown primitive type assertion: ${typeName}`);\n    }\n    // TODO: Function, DateStr, DateTimeStr, Funtion?, DateStr?, DateTimeStr?\n}\n\n\nexport function regexpPatternStringType(pattern: RegExp): PrimitiveTypeAssertion {\n    return ({\n        kind: 'primitive',\n        primitiveName: 'string',\n        pattern,\n    });\n}\n\n\nexport function primitiveValue(value: PrimitiveValueTypes): PrimitiveValueTypeAssertion {\n    if (value === null || value === void 0) {\n        return ({\n            kind: 'primitive-value',\n            value,\n        });\n    } else switch (typeof value) {\n    case 'number':\n        // FALL_THRU\n    case 'bigint':\n        // FALL_THRU\n    case 'string':\n        // FALL_THRU\n    case 'boolean':\n        return ({\n            kind: 'primitive-value',\n            value,\n        });\n    default:\n        throw new Error(`Unknown primitive value assertion: ${value}`);\n    }\n}\n\n\nexport function optional(ty: PrimitiveValueTypes | TypeAssertion): OptionalAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        if (ty.kind === 'optional') {\n            return ty;\n        } else {\n            return ({\n                kind: 'optional',\n                optional: ty,\n                ...(ty.typeName ? {typeName: ty.typeName} : {}),\n            });\n        }\n    } else {\n        return ({\n            kind: 'optional',\n            optional: primitiveValue(ty),\n        });\n    }\n}\n\n\nexport function repeated(\n        ty: PrimitiveValueTypeNames | TypeAssertion, option?:\n        Partial<Pick<RepeatedAssertion, 'max'> & Pick<RepeatedAssertion, 'min'>>): RepeatedAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        return ({\n            kind: 'repeated',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            repeated: ty,\n        });\n    } else {\n        return ({\n            kind: 'repeated',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            repeated: primitive(ty),\n        });\n    }\n}\n\n\nexport function sequenceOf(...seq: Array<PrimitiveValueTypes | TypeAssertion>): SequenceAssertion {\n    return ({\n        kind: 'sequence',\n        sequence: seq.map(ty => ty && typeof ty === 'object' && ty.kind ? ty : primitiveValue(ty)),\n    });\n}\n\n\nexport function spread(\n        ty: PrimitiveValueTypes | TypeAssertion,\n        option?: Partial<Pick<SpreadAssertion, 'max'> & Pick<SpreadAssertion, 'min'>>): SpreadAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        return ({\n            kind: 'spread',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            spread: ty,\n        });\n    } else {\n        return ({\n            kind: 'spread',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            spread: primitiveValue(ty),\n        });\n    }\n}\n\n\nexport function enumType(...values: Array<[string, number | string | null, string?]>): EnumAssertion {\n    const ar = values.slice();\n    let value = 0;\n    for (let i = 0; i < ar.length; i++) {\n        if (isUnsafeVarNames(dummyTargetObject, ar[i][0])) {\n            throw new Error(`Unsafe symbol name is appeared in enum assertion: ${ar[i][0]}`);\n        }\n\n        if (ar[i][1] === null || ar[i][1] === void 0) {\n            ar[i][1] = value++;\n        } else if (typeof ar[i][1] === 'number') {\n            value = (ar[i][1] as number) + 1;\n        }\n        if (! ar[i][2]) {\n            ar[i].length = 2;\n        }\n    }\n    return ({\n        kind: 'enum',\n        values: ar as Array<[string, number | string, string?]>,\n    });\n}\n\n\nexport function objectType(\n        ...members: Array<[\n            string | AdditionalPropsKey,\n            PrimitiveValueTypes | TypeAssertion,\n            string?\n        ]>): ObjectAssertion {\n    const revMembers = members.slice().reverse();\n    for (const x of members) {\n        if (typeof x[0] === 'string') {\n            if (isUnsafeVarNames(dummyTargetObject, x[0])) {\n                throw new Error(`Unsafe symbol name is appeared in object assertion: ${x[0]}`);\n            }\n            if (members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n                throw new Error(`Duplicated member is found: ${x[0]}`);\n            }\n        }\n    }\n\n    const membersProps: ObjectAssertionMember[] = (members\n        .filter(\n            x => typeof x[0] === 'string') as\n                Array<[string, PrimitiveValueTypes | TypeAssertion, string?]>)\n        .map(\n            x => x[1] && typeof x[1] === 'object' && x[1].kind ?\n                [x[0], withName(x[1], x[0]), x[2]] :\n                [x[0], withName(primitiveValue(x[1]), x[0]), x[2]])\n        .map(\n            x => (x[2] ?\n                [x[0], x[1], false, ...x.slice(2)] :\n                [x[0], x[1]]) as ObjectAssertionMember);\n\n    const additionalProps: AdditionalPropsMember[] = (members\n        .filter(x => typeof x[0] !== 'string') as Array<[\n            AdditionalPropsKey,\n            PrimitiveValueTypes | TypeAssertion,\n            string?\n        ]>)\n        .map(x => x[1] && typeof x[1] === 'object' && x[1].kind ?\n            x :\n            [x[0], primitiveValue(x[1]), x[2]])\n        .map(\n            x => (x[2] ?\n                [x[0], x[1], false, ...x.slice(2)] :\n                [x[0], x[1]]) as AdditionalPropsMember);\n\n    return ({\n        ...{\n            kind: 'object',\n            members: membersProps,\n        },\n        ...(0 < additionalProps.length ? {\n            additionalProps,\n        } : {}),\n    });\n}\n\n\nfunction checkRecursiveExtends(ty: ObjectAssertion, base: ObjectAssertion | AssertionSymlink): boolean {\n    if (ty === base) {\n        return false;\n    }\n    if (ty.typeName &&\n        (ty.typeName === base.typeName ||\n         (base.kind === 'symlink' && ty.typeName === base.symlinkTargetName))) {\n        return false;\n    }\n    if (base.kind === 'object' && base.baseTypes) {\n        for (const z of base.baseTypes) {\n            if (! checkRecursiveExtends(ty, z)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\nexport function derived(ty: ObjectAssertion, ...exts: TypeAssertion[]): ObjectAssertion {\n    const ret: ObjectAssertion = {\n        kind: 'object',\n        members: [],\n        baseTypes: [],\n    };\n\n    for (const ext of exts) {\n        switch (ext.kind) {\n        case 'object':\n            if (! checkRecursiveExtends(ty, ext)) {\n                throw new Error(`Recursive extend is found: ${ty.name || '(unnamed)'}`);\n            }\n            for (const m of ext.members) {\n                if (! ret.members.find(x => x[0] === m[0])) {\n                    ret.members.push([m[0], m[1], true, ...m.slice(3)] as ObjectAssertionMember);\n                }\n                // TODO: Check for different types with the same name.\n            }\n        // FALL_THRU\n        case 'symlink':\n            (ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>).push(ext);\n            break;\n        case 'operator':\n            {\n                throw new Error(`Unresolved type operator is found: ${ext.operator}`);\n            }\n        }\n        // NOTE: 'symlink' base types will resolved by calling `resolveSymbols()`.\n        //       `resolveSymbols()` will call `derived()` after resolve symlink exts.\n    }\n    ret.members = ty.members.concat(ret.members);\n    if (ty.baseTypes) {\n        ret.baseTypes = ty.baseTypes\n            .filter(x => x.kind !== 'symlink')\n            .concat(ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>);\n    }\n    if ((ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>).length === 0) {\n        delete ret.baseTypes;\n    }\n\n    const revMembers = ret.members.slice().reverse();\n    for (const x of ret.members) {\n        if (ret.members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n            throw new Error(`Duplicated member is found: ${x[0]} in ${ty.name || '(unnamed)'}`);\n        }\n    }\n\n    let additionalProps: AdditionalPropsMember[] = [];\n    if (ret.baseTypes) {\n        for (const base of ret.baseTypes) {\n            if (base.kind === 'object') {\n                if (base.additionalProps && 0 < base.additionalProps.length) {\n                    additionalProps = additionalProps.concat(\n                        base.additionalProps.map(x =>\n                            [x[0], x[1], true, ...x.slice(3)] as AdditionalPropsMember));\n                }\n            }\n            // NOTE: 'symlink' base types will resolved by calling `resolveSymbols()`.\n            //       `resolveSymbols()` will call `derived()` after resolve symlink exts.\n        }\n    }\n    if (ty.additionalProps && 0 < ty.additionalProps.length) {\n        additionalProps = additionalProps.concat(ty.additionalProps); // TODO: concat order\n    }\n    if (0 < additionalProps.length) {\n        ret.additionalProps = additionalProps;\n    }\n\n    return ret;\n}\n\n\nexport function symlinkType(name: string): AssertionSymlink {\n    return ({\n        kind: 'symlink',\n        symlinkTargetName: name,\n    });\n}\n\n\nexport function withName(ty: TypeAssertion, name: string) {\n    if (! name) {\n        return ty;\n    }\n    return ({...ty, name});\n}\n\n\nexport function withTypeName(ty: TypeAssertion, typeName: string) {\n    if (! typeName) {\n        return ty;\n    }\n    return ({...ty, typeName});\n}\n\n\nexport function withOriginalTypeName(ty: TypeAssertion, originalTypeName: string) {\n    if (! originalTypeName) {\n        return ty;\n    }\n    return ({...ty, originalTypeName});\n}\n\n\nexport function withDocComment(ty: TypeAssertion, docComment: string) {\n    if (! docComment) {\n        return ty;\n    }\n    return ({...ty, docComment});\n}\n\n\nexport function withRange(minValue: number | string, maxValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minValue !== 'number' && typeof minValue !== 'string') {\n            throw new Error(`Decorator '@range' parameter 'minValue' should be number or string.`);\n        }\n        if (typeof maxValue !== 'number' && typeof maxValue !== 'string') {\n            throw new Error(`Decorator '@range' parameter 'maxValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@range' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minValue, maxValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@range' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minValue, maxValue});\n        }\n    };\n}\n\n\nexport function withMinValue(minValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minValue !== 'number' && typeof minValue !== 'string') {\n            throw new Error(`Decorator '@minValue' parameter 'minValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@minValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@minValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minValue});\n        }\n    };\n}\n\n\nexport function withMaxValue(maxValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof maxValue !== 'number' && typeof maxValue !== 'string') {\n            throw new Error(`Decorator '@maxValue' parameter 'maxValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, maxValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, maxValue});\n        }\n    };\n}\n\n\nexport function withGreaterThan(greaterThanValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof greaterThanValue !== 'number' && typeof greaterThanValue !== 'string') {\n            throw new Error(`Decorator '@greaterThan' parameter 'greaterThan' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@greaterThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, greaterThanValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@greaterThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, greaterThanValue});\n        }\n    };\n}\n\n\nexport function withLessThan(lessThanValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof lessThanValue !== 'number' && typeof lessThanValue !== 'string') {\n            throw new Error(`Decorator '@lessThan' parameter 'lessThan' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@lessThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, lessThanValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@lessThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, lessThanValue});\n        }\n    };\n}\n\n\nexport function withMinLength(minLength: number) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minLength !== 'number') {\n            throw new Error(`Decorator '@minLength' parameter 'minLength' should be number.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@minLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minLength}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@minLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minLength});\n        }\n    };\n}\n\n\nexport function withMaxLength(maxLength: number) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof maxLength !== 'number') {\n            throw new Error(`Decorator '@maxLength' parameter 'maxLength' should be number.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, maxLength}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, maxLength});\n        }\n    };\n}\n\n\nexport function withMatch(pattern: RegExp) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof pattern !== 'object') {\n            throw new Error(`Decorator '@match' parameter 'pattern' should be RegExp.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@match' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, pattern}});\n        } else {\n            if (!ty || ty.kind !== 'primitive' || ty.primitiveName !== 'string') {\n                throw new Error(`Decorator '@match' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, pattern});\n        }\n    };\n}\n\n\nexport function withStereotype<T extends TypeAssertion>(stereotype: string): (ty: T) => T {\n    if (typeof stereotype !== 'string') {\n        throw new Error(`Decorator '@stereotype' parameter 'stereotype' should be string.`);\n    }\n    if (isUnsafeVarNames(dummyTargetObject, stereotype)) {\n        throw new Error(`Unsafe symbol name is appeared in stereotype assertion: ${stereotype}`);\n    }\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            const ret: T = ({\n                ...ty,\n                optional: {\n                    ...(ty as OptionalAssertion).optional,\n                    stereotype,\n                },\n            });\n            return ret;\n        } else {\n            const ret: T = ({\n                ...ty,\n                stereotype,\n            });\n            return ret;\n        }\n    };\n}\n\n\nexport function withConstraint<T extends TypeAssertion>(name: string, args?: any): (ty: T) => T {\n    if (typeof name !== 'string') {\n        throw new Error(`Decorator '@constraint' parameter 'name' should be string.`);\n    }\n    if (isUnsafeVarNames(dummyTargetObject, name)) {\n        throw new Error(`Unsafe symbol name is appeared in constraint assertion: ${name}`);\n    }\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            const opt = (ty as OptionalAssertion).optional;\n            const ret: T = ({\n                ...ty,\n                optional: {\n                    ...opt,\n                    customConstraints: opt.customConstraints\n                        ? opt.customConstraints.slice().push(name)\n                        : [name],\n                    customConstraintsArgs: opt.customConstraintsArgs\n                        ? {...opt.customConstraintsArgs, [name]: args}\n                        : {[name]: args},\n                },\n            });\n            return ret;\n        } else {\n            const ret: T = ({\n                ...ty,\n                customConstraints: ty.customConstraints\n                    ? ty.customConstraints.slice().push(name)\n                    : [name],\n                customConstraintsArgs: ty.customConstraintsArgs\n                    ? {...ty.customConstraintsArgs, [name]: args}\n                    : {[name]: args},\n            });\n            return ret;\n        }\n    };\n}\n\n\nexport function withForceCast<T extends TypeAssertion>(): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            const ret: T = ({\n                ...ty,\n                optional: {\n                    ...(ty as OptionalAssertion).optional,\n                    forceCast: true,\n                },\n            });\n            return ret;\n        } else {\n            const ret: T = ({\n                ...ty,\n                forceCast: true,\n            });\n            return ret;\n        }\n    };\n}\n\n\nexport function withRecordType<T extends TypeAssertion>(): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            const ret: T = ({\n                ...ty,\n                optional: {\n                    ...(ty as OptionalAssertion).optional,\n                    isRecordTypeField: true,\n                },\n            });\n            return ret;\n        } else {\n            const ret: T = ({\n                ...ty,\n                isRecordTypeField: true,\n            });\n            return ret;\n        }\n    };\n}\n\n\nexport function withMeta<T extends TypeAssertion>(meta: any): (ty: T) => T {\n    return (ty: T) => {\n        const ret: T = ({\n            ...ty,\n            meta,\n        });\n        return ret;\n    };\n}\n\n\nexport function withMsg<T extends TypeAssertion>(messages: string | ErrorMessages): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            if (typeof messages === 'string') {\n                const ret = ({\n                    ...ty,\n                    message: messages,\n                    optional: {...(ty as OptionalAssertion).optional, message: messages},\n                });\n                delete ret.messages;\n                delete ret.optional.messages;\n                return ret;\n            } else {\n                const ret = ({\n                    ...ty,\n                    messages,\n                    optional: {...(ty as OptionalAssertion).optional, messages},\n                });\n                delete ret.message;\n                delete ret.optional.message;\n                return ret;\n            }\n        } else {\n            if (typeof messages === 'string') {\n                const ret = ({...ty, message: messages});\n                delete ret.messages;\n                return ret;\n            } else {\n                const ret = ({...ty, messages});\n                delete ret.message;\n                return ret;\n            }\n        }\n    };\n}\n\n\nexport function withMsgId<T extends TypeAssertion>(messageId: string): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            return ({\n                ...ty,\n                messageId,\n                optional: {...(ty as OptionalAssertion).optional, messageId},\n            });\n        } else {\n            return ({...ty, messageId});\n        }\n    };\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken }             from '../types';\r\nimport { isSymbol }            from '../ast';\r\nimport { resolveSplice,\r\n         resolveMacro,\r\n         resolveValueSymbol,\r\n         getScope }            from '../evaluate';\r\nimport { setEvaluationCount,\r\n         checkUnsafeVarNamesEx,\r\n         checkUnsafeVarNames } from '../errors';\r\n\r\n\r\n\r\nexport function applyMacros(state: SxParserState, tok: SxToken) {\r\n    let r: SxToken = tok;\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                break;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym, r);\r\n                if (m) {\r\n                    r = m.fn(m.actualArgs as SxToken[]);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function stripQuote(state: SxParserState, tok: SxToken) {\r\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\r\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\r\n    }\r\n    return (tok as any)[1];\r\n}\r\n\r\n\r\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\r\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\r\n        return (tok as any)[1];\r\n    } else {\r\n        return tok;\r\n    }\r\n}\r\n\r\n\r\nexport function getScope_stateApplied(state: SxParserState) {\r\n    return (function() { return getScope(state); });\r\n}\r\n\r\n\r\nexport function resolveValueSymbol_dynamic(state: SxParserState, varName: string) {\r\n    checkUnsafeVarNames('(compiler)resolveValueSymbol_dynamic', varName);\r\n    return (function(){ return resolveValueSymbol(state, {symbol: varName}); });\r\n}\r\n\r\nexport function checkUnsafeVarNames_dynamic(name: string) {\r\n    return (function(varName: string){ return checkUnsafeVarNames(name, varName); });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport function escapeString(s: string) {\n    return (s\n        .replace(/\\x08/g, '\\\\b')\n        .replace(/\\f/g, '\\\\f')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\v/g, '\\\\v')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\'/g, '\\\\\\'')\n        .replace(/\\\"/g, '\\\\\\\"')\n        .replace(/\\`/g, '\\\\\\`')\n    );\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         ValidationContext } from '../types';\n\n\n\nexport class ValidationError extends Error {\n    public ty?: TypeAssertion;\n    public ctx?: Partial<ValidationContext>;\n    public constructor(message: string, ty?: TypeAssertion, ctx?: Partial<ValidationContext>) {\n        super(message);\n        this.ty = ty;\n        this.ctx = ctx;\n    }\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         TypeAssertionMap,\n         TypeAssertionSetValue,\n         ObjectAssertion,\n         AssertionSymlink,\n         SymbolResolverOperators,\n         ResolveSymbolOptions,\n         SymbolResolverContext } from '../types';\nimport * as operators            from '../operators';\nimport { NumberPattern }         from '../lib/util';\n\n\n\nfunction mergeTypeAndSymlink(ty: TypeAssertion, link: AssertionSymlink): TypeAssertion {\n    const link2 = {...link};\n    delete link2.kind;\n    delete link2.symlinkTargetName;\n    delete link2.memberTree;\n    return ({...ty, ...link2} as any as TypeAssertion);\n}\n\n\nfunction updateSchema(original: TypeAssertion, schema: TypeAssertionMap, ty: TypeAssertion, typeName: string | undefined) {\n    if (typeName && schema.has(typeName)) {\n        const z: TypeAssertionSetValue = schema.get(typeName) as TypeAssertionSetValue;\n        if (z.ty === original) {\n            schema.set(typeName, {...z, ty, resolved: true});\n        }\n    }\n    return ty;\n}\n\n\nexport function resolveMemberNames(\n        ty: TypeAssertion, rootSym: string, memberTreeSymbols: string[], memberPos: number): TypeAssertion {\n\n    const addTypeName = (mt: TypeAssertion, typeName: string | undefined, memberSym: string) => {\n        if (typeName) {\n            return ({\n                ...mt,\n                typeName: memberPos === 0 ?\n                    `${rootSym}.${memberTreeSymbols.join('.')}` :\n                    `${typeName}.${memberSym}`,\n            });\n        } else {\n            return mt;\n        }\n    };\n\n    for (let i = memberPos; i < memberTreeSymbols.length; i++) {\n        const memberSym = memberTreeSymbols[i];\n\n        switch (ty.kind) {\n        case 'optional':\n            return resolveMemberNames(ty.optional, rootSym, memberTreeSymbols, i + 1);\n        case 'object':\n            for (const m of ty.members) {\n                if (memberSym === m[0]) {\n                    return addTypeName(\n                        resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1),\n                        ty.typeName,\n                        memberSym,\n                    );\n                }\n            }\n            if (ty.additionalProps) {\n                for (const m of ty.additionalProps) {\n                    for (const k of m[0]) {\n                        switch (k) {\n                        case 'number':\n                            if (NumberPattern.test(memberSym)) {\n                                return resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1);\n                            }\n                            break;\n                        case 'string':\n                            return resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1);\n                        default:\n                            if (k.test(memberSym)) {\n                                return resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1);\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            throw new Error(`Undefined member name is appeared: ${memberSym}`);\n        case 'symlink':\n            if (! ty.typeName) {\n                throw new Error(`Reference of anonymous type is appeared: ${memberSym}`);\n            }\n            return ({\n                ...{\n                    kind: 'symlink',\n                    symlinkTargetName: rootSym,\n                    name: memberSym,\n                    typeName: rootSym,\n                },\n                ...(0 < memberTreeSymbols.length ? {\n                    memberTree: memberTreeSymbols,\n                } : {}),\n            });\n        default:\n            // TODO: kind === 'operator'\n            throw new Error(`Unsupported type kind is appeared: (kind:${ty.kind}).${memberSym}`);\n        }\n    }\n    return ty;\n}\n\n\nexport function resolveSymbols(schema: TypeAssertionMap, ty: TypeAssertion, ctx: SymbolResolverContext): TypeAssertion {\n    const ctx2 = {...ctx, nestLevel: ctx.nestLevel + 1};\n    switch (ty.kind) {\n    case 'symlink':\n        {\n            const x = schema.get(ty.symlinkTargetName);\n            if (! x) {\n                throw new Error(`Undefined symbol '${ty.symlinkTargetName}' is referred.`);\n            }\n            if (0 <= ctx.symlinkStack.findIndex(s => s === ty.symlinkTargetName)) {\n                return ty;\n            }\n\n            const ty2 = {...ty};\n            let xTy = x.ty;\n            if (ty.memberTree && 0 < ty.memberTree.length) {\n                xTy = {\n                    ...resolveMemberNames(xTy, ty.symlinkTargetName, ty.memberTree, 0),\n                };\n                ty2.typeName = xTy.typeName;\n            }\n\n            return (\n                resolveSymbols(\n                    schema,\n                    mergeTypeAndSymlink(xTy, ty2),\n                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty2.symlinkTargetName]},\n                )\n            );\n        }\n    case 'repeated':\n        return updateSchema(ty, schema, {\n            ...ty,\n            repeated: resolveSymbols(schema, ty.repeated, ctx2),\n        }, ty.typeName);\n    case 'spread':\n        return updateSchema(ty, schema, {\n            ...ty,\n            spread: resolveSymbols(schema, ty.spread, ctx2),\n        }, ty.typeName);\n    case 'sequence':\n        return updateSchema(ty, schema, {\n            ...ty,\n            sequence: ty.sequence.map(x => resolveSymbols(schema, x, ctx2)),\n        }, ty.typeName);\n    case 'one-of':\n        return updateSchema(ty, schema, {\n            ...ty,\n            oneOf: ty.oneOf.map(x => resolveSymbols(schema, x, ctx2)),\n        }, ty.typeName);\n    case 'optional':\n        return updateSchema(ty, schema, {\n            ...ty,\n            optional: resolveSymbols(schema, ty.optional, ctx2),\n        }, ty.typeName);\n    case 'object':\n        {\n            if (0 < ctx.nestLevel && ty.typeName && 0 <= ctx.symlinkStack.findIndex(s => s === ty.typeName)) {\n                if (schema.has(ty.typeName)) {\n                    const z = schema.get(ty.typeName) as TypeAssertionSetValue;\n                    if (z.resolved) {\n                        return z.ty;\n                    }\n                }\n            }\n\n            const baseSymlinks = ty.baseTypes?.filter(x => x.kind === 'symlink') as AssertionSymlink[];\n            if (baseSymlinks && baseSymlinks.length > 0 && !ctx.isDeserialization) {\n                const exts = baseSymlinks\n                    .map(x => resolveSymbols(schema, x, ctx2))\n                    .filter(x => x.kind === 'object');\n                // TODO: if x.kind !== 'object' items exist -> error?\n                const d2 = resolveSymbols(\n                    schema,\n                    operators.derived({\n                        ...ty,\n                        ...(ty.baseTypes ? {\n                            baseTypes: ty.baseTypes.filter(x => x.kind !== 'symlink'),\n                        } : {}),\n                    }, ...exts),\n                    ty.typeName ?\n                        {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2,\n                );\n                return updateSchema(ty, schema, {\n                    ...ty,\n                    ...d2,\n                }, ty.typeName);\n            } else {\n                return updateSchema(ty, schema, {\n                    ...{\n                        ...ty,\n                        members: ty.members\n                            .map(x => [\n                                x[0],\n                                resolveSymbols(schema, x[1], ty.typeName ?\n                                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2),\n                                ...x.slice(2),\n                            ] as any),\n                    },\n                    ...(ty.additionalProps && 0 < ty.additionalProps.length ? {\n                        additionalProps: ty.additionalProps\n                            .map(x => [\n                                x[0],\n                                resolveSymbols(schema, x[1], ty.typeName ?\n                                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2),\n                                ...x.slice(2),\n                            ] as any),\n                    } : {}),\n                    ...(ty.baseTypes && 0 < ty.baseTypes.length ? {\n                        baseTypes: ctx.isDeserialization ?\n                            ty.baseTypes\n                                .map(x => x.kind === 'symlink' ? resolveSymbols(schema, x, ctx2) : x)\n                                .filter(x => x.kind === 'object') as ObjectAssertion[] :\n                            ty.baseTypes,\n                    } : {}),\n                }, ty.typeName);\n            }\n        }\n    case 'operator':\n        if (ctx2.operators) {\n            const ctx3 = ty.typeName ?\n                {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2;\n            const operands = ty.operands.map(x => {\n                if (typeof x === 'object' && x.kind) {\n                    return resolveSymbols(schema, x, ctx3);\n                }\n                return x;\n            });\n            if (0 < operands.filter(x => x && typeof x === 'object' &&\n                    (x.kind === 'symlink' || x.kind === 'operator')).length) {\n                throw new Error(`Unresolved type operator is found: ${ty.operator}`);\n            }\n            if (! ctx2.operators[ty.operator]) {\n                throw new Error(`Undefined type operator is found: ${ty.operator}`);\n            }\n            const ty2 = {...ty};\n            delete ty2.operator;\n            delete ty2.operands;\n            return updateSchema(\n                ty, schema,\n                {\n                    ...ty2,\n                    ...resolveSymbols(schema, ctx2.operators[ty.operator](...operands), ctx3),\n                },\n                ty.typeName,\n            );\n        } else {\n            return ty;\n        }\n    default:\n        return ty;\n    }\n}\n\n\nconst resolverOps: SymbolResolverOperators = {\n    picked: operators.picked,\n    omit: operators.omit,\n    partial: operators.partial,\n    intersect: operators.intersect,\n    subtract: operators.subtract,\n};\n\n\nexport function resolveSchema(schema: TypeAssertionMap, opts?: ResolveSymbolOptions): TypeAssertionMap {\n    for (const ent of schema.entries()) {\n        const ty = resolveSymbols(schema, ent[1].ty, {...opts, nestLevel: 0, symlinkStack: [ent[0]], operators: resolverOps});\n        ent[1].ty = ty;\n    }\n\n    return schema;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ErrorTypes,\n         ErrorMessages,\n         TypeAssertionErrorMessageConstraints,\n         TypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         OptionalAssertion,\n         ValidationContext } from '../types';\nimport { escapeString }      from './escape';\nimport { nvl }               from './util';\n\n\nexport const errorTypeNames = [\n    '',\n    'InvalidDefinition',\n    'Required',\n    'TypeUnmatched',\n    'AdditionalPropUnmatched',\n    'RepeatQtyUnmatched',\n    'SequenceUnmatched',\n    'ValueRangeUnmatched',\n    'ValuePatternUnmatched',\n    'ValueLengthUnmatched',\n    'ValueUnmatched',\n];\n\n\nexport const defaultMessages: ErrorMessages = {\n    invalidDefinition:       '\"%{name}\" of \"%{parentType}\" type definition is invalid.',\n    required:                '\"%{name}\" of \"%{parentType}\" is required.',\n    typeUnmatched:           '\"%{name}\" of \"%{parentType}\" should be type \"%{expectedType}\".',\n    additionalPropUnmatched: '\"%{addtionalProps}\" of \"%{parentType}\" are not matched to additional property patterns.',\n    repeatQtyUnmatched:      '\"%{name}\" of \"%{parentType}\" should repeat %{repeatQty} times.',\n    sequenceUnmatched:       '\"%{name}\" of \"%{parentType}\" sequence is not matched',\n    valueRangeUnmatched:     '\"%{name}\" of \"%{parentType}\" value should be in the range %{minValue} to %{maxValue}.',\n    valuePatternUnmatched:   '\"%{name}\" of \"%{parentType}\" value should be matched to pattern \"%{pattern}\"',\n    valueLengthUnmatched:    '\"%{name}\" of \"%{parentType}\" length should be in the range %{minLength} to %{maxLength}.',\n    valueUnmatched:          '\"%{name}\" of \"%{parentType}\" value should be \"%{expectedValue}\".',\n};\n\n\ntype TopRepeatable = RepeatedAssertion | SpreadAssertion | OptionalAssertion | null;\n\n\ninterface ReportErrorArguments {\n    ctx: ValidationContext;\n    substitutions?: [[string, string]]; // addtional or overwritten substitution values\n}\n\n\nfunction getErrorMessage(errType: ErrorTypes, ...messages: ErrorMessages[]) {\n    for (const m of messages) {\n        switch (errType) {\n        case ErrorTypes.InvalidDefinition:\n            if (m.invalidDefinition) {\n                return m.invalidDefinition;\n            }\n            break;\n        case ErrorTypes.Required:\n            if (m.required) {\n                return m.required;\n            }\n            break;\n        case ErrorTypes.TypeUnmatched:\n            if (m.typeUnmatched) {\n                return m.typeUnmatched;\n            }\n            break;\n        case ErrorTypes.AdditionalPropUnmatched:\n            if (m.additionalPropUnmatched) {\n                return m.additionalPropUnmatched;\n            }\n            break;\n        case ErrorTypes.RepeatQtyUnmatched:\n            if (m.repeatQtyUnmatched) {\n                return m.repeatQtyUnmatched;\n            }\n            break;\n        case ErrorTypes.SequenceUnmatched:\n            if (m.sequenceUnmatched) {\n                return m.sequenceUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueRangeUnmatched:\n            if (m.valueRangeUnmatched) {\n                return m.valueRangeUnmatched;\n            }\n            break;\n        case ErrorTypes.ValuePatternUnmatched:\n            if (m.valuePatternUnmatched) {\n                return m.valuePatternUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueLengthUnmatched:\n            if (m.valueLengthUnmatched) {\n                return m.valueLengthUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueUnmatched:\n            if (m.valueUnmatched) {\n                return m.valueUnmatched;\n            }\n            break;\n        }\n    }\n    return '';\n}\n\n\nfunction findTopRepeatableAssertion(ctx: ValidationContext): TopRepeatable {\n    const ret = ctx.typeStack\n        .slice()\n        .reverse()\n        .map(x => Array.isArray(x) ? x[0] : x)\n        .find(x => x.kind === 'repeated' || x.kind === 'spread' || x.kind === 'optional'\n                ) as RepeatedAssertion | SpreadAssertion | OptionalAssertion || null;\n    return ret;\n}\n\n\nfunction getExpectedType(ty: TypeAssertion): string {\n    switch (ty.kind) {\n    case 'repeated':\n        return `(repeated ${getExpectedType(ty.repeated)})`;\n    case 'spread':\n        return getExpectedType(ty.spread);\n    case 'sequence':\n        return '(sequence)';\n    case 'primitive':\n        return ty.primitiveName;\n    case 'primitive-value':\n        return `(value ${\n            typeof ty.value === 'string' ?\n                `'${String(ty.value)}'` :\n                String(ty.value)})`;\n    case 'optional':\n        return getExpectedType(ty.optional);\n    case 'one-of':\n        return `(one of ${ty.oneOf.map(x => getExpectedType(x)).join(', ')})`;\n    case 'never': case 'any': case 'unknown':\n        return ty.kind;\n    case 'symlink':\n        return ty.symlinkTargetName;\n    default:\n        return ty.typeName ? ty.typeName : '?';\n    }\n}\n\n\nexport function formatErrorMessage(\n        msg: string, data: any, ty: TypeAssertion,\n        args: ReportErrorArguments,\n        values: {dataPath: string, topRepeatable: TopRepeatable, parentType: string, entryName: string}) {\n\n    let ret = msg;\n    // TODO: complex type object members' custom error messages are not displayed?\n    // TODO: escapeString() is needed?\n\n    const tr = values.topRepeatable;\n\n    const dict = new Map<string, string>([\n        ['expectedType',\n            ty.stereotype ?\n                ty.stereotype :\n            escapeString(getExpectedType(ty))],\n        ['type',\n            escapeString(typeof data)],\n        ['expectedValue',\n            escapeString(\n                ty.kind === 'primitive-value' ?\n                    String(ty.value) :\n                ty.kind === 'enum' ?\n                    ty.typeName ?\n                        `enum member of ${ty.typeName}` :\n                        '?' :\n                '?')],\n        ['value',\n            escapeString(String(data))],\n        ['repeatQty',\n            escapeString(\n                tr ?\n                    tr.kind !== 'optional' ? `${\n                        nvl(tr.min, '')}${\n                            (tr.min !== null && tr.min !== void 0) ||\n                            (tr.max !== null && tr.max !== void 0) ? '..' : ''}${\n                            nvl(tr.max, '')}` :\n                        '0..1' :\n                    '?')],\n        ['minValue',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.minValue, nvl(ty.greaterThanValue, '(smallest)'))}` : '?')],\n        ['maxValue',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.maxValue, nvl(ty.lessThanValue, '(biggest)'))}` : '?')],\n        ['pattern',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${ty.pattern ? `/${ty.pattern.source}/${ty.pattern.flags}` : '(pattern)'}` : '?')],\n        ['minLength',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.minLength, '0')}` : '?')],\n        ['maxLength',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.maxLength, '(biggest)')}` : '?')],\n        ['name',\n            escapeString(\n                `${ty.kind !== 'repeated' && values.dataPath.endsWith('repeated)') ?\n                    'repeated item of ' :\n                   ty.kind !== 'sequence' && values.dataPath.endsWith('sequence)') ?\n                    'sequence item of ' : ''}${\n                values.entryName || '?'}`)],\n        ['parentType',\n            escapeString(\n                values.parentType || '?')],\n        ['dataPath',\n            values.dataPath],\n\n        ...(args.substitutions || []),\n    ]);\n\n    for (const ent of dict.entries()) {\n        ret = ret.replace(new RegExp(`%{${ent[0]}}`), ent[1]);\n    }\n\n    return ret;\n}\n\n\ninterface DataPathEntry {\n    name: string;\n    kind: 'type' | 'key' | 'index';\n}\n\n\nexport function reportError(\n        errType: ErrorTypes, data: any, ty: TypeAssertion,\n        args: ReportErrorArguments) {\n\n    const messages: ErrorMessages[] = [];\n    if (ty.messages) {\n        messages.push(ty.messages);\n    }\n    if (args.ctx.errorMessages) {\n        messages.push(args.ctx.errorMessages);\n    }\n    messages.push(defaultMessages);\n\n    const dataPathEntryArray: DataPathEntry[] = [];\n\n    for (let i = 0; i < args.ctx.typeStack.length; i++) {\n        const p = args.ctx.typeStack[i];\n        const next = args.ctx.typeStack[i + 1];\n        const pt = Array.isArray(p) ? p[0] : p;\n        const pi = Array.isArray(next) ? next[1] : void 0;\n\n        let isSet = false;\n        if (pt.kind === 'repeated') {\n            if (i !== args.ctx.typeStack.length - 1) {\n                if (pt.name) {\n                    dataPathEntryArray.push({kind: 'key', name: pt.name});\n                }\n                dataPathEntryArray.push({kind: 'index', name: `(${pi !== void 0 ? `${pi}:` : ''}repeated)`});\n                isSet = true;\n            }\n        } else if (pt.kind === 'sequence') {\n            if (i !== args.ctx.typeStack.length - 1) {\n                if (pt.name) {\n                    dataPathEntryArray.push({kind: 'key', name: pt.name});\n                }\n                dataPathEntryArray.push({kind: 'index', name: `(${pi !== void 0 ? `${pi}:` : ''}sequence)`});\n                isSet = true;\n            }\n        }\n        if (! isSet) {\n            if (pt.name) {\n                if (i === 0) {\n                    if (pt.typeName) {\n                        dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n                    } else {\n                        dataPathEntryArray.push({kind: 'key', name: pt.name});\n                    }\n                } else {\n                    const len = dataPathEntryArray.length;\n                    if (len && dataPathEntryArray[len - 1].kind === 'type') {\n                        if (pt.kind === 'object' && next && pt.typeName) {\n                            dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n                        } else {\n                            dataPathEntryArray.push({kind: 'key', name: pt.name as string}); // NOTE: type inference failed\n                        }\n                    } else {\n                        if (pt.typeName) {\n                            dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n                        } else {\n                            dataPathEntryArray.push({kind: 'key', name: pt.name});\n                        }\n                    }\n                }\n            } else if (pt.typeName) {\n                dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n            }\n        }\n    }\n\n    let dataPath = '';\n    for (let i = 0; i < dataPathEntryArray.length; i++) {\n        const p = dataPathEntryArray[i];\n        dataPath += p.name;\n        if (i + 1 === dataPathEntryArray.length) {\n            break;\n        }\n        dataPath += p.kind === 'type' ? ':' : '.';\n    }\n\n    let parentType = '';\n    let entryName = '';\n    for (let i = dataPathEntryArray.length - 1; 0 <= i; i--) {\n        const p = dataPathEntryArray[i];\n        if (p.kind === 'type') {\n            if (i !== 0 && i === dataPathEntryArray.length - 1) {\n                const q = dataPathEntryArray[i - 1];\n                if (q.kind === 'index') {\n                    continue; // e.g.: \"File:acl.(0:repeated).ACL\"\n                }\n            }                 // else: \"File:acl.(0:repeated).ACL:target\"\n            parentType = p.name;\n            for (let j = i + 1; j < dataPathEntryArray.length; j++) {\n                const q = dataPathEntryArray[j];\n                if (q.kind === 'key') {\n                    entryName = q.name;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    if (! parentType) {\n        for (let i = args.ctx.typeStack.length - 1; 0 <= i; i--) {\n            const p = args.ctx.typeStack[i];\n            const pt = Array.isArray(p) ? p[0] : p;\n            if (pt.typeName) {\n                parentType = pt.typeName;\n            }\n        }\n    }\n\n    const topRepeatable: TopRepeatable = findTopRepeatableAssertion(args.ctx);\n    const values = {dataPath, topRepeatable, parentType, entryName};\n\n    const constraints: TypeAssertionErrorMessageConstraints = {};\n    const cSrces: TypeAssertionErrorMessageConstraints[] = [ty as any];\n\n    if (errType === ErrorTypes.RepeatQtyUnmatched && topRepeatable) {\n        cSrces.unshift(topRepeatable as any);\n    }\n\n    for (const cSrc of cSrces) {\n        if (nvl(cSrc.minValue, false)) {\n            constraints.minValue = cSrc.minValue;\n        }\n        if (nvl(cSrc.maxValue, false)) {\n            constraints.maxValue = cSrc.maxValue;\n        }\n        if (nvl(cSrc.greaterThanValue, false)) {\n            constraints.greaterThanValue = cSrc.greaterThanValue;\n        }\n        if (nvl(cSrc.lessThanValue, false)) {\n            constraints.lessThanValue = cSrc.lessThanValue;\n        }\n        if (nvl(cSrc.minLength, false)) {\n            constraints.minLength = cSrc.minLength;\n        }\n        if (nvl(cSrc.maxLength, false)) {\n            constraints.maxLength = cSrc.maxLength;\n        }\n        if (nvl(cSrc.pattern, false)) {\n            const pat = cSrc.pattern as any as RegExp;\n            constraints.pattern = `/${pat.source}/${pat.flags}`;\n        }\n        if (nvl(cSrc.min, false)) {\n            constraints.min = cSrc.min;\n        }\n        if (nvl(cSrc.max, false)) {\n            constraints.max = cSrc.max;\n        }\n    }\n\n    const val: {value?: any} = {};\n\n    switch (typeof data) {\n    case 'number': case 'bigint': case 'string': case 'boolean': case 'undefined':\n        val.value = data;\n        break;\n    case 'object':\n        if (data === null) {\n            val.value = data;\n        }\n    }\n\n    if (ty.messageId) {\n        args.ctx.errors.push({\n            code: `${ty.messageId}-${errorTypeNames[errType]}`,\n            message: formatErrorMessage(ty.message ?\n                ty.message :\n                getErrorMessage(errType, ...messages), data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    } else if (ty.message) {\n        args.ctx.errors.push({\n            code: `${errorTypeNames[errType]}`,\n            message: formatErrorMessage(ty.message, data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    } else {\n        args.ctx.errors.push({\n            code: `${errorTypeNames[errType]}`,\n            message: formatErrorMessage(getErrorMessage(errType, ...messages), data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    }\n}\n\n\nexport function reportErrorWithPush(\n        errType: ErrorTypes, data: any,\n        tyidx: [TypeAssertion, number | string | undefined],\n        args: ReportErrorArguments) {\n\n    try {\n        args.ctx.typeStack.push(tyidx);\n        reportError(errType, data, tyidx[0], args);\n    } finally {\n        args.ctx.typeStack.pop();\n    }\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { Stereotype } from '../types';\n\n\n\nexport const noopStereotype: Stereotype = {\n    tryParse: (value: any) => {\n        return ({ value });\n    },\n    evaluateFormula: (valueOrFormula: any) => {\n        return valueOrFormula;\n    },\n    compare: (a: any, b: any) => {\n        // NOTE: You should pass assertion value (schema value) into 'a'.\n        const tyA = typeof a;\n        const tyB = typeof b;\n        if (tyA !== tyB) {\n            return NaN;\n        }\n        switch (tyA) {\n        case 'number':\n            if (Number.isNaN(a) && Number.isNaN(b)) {\n                return 0;\n            } else {\n                return a - b;\n            }\n        default:\n            if (a === b) {\n                return 0;\n            } else if (a > b) {\n                return 1;\n            } else if (a < b) {\n                return -1;\n            } else {\n                return NaN;\n            }\n        }\n    },\n    doCast: false,\n};\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ErrorTypes,\n         NeverTypeAssertion,\n         AnyTypeAssertion,\n         UnknownTypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SequenceAssertion,\n         SpreadAssertion,\n         OptionalAssertion,\n         OneOfAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertion,\n         ValidationContext,\n         TypeAssertionMap,\n         Stereotype,\n         CustomConstraintInfo } from './types';\nimport { ValidationError }      from './lib/errors';\nimport { NumberPattern,\n         isUnsafeVarNames }     from './lib/util';\nimport { reportError,\n         reportErrorWithPush }  from './lib/reporter';\nimport { resolveSymbols }       from './lib/resolver';\nimport { noopStereotype }       from './stereotypes/noop';\n\n\n\nfunction checkStereotypes(\n    data: any, ty: TypeAssertion, ctx: ValidationContext):\n        {value: any, stereotype: Stereotype} | null | false {\n\n    if (ty.stereotype && ctx.stereotypes) {\n        if (ctx.stereotypes.has(ty.stereotype)) {\n            const stereotype = ctx.stereotypes.get(ty.stereotype) as Stereotype;\n            const parsed = stereotype.tryParse(data);\n            if (parsed) {\n                return ({\n                    value: parsed.value,\n                    stereotype,\n                });\n            } else {\n                return null;\n            }\n        } else {\n            throw new Error(`Undefined stereotype is specified: ${ty.stereotype}`);\n        }\n    }\n    return false;\n}\n\n\nfunction forceCast(\n    targetType:\n        'number' | 'integer' | 'bigint' | 'string' | 'boolean' | 'undefined' | 'null' |\n        'symbol' | 'object' | 'function',\n    value: any) {\n\n    switch (targetType) {\n    case 'number':\n        if (typeof value === 'number') {\n            return value;\n        } else {\n            const a = Number.parseFloat(String(value));\n            if (Number.isNaN(a)) {\n                return Number(value ?? 0);\n            } else {\n                return a;\n            }\n        }\n    case 'integer':\n        if (typeof value === 'number' && Math.trunc(value) === value) {\n            return value;\n        } else {\n            let a = Number.parseFloat(String(value));\n            if (Number.isNaN(a)) {\n                a = Number(value ?? 0);\n            }\n            return Math.trunc(a);\n        }\n    case 'bigint':\n        try {\n            return BigInt(value ?? 0);\n        } catch {\n            return NaN;\n        }\n    case 'string':\n        return String(value);\n    case 'boolean':\n        return Boolean(value);\n    case 'undefined':\n        return void 0;\n    case 'null':\n        return null;\n    default:\n        return value;\n    }\n}\n\n\nfunction checkCustomConstraints(\n    data: any, ty: TypeAssertion, ctx: ValidationContext): boolean | null {\n\n    if (ty.customConstraints && ctx.customConstraints) {\n        for (const ccName of ty.customConstraints) {\n            if (ctx.customConstraints.has(ccName)) {\n                const cc = ctx.customConstraints.get(ccName) as CustomConstraintInfo;\n                if (cc.kinds && !cc.kinds.includes(ty.kind)) {\n                    return null;\n                }\n                if (! cc.check(data, ty.customConstraintsArgs && ty.customConstraintsArgs[ccName])) {\n                    return null;\n                }\n            } else {\n                throw new Error(`Undefined constraint is specified: ${ccName}`);\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\n\nfunction validateNeverTypeAssertion<T>(\n    data: any, ty: NeverTypeAssertion, ctx: ValidationContext): null {\n\n    reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nfunction validateAnyTypeAssertion<T>(\n    data: any, ty: AnyTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let chkSt = checkStereotypes(data, ty, ctx);\n    if (chkSt === null) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    } else if (chkSt === false) {\n        chkSt = {\n            value: data,\n            stereotype: noopStereotype,\n        };\n    }\n    const styp = chkSt.stereotype;\n\n    if (checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    // always matched\n    return ({value: ctx.mapper\n        ? ctx.mapper(styp.doCast ? chkSt.value : data, ty)\n        :            styp.doCast ? chkSt.value : data});\n}\n\n\nfunction validateUnknownTypeAssertion<T>(\n    data: any, ty: UnknownTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let chkSt = checkStereotypes(data, ty, ctx);\n    if (chkSt === null) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    } else if (chkSt === false) {\n        chkSt = {\n            value: data,\n            stereotype: noopStereotype,\n        };\n    }\n    const styp = chkSt.stereotype;\n\n    if (checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    // always matched\n    return ({value: ctx.mapper\n        ? ctx.mapper(styp.doCast ? chkSt.value : data, ty)\n        :            styp.doCast ? chkSt.value : data});\n}\n\n\nfunction validatePrimitiveTypeAssertion<T>(\n    data: any, ty: PrimitiveTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    const chkTarget = ty.forceCast ? forceCast(ty.primitiveName, data) : data;\n\n    if (ty.primitiveName === 'null') {\n        if (chkTarget !== null) {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n    } else if (ty.primitiveName === 'integer') {\n        if (typeof chkTarget !== 'number') {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n        if (Math.trunc(chkTarget) !== chkTarget) {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n    } else if (typeof chkTarget !== ty.primitiveName) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    // TODO: Function, DateStr, DateTimeStr\n\n    let chkSt = checkStereotypes(chkTarget, ty, ctx);\n    if (chkSt === null) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    } else if (chkSt === false) {\n        chkSt = {\n            value: chkTarget,\n            stereotype: ty.forceCast ? noopStereotype : noopStereotype,\n        };\n    }\n\n    const styVal = chkSt.value;\n    const styp = chkSt.stereotype;\n    let err = false;\n\n    let valueRangeErr = false;\n    switch (typeof ty.minValue) {\n    case 'number': case 'string': // TODO: bigint\n        if (styp.compare(styVal, styp.evaluateFormula(ty.minValue)) < 0) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.maxValue) {\n    case 'number': case 'string': // TODO: bigint\n        if (styp.compare(styVal, styp.evaluateFormula(ty.maxValue)) > 0) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.greaterThanValue) {\n    case 'number': case 'string': // TODO: bigint\n        if (styp.compare(styVal, styp.evaluateFormula(ty.greaterThanValue)) <= 0) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.lessThanValue) {\n    case 'number': case 'string': // TODO: bigint\n        if (styp.compare(styVal, styp.evaluateFormula(ty.lessThanValue)) >= 0) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n\n    let valueLengthErr = false;\n    switch (typeof ty.minLength) {\n    case 'number':\n        if (typeof styVal !== 'string' || styVal.length < ty.minLength) {\n            if (! valueLengthErr) {\n                reportError(ErrorTypes.ValueLengthUnmatched, data, ty, {ctx});\n            }\n            valueLengthErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.maxLength) {\n    case 'number':\n        if (typeof styVal !== 'string' || styVal.length > ty.maxLength) {\n            if (! valueLengthErr) {\n                reportError(ErrorTypes.ValueLengthUnmatched, data, ty, {ctx});\n            }\n            valueLengthErr = true;\n            err = true;\n        }\n    }\n\n    if (ty.pattern) {\n        if (typeof styVal !== 'string' || !ty.pattern.test(styVal)) {\n            reportError(ErrorTypes.ValuePatternUnmatched, data, ty, {ctx});\n            err = true;\n        }\n    }\n\n    if (checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        err = true;\n    }\n\n    const ret = !err\n        ? {value: ctx.mapper\n            ? ctx.mapper(styp.doCast ? chkSt.value : chkTarget, ty)\n            :            styp.doCast ? chkSt.value : chkTarget}\n        : null;\n    return ret;\n}\n\n\nfunction validatePrimitiveValueTypeAssertion<T>(\n    data: any, ty: PrimitiveValueTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    const chkTarget = ty.forceCast ? forceCast(typeof ty.value, data) : data;\n\n    let chkSt = checkStereotypes(chkTarget, ty, ctx);\n    if (chkSt === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    } else if (chkSt === false) {\n        chkSt = {\n            value: chkTarget,\n            stereotype: ty.forceCast ? noopStereotype : noopStereotype,\n        };\n    }\n    const styp = chkSt.stereotype;\n\n    let ret = styp.compare(chkSt.value, styp.evaluateFormula(ty.value)) === 0\n        ? {value: ctx.mapper\n            ? ctx.mapper(styp.doCast ? chkSt.value : chkTarget, ty)\n            :            styp.doCast ? chkSt.value : chkTarget}\n        : null;\n    if (! ret) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n    }\n\n    if (ret && checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        ret = null;\n    }\n\n    return ret;\n}\n\n\nfunction validateRepeatedAssertion<T>(\n    data: any, ty: RepeatedAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (! Array.isArray(data)) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    if (typeof ty.min === 'number' && data.length < ty.min) {\n        reportError(ErrorTypes.RepeatQtyUnmatched, data, ty, {ctx});\n        return null;\n    }\n    if (typeof ty.max === 'number' && data.length > ty.max) {\n        reportError(ErrorTypes.RepeatQtyUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    const retVals: any[] = [];\n    for (let i = 0; i < data.length; i++) {\n        const x = data[i];\n        const r = validateRoot<T>(x, ty.repeated, ctx, i);\n        if (! r) {\n            return null;\n        }\n        retVals.push(r.value);\n    }\n\n    if (checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    return {value: retVals as any};\n}\n\n\nfunction validateSequenceAssertion<T>(\n    data: any, ty: SequenceAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (! Array.isArray(data)) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    let dIdx = 0, // index of data\n        sIdx = 0; // index of types\n    let spreadLen = 0;\n    let optionalOmitted = false;\n\n    const checkSpreadQuantity = (ts: SpreadAssertion, index: number) => {\n        if (typeof ts.min === 'number' && spreadLen < ts.min) {\n            reportErrorWithPush(\n                spreadLen === 0 ?\n                    ErrorTypes.TypeUnmatched :\n                    ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        if (typeof ts.max === 'number' && spreadLen > ts.max) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        return ts;\n    };\n\n    const checkOptionalQuantity = (ts: OptionalAssertion, index: number) => {\n        if (spreadLen === 0) {\n            // All subsequent 'optional' assertions should be 'spreadLen === 0'.\n            optionalOmitted = true;\n        } else if (optionalOmitted) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        } else if (spreadLen > 1) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        return ts;\n    };\n\n    const retVals: any[] = [];\n    while (dIdx < data.length && sIdx < ty.sequence.length) {\n        const ts = ty.sequence[sIdx];\n        if (ts.kind === 'spread') {\n            const savedErrLen = ctx.errors.length;\n            const r = validateRoot<T>(data[dIdx], ts.spread, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                spreadLen++;\n            } else {\n                // End of spreading\n                // rollback reported errors\n                ctx.errors.length = savedErrLen;\n                if (! checkSpreadQuantity(ts, dIdx)) {\n                    return null;\n                }\n                spreadLen = 0;\n                sIdx++;\n            }\n        } else if (ts.kind === 'optional') {\n            const savedErrLen = ctx.errors.length;\n            const r = validateRoot<T>(data[dIdx], ts.optional, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                spreadLen++;\n            } else {\n                // End of spreading\n                // rollback reported errors\n                ctx.errors.length = savedErrLen;\n                if (! checkOptionalQuantity(ts, dIdx)) {\n                    return null;\n                }\n                spreadLen = 0;\n                sIdx++;\n            }\n        } else {\n            const r = validateRoot<T>(data[dIdx], ts, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                sIdx++;\n            } else {\n                return null;\n            }\n        }\n    }\n    while (sIdx < ty.sequence.length) {\n        const ts = ty.sequence[sIdx];\n        if (ts.kind === 'spread') {\n            if (! checkSpreadQuantity(ts, dIdx)) {\n                return null;\n            }\n            spreadLen = 0;\n            sIdx++;\n        } else if (ts.kind === 'optional') {\n            if (! checkOptionalQuantity(ts, dIdx)) {\n                return null;\n            }\n            spreadLen = 0;\n            sIdx++;\n        } else {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, dIdx], {ctx});\n            return null;\n        }\n    }\n\n    const ret = data.length === dIdx ? {value: retVals as any} : null;\n    if (! ret) {\n        reportError(ErrorTypes.SequenceUnmatched, data, ty, {ctx});\n    }\n\n    if (ret && checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    return ret;\n}\n\n\nfunction validateOneOfAssertion<T>(\n    data: any, ty: OneOfAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let choosed = false;\n    const savedCtxRecordTypeFieldValidated = ctx.recordTypeFieldValidated;\n    ctx.recordTypeFieldValidated = false;\n\n    const savedErrLen = ctx.errors.length;\n    let count = 0;\n    let firstErrLen = savedErrLen;\n\n    for (const tyOne of ty.oneOf) {\n        const r = validateRoot<T>(data, tyOne, ctx);\n        if (r) {\n            // rollback reported errors\n            ctx.errors.length = savedErrLen;\n            ctx.recordTypeFieldValidated = savedCtxRecordTypeFieldValidated;\n            return r;\n        }\n\n        if (ctx.recordTypeFieldValidated) {\n            if (count !== 0) {\n                const e2 = ctx.errors.slice(firstErrLen);\n                ctx.errors.length = savedErrLen;\n                ctx.errors.push(...e2);\n            }\n            choosed = true;\n            break;\n        }\n\n        if (count === 0) {\n            firstErrLen = ctx.errors.length;\n        } else {\n            ctx.errors.length = firstErrLen;\n        }\n        count++;\n    }\n\n    if (! choosed) {\n        if (! ctx.checkAll) {\n            // rollback reported errors\n            ctx.errors.length = savedErrLen;\n        }\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n    }\n\n    ctx.recordTypeFieldValidated = savedCtxRecordTypeFieldValidated;\n    return null;\n}\n\n\nfunction validateEnumAssertion<T>(\n    data: any, ty: EnumAssertion, ctx: ValidationContext): {value: T} | null {\n\n    for (const v of ty.values) {\n        if (data === v[1]) {\n            return ({value: ctx.mapper ? ctx.mapper(data, ty) : data});\n        }\n    }\n    reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nfunction validateObjectAssertion<T>(\n    data: any, ty: ObjectAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let retVal = Array.isArray(data) ? [...data] : {...data};\n    const revMembers = ty.members.slice().reverse();\n    for (const x of ty.members) {\n        if (ty.members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(\n                `Duplicated member is found: ${x[0]} in ${ty.name || '(unnamed)'}`, ty, ctx);\n        }\n    }\n\n    if (data === null || typeof data !== 'object') {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        if (ctx && ctx.checkAll) {\n            retVal = null;\n        } else {\n            return null;\n        }\n    } else {\n        const dataMembers = new Set<string>();\n        if (ctx.noAdditionalProps || ty.additionalProps && 0 < ty.additionalProps.length) {\n            if (! Array.isArray(data)) {\n                for (const m in data) {\n                    if (Object.prototype.hasOwnProperty.call(data, m)) {\n                        dataMembers.add(m);\n                    }\n                }\n            }\n        }\n        if (ctx.noAdditionalProps && Array.isArray(data) && 0 < data.length) {\n            const aps = ty.additionalProps || [];\n            if (aps.filter(x => x[0].includes('number')).length === 0) {\n                reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                    ctx,\n                    substitutions: [['addtionalProps', '[number]']],\n                });\n                if (ctx && ctx.checkAll) {\n                    retVal = null;\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        for (const x of ty.members) {\n            dataMembers.delete(x[0]);\n            if (Object.prototype.hasOwnProperty.call(data, x[0])) {\n                const mt = x[1].kind === 'optional' ?  // TODO: set name at compile time\n                    {\n                        ...x[1].optional,\n                        name: x[0],\n                        message: x[1].message,\n                        messages: x[1].messages,\n                        messageId: x[1].messageId,\n                    } : x[1];\n                const ret = validateRoot<T>(data[x[0]], mt, ctx);\n\n                if (ret) {\n                    if (retVal) {\n                        if (isUnsafeVarNames(retVal, x[0])) {\n                            continue;\n                        }\n                        retVal[x[0]] = ret.value;\n                        if (mt.isRecordTypeField) {\n                            ctx.recordTypeFieldValidated = true;\n                        }\n                    }\n                } else {\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            } else {\n                if (x[1].kind !== 'optional') {\n                    reportErrorWithPush(ErrorTypes.Required, data, [x[1], void 0], {ctx});\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        if (ty.additionalProps && 0 < ty.additionalProps.length) {\n            function* getAdditionalMembers() {\n                for (const m of dataMembers.values()) {\n                    yield m;\n                }\n                if (Array.isArray(data)) {\n                    for (let i = 0; i < data.length; i++) {\n                        yield String(i);\n                    }\n                }\n            }\n            for (const m of getAdditionalMembers()) {\n                let allowImplicit = false;\n                const matchedAssertions: TypeAssertion[] = [];\n\n                for (const ap of ty.additionalProps) {\n                    for (const pt of ap[0]) {\n                        const at = ap[1];\n                        if (pt === 'number') {\n                            if (NumberPattern.test(m)) {\n                                matchedAssertions.push(at);\n                            }\n                        } else if (pt === 'string') {\n                            matchedAssertions.push(at);\n                        } else {\n                            if (pt.test(m)) {\n                                matchedAssertions.push(at);\n                            }\n                        }\n                        if (at.kind === 'optional') {\n                            allowImplicit = true;\n                        }\n                    }\n                }\n                if (matchedAssertions.length === 0) {\n                    if (allowImplicit) {\n                        continue;\n                    }\n                    reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                        ctx,\n                        substitutions: [['addtionalProps', m]],\n                    });\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                        continue;\n                    } else {\n                        return null;\n                    }\n                }\n\n                dataMembers.delete(m);\n                let hasError = false;\n                const savedErrLen = ctx.errors.length;\n\n                for (const at of matchedAssertions) {\n                    const ret = validateRoot<T>(data[m], at.kind === 'optional' ?\n                        {\n                            ...at.optional,\n                            message: at.message,\n                            messages: at.messages,\n                            messageId: at.messageId,\n                            name: m,\n                        } : {\n                            ...at,\n                            name: m,\n                        }, ctx);\n                    if (ret) {\n                        if (retVal) {\n                            hasError = false;\n                            ctx.errors.length = savedErrLen;\n                            if (isUnsafeVarNames(retVal, m)) {\n                                continue;\n                            }\n                            retVal[m] = ret.value;\n                        }\n                        break;\n                    } else {\n                        hasError = true;\n                    }\n                }\n                if (hasError) {\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        if (ctx.noAdditionalProps && 0 < dataMembers.size) {\n            reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                ctx,\n                substitutions: [['addtionalProps', Array.from(dataMembers.values()).join(', ')]],\n            });\n            if (ctx && ctx.checkAll) {\n                retVal = null;\n            } else {\n                return null;\n            }\n        }\n    }\n    if (! retVal) {\n        // TODO: Child is unmatched. reportError?\n        // TODO: report object's custom error message\n    }\n\n    if (retVal && checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    return retVal ? {value: (ctx && ctx.mapper) ? ctx.mapper(retVal, ty) : retVal} : null;\n}\n\n\nexport function validateRoot<T>(\n    data: any, ty: TypeAssertion, ctx: ValidationContext, dataIndex?: number | string): {value: T} | null {\n\n    try {\n        ctx.typeStack.push(\n            typeof dataIndex === 'number' || typeof dataIndex === 'string' ?\n            [ty, dataIndex] : ty);\n\n        switch (ty.kind) {\n        case 'never':\n            return validateNeverTypeAssertion(data, ty, ctx);\n        case 'any':\n            return validateAnyTypeAssertion(data, ty, ctx);\n        case 'unknown':\n            return validateUnknownTypeAssertion(data, ty, ctx);\n        case 'primitive':\n            return validatePrimitiveTypeAssertion(data, ty, ctx);\n        case 'primitive-value':\n            return validatePrimitiveValueTypeAssertion(data, ty, ctx);\n        case 'repeated':\n            return validateRepeatedAssertion(data, ty, ctx);\n        case 'sequence':\n            return validateSequenceAssertion(data, ty, ctx);\n        case 'one-of':\n            return validateOneOfAssertion(data, ty, ctx);\n        case 'enum':\n            return validateEnumAssertion(data, ty, ctx);\n        case 'object':\n            return validateObjectAssertion(data, ty, ctx);\n        case 'symlink':\n            if (ctx.schema) {\n                return validateRoot<T>(data, resolveSymbols(ctx.schema, ty, {nestLevel: 0, symlinkStack: []}), ctx);\n            }\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unresolved symbol '${ty.symlinkTargetName}' is appeared.`, ty, ctx);\n        case 'operator':\n            if (ctx.schema) {\n                return validateRoot<T>(data, resolveSymbols(ctx.schema, ty, {nestLevel: 0, symlinkStack: []}), ctx);\n            }\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unresolved type operator is found: ${ty.operator}`, ty, ctx);\n        case 'spread': case 'optional':\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unexpected type assertion: ${(ty as any).kind}`, ty, ctx);\n        default:\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unknown type assertion: ${(ty as any).kind}`, ty, ctx);\n        }\n    } finally {\n        ctx.typeStack.pop();\n    }\n}\n\n\nexport function validate<T>(\n    data: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): {value: T} | null {\n\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n    };\n    try {\n        return validateRoot<T>(data, ty, ctx2);\n    } finally {\n        if (ctx) {\n            ctx.errors = ctx2.errors;\n        }\n    }\n}\n\n\nexport function isType<T>(\n    data: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): data is T {\n\n    return (!! validate<T>(data, ty, ctx));\n}\n\n\nexport function assertType<T>(\n    data: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): asserts data is T {\n\n    if (! validate<T>(data, ty, ctx)) {\n        throw new Error(`Assertion failed: Expected data should be of type \"${ty.typeName || ty.name || '?'}\".`);\n    }\n}\n\n\nexport function getType(schema: TypeAssertionMap, name: string): TypeAssertion {\n    if (schema.has(name)) {\n        return schema.get(name)?.ty as TypeAssertion;\n    }\n    throw new Error(`Undefined type name is referred: ${name}`);\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport type SxMacro = (state: SxParserState, name: string, formalArgs?: SxSymbol[]) => (list: SxToken[]) => SxToken;\r\n\r\nexport interface SxMacroInfo {\r\n    name: string;\r\n    fn: SxMacro;\r\n\r\n    formalArgs?: SxSymbol[];\r\n    lastIsSpread?: boolean;\r\n    next?: SxMacroInfo;\r\n}\r\n\r\n\r\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\r\n\r\nexport interface SxFuncInfo {\r\n    name: string;\r\n    fn: SxFunc;\r\n\r\n    // TODO: overloading\r\n    // formalArgs?: SxSymbol[];\r\n    // lastIsSpread?: boolean;\r\n    // next?: SxFuncInfo;\r\n}\r\n\r\n\r\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\r\n\r\nexport interface SxSymbolInfo {\r\n    name: string;\r\n    fn: SxSymbolResolver;\r\n}\r\n\r\n\r\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\r\n\r\nexport interface SxScope {\r\n    isBlockLocal: boolean;\r\n    scope: any;           // { [s: string]: any; };\r\n    capturedScopes?: CapturedScopes;\r\n}\r\n\r\n\r\nexport interface SxReservedNames {\r\n    eval: string;\r\n    quote: string;\r\n    backquote: string;\r\n    unquote: string;\r\n    spread: string;\r\n    splice: string;\r\n\r\n    car: string;\r\n    cdr: string;\r\n    cons: string;\r\n    atom: string;\r\n    eq: string;\r\n    list: string;\r\n\r\n    let: string;\r\n    lambda: string;\r\n    self: string;\r\n    defun: string;\r\n    thiz: string;\r\n\r\n    if: string;\r\n    cond: string;\r\n\r\n    while: string;\r\n    doWhile: string;\r\n    until: string;\r\n    doUntil: string;\r\n\r\n    get: string;\r\n    defvar: string;\r\n    setq: string;\r\n    set: string;\r\n    call: string;\r\n\r\n    not: string;\r\n    and: string;\r\n    or: string;\r\n\r\n    isSymbol: string;\r\n    gensym: string;\r\n    raise: string;\r\n    catch: string;\r\n\r\n    Template: string;\r\n}\r\n\r\nexport interface SxParserConfig {\r\n    raiseOnUnresolvedSymbol: boolean;\r\n    enableEvaluate: boolean;\r\n    enableHereDoc: boolean;\r\n    enableSpread: boolean;\r\n    enableSplice: boolean;\r\n    enableShorthands: boolean;\r\n    enableVerbatimStringLiteral: boolean;\r\n    enableTailCallOptimization: boolean;\r\n    enableRegExpMatchOperators: boolean; // IMPORTANT: Turn off to prevent ReDoS when executing untrusted code\r\n    enableCompilationOperators: boolean; // IMPORTANT: Turn off to prevent DoS when executing untrusted code\r\n    stripComments: boolean;\r\n    wrapExternalValue: boolean;\r\n    reservedNames: SxReservedNames;\r\n    returnMultipleRoot: boolean;\r\n    maxEvalCount: number;                // IMPORTANT: Set positive value to prevent DoS when executing untrusted code\r\n\r\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\r\n    JsxFragment?: any;\r\n\r\n    funcs: SxFuncInfo[];\r\n    macros: SxMacroInfo[];\r\n    symbols: SxSymbolInfo[];\r\n\r\n    funcSymbolResolverFallback?: SxFunc;\r\n    valueSymbolResolverFallback?: SxSymbolResolver;\r\n}\r\n\r\nexport interface SxParserState {\r\n    strings: TemplateStringsArray | string[];\r\n    values: any[];\r\n\r\n    index: number;\r\n    pos: number;\r\n    line: number;\r\n\r\n    evalCount: number;\r\n\r\n    scopes: SxScope[];\r\n\r\n    macroMap: Map<string, SxMacroInfo>;\r\n    funcMap: Map<string, SxFuncInfo>;\r\n    symbolMap: Map<string, SxSymbolInfo>;\r\n\r\n    config: SxParserConfig;\r\n}\r\n\r\nexport interface SxEof {\r\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\r\n    eofSeq?: string;\r\n}\r\n\r\nexport interface SxExternalValue {\r\n    value: any;\r\n}\r\n\r\nexport interface SxSymbol {\r\n    'symbol': string;\r\n\r\n    // TODO: debug info\r\n    // _fileName?: string;\r\n    // _line?: number;\r\n    // _col?: number;\r\n}\r\n\r\nexport interface SxComment {\r\n    comment: string;\r\n}\r\n\r\nexport interface SxDottedPair {\r\n    car: SxToken; // left\r\n    cdr: SxToken; // right\r\n}\r\n\r\nexport interface SxDottedFragment {\r\n    dotted: SxToken; // right\r\n}\r\n\r\n\r\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\r\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\r\nexport type SxChar = string | SxEof | SxExternalValue;\r\nexport type SxAtom = SxSymbol | string | number | boolean | null;\r\nexport type SxList = SxDottedPair | SxAtom[];\r\n\r\n\r\n\r\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\r\n\r\n\r\nexport interface CompilerContext {\r\n    _$_vars: any[];\r\n    varsCount: number;\r\n    varNames: Map<string, string>;\r\n    varNamesCount: number;\r\n    varDefs: string;\r\n    ops: Map<string, CompilerOperator>;\r\n    makeScope: (scoped: () => void) => void;\r\n    compileToken: (body: any[], i: number) => string;\r\n}\r\n\r\n\r\nexport interface LsxConfig {\r\n    jsx: (comp: any, props: any, ...children: any[]) => any;\r\n    jsxFlagment: any;\r\n    components: object;\r\n}\r\n\r\n\r\nexport class FatalError extends Error {\r\n    public constructor(message?: string | undefined) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n\r\nexport class MaxEvaluationCountError extends FatalError {\r\n    public constructor() {\r\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\r\n    }\r\n}\r\n\r\n\r\nexport class ScriptTerminationError extends FatalError {\r\n    public constructor(where: string) {\r\n        super(`[SX] ${where}: Unexpected termination of script.`);\r\n    }\r\n}\r\n\r\n\r\nexport interface SExpressionRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\r\n}\r\n\r\n\r\nexport interface SExpressionTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    evaluateAST: (ast: SxToken[]) => R;\r\n    repl: () => SExpressionRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\r\n    repl: () => SExpressionAsyncRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { RecursivePartial,\n         TypeAssertion,\n         ValidationContext } from './types';\nimport { ValidationError }   from './lib/errors';\nimport { isUnsafeVarNames }  from './lib/util';\nimport { validate }          from './validator';\n\n\n\nfunction pickMapper(value: any, ty: TypeAssertion) {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const ret = Array.isArray(value) ? [] : {};\n\n            const dataMembers = new Set<string>();\n            if (! Array.isArray(value)) {\n                for (const m in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, m)) {\n                        dataMembers.add(m);\n                    }\n                }\n            }\n\n            for (const x of ty.members) {\n                if (Object.hasOwnProperty.call(value, x[0])) {\n                    dataMembers.delete(x[0]);\n                    ret[x[0]] = value[x[0]];\n                }\n            }\n            if (ty.additionalProps && 0 < ty.additionalProps.length) {\n                function* getAdditionalMembers() {\n                    for (const m of dataMembers.values()) {\n                        yield m;\n                    }\n                    if (Array.isArray(value)) {\n                        for (let i = 0; i < value.length; i++) {\n                            yield String(i);\n                        }\n                    }\n                }\n                for (const m of getAdditionalMembers()) {\n                    ret[m] = value[m];\n                }\n            }\n            return ret;\n        }\n    default:\n        return value;\n    }\n}\n\n\nexport function pickRoot<T>(data: T, ty: TypeAssertion, ctx: ValidationContext): T {\n    switch (ty.kind) {\n    case 'never':\n        throw new ValidationError(`Type unmatched: ${(ty as any).kind}`, ty, ctx);\n    case 'any':\n        // FALL_THRU\n    case 'unknown':\n        // FALL_THRU\n    case 'primitive':\n        // FALL_THRU\n    case 'primitive-value':\n        // FALL_THRU\n    case 'repeated':\n        // FALL_THRU\n    case 'sequence':\n        // FALL_THRU\n    case 'one-of':\n        // FALL_THRU\n    case 'enum':\n        // FALL_THRU\n    case 'object':\n        {\n            const r = validate<T>(data, ty, ctx);\n            if (r) {\n                return r.value;\n            } else {\n                throw new ValidationError('Validation failed.', ty, ctx);\n            }\n        }\n    case 'spread': case 'optional': case 'symlink': case 'operator':\n        throw new ValidationError(`Unexpected type assertion: ${(ty as any).kind}`, ty, ctx);\n    default:\n        throw new ValidationError(`Unknown type assertion: ${(ty as any).kind}`, ty, ctx);\n    }\n}\n\n\nexport function pick<T>(data: T, ty: TypeAssertion, ctx?: Partial<ValidationContext>): RecursivePartial<T> {\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n        mapper: pickMapper,\n    };\n    try {\n        return pickRoot<T>(data, ty, ctx2);\n    } finally {\n        if (ctx) {\n            ctx.errors = ctx2.errors;\n        }\n    }\n}\n\n\nfunction merge(data: any, needle: any) {\n    if (data === null || data === void 0) {\n        return needle;\n    }\n    switch (typeof data) {\n    case 'object':\n        if (Array.isArray(data)) {\n            return [...needle];\n        } else {\n            const r: any = {...data};\n            for (const k in needle) {\n                if (Object.prototype.hasOwnProperty.call(needle, k)) {\n                    if (isUnsafeVarNames(r, k)) {\n                        continue;\n                    }\n                    r[k] = merge(r[k], needle[k]);\n                }\n            }\n            return r;\n        }\n    default:\n        return needle;\n    }\n}\n\n\nexport function patch<T>(data: T, needle: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): T {\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n    };\n    const validated = pick<T>(needle, ty, ctx2);\n    return merge(data, validated);\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { Stereotype }         from '../types';\nimport { DatePattern,\n         DateTimePattern,\n         DateTimeNoTzPattern } from '../lib/util';\n\n\n\nconst FyPattern = /^first-date-of-fy\\(([0-9]+)\\)$/;\nconst FormulaPattern = /^([-+@])([0-9]+)(yr|mo|day|days|hr|min|sec|ms)$/;\n\n\nclass UtcDate extends Date {\n    public constructor();\n    // tslint:disable-next-line: unified-signatures\n    public constructor(str: string);\n    public constructor(\n        year: number, month: number, date?: number,\n        hours?: number, minutes?: number, seconds?: number, ms?: number)\n    public constructor(\n        year?: number | string, month?: number, date?: number,\n        hours?: number, minutes?: number, seconds?: number, ms?: number) {\n\n        super();\n        if (year === void 0) {\n            return;\n        }\n        if (typeof year === 'string') {\n            if (DateTimePattern.test(year)) {\n                // string parameter is expected to be treated as specified TZ\n                this.setTime(Date.parse(year)); // returns date in specified TZ\n            } else if (DatePattern.test(year)) {\n                // string parameter is expected to be treated as UTC\n                const d = new Date(year);       // returns date in UTC TZ (getUTC??? returns string parameter's date & time digits)\n                this.setTime(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate()));\n            } else if (DateTimeNoTzPattern.test(year)) {\n                // string parameter is expected to be treated as UTC\n                const d = new Date(year);       // returns date in local TZ (get??? returns string parameter's date & time digits)\n                this.setTime(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(),\n                    d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));\n            } else {\n                this.setTime(NaN);\n            }\n            return;\n        }\n\n        this.setUTCDate(1);\n\n        this.setUTCFullYear(year);\n        this.setUTCMonth(typeof month === 'number' ? month : 0);\n        this.setUTCDate(typeof date === 'number' ? date : 1);\n        this.setUTCHours(typeof hours === 'number' ? hours : 0);\n        this.setUTCMinutes(typeof minutes === 'number' ? minutes : 0);\n        this.setUTCSeconds(typeof seconds === 'number' ? seconds : 0);\n        this.setUTCMilliseconds(typeof ms === 'number' ? ms : 0);\n    }\n\n    public getFullYear(): number {\n        return this.getUTCFullYear();\n    }\n\n    public getMonth(): number {\n        return this.getUTCMonth();\n    }\n\n    public getDate(): number {\n        return this.getUTCDate();\n    }\n\n    public getHours(): number {\n        return this.getUTCHours();\n    }\n\n    public getMinutes(): number {\n        return this.getUTCMinutes();\n    }\n\n    public getSeconds(): number {\n        return this.getUTCSeconds();\n    }\n\n    public getMilliseconds(): number {\n        return this.getUTCMilliseconds();\n    }\n\n    // NOTE: set???() are not overridden!\n}\n\n\nclass LcDate extends Date {\n    public constructor();\n    // tslint:disable-next-line: unified-signatures\n    public constructor(str: string);\n    public constructor(\n        year: number, month: number, date?: number,\n        hours?: number, minutes?: number, seconds?: number, ms?: number)\n    public constructor(\n        year?: number | string, month?: number, date?: number,\n        hours?: number, minutes?: number, seconds?: number, ms?: number) {\n\n        super();\n        if (year === void 0) {\n            return;\n        }\n        if (typeof year === 'string') {\n            if (DateTimePattern.test(year)) {\n                // string parameter is expected to be treated as specified TZ\n                this.setTime(Date.parse(year)); // returns date in specified TZ\n            } else if (DatePattern.test(year)) {\n                // string parameter is expected to be treated as local TZ\n                const d = new Date(year);       // returns date in UTC TZ (getUTC??? returns string parameter's date & time digits)\n                const l = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n                this.setTime(l.getTime());\n            } else if (DateTimeNoTzPattern.test(year)) {\n                // string parameter is expected to be treated as local TZ\n                const d = new Date(year);       // returns date in local TZ (get??? returns string parameter's date & time digits)\n                this.setTime(d.getTime());\n            } else {\n                this.setTime(NaN);\n            }\n            return;\n        }\n\n        this.setDate(1);\n\n        this.setFullYear(year);\n        this.setMonth(typeof month === 'number' ? month : 0);\n        this.setDate(typeof date === 'number' ? date : 1);\n        this.setHours(typeof hours === 'number' ? hours : 0);\n        this.setMinutes(typeof minutes === 'number' ? minutes : 0);\n        this.setSeconds(typeof seconds === 'number' ? seconds : 0);\n        this.setMilliseconds(typeof ms === 'number' ? ms : 0);\n    }\n}\n\n\ninterface DateConstructor {\n    new (): Date;\n    // tslint:disable-next-line: unified-signatures\n    new (str: string): Date;\n    new (year: number, month: number, date?: number,\n         hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n}\n\n\nfunction evaluateFormulaBase(dateCtor: DateConstructor, valueOrFormula: string): Date {\n    const errMsg = `evaluateFormula: invalid parameter ${valueOrFormula}`;\n    if (typeof valueOrFormula !== 'string') {\n        throw new Error(errMsg);\n    }\n    if (valueOrFormula.startsWith('=')) {\n        const formula = valueOrFormula.slice(1).split(' ');\n        let d = new dateCtor();\n        const now = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes());\n        const today = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate());\n        d = now;\n        for (const f of formula) {\n            switch (f) {\n            case 'current': case 'now':\n                d = now;\n                break;\n            case 'today':\n                d = today;\n                break;\n            case 'first-date-of-yr': case 'first-date-of-fy(1)':\n                d = new dateCtor(d.getFullYear(), 0, 1);\n                break;\n            case 'last-date-of-yr':\n                d = new dateCtor(d.getFullYear(), 11, 31);\n                break;\n            case 'first-date-of-mo':\n                d = new dateCtor(d.getFullYear(), d.getMonth(), 1);\n                break;\n            case 'last-date-of-mo':\n                d = new dateCtor(d.getFullYear(), d.getMonth() + 1, 0);\n                break;\n            default:\n                if (f.startsWith('first-date-of-fy(')) {\n                    const m = FyPattern.exec(f);\n                    if (m) {\n                        const n = Number.parseInt(m[1], 10);\n                        if (0 < n && n <= 12) {\n                            const mo = d.getMonth() + 1;\n                            let yr = d.getFullYear();\n                            if (mo < n) {\n                                yr--;\n                            }\n                            d = new dateCtor(yr, n - 1, 1);\n                        } else {\n                            throw new Error(errMsg);\n                        }\n                    } else {\n                        throw new Error(errMsg);\n                    }\n                } else {\n                    const m = FormulaPattern.exec(f);\n                    if (m) {\n                        let n = Number.parseInt(m[2], 10);\n                        switch (m[3]) {\n                        case 'yr':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getFullYear() + n;\n                                break;\n                            case '-':\n                                n = d.getFullYear() - n;\n                                break;\n                            }\n                            d = new dateCtor(n, d.getMonth(), d.getDate(),\n                                d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'mo':\n                            switch (m[1]) {\n                            case '@':\n                                n -= 1;\n                                break;\n                            case '+':\n                                n = d.getMonth() + n;\n                                break;\n                            case '-':\n                                n = d.getMonth() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), n, d.getDate(),\n                                d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'day': case 'days':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getDate() + n;\n                                break;\n                            case '-':\n                                n = d.getDate() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), n,\n                                d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'hr':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getHours() + n;\n                                break;\n                            case '-':\n                                n = d.getHours() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(),\n                                n, d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'min':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getMinutes() + n;\n                                break;\n                            case '-':\n                                n = d.getMinutes() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(),\n                                d.getHours(), n, d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'sec':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getSeconds() + n;\n                                break;\n                            case '-':\n                                n = d.getSeconds() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(),\n                                d.getHours(), d.getMinutes(), n, d.getMilliseconds());\n                            break;\n                        case 'ms':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getMilliseconds() + n;\n                                break;\n                            case '-':\n                                n = d.getMilliseconds() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(),\n                                d.getHours(), d.getMinutes(), d.getSeconds(), n);\n                            break;\n                        default:\n                            throw new Error(errMsg);\n                        }\n                    } else {\n                        if (!(DatePattern.test(f) || DateTimePattern.test(f) || DateTimeNoTzPattern.test(f))) {\n                            throw new Error(errMsg);\n                        }\n                        d = new dateCtor(f);\n                    }\n                }\n            }\n        }\n        return d;\n    } else {\n        if (! DatePattern.test(valueOrFormula)) {\n            throw new Error(errMsg);\n        }\n        return new dateCtor(valueOrFormula);\n    }\n}\n\n\nexport const dateStereotype: Stereotype = {\n    tryParse: (value: unknown) => {\n        return (\n            typeof value === 'string' && DatePattern.test(value)\n                ? { value: (new UtcDate(value)).getTime() }\n                : null\n        );\n    },\n    evaluateFormula: valueOrFormula => {\n        const d = evaluateFormulaBase(UtcDate, valueOrFormula);\n        return (new UtcDate(d.getFullYear(), d.getMonth(), d.getDate())).getTime();\n    },\n    compare: (a: number, b: number) => a - b,\n    doCast: false,\n};\n\n\nexport const lcDateStereotype: Stereotype = {\n    ...dateStereotype,\n    tryParse: (value: unknown) => {\n        if (typeof value === 'string' && DatePattern.test(value)) {\n            return ({ value: (new LcDate(value)).getTime() });\n        } else {\n            return null;\n        }\n    },\n    evaluateFormula: valueOrFormula => {\n        const d = evaluateFormulaBase(LcDate, valueOrFormula);\n        return (new LcDate(d.getFullYear(), d.getMonth(), d.getDate())).getTime();\n    },\n}\n\n\nexport const datetimeStereotype: Stereotype = {\n    tryParse: (value: unknown) => {\n        return (\n            typeof value === 'string' && (DateTimePattern.test(value) || DateTimeNoTzPattern.test(value))\n                ? { value: (new UtcDate(value)).getTime() } // If timezone is not specified, it is local time\n                : null\n        );\n    },\n    evaluateFormula: valueOrFormula => evaluateFormulaBase(UtcDate, valueOrFormula).getTime(),\n    compare: (a: number, b: number) => a - b,\n    doCast: false,\n};\n\n\nexport const lcDatetimeStereotype: Stereotype = {\n    ...datetimeStereotype,\n    tryParse: (value: unknown) => {\n        return (\n            typeof value === 'string' && (DateTimePattern.test(value) || DateTimeNoTzPattern.test(value))\n                ? { value: (new LcDate(value)).getTime() }\n                : null\n        );\n    },\n    evaluateFormula: valueOrFormula => evaluateFormulaBase(LcDate, valueOrFormula).getTime(),\n}\n\n\nexport const stereotypes: Array<[string, Stereotype]> = [\n    ['date', dateStereotype],\n    ['lcdate', lcDateStereotype],\n    ['datetime', datetimeStereotype],\n    ['lcdatetime', lcDatetimeStereotype],\n];\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { CustomConstraintInfo } from '../types';\nimport { dummyTargetObject,\n         isUnsafeVarNames }     from '../lib/util';\n\n\n\ntype MapperFn = (data: any, fields: string[]) => any[];\nconst mapperErrMsg = 'Unsafe symbol name is appeared in unique constraint assertion:';\n\n\nconst normalMapper: MapperFn = (data: any, fields: string[]) => {\n    const ret: any[] = [];\n    if (0 < fields.length) {\n        for (const field of fields) {\n            if (isUnsafeVarNames(dummyTargetObject, field)) {\n                throw new Error(`${mapperErrMsg} ${field}`);\n            }\n            ret.push(data[field]);\n        }\n    } else {\n        ret.push(data);\n    }\n    return ret;\n};\n\n\nconst nonNullMapper: MapperFn = (data: any, fields: string[]) => {\n    const ret: any[] = [];\n    if (0 < fields.length) {\n        for (const field of fields) {\n            if (isUnsafeVarNames(dummyTargetObject, field)) {\n                throw new Error(`${mapperErrMsg} ${field}`);\n            }\n            ret.push(data[field] ?? NaN);\n        }\n    } else {\n        ret.push(data);\n    }\n    return ret;\n};\n\n\nconst checkerGen = (mapper: MapperFn) => {\n    return ((data: any, args: any) => {\n        const errMsg = `evaluateFormula: invalid parameter ${args}`;\n        if (! Array.isArray(data)) {\n            throw new Error(errMsg);\n        }\n\n        const fields: string[] = [];\n        if (typeof args === 'string') {\n            fields.push(args);\n        } else if (Array.isArray(args)) {\n            for (const z of args) {\n                if (typeof z !== 'string') {\n                    throw new Error(errMsg);\n                }\n            }\n            fields.push(...args);\n        }\n\n        const mapped = data.map(x => mapper(x, fields));\n        for (let i = 0; i < mapped.length; i++) {\n            CMP: for (let j = 0; j < mapped.length; j++) {\n                if (i === j) {\n                    continue;\n                }\n                const a = mapped[i];\n                const b = mapped[j];\n                for (let k = 0; k < a.length; k++) { // TODO: this is slow! more better checking\n                    if (a[k] !== b[k]) {\n                        continue CMP;\n                    }\n                }\n                return false;\n            }\n        }\n\n        return true;\n    });\n};\n\n\nexport const constraints: Array<[string, CustomConstraintInfo]> = [\n    ['unique', {\n        kinds: ['repeated', 'sequence'],\n        check: checkerGen(normalMapper),\n    }],\n    ['unique-non-null', {\n        kinds: ['repeated', 'sequence'],\n        check: checkerGen(nonNullMapper),\n    }],\n];\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n// tslint:disable-next-line:function-constructor\r\nexport const globalObj = Function('return this')();\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         SxFuncInfo,\r\n         CompilerOperator,\r\n         CompilerContext  }           from './types';\r\nimport { isSymbol }                   from './ast';\r\nimport { getCapturedScopes,\r\n         optimizeTailCall }           from './evaluate';\r\nimport { checkUnsafeVarNamesEx }      from './errors';\r\nimport { applyMacros,\r\n         stripQuoteOrPass,\r\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\r\nimport { registerOperators }          from './compile.ops';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\r\n\r\n    function makeScope(scoped: () => void) {\r\n        const varNamesCopy = new Map<string, string>();\r\n        for (const x of ctx.varNames.entries()) {\r\n            varNamesCopy.set(x[0], x[1]);\r\n        }\r\n        scoped();\r\n        ctx.varNames = varNamesCopy;\r\n    }\r\n\r\n\r\n    function compileValue(b: any) {\r\n        let compFnBody = '';\r\n        if (b === null) {\r\n            compFnBody += '(null)';\r\n        } else if (b === void 0) {\r\n            compFnBody += '(void 0)';\r\n        } else switch (typeof b) {\r\n        case 'boolean': case 'number':\r\n            compFnBody += `(${String(b)})`;\r\n            break;\r\n        case 'object':\r\n            if (isSymbol(b)) {\r\n                const sym = b as SxSymbol;\r\n                checkUnsafeVarNamesEx('(compiler)compileValue', ctx.varNames, sym.symbol);\r\n                if (ctx.varNames.has(sym.symbol)) {\r\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\r\n                } else {\r\n                    _$_vars[ctx.varsCount] = sym.symbol;\r\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n                }\r\n                break;\r\n            } else {}\r\n            // FALL_THRU\r\n        default:\r\n            _$_vars[ctx.varsCount] = b;\r\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n            break;\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    function compileToken(body: any[], i: number) {\r\n        let compFnBody = '';\r\n        const b = body[i];\r\n        if (Array.isArray(b)) {\r\n            if (0 < b.length) {\r\n                const r: SxToken = applyMacros(state, b);\r\n                if (Array.isArray(r)) {\r\n                    if (0 < r.length) {\r\n                        if (isSymbol(r[0])) {\r\n                            const sym = r[0] as SxSymbol;\r\n                            const args = r.slice(1);\r\n                            checkUnsafeVarNamesEx('(compiler)compileToken', ops, sym.symbol);\r\n                            if (ops.has(sym.symbol)) {\r\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\r\n                            } else {\r\n                                if (sym.symbol === state.config.reservedNames.spread) {\r\n                                    compFnBody += `...(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else if (state.funcMap.has(sym.symbol)) {\r\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                } else if (ctx.varNames.has(sym.symbol)) {\r\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else {\r\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            switch (typeof r[0]) {\r\n                            case 'function':\r\n                                _$_vars[ctx.varsCount] = r[0];\r\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                break;\r\n                            default:\r\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        compFnBody += '([])';\r\n                    }\r\n                } else {\r\n                    compFnBody += compileValue(b);\r\n                }\r\n            } else {\r\n                compFnBody += '([])';\r\n            }\r\n        } else {\r\n            compFnBody += compileValue(b);\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    const ctx: CompilerContext = {\r\n        _$_vars,\r\n        varsCount: 1,\r\n        varNames: new Map<string, string>(),\r\n        varNamesCount: 0,\r\n        varDefs: 'var x0;',\r\n        ops: new Map<string, CompilerOperator>(),\r\n        makeScope,\r\n        compileToken,\r\n    };\r\n\r\n    registerOperators(state, ctx);\r\n    const ops = ctx.ops;\r\n\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    // set 'this' object\r\n    ctx.varNames.set(state.config.reservedNames.thiz, `(this===(Function('return this')())?null:(this===void 0?null:this))`);\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n    if (capturedScopes) {\r\n        for (const x in capturedScopes) {\r\n            if (Object.prototype.hasOwnProperty.call(capturedScopes, x)) {\r\n                _$_vars[ctx.varsCount++] = x;\r\n                _$_vars[ctx.varsCount] = capturedScopes[x];\r\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\r\n                ctx.varsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const compFormalArgs = `${formalArgs.map((x, i) => {\r\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\r\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\r\n    }).join(',')}`;\r\n\r\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\r\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\r\n}\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\r\n    // tslint:disable-next-line:no-eval\r\n    _$_vars[0] = eval(code);\r\n    return _$_vars[0];\r\n}\r\n\r\n\r\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\r\n    // tslint:disable-next-line:variable-name\r\n    const _$_vars: any[] = [];\r\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         CompilerContext }             from '../types';\r\nimport { isSymbol }                    from '../ast';\r\nimport { checkParamsLength,\r\n         checkUnsafeVarNamesEx,\r\n         checkUnsafeVarNames }         from '../errors';\r\nimport { stripQuote,\r\n         stripQuoteOrPass,\r\n         getScope_stateApplied,\r\n         resolveValueSymbol_dynamic,\r\n         checkUnsafeVarNames_dynamic } from './helpers';\r\n\r\n\r\n\r\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\r\n    const {\r\n        _$_vars,\r\n        ops,\r\n        makeScope,\r\n        compileToken,\r\n    } = ctx;\r\n\r\n\r\n    ops.set(state.config.reservedNames.quote, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.self, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        compFnBody += `((_$_vars[0])(${\r\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if condition 't-expr 'f-expr)\r\n        //  -> (if condition is true ) S expr  : t-expr\r\n        //  -> (if condition is false) S expr  : f-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if', args, 2, 3);\r\n        compFnBody += `(${compileToken(r, 1)}?(${\r\n            compileToken([stripQuote(state, r[2])], 0)}):(${\r\n            compileToken([stripQuote(state, r[3])], 0)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if-null condition 'null-expr)\r\n        //  -> (if condition is not null ) S expr  : condition\r\n        //  -> (if condition is null)      S expr  : null-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\r\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\r\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        //  -> (if (eval condI) is true ) S expr  : exprI\r\n        //  -> (if no matched)            S expr  : null\r\n        let compFnBody = '';\r\n        {\r\n            checkParamsLength('compileToken:$__cond', args, 1);\r\n            compFnBody += `(`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\r\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\r\n            }\r\n            compFnBody += `null`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `)`;\r\n            }\r\n            compFnBody += `)`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__while', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n        //  -> (if n > 0) S expr  : exprN\r\n        //  -> (else)     S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__repeat', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n        //  -> (if list.length > 0) S expr  : exprN\r\n        //  -> (else)               S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__for', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n        //  -> (else)               S expr  : exprN\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__scope', args, 2);\r\n        // r[1]: isBlockLocal\r\n        // r[2]: returnMultiple\r\n        if (! Array.isArray(r[3])) {\r\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\r\n        }\r\n        makeScope(() => {\r\n            for (const x of stripQuote(state, r[3]) as any[]) {\r\n                let name = '';\r\n                if (Array.isArray(x)) {\r\n                    if (x.length < 1) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\r\n                    }\r\n                    if (! isSymbol(x[0])) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\r\n                    }\r\n                    name = x[0].symbol;\r\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\r\n                } else {\r\n                    if (! isSymbol(x)) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\r\n                    }\r\n                    name = x.symbol;\r\n                }\r\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n                ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n            }\r\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\r\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__try 'expr 'catch-expr)\r\n        //  ->                               S expr  : expr\r\n        //  -> (if error is raised in expr)  S expr  : catch-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__try', args, 1, 2);\r\n        compFnBody += `((()=>{try{${\r\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\r\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\r\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\r\n        makeScope(() => {\r\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\r\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\r\n            compFnBody += `${\r\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.raise, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($raise 'expr)\r\n        //  -> S expr  : -\r\n        let compFnBody = '';\r\n        compFnBody += `((()=>{throw ${\r\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($boolean any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\r\n        compFnBody += `((x0=${compileToken(args, 0)\r\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__get', args, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__let 'nameStrOrSymbol expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__let', args, 2, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        if (! ctx.varNames.has(name)) {\r\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n        }\r\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__set', args, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ?\r\n            quoted.symbol :\r\n            (typeof quoted === 'string' ?\r\n                quoted :\r\n                (Array.isArray(quoted) ?\r\n                    (isSymbol(quoted[0]) ?\r\n                        quoted[0].symbol :\r\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\r\n                    ) :\r\n                    null\r\n                )\r\n            );\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = checkUnsafeVarNames('compileToken:$__set', symName);\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        let checkNameCalled = false;\r\n        let checkNamePos = '';\r\n        const checkName = (str: string) => {\r\n            if (! checkNameCalled) {\r\n                _$_vars[ctx.varsCount] = checkUnsafeVarNames_dynamic('compileToken:$__set');\r\n                checkNamePos = String(ctx.varsCount++);\r\n                checkNameCalled = true;\r\n            }\r\n            return `(_$_vars[${checkNamePos}](${str}))`;\r\n        };\r\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                checkName(compileToken(arr, idx))}]`).join('')}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.not, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$not', args, 1, 1);\r\n        compFnBody += `(!${compileToken(args, 0)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__and 'expr1 ... 'exprN)\r\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n        //  -> (else)                                                     S expr  : expr-i (false left most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__and', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__or 'expr1 ... 'exprN)\r\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n        //  -> (else)                                                  S expr  : expr-i (false right most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__or', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($eq arg1 arg2)\r\n        //  -> (if arg1 === arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:===', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not-eq arg1 arg2)\r\n        //  -> (if arg1 !== arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (== a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (!= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (< a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (> a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($concat listOrString1 ... listOrStringN)\r\n        //  -> S expr  : listOrString\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$concat', args, 1);\r\n        let w1 = '';\r\n        if (Array.isArray(args[0]) && isSymbol((args[0] as any)[0], state.config.reservedNames.spread)) {\r\n            const w0 = compileToken(args[0] as any, 1);\r\n            w1 = `(${w0}[0]).concat((${w0}.length>1?${w0}[1]:(typeof ${w0}[0]==='string'?'':[])),`;\r\n        } else {\r\n            w1 = `${compileToken(args as any, 0)}.concat(`;\r\n        }\r\n        compFnBody += `(${w1}${\r\n            args.slice(1).map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (+ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n            };return _$_rv.reduce((x,y)=>x+y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (- number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:-', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return (_$_rv.length>1?(_$_rv.reduce((x,y)=>x-y)):(_$_rv.length>0?-_$_rv[0]:NaN));})())`;\r\n        } else {\r\n            compFnBody += `(${r.length > 2 ?\r\n                args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\r\n                `-(${String(compileToken(r, 1))})`})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (* number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:*', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x*y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (** number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:**', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x**y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (/ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:/', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x/y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (% number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:%', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x%y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<< number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-not number)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\r\n        compFnBody += `(~(${compileToken(r, 1)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-and numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-or numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-xor numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\r\n        return compFnBody;\r\n    });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nexport interface ParserInputWithCtx<T extends ArrayLike<T[number]>, C> {\r\n    src: T;\r\n    start: number;\r\n    end: number;\r\n    context: C;\r\n}\r\nexport type ParserInput<T extends ArrayLike<T[number]>> = ParserInputWithCtx<T, undefined>;\r\nexport type StringParserInputWithCtx<C> = ParserInputWithCtx<string, C>;\r\nexport type StringParserInput = StringParserInputWithCtx<undefined>;\r\n\r\nexport class ParseError<T extends ArrayLike<T[number]>, C, R> extends Error {\r\n    public result: ParserFnFailedResult<T, C, R>;\r\n    constructor(result: ParserFnFailedResult<T, C, R>) {\r\n        super(result.message);\r\n        this.result = result;\r\n    }\r\n}\r\n\r\n\r\nexport function parserInput<T extends ArrayLike<T[number]>>(src: T): ParserInputWithCtx<T, undefined>;\r\nexport function parserInput<T extends ArrayLike<T[number]>, C>(src: T, context: C): ParserInputWithCtx<T, C>;\r\nexport function parserInput<T extends ArrayLike<T[number]>, C>(src: T, context?: C): ParserInputWithCtx<T, C> {\r\n    return ({\r\n        src,\r\n        start: 0,\r\n        end: src.length,\r\n        context: context as any,\r\n    });\r\n}\r\n\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ParserFnSucceededResult<T extends ArrayLike<T[number]>, C, R> =\r\n    {succeeded: true, next: ParserInputWithCtx<T, C>, tokens: R[]};\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ParserFnFailedResult<T extends ArrayLike<T[number]>, C, R> =\r\n    {succeeded: false, error: boolean, src: T, pos: number, message: string};\r\n\r\nexport type ParserFnWithCtx<T extends ArrayLike<T[number]>, C, R> =\r\n    (input: ParserInputWithCtx<T, C>) =>\r\n        ParserFnSucceededResult<T, C, R> |\r\n        ParserFnFailedResult<T, C, R>;\r\n\r\nexport type ParserFn<T extends ArrayLike<T[number]>, R> = ParserFnWithCtx<T, undefined, R>;\r\nexport type StringParserFnWithCtx<C, R> = ParserFnWithCtx<string, C, R>;\r\nexport type StringParserFn<R> = StringParserFnWithCtx<undefined, R>;\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { ParserInputWithCtx,\r\n         ParseError,\r\n         parserInput,\r\n         ParserFnFailedResult,\r\n         ParserFnWithCtx } from './types';\r\n\r\n\r\n\r\nfunction getLineAndCol(src: string, pos: number) {\r\n    let line = 1;\r\n    let col = 1;\r\n\r\n    for (let i = 0; i <= pos; i++) {\r\n        switch (src[i]) {\r\n        case '\\r':\r\n            if (src[i + 1] === '\\n') {\r\n                i++;\r\n            }\r\n            // FALL_TURU\r\n        case '\\n':\r\n            line++;\r\n            col = 1;\r\n            break;\r\n        default:\r\n            col++;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return ({\r\n        line,\r\n        col,\r\n    });\r\n}\r\n\r\n\r\nexport function formatErrorMessage<T extends ArrayLike<T[number]>, C, R>(\r\n    result: ParserFnFailedResult<T, C, R>) {\r\n\r\n    let msg = '';\r\n    let src = '';\r\n    if (typeof result.src === 'string') {\r\n        src = result.src.slice(Math.max(result.pos - 5, 0), result.pos + 55);\r\n\r\n        let ar = src.split(/\\r\\n|\\n|\\r/);\r\n        ar = ar.slice(0, 1)\r\n            .concat('          ^~~~~~~~')\r\n            .concat(...ar.slice(1));\r\n        src = ar.join('\\n') + '\\n\\n';\r\n\r\n        const lineAndCol = getLineAndCol(result.src, result.pos);\r\n        msg =  (`parse failed at position:${\r\n            result.pos} line:${lineAndCol.line} col:${lineAndCol.col} ${\r\n            result.message ? ` ${result.message}` : ''}\\n     ${src}`);\r\n    } else {\r\n        src = '     (object)\\n          ^~~~~~~~';\r\n        try {\r\n            src = '     ' +\r\n                JSON.stringify((result.src as any).slice(Math.max(result.pos - 10, 0), result.pos)) + '\\n          ' +\r\n                JSON.stringify((result.src as any).slice(result.pos, result.pos + 1)) + '\\n          ' +\r\n                JSON.stringify((result.src as any).slice(result.pos + 1, result.pos + 10));\r\n\r\n            let ar = src.split(/\\r\\n|\\n|\\r/);\r\n            ar = ar.slice(0, 2)\r\n                .concat('          ^~~~~~~~')\r\n                .concat(...ar.slice(2));\r\n            src = ar.join('\\n') + '\\n\\n';\r\n        } catch (e) {}\r\n\r\n        msg = (`parse failed at position:${\r\n            result.pos} ${\r\n            result.message ? ` ${result.message}` : ''}\\n     ${src}`);\r\n    }\r\n    return msg;\r\n}\r\n\r\n\r\nexport function zeroWidth<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return ({\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function zeroWidthError<T extends ArrayLike<T[number]>, C, R>(\r\n        message: string\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        throw new ParseError({\r\n            succeeded: false,\r\n            error: true,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: message || '',\r\n        });\r\n        // return ({\r\n        //     succeeded: false,\r\n        //     error: true,\r\n        //     src: input.src,\r\n        //     pos: input.start,\r\n        //     message: message || '',\r\n        // });\r\n    });\r\n}\r\n\r\n\r\nexport function beginning<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return (input.start === 0 ? {\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        } : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"beginning\"',\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function end<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return (input.start === input.end ? {\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        } : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"end\"',\r\n        });\r\n    });\r\n}\r\n\r\n// TODO: match by callback function parser\r\n// TODO: `nesting` parser\r\n\r\n\r\nexport function quantify<T extends ArrayLike<T[number]>, C, R>(\r\n        min?: number, max?: number\r\n        ): (parser: ParserFnWithCtx<T, C, R>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    min = min || 0;\r\n    return (parser => {\r\n        return (input => {\r\n            let next = input;\r\n            const matched: Array<{next: ParserInputWithCtx<T, C>, tokens: R[]}> = [];\r\n\r\n            for (;;) {\r\n                const x = parser(next);\r\n                if (x.succeeded) {\r\n                    next = x.next;\r\n                    matched.push({next: x.next, tokens: x.tokens});\r\n                    if (max && max === matched.length) {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if (x.error) {\r\n                        return x;\r\n                    }\r\n                    if (matched.length >= (min as number)) {\r\n                        break;\r\n                    } else {\r\n                        return ({\r\n                            succeeded: false,\r\n                            error: false,\r\n                            src: next.src,\r\n                            pos: next.start,\r\n                            message: 'operator \"quantify\"',\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            if (matched.length > 0) {\r\n                const r: R[] = [];\r\n                for (const x of matched) {\r\n                    r.push(...x.tokens);\r\n                }\r\n                return ({\r\n                    succeeded: true,\r\n                    next: (matched[matched.length - 1]).next,\r\n                    tokens: r,\r\n                });\r\n            } else {\r\n                return ({\r\n                    succeeded: true,\r\n                    next: {\r\n                        src: input.src,\r\n                        start: input.start,\r\n                        end: input.end,\r\n                        context: input.context,\r\n                    },\r\n                    tokens: [],\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function first<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        let matched: {next: ParserInputWithCtx<T, C>, tokens: R[]} | null = null;\r\n\r\n        let last: ParserFnFailedResult<T, C, R> | null = null;\r\n        for (const parser of parsers) {\r\n            const x = parser(input);\r\n            if (x.succeeded) {\r\n                matched = {next: x.next, tokens: x.tokens};\r\n                break;\r\n            }\r\n            if (last) {\r\n                if (x.error) {\r\n                    if (!last.error || last.pos < x.pos) {\r\n                        last = x;\r\n                    }\r\n                } else if (last.pos < x.pos) {\r\n                    last = x;\r\n                }\r\n            } else {\r\n                last = x;\r\n            }\r\n        }\r\n\r\n        return (matched ? {\r\n            succeeded: true, next: matched.next, tokens: matched.tokens\r\n        } : last ? last : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"first\"',\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function or<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        const matched: Array<{next: ParserInputWithCtx<T, C>, tokens: R[]}> = [];\r\n\r\n        let last: ParserFnFailedResult<T, C, R> | null = null;\r\n        for (const parser of parsers) {\r\n            const x = parser(input);\r\n            if (x.succeeded) {\r\n                matched.push({next: x.next, tokens: x.tokens});\r\n            } else {\r\n                if (last) {\r\n                    if (x.error) {\r\n                        if (!last.error || last.pos < x.pos) {\r\n                            last = x;\r\n                        }\r\n                    } else if (last.pos < x.pos) {\r\n                        last = x;\r\n                    }\r\n                } else {\r\n                    last = x;\r\n                }\r\n            }\r\n        }\r\n        if (matched.length > 0) {\r\n            const z = matched.reduce((a, b) => a.next.start >= b.next.start ? a : b);\r\n            return ({succeeded: true, next: z.next, tokens: z.tokens});\r\n        }\r\n\r\n        return (last ? last : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"or\"',\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function transform<T extends ArrayLike<T[number]>, C, R>(\r\n        trans?: ((tokens: R[], input: ParserInputWithCtx<T, C>) => R[]), ctxTrans?: ((context: C) => C)\r\n        ): (...parsers: Array<ParserFnWithCtx<T, C, R>>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return ((...parsers) => {\r\n        return (input => {\r\n            let next = input;\r\n            const tokens: R[] = [];\r\n\r\n            for (const parser of parsers) {\r\n                const x = parser(next);\r\n                if (! x.succeeded) {\r\n                    return x;\r\n                }\r\n                next = x.next;\r\n                tokens.push(...x.tokens);\r\n            }\r\n\r\n            // TODO: report errors while transforming\r\n            const t2 = trans ? trans(tokens, input) : tokens;\r\n            return ({\r\n                succeeded: true,\r\n                next: ctxTrans ? {\r\n                    src: next.src,\r\n                    start: next.start,\r\n                    end: next.end,\r\n                    context: ctxTrans(next.context),\r\n                } : next,\r\n                tokens: t2,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function combine<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return transform<T, C, R>()(...parsers);\r\n}\r\n\r\n\r\nexport function lookAhead<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        let next = input;\r\n\r\n        for (const parser of parsers) {\r\n            const x = parser(next);\r\n            if (! x.succeeded) {\r\n                return x;\r\n            }\r\n            next = x.next;\r\n        }\r\n\r\n        return ({\r\n            succeeded: true,\r\n            next: input,\r\n            tokens: [],\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function lookBehind<T extends ArrayLike<T[number]>, C, R>(\r\n        n: number, helper?: () => R): (\r\n            ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n            ) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return ((...parsers) => {\r\n        return (input => {\r\n            if (input.start - n < 0) {\r\n                return ({\r\n                    succeeded: false,\r\n                    error: false,\r\n                    src: input.src,\r\n                    pos: input.start,\r\n                    message: 'lookBehind: src is too short',\r\n                });\r\n            }\r\n            let next = {\r\n                src: input.src,\r\n                start: input.start - n,\r\n                end: input.end,\r\n                context: input.context,\r\n            };\r\n\r\n            for (const parser of parsers) {\r\n                const x = parser(next);\r\n                if (! x.succeeded) {\r\n                    return x;\r\n                }\r\n                next = x.next;\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: input,\r\n                tokens: helper ? [helper()] : [],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ApplyProductionRulesArg<T extends ArrayLike<T[number]>, C, R> = {\r\n    rules: Array<ParserFnWithCtx<R[], C, R> |\r\n           {parser: ParserFnWithCtx<R[], C, R>, rtol: boolean}>,\r\n    maxApply?: number,\r\n    check: ParserFnWithCtx<R[], C, R>,\r\n};\r\n\r\nexport function applyProductionRules<T extends ArrayLike<T[number]>, C, R>(\r\n        args: ApplyProductionRulesArg<T, C, R>\r\n        ): (lexer: ParserFnWithCtx<T, C, R>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return (lexer => {\r\n        return (lexerInput => {\r\n            const lexResult = lexer(lexerInput);\r\n            if (! lexResult.succeeded) {\r\n                return lexResult;\r\n            }\r\n\r\n            const input = parserInput<R[], C>(lexResult.tokens, lexerInput.context);\r\n            let next = input;\r\n            let completed = false;\r\n\r\n            if (args.check(next).succeeded) {\r\n                return ({\r\n                    succeeded: true,\r\n                    next: lexResult.next,\r\n                    tokens: lexResult.tokens,\r\n                });\r\n            }\r\n\r\n            completed: for (let i = 0;\r\n                    args.maxApply !== void 0 ? i < args.maxApply : true; i++) {\r\n                let matched = false;\r\n\r\n                rules: for (const rule of args.rules) {\r\n                    const {parser, rtol} =\r\n                        typeof rule === 'function' ?\r\n                            {parser: rule, rtol: false} : rule;\r\n                    const len = next.src.length;\r\n\r\n                    for (let s = 0; s <= len; s++) {\r\n                        const x = parser({\r\n                            src: next.src,\r\n                            start: rtol ? len - s : s,\r\n                            end: next.src.length,\r\n                            context: next.context,\r\n                        });\r\n                        if (x.succeeded) {\r\n                            matched = true;\r\n                            const nextSrc = next.src.slice(0, rtol ? len - s : s);\r\n                            nextSrc.push(...x.tokens);\r\n                            nextSrc.push(...next.src.slice(x.next.start));\r\n                            next = {\r\n                                src: nextSrc,\r\n                                start: 0,\r\n                                end: nextSrc.length,\r\n                                context: x.next.context,\r\n                            };\r\n                            if (args.check(next).succeeded) {\r\n                                completed = true;\r\n                                break completed;\r\n                            }\r\n                            break rules;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (! matched) {\r\n                    break;\r\n                }\r\n            }\r\n            if (! completed) {\r\n                if (! args.check(next).succeeded) {\r\n                    throw new ParseError({\r\n                        succeeded: false,\r\n                        error: true,\r\n                        src: input.src,\r\n                        pos: input.start,\r\n                        message: 'The application of production rules was not finished',\r\n                    });\r\n                }\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: lexResult.next,\r\n                tokens: next.src,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function makeProgram<T extends ArrayLike<T[number]>, C, R>(\r\n    parser: ParserFnWithCtx<T, C, R>): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        try {\r\n            return parser(input);\r\n        } catch (e) {\r\n            if (e.result) {\r\n                return e.result;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         FatalError,\r\n         CapturedScopes,\r\n         SxMacroInfo }           from '../../types';\r\nimport { globalObj }             from '../../consts';\r\nimport { isSymbol,\r\n         quote }                 from '../../ast';\r\nimport { evaluate,\r\n         resolveValueSymbolScope,\r\n         collectCapturedVariables,\r\n         getCapturedScopes,\r\n         getScope,\r\n         getGlobalScope,\r\n         installScope,\r\n         uninstallScope,\r\n         optimizeTailCall,\r\n         toNumber }              from '../../evaluate';\r\nimport { compileLambda }         from '../../compile';\r\nimport { checkParamsLength,\r\n         checkUnsafeVarNamesEx } from '../../errors';\r\n\r\n\r\n\r\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($car '(first second ... last))\r\n    //  -> S expr  : first\r\n    checkParamsLength('$car', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car[0];\r\n};\r\nexport const $$car = $car(null as any, null as any);\r\n\r\n\r\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cdr '(first second ... last))\r\n    //  -> S expr  : (second ... last)\r\n    checkParamsLength('$cdr', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car.slice(1);\r\n};\r\nexport const $$cdr = $cdr(null as any, null as any);\r\n\r\n\r\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\r\n    //  -> S expr  : (arg1 arg2-item1 ...)\r\n    // S expression: ($cons arg1 nilOrNull ... argN)\r\n    //  -> S expr  : (arg1)\r\n    // S expression: ($cons arg1 arg2 ... argN)\r\n    //  -> S expr  : arg1.arg2\r\n    checkParamsLength('$cons', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (car === null) {\r\n        car = [];\r\n    }\r\n    if (cdr === null) {\r\n        cdr = [];\r\n    }\r\n\r\n    if (Array.isArray(cdr)) {\r\n        cdr = cdr.slice(0);\r\n        cdr.unshift(car);\r\n        return cdr;\r\n    } else {\r\n        return {car, cdr};\r\n    }\r\n};\r\nexport const $$cons = $cons(null as any, null as any);\r\n\r\n\r\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first first second ... last)\r\n    //  -> S expr  : first\r\n    // S expression: ($first)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(0, 1);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$first = $first(null as any, null as any);\r\n\r\n\r\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($second first second ... last)\r\n    //  -> S expr  : second\r\n    // S expression: ($second first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1, 2);\r\n    return (cdr.length === 1) ? cdr[0] : null;\r\n};\r\nexport const $$second = $second(null as any, null as any);\r\n\r\n\r\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($last first second ... last)\r\n    //  -> S expr  : last\r\n    // S expression: ($last)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(args.length - 1, args.length);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$last = $last(null as any, null as any);\r\n\r\n\r\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($rest first second ... last)\r\n    //  -> S expr  : (second ... last)\r\n    // S expression: ($rest first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1);\r\n    return (0 < cdr.length) ? cdr : null;\r\n};\r\nexport const $$rest = $rest(null as any, null as any);\r\n\r\n\r\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first-and-second first second ... last)\r\n    //  -> S expr  : first.second\r\n    let car: any = args.slice(0, 1);\r\n    car = (car.length === 1) ? car[0] : null;\r\n\r\n    let cdr: any = args.slice(1, 2);\r\n    cdr = (cdr.length === 1) ? cdr[0] : null;\r\n\r\n    return {car, cdr};\r\n};\r\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\r\n\r\n\r\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($atom arg1 ...)\r\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\r\n    //  -> (if arg1 is nil or anything else) S expr  : true\r\n    checkParamsLength('$atom', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n\r\n    if (car === null || car === void 0) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(car)) {\r\n        if (car.length === 0) return  true;\r\n        else                  return false;\r\n    }\r\n\r\n    switch (typeof car) {\r\n    case 'number': case 'string': case 'function': case 'boolean':\r\n        return true;\r\n    case 'object':\r\n        return isSymbol(car) ? true : false;\r\n    }\r\n    return false;\r\n};\r\nexport const $$atom = $atom(null as any, null as any);\r\n\r\n\r\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($eq arg1 arg2)\r\n    //  -> (if arg1 === arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$eq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car === cdr;\r\n};\r\nexport const $$eq = $eq(null as any, null as any);\r\n\r\n\r\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not-eq arg1 arg2)\r\n    //  -> (if arg1 !== arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$notEq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car !== cdr;\r\n};\r\nexport const $$notEq = $notEq(null as any, null as any);\r\n\r\n\r\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\r\n    // S expression: ($list arg1 ... argN)\r\n    //  -> S expr  : (arg1 ... argN)\r\n    args.slice(0);\r\nexport const $$list = $list(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\r\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__scope', args, 3);\r\n\r\n    const isBlockLocal = $$first(...args);\r\n    const returnMultiple = $$second(...args);\r\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\r\n    let r: SxToken = null;\r\n\r\n    const scope: any = {};\r\n    if (Array.isArray(car)) {\r\n        for (const x of car) {\r\n            if (Array.isArray(x)) {\r\n                const kv = $$firstAndSecond(...x);\r\n                const kvSym = isSymbol(kv.car);\r\n                const kvName = kvSym ? kvSym.symbol : String(kv.car);\r\n                checkUnsafeVarNamesEx('$__scope', scope, kvName);\r\n                scope[kvName] = evaluate(state, kv.cdr);\r\n            } else {\r\n                const xSym = isSymbol(x);\r\n                const xName = xSym ? xSym.symbol : String(x);\r\n                checkUnsafeVarNamesEx('$__scope', scope, xName);\r\n                scope[xName] = null;\r\n            }\r\n        }\r\n    }\r\n    installScope(state, scope, isBlockLocal, capturedScopes);\r\n\r\n    try {\r\n        if (4 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(3)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(3)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__globalScope', args, 1);\r\n\r\n    const returnMultiple = $$first(...args);\r\n    const cdr = $$second(...args);\r\n    let r: SxToken = null;\r\n\r\n    installScope(state, getGlobalScope(state).scope, true);\r\n    try {\r\n        if (2 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(1)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(1)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : exprN\r\n    checkParamsLength('$__capture', args, 1);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let r: SxToken = null;\r\n\r\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\r\n    installScope(state, {}, true, capturedScopes);\r\n    try {\r\n        for (const x of args.slice(1)) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    let fnBody = args.slice(1);\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = function(this: any, ...actualArgs: any[]) {\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] func call: Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        // TODO: add type checking\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            [state.config.reservedNames.thiz, this === globalObj || this === void 0 ? null : quote(state, this)],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(1);\r\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $__lambda(state, name)(...args.slice(1));\r\n\r\n    checkUnsafeVarNamesEx('$__defun', state.funcMap, car.symbol);\r\n    // TODO: overloading\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn,\r\n        // formalArgs: ,\r\n        // lastIsSpread: ,\r\n        // next: ,\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\r\n\r\n    checkUnsafeVarNamesEx('$$__defun', state.funcMap, car.symbol);\r\n    // TODO: overloading\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn,\r\n        // formalArgs: ,\r\n        // lastIsSpread: ,\r\n        // next: ,\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($refun 'name)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__refun', args, 1, 1);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n\r\n    checkUnsafeVarNamesEx('$__refun', state.funcMap, car.symbol);\r\n    const info = state.funcMap.get(car.symbol);\r\n    if (!info) {\r\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\r\n    }\r\n    return info.fn(state, car.symbol);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defmacro = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defmacro', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const formalArgs: SxSymbol[] = args[1];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__defmacro: Invalid argument(s): args[1] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(2);\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (fArgs: SxSymbol[]) => (...aArgs: any[]) => {\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(fArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === fArgs.length - 1) ?\r\n                        aArgs.slice(index) : aArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n\r\n    const m: SxMacroInfo = {\r\n        name: car.symbol,\r\n        fn: (st: SxParserState, nm: string, fArgs: SxSymbol[]) => (list: SxToken[]) => fn(fArgs)(...(list.slice(1))),\r\n        formalArgs,\r\n        lastIsSpread,\r\n    };\r\n\r\n    checkUnsafeVarNamesEx('$__defmacro', state.macroMap, car.symbol);\r\n\r\n    if (state.macroMap.has(car.symbol)) {\r\n        let curr = state.macroMap.get(car.symbol);\r\n        (curr as SxMacroInfo).next = m;\r\n        if (curr && curr.formalArgs) {\r\n            if (curr.formalArgs.length < formalArgs.length) {\r\n                state.macroMap.set(car.symbol, m);\r\n                m.next = curr;\r\n            } else {\r\n                let prev = curr;\r\n                curr = curr.next;\r\n                while (curr) {\r\n                    if (curr.formalArgs) {\r\n                        if (curr.formalArgs.length < formalArgs.length) {\r\n                            prev.next = m;\r\n                            m.next = curr;\r\n                            break;\r\n                        }\r\n                    }\r\n                    prev = curr;\r\n                    curr = curr.next;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        state.macroMap.set(car.symbol, m);\r\n    }\r\n    return fn;\r\n};\r\n\r\n\r\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($apply fn arg1 ... argN)\r\n    //  -> S expr  : fn'\r\n    checkParamsLength('$apply', args, 1);\r\n\r\n    const car: () => any = $$first(...args);\r\n    if (typeof car !== 'function') {\r\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\r\n    }\r\n\r\n    return (\r\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\r\n    );\r\n};\r\nexport const $$apply = $apply(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__call', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const sym = isSymbol(cdr);\r\n    const xName = sym ? sym.symbol : evaluate(state, cdr) as any;\r\n\r\n    checkUnsafeVarNamesEx('$__call', car, xName);\r\n\r\n    return Function.prototype.apply.call(\r\n        car[xName],\r\n        car,\r\n        args.slice(2)\r\n    );\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__try 'expr 'catch-expr)\r\n    //  ->                               S expr  : expr\r\n    //  -> (if error is raised in expr)  S expr  : catch-expr\r\n    checkParamsLength('$__try', args, 1, 2);\r\n\r\n    let r: SxToken = [];\r\n    try {\r\n        r = evaluate(state, args[0]);\r\n    } catch (e) {\r\n        if (e instanceof FatalError) {\r\n            throw e;\r\n        }\r\n        if (1 < args.length) {\r\n            r = $__scope(state, name)(true, false, [\r\n                ['$error', quote(state, e)],\r\n                ['$parent', quote(state, getScope(state))],\r\n            ], args[1]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($raise 'expr)\r\n    //  -> S expr  : -\r\n    const car = $$first(...args);\r\n    throw car;\r\n};\r\nexport const $$raise = $raise(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if condition 't-expr 'f-expr)\r\n    //  -> (if condition is true ) S expr  : t-expr\r\n    //  -> (if condition is false) S expr  : f-expr\r\n    checkParamsLength('$__if', args, 2, 3);\r\n\r\n    const car = $$first(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        r = evaluate(state, args[1]);\r\n    } else {\r\n        if (2 < args.length) {\r\n            r = evaluate(state, args[2]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if-null condition 'null-expr)\r\n    //  -> (if condition is not null ) S expr  : condition\r\n    //  -> (if condition is null)      S expr  : null-expr\r\n    checkParamsLength('$__ifNull', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if (! $$ambiguousEq(car, null)) {\r\n        r = car;\r\n    } else {\r\n        r = evaluate(state, cdr);\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n    //  -> (if (eval condI) is true ) S expr  : exprI\r\n    //  -> (if no matched)            S expr  : null\r\n    checkParamsLength('$__cond', args, 1);\r\n\r\n    for (let i = 0; i < args.length - 1; i += 2) {\r\n        const c = args[i];\r\n        const x = args[i + 1];\r\n        if ($$boolean(evaluate(state, c))) {\r\n            return evaluate(state, x);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__while', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$boolean(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doWhile', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$boolean(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__until', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$not(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doUntil', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$not(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n    //  -> (if n > 0) S expr  : exprN\r\n    //  -> (else)     S expr  : null\r\n    checkParamsLength('$__repeat', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n\r\n    checkUnsafeVarNamesEx('$__repeat', {}, sym.symbol); // NOTE: pass dummy target object.\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const n = toNumber($$second(...args));\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (let i = 0; i < n; i++) {\r\n        scope[sym.symbol] = i;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n    //  -> (if list.length > 0) S expr  : exprN\r\n    //  -> (else)               S expr  : null\r\n    checkParamsLength('$__for', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n\r\n    checkUnsafeVarNamesEx('$__for', {}, sym.symbol); // NOTE: pass dummy target object.\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const list = $$second(...args);\r\n    if (! Array.isArray(list)) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\r\n    }\r\n\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (const q of list) {\r\n        scope[sym.symbol] = q;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get v fn1 ... fnN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$pipe', args, 1);\r\n\r\n    let v = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n        v = args[i](v);\r\n    }\r\n    return v;\r\n};\r\nexport const $$pipe = $pipe(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__get', args, 1);\r\n\r\n    let v: any = null;\r\n    let sym = isSymbol(args[0]);\r\n\r\n    if (!sym) {\r\n        switch (typeof args[0]) {\r\n        case 'string': case 'number':\r\n            sym = {symbol: String(args[0])};\r\n            break;\r\n        default:\r\n            v = evaluate(state, args[0]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (sym) {\r\n        const scope = resolveValueSymbolScope(state, sym, true);\r\n        if (! scope) {\r\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\r\n        }\r\n        v = scope[sym.symbol];\r\n    }\r\n\r\n    for (let i = 1; i < args.length; i++) {\r\n        let q: any = args[i];\r\n        let inprog = true;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                v = q(v);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = v.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                checkUnsafeVarNamesEx('$__get', v, q);\r\n                v = v[q];\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n            }\r\n        }\r\n    }\r\n    return v;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let 'nameStrOrSymbol expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__let', args, 2, 2);\r\n\r\n    let sym = isSymbol($$first(...args));\r\n\r\n    if (! sym) {\r\n        if (typeof args[0] === 'string') {\r\n            sym = {symbol: args[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    checkUnsafeVarNamesEx('$__let', {}, sym.symbol); // NOTE: pass dummy target object.\r\n\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n    scope[sym.symbol] = args[1];\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__set', args, 2, 2);\r\n\r\n    let path: any = [];\r\n\r\n    if (Array.isArray(args[0])) {\r\n        path = args[0];\r\n    } else {\r\n        path.push(args[0]);\r\n    }\r\n\r\n    let sym = isSymbol(path[0]);\r\n\r\n    if (! sym) {\r\n        if (typeof path[0] === 'string') {\r\n            checkUnsafeVarNamesEx('$__set', {}, path[0]); // NOTE: pass dummy target object.\r\n            sym = {symbol: path[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    let scope = resolveValueSymbolScope(state, sym, true);\r\n    if (scope === null) {\r\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\r\n    }\r\n\r\n    let subst = false;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        let q: any = path[i];\r\n        let inprog = true;\r\n        const last = i === path.length - 1;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                scope = q(scope);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = scope.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                checkUnsafeVarNamesEx('$__set', scope, q);\r\n                if (last) {\r\n                    scope[q] = args[1];\r\n                    subst = true;\r\n                } else {\r\n                    scope = scope[q];\r\n                }\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (! subst) {\r\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\r\n    }\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($boolean any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$boolean', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car) && car.length === 0) return false;\r\n    else return Boolean(car);\r\n};\r\nexport const $$boolean = $boolean(null as any, null as any);\r\n\r\n\r\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$not', args, 1, 1);\r\n\r\n    return ! $$boolean(...args);\r\n};\r\nexport const $$not = $not(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__and 'expr1 ... 'exprN)\r\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n    //  -> (else)                                                     S expr  : expr-i (false left most)\r\n    checkParamsLength('$__and', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if (! $$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__and = $__and(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__or 'expr1 ... 'exprN)\r\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n    //  -> (else)                                                  S expr  : expr-i (false right most)\r\n    checkParamsLength('$__or', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if ($$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__or = $__or(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (== a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ambiguousEq', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car) && car.length === 0) car = null;\r\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\r\n    if (car === void 0) car = null;\r\n    if (cdr === void 0) cdr = null;\r\n    // tslint:disable-next-line:triple-equals\r\n    return car == cdr;\r\n};\r\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (!= a b)\r\n    //  -> S expr  : boolean\r\n    return ! $$ambiguousEq(...args);\r\n};\r\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\r\n\r\n\r\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (< a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$lt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) < toNumber(cdr);\r\n};\r\nexport const $$lt = $lt(null as any, null as any);\r\n\r\n\r\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$le', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) <= toNumber(cdr);\r\n};\r\nexport const $$le = $le(null as any, null as any);\r\n\r\n\r\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (> a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$gt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) > toNumber(cdr);\r\n};\r\nexport const $$gt = $gt(null as any, null as any);\r\n\r\n\r\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ge', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) >= toNumber(cdr);\r\n};\r\nexport const $$ge = $ge(null as any, null as any);\r\n\r\n\r\nexport const $typeof = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($typeof x)\r\n    //  -> S expr  : 'null' | 'bigint' | 'boolean' | 'function' | 'number' | 'string' | 'undefined' |\r\n    //               'js-symbol' | 'list' | 'object'\r\n    checkParamsLength('$typeof', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (car === null) {\r\n        return 'null';\r\n    }\r\n    const tyName = typeof car;\r\n    switch (tyName) {\r\n    case 'object':\r\n        if (Array.isArray(car)) {\r\n            return 'list';\r\n        } else {\r\n            return 'object';\r\n        }\r\n    case 'symbol':\r\n        return 'js-symbol';\r\n    default:\r\n        return tyName;\r\n    }\r\n};\r\nexport const $$typeof = $typeof(null as any, null as any);\r\n\r\n\r\nexport const $symbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($symbol)\r\n    // S expression: ($symbol name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$symbol', args, 1, 1);\r\n\r\n    if (typeof args[0] === 'string') {\r\n        return {symbol: args[0]};\r\n    } else {\r\n        throw new Error(`[SX] $symbol: Invalid argument(s): item(s) of args[0] is not string.`);\r\n    }\r\n};\r\nexport const $$symbol = $symbol(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__gensym = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__gensym)\r\n    // S expression: ($__gensym name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$__gensym', args, 0, 1);\r\n\r\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\r\n    if (args.length === 1) {\r\n        const a = isSymbol(args[0]);\r\n        if (a) {\r\n            $__let(state, '')(a, tempVarSym);\r\n        } else if (typeof args[0] === 'string') {\r\n            $__let(state, '')({symbol: args[0]}, tempVarSym);\r\n        } else {\r\n            throw new Error(`[SX] $__gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n        }\r\n    }\r\n    return tempVarSym;\r\n};\r\n\r\n\r\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-symbol x)\r\n    // S expression: ($is-symbol x name)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isSymbol', args, 1, 2);\r\n\r\n    if (args.length === 1) {\r\n        return (isSymbol(args[0]) ? true : false);\r\n    } else {\r\n        if (typeof args[1] === 'string') {\r\n            return (isSymbol(args[0], args[1]) ? true : false);\r\n        } else {\r\n            throw new Error(`[SX] $isSymbol: Invalid argument(s): item(s) of args[1] is not string.`);\r\n        }\r\n    }\r\n};\r\nexport const $$isSymbol = $isSymbol(null as any, null as any);\r\n\r\n\r\nexport const $isNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-null x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNull', args, 1, 1);\r\n\r\n    return $$first(...args) === null;\r\n};\r\nexport const $$isNull = $isNull(null as any, null as any);\r\n\r\n\r\nexport const $isNil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-nil x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNil', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    return Array.isArray(car) && car.length === 0;\r\n};\r\nexport const $$isNil = $isNil(null as any, null as any);\r\n\r\n\r\nexport const $isUndefined = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-undefined x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isUndefined', args, 1, 1);\r\n\r\n    return $$first(...args) === void 0;\r\n};\r\nexport const $$isUndefined = $isUndefined(null as any, null as any);\r\n\r\n\r\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-list x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isList', args, 1, 1);\r\n\r\n    return Array.isArray($$first(...args));\r\n};\r\nexport const $$isList = $isList(null as any, null as any);\r\n\r\n\r\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-string x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isString', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'string';\r\n};\r\nexport const $$isString = $isString(null as any, null as any);\r\n\r\n\r\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-number x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNumber', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'number';\r\n};\r\nexport const $$isNumber = $isNumber(null as any, null as any);\r\n\r\n\r\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-NaN x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNaN', args, 1, 1);\r\n\r\n    return Number.isNaN($$first(...args));\r\n};\r\nexport const $$isNaN = $isNaN(null as any, null as any);\r\n\r\n\r\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-finate x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isFinite', args, 1, 1);\r\n\r\n    return Number.isFinite($$first(...args));\r\n};\r\nexport const $$isFinite = $isFinite(null as any, null as any);\r\n\r\n\r\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-integer x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isInteger', args, 1, 1);\r\n\r\n    return Number.isInteger($$first(...args));\r\n};\r\nexport const $$isInteger = $isInteger(null as any, null as any);\r\n\r\n\r\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-string x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$toString', args, 1, 1);\r\n\r\n    return String($$first(...args));\r\n};\r\nexport const $$toString = $toString(null as any, null as any);\r\n\r\n\r\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-number x)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$toNumber', args, 1, 1);\r\n\r\n    return toNumber($$first(...args));\r\n};\r\nexport const $$toNumber = $toNumber(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__# '(name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n\r\n            checkUnsafeVarNamesEx('$__#', r, keyName);\r\n            if (x.length === 1) {\r\n                // S expression: (# ... (keyName) ...)\r\n                //  -> JSON    : {..., keyName: true, ...}\r\n                r[keyName] = true;\r\n            } else if (x.length === 2) {\r\n                // S expression: (# ... (keyName value) ...)\r\n                //  -> JSON    : {..., keyName: value, ...}\r\n                r[keyName] = evaluate(state, x[1]);\r\n            } else {\r\n                // S expression: (# ... (keyName value1 value2 ...) ...)\r\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                r[keyName] =\r\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                    .concat(x.slice(1)));\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nconst assignBlacklist = [\r\n    globalObj,\r\n    (Object as any).__proto__,\r\n    ({} as any).__proto__,\r\n    (Function as any).__proto__,\r\n];\r\n\r\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($object-assign x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$objectAssign', args, 1);\r\n\r\n    if (assignBlacklist.includes(args[0])) {\r\n        throw new Error(`[SX] $objectAssign: Invalid argument: args[0] is blacklisted object.`);\r\n    }\r\n    return Object.assign(args[0], ...(args.slice(1)));\r\n};\r\nexport const $$objectAssign = $objectAssign(null as any, null as any);\r\n\r\n\r\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-stringify x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$jsonStringify', args, 1, 1);\r\n\r\n    return JSON.stringify($$first(...args));\r\n};\r\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\r\n\r\n\r\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-parse x)\r\n    //  -> S expr  : object\r\n    checkParamsLength('$jsonParse', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    return JSON.parse(s);\r\n};\r\nexport const $$jsonParse = $jsonParse(null as any, null as any);\r\n\r\n\r\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($now)\r\n    //  -> S expr  : number\r\n    return Date.now();\r\n};\r\nexport const $$now = $now(null as any, null as any);\r\n\r\n\r\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-from-iso str)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\r\n\r\n\r\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime year month1-12 day)\r\n    // S expression: ($datetime year month1-12 day hours)\r\n    // S expression: ($datetime year month1-12 day hours minutes)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetime', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n        s += 'Z';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetime = $datetime(null as any, null as any);\r\n\r\n\r\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-lc year month1-12 day)\r\n    // S expression: ($datetime-lc year month1-12 day hours)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeLc', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n    } else {\r\n        s += 'T00:00:00.000';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-iso-string number)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\r\n    }\r\n    return dt.toISOString();\r\n};\r\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getUTCFullYear(),\r\n        dt.getUTCMonth() + 1,\r\n        dt.getUTCDate(),\r\n        dt.getUTCHours(),\r\n        dt.getUTCMinutes(),\r\n        dt.getUTCSeconds(),\r\n        dt.getUTCMilliseconds(),\r\n        0, // TZ\r\n        dt.getUTCDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components-lc number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getFullYear(),\r\n        dt.getMonth() + 1,\r\n        dt.getDate(),\r\n        dt.getHours(),\r\n        dt.getMinutes(),\r\n        dt.getSeconds(),\r\n        dt.getMilliseconds(),\r\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\r\n                                 // If your time zone is UTC+2:00, +120 will be returned.\r\n        dt.getDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\r\n\r\n\r\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($match pattern-str string)\r\n    // S expression: ($match pattern-str options-str string)\r\n    //  -> S expr  : array\r\n    checkParamsLength('$match', args, 2, 3);\r\n\r\n    if (! state.config.enableRegExpMatchOperators) {\r\n        throw new Error(`[SX] $match: Operator is disabled by configuration.`);\r\n    }\r\n\r\n    if (args.length === 2) {\r\n        const m = new RegExp(args[0]);\r\n        return m.exec(args[1]);\r\n    } else {\r\n        const m = new RegExp(args[0], args[1]);\r\n        return m.exec(args[2]);\r\n    }\r\n};\r\nexport const $$match = $match(null as any, null as any);\r\n\r\n\r\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-log expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.log(...args);\r\n    return null;\r\n};\r\nexport const $$consoleLog = $consoleLog(null as any, null as any);\r\n\r\n\r\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-error expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.error(...args);\r\n    return null;\r\n};\r\nexport const $$consoleError = $consoleError(null as any, null as any);\r\n\r\n\r\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-trace expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.trace(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\r\n\r\n\r\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time)\r\n    // S expression: ($console-time label)\r\n    //  -> S expr  : null\r\n    console.time(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTime = $consoleTime(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-end)\r\n    // S expression: ($console-time-end label)\r\n    //  -> S expr  : null\r\n    console.timeEnd(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-log label)\r\n    // S expression: ($console-time-log label value ... value)\r\n    //  -> S expr  : null\r\n    (console as any).timeLog(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './core.fn';\r\n\r\n\r\n\r\nexport const operators: SxFuncInfo[] = [{\r\n    name: '$car',\r\n    fn: ops.$car,\r\n}, {\r\n    name: '$cdr',\r\n    fn: ops.$cdr,\r\n}, {\r\n    name: '$cons',\r\n    fn: ops.$cons,\r\n}, {\r\n    name: '$first',\r\n    fn: ops.$first,\r\n}, {\r\n    name: '$second',\r\n    fn: ops.$second,\r\n}, {\r\n    name: '$last',\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$progn', // alias of $last\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$rest',\r\n    fn: ops.$rest,\r\n}, {\r\n    name: '$first-and-second',\r\n    fn: ops.$firstAndSecond,\r\n}, {\r\n    name: '$atom',\r\n    fn: ops.$atom,\r\n}, {\r\n    name: '$eq',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '===',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '$not-eq',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '!==',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '$list',\r\n    fn: ops.$list,\r\n}, {\r\n    name: '$__scope',\r\n    fn: ops.$__scope,\r\n}, {\r\n    name: '$__global',\r\n    fn: ops.$__globalScope,\r\n}, {\r\n    name: '$__capture',\r\n    fn: ops.$__capture,\r\n}, {\r\n    name: '$__lambda',\r\n    fn: ops.$__lambda,\r\n}, {\r\n    name: '$__defun',\r\n    fn: ops.$__defun,\r\n}, {\r\n    name: '$__refun',\r\n    fn: ops.$__refun,\r\n}, {\r\n    name: '$__defmacro',\r\n    fn: ops.$__defmacro,\r\n}, {\r\n    name: '$apply',\r\n    fn: ops.$apply,\r\n}, {\r\n    name: '$__call',\r\n    fn: ops.$__call,\r\n}, {\r\n    name: '$__try',\r\n    fn: ops.$__try,\r\n}, {\r\n    name: '$raise',\r\n    fn: ops.$raise,\r\n}, {\r\n    name: '$__if',\r\n    fn: ops.$__if,\r\n}, {\r\n    name: '$__if-null',\r\n    fn: ops.$__ifNull,\r\n}, {\r\n    name: '$__cond',\r\n    fn: ops.$__cond,\r\n}, {\r\n    name: '$__while',\r\n    fn: ops.$__while,\r\n}, {\r\n    name: '$__do-while',\r\n    fn: ops.$__doWhile,\r\n}, {\r\n    name: '$__until',\r\n    fn: ops.$__until,\r\n}, {\r\n    name: '$__do-until',\r\n    fn: ops.$__doUntil,\r\n}, {\r\n    name: '$__repeat',\r\n    fn: ops.$__repeat,\r\n}, {\r\n    name: '$__for',\r\n    fn: ops.$__for,\r\n}, {\r\n    name: '$pipe',\r\n    fn: ops.$pipe,\r\n}, {\r\n    name: '$__get',\r\n    fn: ops.$__get,\r\n}, {\r\n    name: '$__let',\r\n    fn: ops.$__let,\r\n}, {\r\n    name: '$__set',\r\n    fn: ops.$__set,\r\n}, {\r\n    name: '$boolean',\r\n    fn: ops.$boolean,\r\n}, {\r\n    name: '$not',\r\n    fn: ops.$not,\r\n}, {\r\n    name: '$__and',\r\n    fn: ops.$__and,\r\n}, {\r\n    name: '$__or',\r\n    fn: ops.$__or,\r\n}, {\r\n    name: '==',\r\n    fn: ops.$ambiguousEq,\r\n}, {\r\n    name: '!=',\r\n    fn: ops.$ambiguousNotEq,\r\n}, {\r\n    name: '<',\r\n    fn: ops.$lt,\r\n}, {\r\n    name: '<=',\r\n    fn: ops.$le,\r\n}, {\r\n    name: '>',\r\n    fn: ops.$gt,\r\n}, {\r\n    name: '>=',\r\n    fn: ops.$ge,\r\n}, {\r\n    name: '$typeof',\r\n    fn: ops.$typeof,\r\n}, {\r\n    name: '$symbol',\r\n    fn: ops.$symbol,\r\n}, {\r\n    name: '$__gensym',\r\n    fn: ops.$__gensym,\r\n}, {\r\n    name: '$is-symbol',\r\n    fn: ops.$isSymbol,\r\n}, {\r\n    name: '$is-null',\r\n    fn: ops.$isNull,\r\n}, {\r\n    name: '$is-nil',\r\n    fn: ops.$isNil,\r\n}, {\r\n    name: '$is-undefined',\r\n    fn: ops.$isUndefined,\r\n}, {\r\n    name: '$is-list',\r\n    fn: ops.$isList,\r\n}, {\r\n    name: '$is-string',\r\n    fn: ops.$isString,\r\n}, {\r\n    name: '$is-number',\r\n    fn: ops.$isNumber,\r\n}, {\r\n    name: '$is-NaN',\r\n    fn: ops.$isNaN,\r\n}, {\r\n    name: '$is-finite',\r\n    fn: ops.$isFinite,\r\n}, {\r\n    name: '$is-integer',\r\n    fn: ops.$isInteger,\r\n}, {\r\n    name: '$to-string',\r\n    fn: ops.$toString,\r\n}, {\r\n    name: '$to-number',\r\n    fn: ops.$toNumber,\r\n}, {\r\n    name: '$__#',\r\n    fn: ops.$__toObject,\r\n}, {\r\n    name: '$object-assign',\r\n    fn: ops.$objectAssign,\r\n}, {\r\n    name: '$json-stringify',\r\n    fn: ops.$jsonStringify,\r\n}, {\r\n    name: '$now',\r\n    fn: ops.$now,\r\n}, {\r\n    name: '$datetime-from-iso',\r\n    fn: ops.$datetimeFromIso,\r\n}, {\r\n    name: '$datetime',\r\n    fn: ops.$datetime,\r\n}, {\r\n    name: '$datetime-lc',\r\n    fn: ops.$datetimeLc,\r\n}, {\r\n    name: '$datetime-to-iso-string',\r\n    fn: ops.$datetimeToIsoString,\r\n}, {\r\n    name: '$datetime-to-components',\r\n    fn: ops.$datetimeToComponents,\r\n}, {\r\n    name: '$datetime-to-components-lc',\r\n    fn: ops.$datetimeToComponentsLc,\r\n}, {\r\n    name: '$json-parse',\r\n    fn: ops.$jsonParse,\r\n}, {\r\n    name: '$match',\r\n    fn: ops.$match,\r\n}, {\r\n    name: '$console-log',\r\n    fn: ops.$consoleLog,\r\n}, {\r\n    name: '$console-error',\r\n    fn: ops.$consoleError,\r\n}, {\r\n    name: '$console-trace',\r\n    fn: ops.$consoleTrace,\r\n}, {\r\n    name: '$console-time',\r\n    fn: ops.$consoleTime,\r\n}, {\r\n    name: '$console-time-end',\r\n    fn: ops.$consoleTimeEnd,\r\n}, {\r\n    name: '$console-time-log',\r\n    fn: ops.$consoleTimeLog,\r\n}];\r\n\r\n\r\nexport const compilationOperators: SxFuncInfo[] = [{\r\n    name: '$$__lambda',\r\n    fn: ops.$comp$__lambda,\r\n}, {\r\n    name: '$$__defun',\r\n    fn: ops.$comp$__defun,\r\n}];\r\n\r\n\r\n// for backword compatibility\r\nexport default ([] as SxFuncInfo[]).concat(operators, compilationOperators);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$scope',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            list[1],\r\n            list[2],\r\n            ...(list.slice(3).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$local',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($local ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$global',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($__global expr1 ... exprN)\r\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\r\n        return [{symbol: '$__global'},\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-let', // alias of $local\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$capture',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__capture'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$refun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($refun name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '<-',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (<- name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defmacro',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defmacro name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defmacro'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$call',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($call thisArg symbol arg1 ... argN)\r\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\r\n        checkParamsLength('$call', list, 3);\r\n\r\n        return [{symbol: '$__call'},\r\n            list[1],\r\n            quote(state, list[2]),\r\n            ...(list.slice(3)),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$try',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($try expr catch-expr)\r\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\r\n        return [{symbol: '$__try'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if cond t-expr f-expr)\r\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\r\n        return [{symbol: '$__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if-null',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if-null cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '??',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (?? cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$cond',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($cond cond1 expr1 ... condN exprN)\r\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        return [{symbol: '$__cond'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($while condition expr1 exprN)\r\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-while condition expr1 exprN)\r\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($until condition expr1 exprN)\r\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-until condition expr1 exprN)\r\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$repeat',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($repeat i of n-times expr1 exprN)\r\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__repeat'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($for x of list expr1 exprN)\r\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__for'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$get',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\r\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        return [{symbol: '$__get'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$let',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$let', list, 3, 3);\r\n\r\n        return [{symbol: '$__let'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-defvar',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$clisp-defvar', list, 3, 3);\r\n\r\n        return [{symbol: '$global'},\r\n            [{symbol: '$__let'},\r\n                quote(state, list[1]),\r\n                list[2]\r\n            ],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\r\n        checkParamsLength('$set', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-setq', // alias of $set\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-setq symbol expr)\r\n        //  -> S expr  : ($__set 'symbol expr)\r\n        checkParamsLength('$clisp-setq', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$and',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($and expr1 ... exprN)\r\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\r\n        return [{symbol: '$__and'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$or',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($or expr1 ... exprN)\r\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\r\n        return [{symbol: '$__or'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$gensym',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($gensym)\r\n        // S expression: ($gensym name)\r\n        //  -> S expr  : ($__gensym 'name)\r\n        return [\r\n            {symbol: '$__gensym'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '#',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (# (name value...)...)\r\n        //  -> S expr  : ($__# '(name value...)...)\r\n        return [\r\n            {symbol: '$__#'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport const compilationMacros: SxMacroInfo[] = [{\r\n    name: '$$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\n// for backword compatibility\r\nexport default ([] as SxMacroInfo[]).concat(macros, compilationMacros);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [\r\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\r\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\r\n\r\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\r\n\r\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\r\n\r\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\r\n\r\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\r\n\r\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\r\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\r\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\r\n\r\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\r\n];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxEof,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedFragment,\r\n         SxComment,\r\n         SxToken,\r\n         SxChar,\r\n         ScriptTerminationError } from './types';\r\nimport { quote,\r\n         backquote,\r\n         wrapByUnquote,\r\n         spread,\r\n         splice }                 from './ast';\r\n\r\n\r\n\r\nfunction isEOF(ch: SxChar): boolean {\r\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\r\n}\r\n\r\n\r\nfunction isSpace(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && ch.trim().length === 0;\r\n}\r\n\r\n\r\nfunction isNumberFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isSymbolFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' &&\r\n        !isSpace(ch) &&\r\n        !isNumberFirstChar(ch);\r\n}\r\n\r\n\r\n\r\nfunction lookCurrentLineHint(state: SxParserState): string {\r\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\r\n        state.strings.length > state.index ?\r\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\r\n}\r\n\r\n\r\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    if (state.strings.length <= state.index) {\r\n        return {eof: true};\r\n    }\r\n    if (state.strings[state.index].length <= state.pos) {\r\n        if ((! state.values) || (state.values.length <= state.index)) {\r\n            state.pos = 0;\r\n            state.index++;\r\n            return getChar(state);\r\n        } else {\r\n            const ch = {value: state.values[state.index]};\r\n            state.pos = 0;\r\n            state.index++;\r\n            return ch;\r\n        }\r\n    }\r\n    if (virtualEof) {\r\n        for (const v of virtualEof) {\r\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\r\n            if (ch === v) {\r\n                state.pos += v.length;\r\n                state.line += ch.split('\\n').length - 1;\r\n                return { eof: false , eofSeq: v };\r\n            }\r\n        }\r\n    }\r\n    {\r\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n        state.pos++;\r\n\r\n        if (ch === '\\n') {\r\n            state.line++;\r\n        }\r\n\r\n        if ((! disableEscape) && ch === '\\\\') {\r\n            if (state.strings[state.index].length <= state.pos) {\r\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n            state.pos++;\r\n\r\n            switch (ch) {\r\n            case 'b':\r\n                ch = '\\b';\r\n                break;\r\n            case 't':\r\n                ch = '\\t';\r\n                break;\r\n            case 'n':\r\n                ch = '\\n';\r\n                break;\r\n            case 'v':\r\n                ch = '\\v';\r\n                break;\r\n            case 'f':\r\n                ch = '\\f';\r\n                break;\r\n            case 'r':\r\n                ch = '\\r';\r\n                break;\r\n            case 'U': case 'u':\r\n                {\r\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\r\n                        let ch1 = '';\r\n                        for (let i = 0; i < 6; i++) {\r\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\r\n                            if (ch2 === '}') {\r\n                                if (i === 0) {\r\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                                }\r\n                                state.pos += i;\r\n                                break;\r\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\r\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            ch1 += ch2;\r\n                        }\r\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos++;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    } else {\r\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\r\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos += 4;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return ch;\r\n    }\r\n}\r\n\r\n\r\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    const chs: SxChar[] = [];\r\n\r\n    try {\r\n        for (let i = 0; i < n; i++) {\r\n            chs.push(getChar(state, virtualEof, disableEscape));\r\n        }\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return chs;\r\n}\r\n\r\n\r\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    let ch: SxChar;\r\n\r\n    try {\r\n        ch = getChar(state, virtualEof, disableEscape);\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return ch;\r\n}\r\n\r\n\r\nfunction skipWhitespaces(state: SxParserState): void {\r\n    let ch = lookAhead(state);\r\n    while (!isEOF(ch) && isSpace(ch)) {\r\n        getChar(state);\r\n        ch = lookAhead(state);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\r\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n    }\r\n    return Number(s);\r\n}\r\n\r\n\r\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (isSpace(ch)) {\r\n                break;\r\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\r\n                break;\r\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                getChar(state, virtualEof);\r\n                const v = (ch as SxExternalValue).value;\r\n                s += String(ch);\r\n            } else {\r\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (state.config.enableShorthands) {\r\n        let m: RegExpMatchArray | null = null;\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        if (m = s.match(/^:((?:\\:[^=:]+?)+?)=$/)) {\r\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\r\n            const ws = m[1].slice(1).split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.set},\r\n                        ws\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^:((?:\\:[^@:]+?)+?)@([^@:]+?)$/)) {\r\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\r\n            const ws = m[1].slice(1).split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.call},\r\n                        [{symbol: state.config.reservedNames.get}, ...ws],\r\n                        {symbol: m[2]},\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^:((?:\\:[^:]+?)+?)$/)) {\r\n            // ::foo:bar:baz -> ($get foo bar baz)\r\n            const ws = m[1].slice(1).split(':');\r\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\r\n            return z as any;\r\n        }\r\n    }\r\n\r\n    return {symbol: s};\r\n}\r\n\r\n\r\nfunction parseStringOrComment(\r\n        state: SxParserState, eof: string[],\r\n        valuesStartSeq: string | null,\r\n        valuesStopChar: string,\r\n        disableEscape: boolean,\r\n        allowPhysicalEof: boolean,\r\n    ): { strings: string[], values: any[] } {\r\n\r\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\r\n    const strings: string[] = [];\r\n    const values: any[] = [];\r\n\r\n    for (;;) {\r\n        let s = '';\r\n        let ch = lookAhead(state, eofSeqs, disableEscape);\r\n\r\n        while (! isEOF(ch)) {\r\n            if (typeof ch === 'string') {\r\n                getChar(state, eofSeqs, disableEscape);\r\n                s += ch;\r\n            } else {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state, eofSeqs, disableEscape);\r\n                    const v = (ch as SxExternalValue).value;\r\n                    s += String(ch);\r\n                } else {\r\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            }\r\n\r\n            ch = lookAhead(state, eofSeqs, disableEscape);\r\n        }\r\n\r\n        getChar(state, eofSeqs, disableEscape);\r\n\r\n        if ((ch as SxEof).eof === true) {\r\n            if (! allowPhysicalEof) {\r\n                throw new ScriptTerminationError('parseStringOrComment');\r\n            }\r\n        }\r\n\r\n        strings.push(s);\r\n\r\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\r\n            values.push(parseList(state, valuesStopChar, []));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { strings, values };\r\n}\r\n\r\n\r\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\r\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape, false).strings[0];\r\n}\r\n\r\n\r\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\r\n    const q: SxToken[] = [symbol];\r\n\r\n    if (attrs) {\r\n        q.push(attrs);\r\n    }\r\n\r\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false, false);\r\n    for (let i = 0; i < inner.strings.length; i++) {\r\n        q.push(inner.strings[i]);\r\n        if (i < inner.values.length) {\r\n            q.push(inner.values[i]);\r\n        }\r\n    }\r\n\r\n    return q;\r\n}\r\n\r\n\r\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false, true).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['|#'], null, ')', false, false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseOneToken(state: SxParserState): SxToken {\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case ')':\r\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n\r\n        case '(':\r\n            getChar(state);\r\n            return parseList(state, ')', []);\r\n\r\n        case \"'\": case \"`\": case ',':\r\n            {\r\n                getChar(state);\r\n                const ahead = lookAhead(state);\r\n                let isSpliceUnquote = false;\r\n                if (ch === ',' && ahead === '@') {\r\n                    getChar(state);\r\n                    isSpliceUnquote = true;\r\n                }\r\n                skipWhitespaces(state);\r\n                const ret = (ch === \"'\" ?\r\n                        quote :\r\n                        (ch === \"`\" ? backquote : wrapByUnquote))\r\n                    (state, parseOneToken(state)\r\n                );\r\n                return (isSpliceUnquote ? splice(state, ret) : ret);\r\n            }\r\n\r\n        case \".\":\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 2);\r\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    skipWhitespaces(state);\r\n                    return spread(state, parseOneToken(state));\r\n                } else {\r\n                    skipWhitespaces(state);\r\n                    return {dotted: parseOneToken(state)};\r\n                }\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            return parseSingleLineComment(state);\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseMultiLineComment(state);\r\n                } else {\r\n                    return parseSymbol(state);\r\n                }\r\n            }\r\n\r\n        case '\"':\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 4);\r\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\r\n                    let isHereDoc = true;\r\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\r\n                        // here doc\r\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\r\n                        if (aheads[2] === '+' || aheads[2] === '-') {\r\n                            if (! isNumberAfterSignChar(aheads[3])) {\r\n                                isHereDoc = false;\r\n                            }\r\n                        }\r\n                        // here doc\r\n                    } else if (isSymbolFirstChar(aheads[2])) {\r\n                        isHereDoc = false;\r\n                    } else {\r\n                        // here doc\r\n                    }\r\n                    getChar(state);\r\n                    getChar(state);\r\n\r\n                    let sym: SxSymbol | number | null = null;\r\n                    let attrs: SxToken[] | null = null;\r\n                    if (isHereDoc) {\r\n                        sym = {symbol: state.config.reservedNames.Template};\r\n                    } else {\r\n                        sym = parseSymbol(state, ['@']);\r\n                        if (sym === null) {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        if (typeof sym === 'number') {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        const ahs = lookAheads(state, 2);\r\n                        if (ahs[0] === '@') {\r\n                            if (ahs[1] !== '{') {\r\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            getChar(state);\r\n                            getChar(state);\r\n                            const a = parseList(state, '}', [{symbol: '@'}]);\r\n                            if (Array.isArray(a)) {\r\n                                attrs = a;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return parseHereDoc(state, sym, attrs);\r\n                } else {\r\n                    return parseString(state, false);\r\n                }\r\n            }\r\n\r\n        case '@':\r\n            if (state.config.enableVerbatimStringLiteral) {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '\"') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseString(state, true);\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            if (typeof ch !== 'string') {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state);\r\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\r\n                } else {\r\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            } else if (isSpace(ch)) {\r\n                break;\r\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\r\n                if (ch === '+' || ch === '-') {\r\n                    const aheads = lookAheads(state, 2);\r\n                    if (! isNumberAfterSignChar(aheads[1])) {\r\n                        return parseSymbol(state);\r\n                    }\r\n                }\r\n                return parseNumber(state);\r\n            } else if (isSymbolFirstChar(ch)) {\r\n                return parseSymbol(state);\r\n            } else {\r\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseOneToken');\r\n}\r\n\r\n\r\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\r\n    const r: SxToken[] = initialList.slice(0);\r\n    let dotted = false;\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case listStopChar:\r\n            getChar(state);\r\n            if (dotted) {\r\n                return r[0];\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        default:\r\n            {\r\n                const t = parseOneToken(state);\r\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\r\n                    if (r.length !== 1) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    dotted = true;\r\n                    if (Array.isArray(t)) {\r\n                        t.unshift(r.pop() as SxToken);\r\n                        r.push(t);\r\n                    } else {\r\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\r\n                    }\r\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                    if (! state.config.stripComments) {\r\n                        r.push(t);\r\n                    }\r\n                } else {\r\n                    if (dotted) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    r.push(t);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseList');\r\n}\r\n\r\n\r\n\r\nexport function parse(state: SxParserState) {\r\n    const r: SxToken[] = [];\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case '(':\r\n            getChar(state);\r\n            r.push(parseList(state, ')', []));\r\n            break;\r\n\r\n        case \"'\": case \"`\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                for (;;) {\r\n                    const t = parseOneToken(state);\r\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                        if (! state.config.stripComments) {\r\n                            r.push(t);\r\n                        }\r\n                    } else {\r\n                        r.push((ch === \"'\" ? quote : backquote)(state, t));\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            if (state.config.stripComments) {\r\n                parseSingleLineComment(state);\r\n            } else {\r\n                r.push(parseSingleLineComment(state));\r\n            }\r\n            break;\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseMultiLineComment(state);\r\n                    } else {\r\n                        r.push(parseMultiLineComment(state));\r\n                    }\r\n                } else {\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseSingleLineComment(state);\r\n                    } else {\r\n                        r.push(parseSingleLineComment(state));\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case '\"':\r\n            {\r\n                const aheads = lookAheads(state, 3);\r\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\r\n                    r.push(parseOneToken(state));\r\n                    break;\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxReservedNames,\r\n         SxParserConfig } from './types';\r\n\r\n\r\n\r\nexport const defaultReservedNames: SxReservedNames = {\r\n    eval: '$eval',\r\n    quote: '$quote',\r\n    backquote: '$backquote',\r\n    unquote: '$unquote',\r\n    spread: '$spread',\r\n    splice: '$splice',\r\n\r\n    car: '$car',\r\n    cdr: '$cdr',\r\n    cons: '$cons',\r\n    atom: '$atom',\r\n    eq: '$eq',\r\n    list: '$list',\r\n\r\n    let: '$clisp-let',\r\n    lambda: '$lambda',\r\n    self: '$self',\r\n    defun: '$defun',\r\n    thiz: '$this',\r\n\r\n    if: '$if',\r\n    cond: '$cond',\r\n\r\n    while: '$while',\r\n    doWhile: '$do-while',\r\n    until: '$until',\r\n    doUntil: '$do-until',\r\n\r\n    get: '$get',\r\n    defvar: '$clisp-defvar',\r\n    setq: '$clisp-setq',\r\n    set: '$set',\r\n    call: '$call',\r\n\r\n    not: '$not',\r\n    and: '$and',\r\n    or: '$or',\r\n\r\n    isSymbol: '$is-symbol',\r\n    gensym: '$gensym',\r\n    raise: '$raise',\r\n    catch: '$catch',\r\n\r\n    Template: 'Template',\r\n};\r\n\r\nexport const defaultConfig: SxParserConfig = {\r\n    raiseOnUnresolvedSymbol: false,\r\n    enableEvaluate: true,\r\n    enableHereDoc: true,\r\n    enableSpread: true,\r\n    enableSplice: true,\r\n    enableShorthands: true,\r\n    enableVerbatimStringLiteral: true,\r\n    enableTailCallOptimization: true,\r\n    enableRegExpMatchOperators: true,\r\n    enableCompilationOperators: true,\r\n    stripComments: false,\r\n    wrapExternalValue: true,\r\n    returnMultipleRoot: false,\r\n    maxEvalCount: 0,\r\n\r\n    reservedNames: defaultReservedNames,\r\n    symbols: [],\r\n    macros: [],\r\n    funcs: [],\r\n};\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxFuncInfo,\r\n         SxSymbolInfo,\r\n         SxParserConfig,\r\n         SxParserState,\r\n         SxToken,\r\n         SExpressionTemplateFn,\r\n         SExpressionAsyncTemplateFn } from '../types';\r\nimport { parse }                      from '../parser';\r\nimport { evaluate }                   from '../evaluate';\r\nimport { defaultConfig }              from '../defaults';\r\n\r\n\r\n\r\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\r\n    return {\r\n        strings: typeof strings === 'string' ? [strings] : strings,\r\n        values: values || [],\r\n\r\n        index: 0,\r\n        pos: 0,\r\n        line: 0,\r\n\r\n        evalCount: 0,\r\n\r\n        scopes: [{isBlockLocal: false, scope: globals}],\r\n\r\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\r\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\r\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\r\n\r\n        config,\r\n    };\r\n}\r\n\r\n\r\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\r\n    state.strings = typeof strings === 'string' ? [strings] : strings;\r\n    state.values = values || [];\r\n    state.index = 0;\r\n    state.pos = 0;\r\n    state.line = 0;\r\n    state.evalCount = 0;\r\n    return state;\r\n}\r\n\r\n\r\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fRepl;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = async (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n\r\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\r\n                    s[i] = await s[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\r\n            if (config.enableEvaluate) {\r\n                for (let i = 0; i < s.length; i++) {\r\n                    s[i] = evaluate(stat, s[i]);\r\n                }\r\n            }\r\n\r\n            if (config.returnMultipleRoot) {\r\n                return s.length === 1 ? s[0] : s;\r\n            } else {\r\n                return s[s.length - 1];\r\n            }\r\n        };\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return execSync(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fReplSync;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { ParserFnWithCtx } from './types';\r\nimport { zeroWidth,\r\n         zeroWidthError,\r\n         beginning,\r\n         end,\r\n         quantify,\r\n         first,\r\n         or,\r\n         transform,\r\n         lookAhead,\r\n         lookBehind,\r\n         ApplyProductionRulesArg,\r\n         applyProductionRules,\r\n         makeProgram } from './parser';\r\n\r\n\r\n\r\nexport function objSequence<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (needle: T) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return (needle => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            let matched = true;\r\n\r\n            if (len >= needle.length) {\r\n                for (let i = 0; i < needle.length; i++) {\r\n                    if (! comparator(input.src[input.start + i], needle[i])) {\r\n                        matched = false;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                matched = false;\r\n            }\r\n\r\n            return (matched ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needle.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needle)],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"objSequence(${needle})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClass<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (...needles: Array<T[number]>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            let index = -1;\r\n\r\n            const succeeded = len > 0 ? needles.some((needle, idx) => {\r\n                if (comparator(input.src[input.start], needle)) {\r\n                    index = idx;\r\n                    return true;\r\n                }\r\n            }) : false;\r\n\r\n            return (succeeded ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needles[index])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"objClass(${needles.join(',')})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClassNot<T extends ArrayLike<T[number]>, C, R>(\r\n    helper: (token: T[number]) => R,\r\n    comparator: (a: T[number], b: T[number]) => boolean,\r\n    ): (...needles: Array<T[number]>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n\r\n            if (len > 0) {\r\n                for (const needle of needles) {\r\n                    let matched = true;\r\n\r\n                    if (! comparator(input.src[input.start], needle)) {\r\n                        matched = false;\r\n                        break;\r\n                    }\r\n\r\n                    if (matched) {\r\n                        return ({\r\n                            succeeded: false,\r\n                            error: false,\r\n                            src: input.src,\r\n                            pos: input.start,\r\n                            message: `operator \"objClassNot(${needles.join(',')})\"`,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(input.src[input.start])],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClassByNeedleFn<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (needle: (src: T[number]) => boolean) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return (needle => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            const matched = len > 0 ? needle(input.src[input.start]) : false;\r\n\r\n            return (matched ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(input.src[input.start])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"objClassByNeedleFn\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function getObjectParsers<T extends ArrayLike<T[number]>, C, R>(\r\n        params: {\r\n            rawToToken: (rawToken: T[number]) => R,\r\n            concatTokens: (tokens: R[]) => R[],\r\n            comparator: (a: T[number], b: T[number]) => boolean,\r\n        }) {\r\n\r\n    const clsFn = objClassByNeedleFn<T, C, R>(params.rawToToken, params.comparator);\r\n\r\n    const isAny = clsFn(src => true);\r\n\r\n    // TODO: reduce unneccessary call for adding types.\r\n    return ({\r\n        seq: objSequence<T, C, R>(params.rawToToken, params.comparator),\r\n        cls: objClass<T, C, R>(params.rawToToken, params.comparator),\r\n        notCls: objClassNot<T, C, R>(params.rawToToken, params.comparator),\r\n        clsFn,\r\n        classes: {\r\n            any: isAny,\r\n        },\r\n        cat: transform<T, C, R>(params.concatTokens),\r\n        once: quantify<T, C, R>(1, 1),\r\n        repeat: quantify<T, C, R>(),\r\n        qty: (min?: number, max?: number) => quantify<T, C, R>(min, max), // TODO:\r\n        zeroWidth: (helper?: () => R) => zeroWidth<T, C, R>(helper),      // TODO:\r\n        err: (message: string) => zeroWidthError<T, C, R>(message),       // TODO:\r\n        beginning: (helper?: () => R) => beginning<T, C, R>(helper),      // TODO:\r\n        end: (helper?: () => R) => end<T, C, R>(helper),                  // TODO:\r\n        first: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => first<T, C, R>(...parsers), // TODO:\r\n        or: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => or<T, C, R>(...parsers),       // TODO:\r\n        combine: transform<T, C, R>(),\r\n        erase: transform<T, C, R>(tokens => []),\r\n        trans: (fn: (tokens: R[]) => R[]) => transform<T, C, R>(fn),                            // TODO:\r\n        ahead: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => lookAhead<T, C, R>(...parsers), // TODO:\r\n        behind: (n: number, helper?: () => R) => lookBehind<T, C, R>(n, helper),\r\n        rules: (args: ApplyProductionRulesArg<T, C, R>) => applyProductionRules<T, C, R>(args), // TODO:\r\n        makeProgram,\r\n    });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ParserInputWithCtx,\n         ParserFnWithCtx }       from 'fruitsconfits/modules/lib/types';\nimport { getStringParsers }      from 'fruitsconfits/modules/lib/string-parser';\nimport { getObjectParsers }      from 'fruitsconfits/modules/lib/object-parser';\nimport { SxTokenChild,\n         SxToken }               from 'liyad/modules/s-exp/types';\nimport { dummyTargetObject,\n         isUnsafeVarNames }      from './util';\n\n\n\nexport interface SxOp {\n    'op': string;\n}\n\nexport type AstChild = SxTokenChild | SxOp | undefined;\nexport type Ast = SxToken | AstChild | SxOp | undefined;\n\n\ninterface Ctx {\n    docComment?: string;\n}\n\nconst $s = getStringParsers<Ctx, Ast>({\n    rawToToken: rawToken => rawToken,\n    concatTokens: tokens => (tokens.length ?\n        [tokens.reduce((a, b) => String(a) + b)] : []),\n});\n\nconst $o = getObjectParsers<Ast[], Ctx, Ast>({\n    rawToToken: rawToken => rawToken,\n    concatTokens: tokens => (tokens.length ?\n        [tokens.reduce((a, b) => String(a) + b)] : []),\n    comparator: (a, b) => a === b,\n});\n\nconst {seq, cls, notCls, clsFn, classes, numbers, cat,\n       once, repeat, qty, zeroWidth, err, beginning, end,\n       first, or, combine, erase, trans, ahead, rules,\n       makeProgram} = $s;\n\n\nconst directiveLineComment =\n    trans(tokens => [[{symbol: 'directive'}, ...tokens]])(\n        erase(qty(2)(cls('/'))),\n        erase(repeat(classes.space)),\n        cat(seq('@tynder-'), repeat(first(classes.alnum, cls('-')))), // [0]\n        erase(repeat(classes.space)),\n        cat(repeat(notCls('\\r\\n', '\\n', '\\r'))),                      // [1]\n        erase(first(classes.newline, ahead(end()))), );\n\nconst directiveBlockComment =\n    trans(tokens => [[{symbol: 'directive'}, ...tokens]])(\n        erase(seq('/*')),\n        erase(repeat(classes.space)),\n        cat(seq('@tynder-'), repeat(first(classes.alnum, cls('-')))), // [0]\n        erase(repeat(classes.space)),\n        cat(repeat(notCls('*/'))),                                    // [1]\n        erase(seq('*/')), );\n\n\nconst lineComment =\n    combine(\n        erase(qty(2)(cls('/'))),\n        first(\n            combine(\n                ahead(repeat(classes.space),\n                      notCls('@tynder-'), ),\n                repeat(notCls('\\r\\n', '\\n', '\\r')),\n                first(classes.newline, ahead(end())), ),\n            first(classes.newline, ahead(end())), ));\n\nconst hashLineComment =\n    combine(\n        seq('#'),\n        repeat(notCls('\\r\\n', '\\n', '\\r')),\n        first(classes.newline, ahead(end())), );\n\nconst docComment =\n    combine(\n        seq('/**'),\n        repeat(classes.space),\n        input => {\n            const ret = cat(repeat(notCls('*/')))(input);\n            if (ret.succeeded) {\n                // define a reducer\n                const ctx2 = {...ret.next.context}; // NOTE: context is immutable\n                ctx2.docComment = (ret.tokens[0] as string || '').trim();\n                ret.next.context = ctx2;\n            }\n            return ret;\n        },\n        seq('*/'), );\n\nconst blockComment =\n    combine(\n        seq('/*'),\n            ahead(repeat(classes.space),\n                  notCls('@tynder-'), ),\n            repeat(notCls('*/')),\n            seq('*/'), );\n\nconst commentOrSpace =\n    first(classes.space, lineComment, hashLineComment, docComment, blockComment);\n\n\nconst trueValue =\n    trans(tokens => [true])\n    (seq('true'));\n\nconst falseValue =\n    trans(tokens => [false])\n    (seq('false'));\n\nconst nullValue =\n    trans(tokens => [null])\n    (seq('null'));\n\nconst undefinedValue =\n    trans(tokens => [void 0])\n    (seq('undefined'));\n\nconst positiveInfinityValue =\n    trans(tokens => [Number.POSITIVE_INFINITY])\n    (qty(0, 1)(seq('+')), seq('Infinity'));\n\nconst negativeInfinityValue =\n    trans(tokens => [Number.NEGATIVE_INFINITY])\n    (seq('-Infinity'));\n\nconst nanValue =\n    trans(tokens => [Number.NaN])\n    (seq('NaN'));\n\n\nconst binaryIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 2)])\n    (numbers.bin(seq('0b')));\n\nconst octalIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 8)])\n    (numbers.oct(seq('0o'), seq('0')));\n\nconst hexIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 16)])\n    (numbers.hex(seq('0x'), seq('0X')));\n\nconst decimalIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 10)])\n    (numbers.int);\n\nconst bigDecimalIntegerValue =\n    trans(tokens => [BigInt((tokens as string[])[0].replace(/_/g, '')) as any])\n    (numbers.bigint);\n\nconst floatingPointNumberValue =\n    trans(tokens => [Number.parseFloat((tokens as string[])[0].replace(/_/g, ''))])\n    (numbers.float);\n\nconst numberValue =\n    first(octalIntegerValue,\n          hexIntegerValue,\n          binaryIntegerValue,\n          bigDecimalIntegerValue,\n          floatingPointNumberValue,\n          decimalIntegerValue,\n          positiveInfinityValue,\n          negativeInfinityValue,\n          nanValue, );\n\n\nconst stringEscapeSeq = first(\n    trans(t => ['\\''])(seq('\\\\\\'')),\n    trans(t => ['\\\"'])(seq('\\\\\"')),\n    trans(t => ['\\`'])(seq('\\\\`')),\n    trans(t => ['/'])(seq('\\\\/')),\n    trans(t => ['\\\\'])(seq('\\\\\\\\')),\n    trans(t => [''])(seq('\\\\\\r\\n')),\n    trans(t => [''])(seq('\\\\\\r')),\n    trans(t => [''])(seq('\\\\\\n')),\n    trans(t => ['\\n'])(seq('\\\\n')),\n    trans(t => ['\\r'])(seq('\\\\r')),\n    trans(t => ['\\v'])(seq('\\\\v')),\n    trans(t => ['\\t'])(seq('\\\\t')),\n    trans(t => ['\\b'])(seq('\\\\b')),\n    trans(t => ['\\f'])(seq('\\\\f')),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\u')),\n                qty(4, 4)(classes.hex), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\u{')),\n                qty(1, 6)(classes.hex),\n                erase(seq('}')), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\x')),\n                qty(2, 2)(classes.hex), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 8))])(\n        cat(erase(seq('\\\\')),\n                qty(3, 3)(classes.oct), )));\n\nconst signleQuotStringValue =\n    trans(tokens => [tokens[0]])(\n        erase(seq(\"'\")),\n            cat(repeat(first(\n                stringEscapeSeq,\n                combine(cls('\\r', '\\n'), err('Line breaks within strings are not allowed.')),\n                notCls(\"'\"),\n            ))),\n        erase(seq(\"'\")), );\n\nconst doubleQuotStringValue =\n    trans(tokens => [tokens[0]])(\n        erase(seq('\"')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                combine(cls('\\r', '\\n'), err('Line breaks within strings are not allowed.')),\n                notCls('\"'),\n            ))),\n        erase(seq('\"')), );\n\nconst backQuotStringValue =\n    trans(tokens => [tokens[0]])(\n        erase(seq('`')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                notCls('`'),\n            ))),\n        erase(seq('`')), );\n\nconst stringValue =\n    first(signleQuotStringValue, doubleQuotStringValue, backQuotStringValue);\n\nconst regexpStringValue =\n    // TODO: '/' ']' '\\\\' in character class '[]' is not parsed correctly.\n    trans(tokens => [{value: tokens[1] ?\n            new RegExp(tokens[0] as string, tokens[1] as string) :\n            new RegExp(tokens[0] as string)}])(\n        erase(seq('/')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                notCls('/'),\n            ))),\n        erase(seq('/')),\n        cat(qty(0)(cls('g', 'i', 'm', 's', 'u', 'y'))), );\n\n\nconst symbolName =\n    trans(tokens => tokens)\n    (cat(combine(\n        first(classes.alpha, cls('$', '_')),\n        repeat(first(classes.alnum, cls('$', '_'))), )));\n\nconst decoratorSymbolName =\n    trans(tokens => [{symbol: (tokens as string[])[0]}])\n    (cat(combine(\n        seq('@'),\n        first(classes.alpha, cls('$', '_')),\n        repeat(first(classes.alnum, cls('$', '_'))), )));\n\n\nconst simpleConstExpr =\n    first(trueValue, falseValue, nullValue, undefinedValue,\n          numberValue, stringValue, );\n\nconst objKey =\n    first(stringValue, symbolName);\n\nconst listValue = first(\n    trans(tokens => [[]])(erase(\n        seq('['),\n            repeat(commentOrSpace),\n        seq(']'), )),\n    trans(tokens => {\n        const ast: Ast = [{symbol: '$list'}];\n        for (const token of tokens) {\n            ast.push(token as any);\n        }\n        return [ast];\n    })(\n        erase(seq('[')),\n            combine(\n                erase(repeat(commentOrSpace)),\n                first(input => listValue(input),   // NOTE: recursive definitions\n                      input => objectValue(input), //       should place as lambda.\n                      simpleConstExpr,\n                      ),\n                erase(repeat(commentOrSpace)), ),\n            repeat(combine(\n                erase(repeat(commentOrSpace),\n                      seq(','),\n                      repeat(commentOrSpace)),\n                first(input => listValue(input),   // NOTE: recursive definitions\n                      input => objectValue(input), //       should place as lambda.\n                      simpleConstExpr,\n                      ),\n                erase(repeat(commentOrSpace)), )),\n            qty(0, 1)(erase(\n                seq(','),\n                repeat(commentOrSpace), )),\n            first(ahead(seq(']')), err('listValue: Unexpected token has appeared.')),\n        erase(seq(']')),\n    ), );\n\nconst objectKeyValuePair =\n    combine(\n        objKey,\n        erase(repeat(commentOrSpace),\n              first(seq(':'), err('\":\" is needed.')),\n              repeat(commentOrSpace)),\n        first(input => listValue(input),   // NOTE: recursive definitions\n              input => objectValue(input), //       should place as lambda.\n              simpleConstExpr,\n              err('object value is needed.')), );\n\nconst objectValue = first(\n    trans(tokens => [[{symbol: '#'}]])(erase(\n        seq('{'),\n            repeat(commentOrSpace),\n        seq('}'),\n    )),\n    trans(tokens => {\n        const ast: Ast = [{symbol: '#'}];\n        for (let i = 0; i < tokens.length; i += 2) {\n            if (isUnsafeVarNames(dummyTargetObject, tokens[i] as string)) {\n                throw new Error(`Unsafe symbol name is appeared in object literal: ${tokens[i]}`);\n            }\n            ast.push([tokens[i], tokens[i + 1]]);\n        }\n        return [ast];\n    })(\n        erase(seq('{')),\n            combine(\n                erase(repeat(commentOrSpace)),\n                objectKeyValuePair,\n                erase(repeat(commentOrSpace)), ),\n            repeat(combine(\n                erase(seq(','),\n                      repeat(commentOrSpace)),\n                objectKeyValuePair,\n                erase(repeat(commentOrSpace)), )),\n            qty(0, 1)(erase(\n                seq(','),\n                repeat(commentOrSpace), )),\n            first(ahead(seq('}')), err('objectValue: Unexpected token has appeared.')),\n        erase(seq('}')),\n    ), );\n\nconst constExpr =\n    first(simpleConstExpr,\n          listValue,\n          objectValue, );\n\n\n// const primitiveValue = trans(tokens => [[{symbol: 'primitiveValue'}, tokens[0]]])(\n//     first(trueValue, falseValue, nullValue, undefinedValue,\n//           numberValue, stringValue, ));\n\nconst primitiveValueNoNullUndefined =\n    trans(tokens => [[{symbol: 'primitiveValue'}, tokens[0]]])(\n        first(trueValue, falseValue,\n              numberValue, stringValue, ));\n\n\nconst primitiveTypeName =\n    trans(tokens => [[{symbol: 'primitive'}, tokens[0]]])(\n        first(seq('number?'), seq('integer?'), seq('bigint?'), seq('string?'), seq('boolean?'), // TODO: '?' is allowed in the sequence assertion\n              seq('number'), seq('integer'), seq('bigint'), seq('string'), seq('boolean'), ));  // TODO: function\n\nconst additionalPropPrimitiveTypeName =\n    first(seq('number'), seq('string'));\n\nconst nullUndefinedTypeName =\n    trans(tokens => [[{symbol: 'primitive'}, tokens[0]]])(\n        first(seq('null'), seq('undefined'), seq('any'), seq('unknown'), seq('never')), );\n\nconst simpleOrDottedTypeName =\n    first(primitiveTypeName,\n          nullUndefinedTypeName,\n          trans(tokens =>\n                [[{symbol: 'ref'}, ...tokens]])(\n            ahead(notCls('Array', 'Partial', 'Pick', 'Omit')),\n            combine(\n                symbolName,\n                repeat(combine(\n                    erase(repeat(commentOrSpace), seq('.'), repeat(commentOrSpace)),\n                    symbolName, )))));\n\n\nconst sequenceType =\n    trans(tokens => [[{symbol: 'sequenceOf'}, ...tokens]])(\n        combine(\n            erase(seq('[')),\n                combine(\n                    erase(repeat(commentOrSpace)),\n                    input => spreadOrComplexType(first(seq(','), seq(']')))(input),\n                    erase(repeat(commentOrSpace)), ),\n                repeat(combine(\n                    erase(seq(','),\n                        repeat(commentOrSpace)),\n                    input => spreadOrComplexType(first(seq(','), seq(']')))(input),\n                    erase(repeat(commentOrSpace)), )),\n                qty(0, 1)(erase(\n                    seq(','),\n                    repeat(commentOrSpace), )),\n                first(ahead(seq(']')), err('sequenceType: Unexpected token has appeared.')),\n            erase(seq(']')), ));\n\n\nconst arraySizeFactorInner =\n    first(\n        trans(tokens => [[{symbol: '#'}, ['max', tokens[0]]]])(\n            erase(seq('..')),\n            erase(repeat(commentOrSpace)),\n            decimalIntegerValue, ),\n        trans(tokens => [[{symbol: '#'}, ['min', tokens[0]], ['max', tokens[1]]]])(\n            decimalIntegerValue,\n            erase(repeat(commentOrSpace)),\n            erase(seq('..')),\n            erase(repeat(commentOrSpace)),\n            decimalIntegerValue, ),\n        trans(tokens => [[{symbol: '#'}, ['min', tokens[0]]]])(\n            decimalIntegerValue,\n            erase(repeat(commentOrSpace)),\n            erase(seq('..')), ),\n        trans(tokens => [[{symbol: '#'}, ['min', tokens[0]], ['max', tokens[0]]]])(\n            decimalIntegerValue, ));\n\nconst arraySizeFactor =\n    trans(tokens =>\n        tokens.length > 0 ?\n            tokens :\n            [[{symbol: '#'}]])(\n        erase(seq('[')),\n            erase(repeat(commentOrSpace)),\n            qty(0, 1)(arraySizeFactorInner),\n            erase(repeat(commentOrSpace)),\n        erase(seq(']')), );\n\nconst complexArrayType =\n    trans(tokens => [[{symbol: 'repeated'}, tokens[0], tokens[1]]])(\n        erase(seq('Array')),\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            first(input => complexType(first(seq(','), seq('>')))(input),\n                  err('type is expected in Array type.'), ),        // [0]\n            erase(repeat(commentOrSpace)),\n            qty(0, 1)(combine(\n                erase(seq(',')),\n                erase(repeat(commentOrSpace)),\n                first(arraySizeFactorInner,                         // [1]\n                      err('complexArrayType: Unexpected token has appeared. Expect array size.'), ),\n                erase(repeat(commentOrSpace)), )),\n        first(ahead(seq('>')),\n              err('\\'>\\' is expected in Array type.'), ),\n        erase(seq('>')), );\n\nconst partialType =\n    trans(tokens => [[{symbol: 'partial'}, tokens[0], tokens[1]]])(\n        erase(seq('Partial')),\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            first(input => complexType(first(seq(','), seq('>')))(input),\n                  err('type is expected in Partial type.'), ),      // [0]\n            erase(repeat(commentOrSpace)),\n        first(ahead(seq('>')),\n              err('\\'>\\' is expected in Partial type.'), ),\n        erase(seq('>')), );\n\nconst pickOrOmitType =\n    trans(tokens => [[{symbol: tokens[0] === 'Pick' ? 'picked' : 'omit'}, tokens[1], ...tokens.slice(2)]])(\n        first(seq('Pick'),\n              seq('Omit'), ),                                       // [0]\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            first(input => complexType(first(seq(','), seq('>')))(input),\n                  err('type is expected in Partial type.'), ),      // [1]\n            erase(repeat(commentOrSpace)),\n            combine(\n                erase(seq(',')),\n                erase(repeat(commentOrSpace)),\n                    stringValue,                                    // [2]\n                    qty(0)(combine(\n                        erase(repeat(commentOrSpace)),\n                        erase(seq('|')),\n                        erase(repeat(commentOrSpace)),\n                        stringValue, )),                            // [3],...\n                erase(repeat(commentOrSpace)), ),\n        first(ahead(seq('>')),\n              err('\\'>\\' is expected in Pick|Omit type.'), ),\n        erase(seq('>')), );\n\nconst genericOrSimpleType =\n    trans(tokens => [tokens[0]])(                     // remove generics parameters\n        simpleOrDottedTypeName,                       // [0]\n        erase(repeat(commentOrSpace)),\n        qty(0, 1)(combine(\n            erase(seq('<')),\n                combine(                              // [1]\n                    erase(repeat(commentOrSpace)),\n                    first(input => complexType(first(seq(','), seq('>')))(input),\n                          err('type is expected in generic type.'), ),\n                    erase(repeat(commentOrSpace)), ),\n                repeat(combine(                       // [2]...\n                    erase(seq(','),\n                          repeat(commentOrSpace)),\n                    first(input => complexType(first(seq(','), seq('>')))(input),\n                          err('type is expected in generic type.'), ),\n                    erase(repeat(commentOrSpace)), )),\n                qty(0, 1)(erase(\n                    seq(','),\n                    repeat(commentOrSpace), )),\n                first(ahead(seq('>')), err('genericType: Unexpected token has appeared.')),\n            erase(seq('>')), )));\n\nconst spreadType =\n    trans(tokens => [[{symbol: 'spread'}, tokens[0], tokens[1]]])(\n        erase(seq('...')),\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            input => complexType(first(seq(','), seq('>')))(input),\n            erase(repeat(commentOrSpace)),\n            qty(0, 1)(combine(\n                erase(seq(',')),\n                erase(repeat(commentOrSpace)),\n                first(arraySizeFactorInner,\n                      err('spreadType: Unexpected token has appeared. Expect array size.'), ),\n                erase(repeat(commentOrSpace)), )),\n            first(ahead(seq('>')), err('spreadType: Unexpected token has appeared.')),\n        erase(seq('>')), );\n\n\nconst decorator =\n    trans(tokens => [tokens])(\n        decoratorSymbolName,\n        qty(0, 1)(first(\n            combine(erase(\n                seq('('),\n                    repeat(commentOrSpace),\n                seq(')'), )),\n            combine(\n                erase(seq('(')),\n                    first(\n                        combine(\n                            combine(\n                                erase(repeat(commentOrSpace)),\n                                first(regexpStringValue, constExpr),\n                                erase(repeat(commentOrSpace)), ),\n                            repeat(combine(\n                                erase(repeat(commentOrSpace)),\n                                erase(seq(',')),\n                                erase(repeat(commentOrSpace)),\n                                first(regexpStringValue, constExpr),\n                                erase(repeat(commentOrSpace)), )),\n                            qty(0, 1)(erase(\n                                seq(','),\n                                repeat(commentOrSpace), )),\n                            first(ahead(seq(')')), err('decorator: Unexpected token has appeared. Expect \")\".')), ),\n                        err('decorator: Unexpected token has appeared.'), ),\n                erase(seq(')')),\n            ), )));\n\nconst decoratorsClause =\n    trans(tokens => tokens)(\n        repeat(combine(\n            decorator,\n            erase(repeat(commentOrSpace)), )));\n\n\nconst complexTypeInnerWOSinpleArrayType = (edge: ParserFnWithCtx<string, Ctx, Ast>) =>\n    first(primitiveValueNoNullUndefined,\n          genericOrSimpleType,\n          partialType,\n          pickOrOmitType,\n          complexArrayType,\n          sequenceType,\n          input => interfaceDefInner(first(seq(';'), seq(',')))(input), );\n\nconst complexTypeInnerRoot: (separator: ParserFnWithCtx<string, Ctx, Ast>) => ParserFnWithCtx<string, Ctx, Ast> =\n    (edge: ParserFnWithCtx<string, Ctx, Ast>) =>\n    trans(tokens => {\n            let ty = [{symbol: '$pipe'}, tokens[1], ...(tokens[0] as Ast[])];\n            if (tokens[2] !== null) {\n                for (const z of tokens[2] as Ast[]) {\n                    ty = [{symbol: 'repeated'}, ty, z];\n                }\n            }\n            return ([[\n                ty,\n                ...(tokens[3] ? [tokens[3]] : []),\n                ...tokens.slice(4),\n            ]]);\n        })(\n        trans(tokens => [tokens])(qty(0, 1)(decoratorsClause)),          // [0]\n        first(                                                           // [1]\n            input => complexTypeInnerWOSinpleArrayType(edge)(input),\n            combine(\n                erase(seq('(')),\n                    erase(repeat(commentOrSpace)),\n                    input => complexType(edge)(input),\n                    erase(repeat(commentOrSpace)),\n                erase(seq(')')), )),\n        combine(\n            trans(tokens => tokens[0] !== null ? [tokens] : [null])(     // [2]\n                first(\n                    qty(1)(combine(\n                        erase(repeat(commentOrSpace)),\n                        arraySizeFactor, )),\n                    zeroWidth(() => null), )),\n            combine(first(                                               // [3]...\n                trans(tokens => [tokens[0], ...(tokens[1] as Ast[])])(\n                    qty(1)(combine(\n                        erase(repeat(commentOrSpace)),\n                        trans(tokens => [{op: tokens[0]} as any])(or(seq('&'), seq('|'), seq('-'))),\n                        erase(repeat(commentOrSpace)),\n                        input => complexTypeInnerRoot(edge)(input), ))),\n                trans(tokens => [])(), ))));\n\n\nconst binaryOp = (op: string, op1: any, op2: any) => {\n    return [{symbol: op}, op1, op2];\n};\n\nconst isOperator = (v: any, op: string) => {\n    if (typeof v === 'object' && v.op === op) {\n        return true;\n    }\n    return false;\n};\n\nconst isValue = (v: any) => {\n    // TODO: check type\n    return true;\n};\n\n\n// production rules:\n//   S -> S \"&\" S\nconst complexTypeExprRule3 = $o.trans(tokens => [binaryOp('intersect', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, '&')),\n    $o.clsFn(t => isValue(t)),\n);\n\n// production rules:\n//   S -> S \"|\" S\nconst complexTypeExprRule2 = $o.trans(tokens => [binaryOp('oneOf', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, '|')),\n    $o.clsFn(t => isValue(t)),\n);\n\n// production rules:\n//   S -> S \"-\" S\nconst complexTypeExprRule1 = $o.trans(tokens => [binaryOp('subtract', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, '-')),\n    $o.clsFn(t => isValue(t)),\n);\n\nconst complexType = (edge: ParserFnWithCtx<string, Ctx, Ast>) => rules({\n    rules: [\n        complexTypeExprRule3,\n        complexTypeExprRule2,\n        complexTypeExprRule1,\n    ],\n    check: $o.combine($o.classes.any, $o.end()),\n})(trans(tokens => tokens[0] as Ast[])(complexTypeInnerRoot(edge)));\n\n\nconst spreadOrComplexType: (separator: ParserFnWithCtx<string, Ctx, Ast>) => ParserFnWithCtx<string, Ctx, Ast> =\n    (edge: ParserFnWithCtx<string, Ctx, Ast>) =>\n    first(spreadType, complexType(edge));\n\n\nconst setDocComment = (input: ParserInputWithCtx<string, Ctx>) => {\n    const ret = zeroWidth(() => [])(input);\n    if (ret.succeeded) {\n        const text = ret.next.context.docComment;\n        ret.next.context = {...ret.next.context};\n        delete ret.next.context.docComment;\n        ret.tokens.length = 0;\n        ret.tokens.push(text ? text : null);\n    }\n    return ret;\n};\n\n\nconst typeDef =\n    trans(tokens => [[{symbol: 'def'}, tokens[1], [{symbol: 'docComment'}, tokens[2], tokens[0] ] ]])(\n        erase(seq('type')),\n            setDocComment,                                           // [0]\n            erase(qty(1)(commentOrSpace)),\n            first(symbolName,                                        // [1]\n                  err('typeDef: Unexpected token has appeared. Expect symbol name.'), ),\n            erase(repeat(commentOrSpace)),\n        first(ahead(seq('=')), err('typeDef: Unexpected token has appeared. Expect \"=\".')),\n        erase(seq('=')),\n            first(\n                combine(erase(repeat(commentOrSpace)),\n                        input => complexType(first(seq(','), seq(';')))(input),  // [2]\n                        erase(repeat(commentOrSpace)), ),\n                err('typeDef: Unexpected token has appeared.'), ),\n        first(ahead(seq(';')), err('typeDef: Unexpected token has appeared. Expect \";\".')),\n        erase(seq(';')), );\n\n\nconst interfaceExtendsClause =\n    trans(tokens => [\n            [{symbol: '$list'},\n                ...tokens.map(x => [{symbol: 'ref'}, x])], ])(\n        erase(first(\n            seq('extends'),\n            combine(symbolName,\n                    err('interfaceExtendsClause: Unexpected token has appeared. Expect \"extends\" keyword.'), ))),\n        erase(qty(1)(commentOrSpace)),\n        first(symbolName,\n              err('interfaceExtendsClause: Unexpected token has appeared. Expect symbol name.'), ),\n        repeat(combine(\n            erase(repeat(commentOrSpace)),\n            erase(seq(',')),\n            erase(repeat(commentOrSpace)),\n            first(symbolName,\n                  err('interfaceExtendsClause: Unexpected token has appeared. Expect symbol name.'), ))));\n\nconst interfaceKey =\n    first(\n        trans(tokens => [[{symbol: '$list'}, ...tokens]])(\n            erase(seq('[')),\n                erase(repeat(commentOrSpace),\n                      objKey,\n                      repeat(commentOrSpace),\n                      first(seq(':'), err('\":\" is needed.')),\n                      repeat(commentOrSpace), ),\n                repeat(combine(\n                    first(regexpStringValue,\n                          additionalPropPrimitiveTypeName, ),\n                    erase(repeat(commentOrSpace),\n                          seq('|'),\n                          repeat(commentOrSpace), ))),\n                first(regexpStringValue,\n                      additionalPropPrimitiveTypeName, ),\n                erase(repeat(commentOrSpace)),\n                first(ahead(seq(']')), err('interfaceKey: Unexpected token has appeared. Expect \"]\".')),\n            erase(seq(']')), ),\n        objKey, );\n\nconst interfaceKeyTypePair = (separator: ParserFnWithCtx<string, Ctx, Ast>) =>\n    trans(tokens => [\n            [{symbol: '$list'},\n                tokens[2],\n                [{symbol: '$pipe'},\n                    tokens[3] === '?' ?\n                        [{symbol: 'optional'}, tokens[4]] :\n                        tokens[4], ...(tokens[0] as Ast[]), ],\n                tokens[1], ]])(\n        trans(tokens => [tokens])(first(\n            decoratorsClause,\n            zeroWidth(() => []), )),                // [0] decorators\n        setDocComment,                              // [1]\n        interfaceKey,                               // [2] key\n        first(                                      // [3] '?' | ''\n            combine(\n                erase(repeat(commentOrSpace)),\n                seq('?'),\n                erase(repeat(commentOrSpace)), ),\n            zeroWidth(() => ['']), ),\n        erase(repeat(commentOrSpace),\n            first(seq(':'), err('\":\" is needed.')),\n            repeat(commentOrSpace), ),\n        first(                                      // [4] type\n            input => complexType(first(separator, seq('}')))(input),\n            err('interface member type is needed.'), ));\n\nconst interfaceDefInner: (separator: ParserFnWithCtx<string, Ctx, Ast>) => ParserFnWithCtx<string, Ctx, Ast> =\n    (separator: ParserFnWithCtx<string, Ctx, Ast>) =>\n    trans(tokens => [[{symbol: 'objectType'}, ...tokens]])(\n        first(\n            combine(erase(\n                seq('{'),\n                    repeat(commentOrSpace),\n                seq('}'), )),\n            combine(\n                erase(seq('{')),\n                    combine(\n                        erase(repeat(commentOrSpace)),\n                        interfaceKeyTypePair(separator),\n                        erase(repeat(commentOrSpace)), ),\n                    repeat(combine(\n                        erase(separator,\n                              repeat(commentOrSpace)),\n                        interfaceKeyTypePair(separator),\n                        erase(repeat(commentOrSpace)), )),\n                    qty(0, 1)(erase(\n                        separator,\n                        repeat(commentOrSpace), )),\n                    first(ahead(seq('}')), err('interfaceDefInner: Unexpected token has appeared. Expect \"}\".')),\n                erase(seq('}')), )));\n\nconst interfaceDef =\n    trans(tokens => [\n        [{symbol: 'def'},\n            tokens[1],\n            [{symbol: 'docComment'},\n                [{symbol: 'derived'}, tokens[3], [{symbol: '$spread'}, tokens[2]]],\n                tokens[0], ]]])(\n    erase(seq('interface')),\n        setDocComment,                           // [0] base types\n        erase(qty(1)(commentOrSpace)),\n        first(symbolName,                        // [1] symbol\n              err('interfaceDef: Unexpected token has appeared. Expect symbol name.'), ),\n        erase(repeat(commentOrSpace)),\n        first(interfaceExtendsClause,            // [2]\n              zeroWidth(() => []), ),\n        erase(repeat(commentOrSpace)),\n    first(\n        input => interfaceDefInner(\n            first(seq(';'), seq(',')), )(input), // [3]\n        err('interfaceDef: Unexpected token has appeared.'), ),\n);\n\n\nconst enumKeyValue =\n    trans(tokens => [[{symbol: '$list'}, tokens[1], tokens[2], tokens[0]]])(\n        setDocComment,                           // [0]\n        symbolName,\n        erase(repeat(commentOrSpace)),\n        first(\n            combine(\n                erase(seq('=')),\n                first(\n                    combine(erase(repeat(commentOrSpace)),\n                            first(decimalIntegerValue,\n                                  stringValue, ),\n                            erase(repeat(commentOrSpace)), ),\n                    err('enumKeyValue: Unexpected token has appeared.'), )),\n            zeroWidth(() => null), ));\n\nconst enumDef =\n    trans(tokens => [\n        [{symbol: 'def'}, tokens[1],\n            [{symbol: 'docComment'},\n                [{symbol: 'enumType'}, ...tokens.slice(2)],\n                tokens[0], ]]])(\n    erase(seq('enum')),\n        setDocComment,                           // [0]\n        erase(qty(1)(commentOrSpace)),\n        first(symbolName,\n              err('enumDef: Unexpected token has appeared. Expect symbol name.'), ),\n        erase(repeat(commentOrSpace)),\n    first(\n        combine(erase(\n            seq('{'),\n                repeat(commentOrSpace),\n            seq('}'), )),\n        combine(\n            erase(seq('{')),\n                combine(\n                    erase(repeat(commentOrSpace)),\n                    enumKeyValue,\n                    erase(repeat(commentOrSpace)), ),\n                repeat(combine(\n                    erase(seq(','),\n                          repeat(commentOrSpace)),\n                    enumKeyValue,\n                    erase(repeat(commentOrSpace)), )),\n                qty(0, 1)(erase(\n                    seq(','),\n                    repeat(commentOrSpace), )),\n                first(ahead(seq('}')), err('enumDef: Unexpected token has appeared. Expect \"}\".')),\n            erase(seq('}')), ),\n        err('enumDef: Unexpected token has appeared.'), ));\n\n\nconst internalDef =\n    first(typeDef,\n          interfaceDef,\n          enumDef, );\n\n\nconst constDef =\n    trans(tokens => [[{symbol: 'asConst'}, tokens[0]]])(\n        erase(seq('const'),\n              qty(1)(commentOrSpace), ),\n        first(enumDef,\n              err('constDef: Unexpected token has appeared.'), ));\n\nconst constDefNoErr =\n    trans(tokens => [[{symbol: 'asConst'}, tokens[0]]])(\n        erase(seq('const'),\n              qty(1)(commentOrSpace), ),\n        first(enumDef), );\n\n\nconst exportedDef =\n    trans(tokens => [[{symbol: 'export'}, tokens[0]]])(\n        erase(seq('export'),\n              qty(1)(commentOrSpace), ),\n        first(constDef,\n              internalDef,\n              input => declareTypeAndEnumStatement(input),\n              input => declareVarStatement(input),\n              err('exportedDef: Unexpected token has appeared.'), ));\n\n\nconst defStatement =\n    trans(tokens => [\n        [{symbol: '$local'}, [\n                [{symbol: '_ty'}, tokens[1]],\n            ],\n            [{symbol: 'redef'},\n                {symbol: '_ty'},\n                [{symbol: '$pipe'}, {symbol: '_ty'}, ...(tokens[0] as Ast[])], ]]])(\n        trans(tokens => [tokens])(first(\n            decoratorsClause,\n            zeroWidth(() => []), )),      // [0] decorators\n        first(exportedDef,                // [1] body\n              input => declareTypeAndEnumStatement(input),\n              constDef,\n              internalDef, ));\n\n\nconst externalSymbolAndType =\n    trans(tokens => [[{symbol: '$list'}, ...tokens]])(\n        symbolName,\n        erase(repeat(commentOrSpace)),\n        qty(0, 1)(\n            combine(erase(seq(':')),\n                    erase(repeat(commentOrSpace)),\n                    input => complexType(first(seq(';'), seq(',')))(input), )));\n\n\nexport const externalTypeDef =\n    trans(tokens => [[{symbol: 'external'}, ...tokens]])(\n        erase(seq('external')),\n            erase(qty(1)(commentOrSpace)),\n            externalSymbolAndType,\n            repeat(combine(\n                erase(repeat(commentOrSpace)),\n                erase(cls(',')),\n                erase(repeat(commentOrSpace)),\n                first(externalSymbolAndType,\n                      err('externalTypeDef: Unexpected token has appeared. Expect symbol name.'), ),\n                erase(repeat(commentOrSpace)),\n            )),\n            erase(repeat(commentOrSpace)),\n        first(ahead(cls(';')), err('externalTypeDef: Unexpected token has appeared. Expect \";\".')),\n        erase(cls(';')), );\n\n\nconst declareTypeAndEnumStatement =\n    trans(tokens => [[{symbol: 'asDeclare'}, ...tokens]])(\n        erase(seq('declare')),\n        erase(qty(1)(commentOrSpace)),\n        first(constDefNoErr,  // NOTE: There is still the possibility of \"const varName\". -> `declareVarStatement` will be called.\n              internalDef), );\n\n\nconst declareVarStatement =\n    trans(tokens => [[{symbol: 'passthru'}, tokens[0], tokens[1]]])(\n        cat(seq('declare'),\n            qty(1)(commentOrSpace),\n            first(seq('var'),\n                  seq('let'),\n                  seq('const'),\n                  err('declareVarStatement: Unexpected token has appeared. Expect \"var|let|const\".') ),\n            qty(1)(commentOrSpace),\n            cat(repeat(notCls(';'))),\n            first(ahead(seq(';')), err('declareVarStatement: Unexpected token has appeared. Expect \";\".')),\n            cls(';'), ),\n        setDocComment, );       // [1]\n\n\nconst importStatement =\n    trans(tokens => [[{symbol: 'passthru'}, tokens[0]]])(\n        cat(seq('import'),\n            qty(1)(commentOrSpace),\n            cat(repeat(notCls(';'))),\n            first(ahead(seq(';')), err('importStatement: Unexpected token has appeared. Expect \";\".')),\n            cls(';'), ));\n\n\nconst definition =\n    first(directiveLineComment,\n          directiveBlockComment,\n          defStatement,\n          externalTypeDef,\n          declareVarStatement,\n          importStatement, );\n\nexport const program =\n    makeProgram(combine(\n        erase(repeat(commentOrSpace)),\n        repeat(combine(\n            definition,\n            erase(repeat(commentOrSpace)), )),\n        erase(repeat(commentOrSpace)),\n        first(ahead(end()), err('program: Unexpected token has appeared.')),\n        end(), ));\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { StringParserFnWithCtx } from './types';\r\nimport { zeroWidth,\r\n         zeroWidthError,\r\n         beginning,\r\n         end,\r\n         quantify,\r\n         first,\r\n         or,\r\n         transform,\r\n         lookAhead,\r\n         lookBehind,\r\n         ApplyProductionRulesArg,\r\n         applyProductionRules,\r\n         makeProgram } from './parser';\r\n\r\n\r\n\r\nexport function charSequence<C, R>(\r\n        helper: (token: string) => R\r\n        ): (needle: string) => StringParserFnWithCtx<C, R> {\r\n\r\n    return (needle => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            return (src.startsWith(needle) ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needle.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needle)],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"charSequence(${needle})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClass<C, R>(\r\n        helper: (token: string) => R\r\n        ): (...needles: string[]) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            let index = -1;\r\n\r\n            const succeeded = needles.some((needle, idx) => {\r\n                const matched = src.startsWith(needle);\r\n                if (matched) {\r\n                    index = idx;\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            return (succeeded ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needles[index].length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needles[index])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"charClass(${needles.join(',')})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClassNot<C, R>(\r\n    helper: (token: string) => R\r\n    ): (...needles: string[]) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n\r\n            for (const needle of needles) {\r\n                const matched = src.startsWith(needle);\r\n                if (matched) {\r\n                    return ({\r\n                        succeeded: false,\r\n                        error: false,\r\n                        src: input.src,\r\n                        pos: input.start,\r\n                        message: `operator \"charClassNot(${needles.join(',')})\"`,\r\n                    });\r\n                }\r\n            }\r\n            const p = input.src.codePointAt(input.start);\r\n            if (p === void 0) {\r\n                return ({\r\n                    succeeded: false,\r\n                    error: false,\r\n                    src: input.src,\r\n                    pos: input.start,\r\n                    message: `operator \"charClassNot(${needles.join(',')})\"`,\r\n                });\r\n            }\r\n            const c = String.fromCodePoint(p);\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + c.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(c)],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClassByNeedleFn<C, R>(\r\n        helper: (token: string) => R\r\n        ): (needle: (src: string) => number) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return (needle => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            const len = needle(src);\r\n\r\n            return (len >= 0 ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + len,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(src.substring(0, len))],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"charClassByNeedleFn\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function getStringParsers<C, R>(\r\n        params: {\r\n            rawToToken: (rawToken: string) => R,\r\n            concatTokens: (tokens: R[]) => R[],\r\n        }) {\r\n\r\n    const seq = charSequence<C, R>(params.rawToToken);\r\n    const cls = charClass<C, R>(params.rawToToken);\r\n    const notCls = charClassNot<C, R>(params.rawToToken);\r\n    const clsFn = charClassByNeedleFn<C, R>(params.rawToToken);\r\n    const cat = transform<string, C, R>(params.concatTokens);\r\n    const once = quantify<string, C, R>(1, 1);\r\n    const repeat = quantify<string, C, R>();\r\n    // TODO: reduce unneccessary call for adding types.\r\n    const qty = (min?: number, max?: number) => quantify<string, C, R>(min, max);\r\n    const combine = transform<string, C, R>();\r\n    const erase = transform<string, C, R>(tokens => []);\r\n\r\n    const isAlpha = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'Z') ||\r\n            ('a' <= c && c <= 'z')) ? c.length : -1);\r\n    });\r\n\r\n    const isUpper = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('A' <= c && c <= 'Z') ? c.length : -1);\r\n    });\r\n\r\n    const isLower = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('a' <= c && c <= 'z') ? c.length : -1);\r\n    });\r\n\r\n    const isNumber = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '9') ? c.length : -1);\r\n    });\r\n\r\n    const isNonZeroNumber = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('1' <= c && c <= '9') ? c.length : -1);\r\n    });\r\n\r\n    const isBinNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '1') ? c.length : -1);\r\n    });\r\n\r\n    const isOctNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '7') ? c.length : -1);\r\n    });\r\n\r\n    const isHexNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'F') ||\r\n            ('a' <= c && c <= 'f') ||\r\n            ('0' <= c && c <= '9')) ? c.length : -1);\r\n    });\r\n\r\n    const isAlNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'Z') ||\r\n            ('a' <= c && c <= 'z') ||\r\n            ('0' <= c && c <= '9')) ? c.length : -1);\r\n    });\r\n\r\n    const isSpace = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((' \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n            '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n            '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c) ? c.length : -1);\r\n    });\r\n\r\n    const isSpaceWithinSingleLine = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((' \\f\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n            '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n            '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c) ? c.length : -1);\r\n    });\r\n\r\n    const isControl = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            (0x0000 <= p && p <= 0x001f) ||\r\n            (0x007f <= p && p <= 0x009f)) ? c.length : -1);\r\n    });\r\n\r\n    const isWord = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ((' \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n              '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n              '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c)) ||\r\n            ((0x0000 <= p && p <= 0x001f) ||\r\n             (0x007f <= p && p <= 0x009f)) ?\r\n            -1 : c.length);\r\n    });\r\n\r\n    const isNewline = cls('\\r\\n', '\\n', '\\r');\r\n\r\n    const isAny = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return c.length;\r\n    });\r\n\r\n\r\n    const binSep =\r\n        first(isBinNum, cls('_'));\r\n    const octSep =\r\n        first(isOctNum, cls('_'));\r\n    const hexSep =\r\n        first(isHexNum, cls('_'));\r\n\r\n    const binaryIntegerNumber = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isBinNum), repeat(binSep)), );\r\n    const octalIntegerNumber = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isOctNum), repeat(octSep)), );\r\n    const hexIntegerValue = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isHexNum), repeat(hexSep)), );\r\n    const decimalIntegerNumber =\r\n        combine(cat(qty(0, 1)(cls('+', '-')),\r\n            first(combine(once(isNonZeroNumber), repeat(first(isNumber, cls('_')))),\r\n                seq('0'), )));\r\n    const bigDecimalIntegerNumber =\r\n        combine(cat(decimalIntegerNumber,\r\n            erase(seq('n')), ));\r\n    const floatingPointNumber =\r\n        combine(cat(qty(0, 1)(cls('+', '-')),\r\n            first(combine(once(isNonZeroNumber), repeat(first(isNumber, cls('_')))),\r\n                seq('0'), ),\r\n            qty(0, 1)(combine(seq('.'),\r\n                qty(1)(first(isNumber, cls('_'))), )),\r\n            qty(0, 1)(combine(cls('E', 'e'), qty(0, 1)(cls('+', '-')),\r\n                first(combine(once(isNonZeroNumber), repeat(isNumber)), seq('0')), ))));\r\n\r\n    // TODO: reduce unneccessary call for adding types.\r\n    return ({\r\n        seq,\r\n        cls,\r\n        notCls,\r\n        clsFn,\r\n        classes: {\r\n            alpha: isAlpha,\r\n            upper: isUpper,\r\n            lower: isLower,\r\n            num: isNumber,\r\n            nonzero: isNonZeroNumber,\r\n            bin: isBinNum,\r\n            oct: isOctNum,\r\n            hex: isHexNum,\r\n            alnum: isAlNum,\r\n            space: isSpace,\r\n            spaceWithinSingleLine: isSpaceWithinSingleLine,\r\n            ctrl: isControl,\r\n            newline: isNewline,\r\n            word: isWord,\r\n            any: isAny,\r\n        },\r\n        numbers: {\r\n            bin: binaryIntegerNumber,\r\n            oct: octalIntegerNumber,\r\n            hex: hexIntegerValue,\r\n            int: decimalIntegerNumber,\r\n            bigint: bigDecimalIntegerNumber,\r\n            float: floatingPointNumber,\r\n        },\r\n        cat,\r\n        once,\r\n        repeat,\r\n        qty,\r\n        zeroWidth: (helper?: () => R) => zeroWidth<string, C, R>(helper), // TODO:\r\n        err: (message: string) => zeroWidthError<string, C, R>(message),  // TODO:\r\n        beginning: (helper?: () => R) => beginning<string, C, R>(helper), // TODO:\r\n        end: (helper?: () => R) => end<string, C, R>(helper),             // TODO:\r\n        first: (...parsers: Array<StringParserFnWithCtx<C, R>>) => first<string, C, R>(...parsers), // TODO:\r\n        or: (...parsers: Array<StringParserFnWithCtx<C, R>>) => or<string, C, R>(...parsers),       // TODO:\r\n        combine,\r\n        erase,\r\n        trans: (fn: (tokens: R[]) => R[]) => transform<string, C, R>(fn),                                 // TODO:\r\n        ahead: (...parsers: Array<StringParserFnWithCtx<C, R>>) => lookAhead<string, C, R>(...parsers),   // TODO:\r\n        behind: (n: number, helper?: () => R) => lookBehind<string, C, R>(n, helper),\r\n        rules: (args: ApplyProductionRulesArg<string, C, R>) => applyProductionRules<string, C, R>(args), // TODO:\r\n        makeProgram,\r\n    });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { parserInput }           from 'fruitsconfits/modules/lib/types';\nimport { formatErrorMessage }    from 'fruitsconfits/modules/lib/parser';\nimport { SxToken,\n         SxSymbol,\n         SxParserConfig }        from 'liyad/modules/s-exp/types';\nimport installCore               from 'liyad/modules/s-exp/operators/core';\nimport { SExpression }           from 'liyad/modules/s-exp/interpreters';\nimport { defaultConfig }         from 'liyad/modules/s-exp/defaults';\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         ErrorMessages,\n         TypeAssertionSetValue,\n         TypeAssertionMap }      from './types';\nimport * as operators            from './operators';\nimport { resolveMemberNames,\n         resolveSchema }         from './lib/resolver';\nimport { dummyTargetObject,\n         isUnsafeVarNames }      from './lib/util';\nimport { externalTypeDef,\n         program }               from './lib/compiler';\n\n\n\nfunction parseExternalDirective(s: string) {\n    const z = externalTypeDef(parserInput(s, {/* TODO: set initial state to the context */}));\n    if (! z.succeeded) {\n        throw new Error('Invalid external directive.');\n    }\n    return z.tokens;\n}\n\n\nexport function parse(s: string) {\n    const z = program(parserInput(s, {/* TODO: set initial state to the context */}));\n    if (! z.succeeded) {\n        throw new Error(formatErrorMessage(z));\n    }\n    return z.tokens;\n}\n\n\nconst lisp = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n    config = installCore(config);\n    config.stripComments = true;\n    return SExpression(config);\n})();\n\n\n// tslint:disable: object-literal-key-quotes\nexport function compile(s: string) {\n    const mapTyToTySet = new Map<TypeAssertion, TypeAssertionSetValue>();\n    const schema: TypeAssertionMap = new Map<string, TypeAssertionSetValue>();\n    let gensymCount = 0;\n\n    const def = (name: SxSymbol | string, ty: TypeAssertion): TypeAssertion => {\n        let ret = ty;\n\n        const sym = typeof name === 'string' ? name : name.symbol;\n        if (isUnsafeVarNames(dummyTargetObject, sym)) {\n            throw new Error(`Unsafe symbol name is appeared: ${sym}`);\n        }\n\n        if (! mapTyToTySet.has(ret)) {\n            const originalTypeName = ret.typeName;\n            ret = operators.withName(operators.withTypeName(\n                originalTypeName ?\n                    operators.withOriginalTypeName(ret, originalTypeName) :\n                    ret,\n                sym), sym);\n        }\n\n        const tySet = mapTyToTySet.has(ret) ?\n            mapTyToTySet.get(ret) as TypeAssertionSetValue :\n            {ty: ret, exported: false, isDeclare: false, resolved: false};\n\n        schema.set(sym, tySet);\n\n        if (! mapTyToTySet.has(ret)) {\n            // TODO: aliases are not exported correctly\n            mapTyToTySet.set(ret, tySet);\n        }\n        return ret;\n    };\n\n    const ref = (name: SxSymbol | string, ...memberNames: (SxSymbol | string)[]): TypeAssertion => {\n        const sym = typeof name === 'string' ? name : name.symbol;\n        if (isUnsafeVarNames(dummyTargetObject, sym)) {\n            throw new Error(`Unsafe symbol name is appeared: ${sym}`);\n        }\n\n        const memberTreeSymbols = memberNames.map(x => {\n            const ms = typeof x === 'string' ? x : x.symbol;\n            if (isUnsafeVarNames(dummyTargetObject, ms)) {\n                throw new Error(`Unsafe symbol name is appeared: ${ms}`);\n            }\n            return ms;\n        });\n\n        if (! schema.has(sym)) {\n            return ({\n                ...{\n                    kind: 'symlink',\n                    symlinkTargetName: sym,\n                    name: sym,\n                    typeName: sym,\n                },\n                ...(0 < memberTreeSymbols.length ? {\n                    memberTree: memberTreeSymbols,\n                } : {}),\n            });\n        }\n\n        let ty = resolveMemberNames(\n            (schema.get(sym) as TypeAssertionSetValue).ty,\n            sym, memberTreeSymbols,\n            0,\n        );\n\n        if (ty.noOutput) {\n            ty = {...ty};\n            delete ty.noOutput;\n        }\n        return ty;\n    };\n\n    const redef = (original: TypeAssertion, ty: TypeAssertion) => {\n        if (original === ty) {\n            return ty;\n        }\n        // NOTE: 'ty' should already be registered to 'mapTyToTySet' and 'schema'\n        const tySet = mapTyToTySet.has(original) ?\n            mapTyToTySet.get(original) as TypeAssertionSetValue :\n            {ty: original, exported: false, isDeclare: false, resolved: false};\n        tySet.ty = ty;\n        mapTyToTySet.set(tySet.ty, tySet);\n        if (ty.name) {\n            schema.set(ty.name, tySet);\n        }\n        return tySet.ty;\n    };\n\n    const exported = (ty: TypeAssertion) => {\n        if (ty.kind === 'never' && typeof ty.passThruCodeBlock === 'string') {\n            ty.passThruCodeBlock = `export ${ty.passThruCodeBlock}`;\n            return ty;\n        } else {\n            // NOTE: 'ty' should already be registered to 'mapTyToTySet' and 'schema'\n            const tySet = mapTyToTySet.has(ty) ?\n                mapTyToTySet.get(ty) as TypeAssertionSetValue :\n                {ty, exported: false, isDeclare: false, resolved: false};\n            tySet.exported = true;\n            return ty;\n        }\n    };\n\n    const external = (...names: (string | [string, TypeAssertion?])[]) => {\n        for (const name of names) {\n            let ty: TypeAssertion = null as any;\n            if (typeof name === 'string') {\n                ty = def(name, operators.primitive('any'));\n            } else {\n                ty = def(name[0], name[1] ? name[1] : operators.primitive('any'));\n            }\n            ty.noOutput = true;\n        }\n    };\n\n    const asConst = (ty: TypeAssertion) => {\n        switch (ty.kind) {\n        case 'enum':\n            // NOTE: `ty` may already `def`ed.\n            ty.isConst = true;\n            break;\n        default:\n            throw new Error(`It cannot set to const: ${ty.kind} ${ty.typeName || '(unnamed)'}`);\n        }\n        return ty;\n    };\n\n    const asDeclare = (ty: TypeAssertion) => {\n        // NOTE: 'ty' should already be registered to 'mapTyToTySet' and 'schema'\n        const tySet = mapTyToTySet.has(ty) ?\n            mapTyToTySet.get(ty) as TypeAssertionSetValue :\n            {ty, exported: false, isDeclare: false, resolved: false};\n        tySet.isDeclare = true;\n        return ty;\n    };\n\n    const passthru = (str: string, docCommentText?: string) => {\n        const ty: TypeAssertion = {\n            kind: 'never',\n            passThruCodeBlock: str || '',\n        };\n        if (docCommentText) {\n            ty.docComment = docCommentText;\n        }\n        schema.set(`__$$$gensym_${gensymCount++}$$$__`, {ty, exported: false, isDeclare: false, resolved: false});\n        return ty;\n    };\n\n    const directive = (name: string, body: string) => {\n        switch (name) {\n        case '@tynder-external':\n            lisp.evaluateAST(parseExternalDirective(`external ${body} ;`) as SxToken[]);\n            break;\n        case '@tynder-pass-through':\n            passthru(body);\n            break;\n        default:\n            throw new Error(`Unknown directive is appeared: ${name}`);\n        }\n        return [];\n    };\n\n    lisp.setGlobals({\n        picked: operators.picked,\n        omit: operators.omit,\n        partial: operators.partial,\n        intersect: operators.intersect,\n        oneOf: operators.oneOf,\n        subtract: operators.subtract,\n        primitive: operators.primitive,\n        primitiveValue: operators.primitiveValue,\n        optional: operators.optional,\n        repeated: operators.repeated,\n        sequenceOf: operators.sequenceOf,\n        spread: operators.spread,\n        enumType: operators.enumType,\n        objectType: operators.objectType,\n        derived: operators.derived,\n        def,\n        ref,\n        redef,\n        export: exported,\n        external,\n        asConst,\n        asDeclare,\n        passthru,\n        directive,\n        docComment: operators.withDocComment,\n        '@range': (minValue: number | string, maxValue: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withRange(minValue, maxValue)(ty),\n        '@minValue': (minValue: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMinValue(minValue)(ty),\n        '@maxValue': (maxValue: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMaxValue(maxValue)(ty),\n        '@greaterThan': (greaterThan: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withGreaterThan(greaterThan)(ty),\n        '@lessThan': (lessThan: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withLessThan(lessThan)(ty),\n        '@minLength': (minLength: number) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMinLength(minLength)(ty),\n        '@maxLength': (maxLength: number) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMaxLength(maxLength)(ty),\n        '@match': (pattern: RegExp) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMatch(pattern)(ty),\n        '@stereotype': (stereotype: string) => (ty: TypeAssertion) =>\n            operators.withStereotype(stereotype)(ty),\n        '@constraint': (name: string, args?: any) => (ty: TypeAssertion) =>\n            operators.withConstraint(name, args)(ty),\n        '@forceCast': () => (ty: TypeAssertion) =>\n            operators.withForceCast()(ty),\n        '@recordType': () => (ty: TypeAssertion) =>\n            operators.withRecordType()(ty),\n        '@meta': (meta: any) => (ty: TypeAssertion) =>\n            operators.withMeta(meta)(ty),\n        '@msg': (messages: string | ErrorMessages) => (ty: TypeAssertion) =>\n            operators.withMsg(messages)(ty),\n        '@msgId': (messageId: string) => (ty: TypeAssertion) =>\n            operators.withMsgId(messageId)(ty),\n    });\n\n    const z = parse(s);\n    lisp.evaluateAST(z as SxToken[]);\n\n    return resolveSchema(schema);\n}\n// tslint:enable: object-literal-key-quotes\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig }       from '../../types';\r\nimport { operators,\r\n         compilationOperators } from './core.operator';\r\nimport { macros,\r\n         compilationMacros }    from './core.macro';\r\nimport symbols                  from './core.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || [])\r\n        .concat(operators)\r\n        .concat(config.enableCompilationOperators ? compilationOperators : []);\r\n    config.macros = (config.macros || [])\r\n        .concat(macros)\r\n        .concat(config.enableCompilationOperators ? compilationMacros : []);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         AdditionalPropsKey,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../../types';\nimport { escapeString }   from '../../lib/escape';\nimport { SymbolPattern }  from '../../lib/util';\n\n\n\nfunction formatTypeName(typeName: string) {\n    if (typeName.includes('.')) {\n        const z = typeName.split('.');\n        let s = z[0];\n        for (let i = 1; i < z.length; i++) {\n            s += `['${escapeString(z[i])}']`\n        }\n        return `(${s})`;\n    }\n    return typeName;\n}\n\n\nfunction formatTypeScriptCodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction generateTypeScriptCodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    // TODO: Function, DateStr, DateTimeStr\n    switch (ty.primitiveName) {\n    case 'integer':\n        return 'number';\n    default:\n        return ty.primitiveName;\n    }\n}\n\n\nfunction generateTypeScriptCodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null) {\n        return 'null';\n    }\n    if (ty.value === void 0) {\n        return 'undefined';\n    }\n    switch (typeof ty.value) {\n    case 'string':\n        return `'${escapeString(ty.value)}'`;\n    case 'bigint':\n        return `${ty.value.toString()}n`;\n    default:\n        return ty.value.toString();\n    }\n}\n\n\nfunction generateTypeScriptCodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext) {\n    return (ty.repeated.kind === 'primitive' ||\n            ty.repeated.kind === 'never' ||\n            ty.repeated.kind === 'any' ||\n            ty.repeated.kind === 'unknown' ||\n            ty.repeated.kind === 'object' ||\n            ty.repeated.kind === 'symlink' ||\n            (ty.repeated.kind === 'one-of' && ty.repeated.typeName) ?\n        `${ty.repeated.typeName ?\n            formatTypeName(ty.repeated.typeName) :\n            generateTypeScriptCodeInner(ty.repeated, false, ctx)}[]` :\n        `Array<${ty.repeated.typeName ?\n            formatTypeName(ty.repeated.typeName) :\n            generateTypeScriptCodeInner(ty.repeated, false, ctx)}>`\n    );\n}\n\n\nfunction generateTypeScriptCodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateTypeScriptCodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    if (0 < ty.sequence.filter(x => x.kind === 'spread' || x.kind === 'optional').length) {\n        return 'any[]';\n    }\n    return `[${\n        ty.sequence\n            .filter(x => x.kind !== 'spread' && x.kind !== 'optional')\n            .map(x => x.typeName ?\n                formatTypeName(x.typeName) :\n                generateTypeScriptCodeInner(x, false, {...ctx, nestLevel: ctx.nestLevel + 1}))\n            .join(', ')}]`;\n}\n\n\nfunction generateTypeScriptCodeOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    return `(${ty.oneOf\n        .map(x => x.typeName ?\n            formatTypeName(x.typeName) :\n            generateTypeScriptCodeInner(x, false, ctx)).join(' | ')})`;\n}\n\n\nfunction generateTypeScriptCodeOptional(ty: OptionalAssertion, ctx: CodegenContext) {\n    return generateTypeScriptCodeInner(ty.optional, false, ctx);\n}\n\n\nfunction generateTypeScriptCodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return `(${ty.values.map(x => `${x[1]}`).join(' | ')})`;\n}\n\n\nfunction formatAdditionalPropsName(ak: AdditionalPropsKey, i: number) {\n    return (`[propName${i}: ${ak.map(x => typeof x === 'string' ? x : 'string').join(' | ')}]`);\n}\n\n\nfunction generateTypeScriptCodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    if (ty.members.filter(x => !(x[2])).length === 0 &&\n        ty.additionalProps?.filter(x => !(x[2])).length === 0) {\n        return '{}';\n    }\n    // NOTE: Semicolon is always preferred.\n    // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/member-delimiter-style.md\n    const sep = isInterface ? ';\\n' : ';\\n';\n\n    const memberLines =\n        ty.members.filter(x => !(x[2]))\n        .map(x =>\n            `${formatTypeScriptCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                SymbolPattern.test(x[0]) ? x[0] : `'${escapeString(x[0])}'`}${\n                    x[1].kind === 'optional' ? '?' : ''}: ${\n                x[1].typeName ?\n                    formatTypeName(x[1].typeName) :\n                    generateTypeScriptCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})}`);\n\n    const additionalPropsLines =\n        ty.additionalProps?.filter(x => !(x[2]))\n        .map((x, i) =>\n            `${formatTypeScriptCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                formatAdditionalPropsName(x[0], i)}${x[1].kind === 'optional' ? '?' : ''}: ${\n                x[1].typeName ?\n                    formatTypeName(x[1].typeName) :\n                    generateTypeScriptCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})}`) || [];\n\n    const propsLines = memberLines.concat(additionalPropsLines);\n    if (propsLines.length === 0) {\n        return '{}';\n    }\n    return (\n        `{\\n${propsLines.join(sep)}${sep}${'    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateTypeScriptCodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext): string {\n    switch (ty.kind) {\n    case 'never':\n        return 'never';\n    case 'any':\n        return 'any';\n    case 'unknown':\n        return 'unknown';\n    case 'primitive':\n        return generateTypeScriptCodePrimitive(ty, ctx);\n    case 'primitive-value':\n        return generateTypeScriptCodePrimitiveValue(ty, ctx);\n    case 'repeated':\n        return generateTypeScriptCodeRepeated(ty, ctx);\n    case 'spread':\n        return generateTypeScriptCodeSpread(ty, ctx);\n    case 'sequence':\n        return generateTypeScriptCodeSequence(ty, ctx);\n    case 'one-of':\n        return generateTypeScriptCodeOneOf(ty, ctx);\n    case 'optional':\n        return generateTypeScriptCodeOptional(ty, ctx);\n    case 'enum':\n        return generateTypeScriptCodeEnum(ty, ctx);\n    case 'object':\n        return generateTypeScriptCodeObject(ty, isInterface, ctx);\n    case 'symlink':\n        return ty.symlinkTargetName;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateTypeScriptCode(types: TypeAssertionMap): string {\n    let code = '';\n    const ctx = {nestLevel: 0};\n    for (const ty of types.entries()) {\n        if (ty[1].ty.noOutput) {\n            continue;\n        }\n        code += formatTypeScriptCodeDocComment(ty[1].ty, ctx.nestLevel);\n        if (ty[1].exported) {\n            code += 'export ';\n        }\n        if (ty[1].isDeclare) {\n            code += 'declare ';\n        }\n        if (ty[1].ty.kind === 'object') {\n            code += `interface ${ty[0]}${\n                ty[1].ty.baseTypes && ty[1].ty.baseTypes.length ? ` extends ${\n                    ty[1].ty.baseTypes\n                        .filter(x => x.typeName)\n                        .map(x => formatTypeName(x.typeName as string))\n                        .join(', ')}` : ''} ${\n                generateTypeScriptCodeInner(ty[1].ty, true, ctx)}\\n\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            let value: number | null = 0;\n            code += `${ty[1].ty.isConst ? 'const ' : ''}enum ${ty[0]} {\\n${\n                ty[1].ty.values\n                    .map(x => `${\n                        formatTypeScriptCodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                        indent1}${(() => {\n                            if (value !== null && x[1] === value) {\n                                value++;\n                                return `${x[0]}`;\n                            } else {\n                                if (typeof x[1] === 'number') {\n                                    value = x[1] + 1;\n                                    return `${x[0]} = ${x[1]}`;\n                                } else {\n                                    return `${x[0]} = '${escapeString(x[1])}'`;\n                                }\n                            }\n                        })()},\\n`)\n                    .join('')}${indent0}}\\n\\n`;\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            code += `${ty[1].ty.passThruCodeBlock}\\n\\n`;\n        } else {\n            code += `type ${ty[0]} = ${\n                (ty[1].ty.originalTypeName ?\n                    formatTypeName(ty[1].ty.originalTypeName) :\n                    void 0) ||\n                generateTypeScriptCodeInner(ty[1].ty, false, ctx)};\\n\\n`;\n        }\n    }\n    return code;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         TypeAssertionMap } from '../../types';\nimport * as JsonSchema      from '../../types/json-schema-types';\n\n\n\nfunction addMetaInfo(a: JsonSchema.JsonSchemaAssertion, ty: TypeAssertion) {\n    const a2 = {...a};\n    let changed = false;\n\n    if (ty.docComment) {\n        a2.description = ty.docComment;\n        changed = true;\n    }\n    switch (ty.kind) {\n    case 'repeated':\n        if (typeof ty.min === 'number') {\n            (a2 as JsonSchema.JsonSchemaArrayAssertion).minItems = ty.min;\n            changed = true;\n        }\n        if (typeof ty.max === 'number') {\n            (a2 as JsonSchema.JsonSchemaArrayAssertion).maxItems = ty.max;\n            changed = true;\n        }\n        break;\n    case 'primitive':\n        if (typeof ty.minValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).minimum = ty.minValue;\n            changed = true;\n        }\n        if (typeof ty.maxValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).maximum = ty.maxValue;\n            changed = true;\n        }\n        if (typeof ty.greaterThanValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).exclusiveMinimum = ty.greaterThanValue;\n            changed = true;\n        }\n        if (typeof ty.lessThanValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).exclusiveMaximum = ty.lessThanValue;\n            changed = true;\n        }\n        if (typeof ty.minLength === 'number') {\n            (a2 as JsonSchema.JsonSchemaStringAssertion).minLength = ty.minLength;\n            changed = true;\n        }\n        if (typeof ty.maxLength === 'number') {\n            (a2 as JsonSchema.JsonSchemaStringAssertion).maxLength = ty.maxLength;\n            changed = true;\n        }\n        if (ty.pattern) {\n            (a2 as JsonSchema.JsonSchemaStringAssertion).pattern = ty.pattern.source;\n            changed = true;\n        }\n        break;\n    }\n    return (changed ? a2 : a);\n}\n\nfunction generateJsonSchemaInner(schema: TypeAssertionMap, ty: TypeAssertion, nestLevel: number): JsonSchema.JsonSchemaAssertion {\n    if (0 < nestLevel && ty.typeName) {\n        const ret: JsonSchema.JsonSchemaRefAssertion = {\n            $ref: `#/definitions/${ty.typeName.replace(/\\./g, '/properties/')}`,\n        };\n        const r2 = addMetaInfo(ret, ty);\n        if (ret !== r2) {\n            // NOTE: `$ref` cannot have value constraints.\n            return generateJsonSchemaInner(schema, ty, 0);\n        } else {\n            return ret;\n        }\n    }\n\n    switch (ty.kind) {\n    case 'symlink':\n        {\n            const ret: JsonSchema.JsonSchemaRefAssertion = {\n                $ref: `#/definitions/${ty.symlinkTargetName}`,\n            };\n            const r2 = addMetaInfo(ret, ty);\n            if (ret !== r2) {\n                // NOTE: `$ref` cannot have value constraints.\n                const t2 = schema.get(ty.symlinkTargetName)?.ty;\n                if (t2) {\n                    return generateJsonSchemaInner(schema, t2, 0);\n                } else {\n                    // Drop constraints.\n                    return ret;\n                }\n            } else {\n                return ret;\n            }\n        }\n    case 'repeated':\n        {\n            const ret: JsonSchema.JsonSchemaArrayAssertion = {\n                type: 'array',\n                items: generateJsonSchemaInner(schema, ty.repeated, nestLevel + 1),\n            };\n            if (typeof ty.min === 'number') {\n                ret.minItems = ty.min;\n            }\n            if (typeof ty.max === 'number') {\n                ret.maxItems = ty.max;\n            }\n            return addMetaInfo(ret, ty);\n        }\n    case 'sequence':\n        {\n            const ret: JsonSchema.JsonSchemaArrayAssertion = {\n                type: 'array',\n                items: { anyOf: ty.sequence.map(x => generateJsonSchemaInner(schema, x, nestLevel + 1)) },\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'spread':\n        {\n            return generateJsonSchemaInner(schema, ty.spread, nestLevel + 1);\n        }\n    case 'one-of':\n        {\n            const ret: JsonSchema.JsonSchemaAnyOfAssertion = {\n                anyOf: ty.oneOf.map(x => generateJsonSchemaInner(schema, x, nestLevel + 1)),\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'optional':\n        {\n            const ret: JsonSchema.JsonSchemaOneOfAssertion = {\n                oneOf: [\n                    generateJsonSchemaInner(schema, ty.optional, nestLevel + 1),\n                    {type: 'null'},\n                ],\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'enum':\n        {\n            const ret: JsonSchema.JsonSchemaTsEnumAssertion = {\n                type: ['string', 'number'],\n                enum: ty.values.map(x => x[1]),\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'object':\n        {\n            const properties: JsonSchema.JsonSchemaObjectPropertyAssertion = {};\n            const patternProperties: JsonSchema.JsonSchemaObjectPropertyAssertion = {};\n            let patternPropsCount = 0;\n            const required: string[] = [];\n            for (const m of ty.members) {\n                const z = generateJsonSchemaInner(schema,\n                    m[1].kind === 'optional' ?\n                        m[1].optional :\n                        m[1],\n                    nestLevel + 1);\n\n                if (m[3]) {\n                    z.description = m[3];\n                } else {\n                    delete z.description;\n                }\n                properties[m[0]] = z;\n\n                if (m[1].kind !== 'optional') {\n                    required.push(m[0]);\n                }\n            }\n            for (const m of ty.additionalProps || []) {\n                const z = generateJsonSchemaInner(schema, m[1], nestLevel + 1);\n                if (m[3]) {\n                    z.description = m[3];\n                } else {\n                    delete z.description;\n                }\n                for (const k of m[0]) {\n                    patternPropsCount++;\n                    switch (k) {\n                    case 'number':\n                        patternProperties['^[0-9]+$'] = z;\n                        break;\n                    case 'string':\n                        patternProperties['^.*$'] = z;\n                        break;\n                    default:\n                        patternProperties[k.source] = z;\n                        break;\n                    }\n                }\n            }\n            const ret: JsonSchema.JsonSchemaObjectAssertion = {\n                type: 'object',\n                properties,\n                ...(0 < patternPropsCount ? {patternProperties} : {}),\n                ...(0 < required.length ? {required} : {}),\n                additionalProperties: false,\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'primitive':\n        {\n            switch (ty.primitiveName) {\n            case 'null': case 'undefined':\n                {\n                    const ret: JsonSchema.JsonSchemaNullAssertion = {\n                        type: 'null',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'number':\n                {\n                    const ret: JsonSchema.JsonSchemaNumberAssertion = {\n                        type: 'number',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'bigint':\n                {\n                    const ret: JsonSchema.JsonSchemaBigIntAssertion = {\n                        type: ['integer', 'string'],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'integer':\n                {\n                    const ret: JsonSchema.JsonSchemaNumberAssertion = {\n                        type: 'integer',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'string':\n                {\n                    const ret: JsonSchema.JsonSchemaStringAssertion = {\n                        type: 'string',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'boolean':\n                {\n                    const ret: JsonSchema.JsonSchemaBooleanAssertion = {\n                        type: 'boolean',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            }\n            // TODO: Function, DateStr, DateTimeStr\n        }\n    case 'primitive-value':\n        {\n            switch (typeof ty.value) {\n            case 'number':\n                {\n                    const ret: JsonSchema.JsonSchemaNumberValueAssertion = {\n                        type: 'number',\n                        enum: [ty.value],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'bigint':\n                {\n                    const ret: JsonSchema.JsonSchemaBigIntNumberValueAssertion = {\n                        type: ['integer', 'string'],\n                        enum: [ty.value.toString()],\n                    };\n                    if (BigInt(Number.MIN_SAFE_INTEGER) <= ty.value && ty.value <= BigInt(Number.MAX_SAFE_INTEGER)) {\n                        ret.enum.push(Number(ty.value));\n                    }\n                    return addMetaInfo(ret, ty);\n                }\n            case 'string':\n                {\n                    const ret: JsonSchema.JsonSchemaStringValueAssertion = {\n                        type: 'string',\n                        enum: [ty.value],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'boolean':\n                {\n                    const ret: JsonSchema.JsonSchemaBooleanValueAssertion = {\n                        type: 'boolean',\n                        enum: [ty.value],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            default:\n                throw new Error(`Unknown primitive-value assertion: ${typeof ty.value}`);\n            }\n        }\n    case 'never':\n        {\n            const ret: JsonSchema.JsonSchemaNullAssertion = {\n                type: 'null',\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'any': case 'unknown':\n        {\n            const ret: JsonSchema.JsonSchemaAnyAssertion = {\n                type: ['null', 'integer', 'number', 'string', 'boolean', 'array', 'object'],\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateJsonSchemaObject(schema: TypeAssertionMap) {\n    const ret: JsonSchema.JsonSchemaRootAssertion = {\n        $schema: 'http://json-schema.org/draft-06/schema#',\n        definitions: {},\n    };\n    for (const ty of schema.entries()) {\n        if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            continue;\n        }\n        (ret.definitions as object)[ty[0]] = generateJsonSchemaInner(schema, ty[1].ty, 0);\n    }\n    return ret;\n}\n\n\nexport function generateJsonSchema(schema: TypeAssertionMap, asTs?: boolean): string {\n    const ret = generateJsonSchemaObject(schema);\n\n    if (asTs) {\n        return (\n            `\\n// tslint:disable: object-literal-key-quotes\\n` +\n            `const schema = ${JSON.stringify(ret, null, 2)};\\nexport default schema;` +\n            `\\n// tslint:enable: object-literal-key-quotes\\n`\n        );\n    } else {\n        return JSON.stringify(ret, null, 2);\n    }\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../../types';\nimport { escapeString }   from '../../lib/escape';\n\n\n\nfunction formatTypeName(ty: TypeAssertion, ctx: CodegenContext, typeName: string) {\n    if (typeName.includes('.')) {\n        return generateProto3CodeInner(ty, false, ctx);\n    }\n    return typeName;\n}\n\n\nfunction formatProto3CodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction formatMemberType(ty: TypeAssertion, ctx: CodegenContext): string {\n    if (ty.typeName) {\n        return formatTypeName(ty, ctx, ty.typeName);\n    } else {\n        switch (ty.kind) {\n        case 'primitive':\n            return generateProto3CodePrimitive(ty, ctx);\n        case 'primitive-value':\n            return generateProto3CodePrimitiveValue(ty, ctx);\n        case 'repeated':\n            return generateProto3CodeRepeated(ty, ctx);\n        case 'one-of':\n            return generateProto3CodeOneOf(ty, ctx);\n        default:\n            return 'object';\n        }\n    }\n}\n\n\nfunction appendOptionalModifier(name: string) {\n    switch (name) {\n    case 'double':\n        return 'google.protobuf.DoubleValue';\n    case 'int64':\n        return 'google.protobuf.Int64Value';\n    case 'int32':\n        return 'google.protobuf.Int32Value';\n    case 'string':\n        return 'google.protobuf.StringValue';\n    case 'bool':\n        return 'google.protobuf.BoolValue';\n    default:\n        return name;\n    }\n}\n\n\nfunction isNullableOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    const filtered = ty.oneOf.filter(x => !(\n        x.kind === 'primitive' && (x.primitiveName === 'null' || x.primitiveName === 'undefined') ||\n        x.kind === 'primitive-value' && (x.value === null || x.value === void 0)));\n    return (filtered.length === 1 && ty.oneOf.length !== 1 ? filtered[0] : null) ;\n}\n\n\nfunction generateProto3CodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    switch (ty.primitiveName) {\n    case 'number':\n        return 'double';\n    case 'integer':\n        return 'int32';\n    case 'bigint':\n        return 'string';\n    case 'string':\n        return 'string';\n    case 'boolean':\n        return 'bool';\n    case 'undefined': case 'null': default:\n        return 'google.protobuf.Any';\n    }\n    // TODO: Function, integer, DateStr, DateTimeStr\n}\n\n\nfunction generateProto3CodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null) {\n        return 'google.protobuf.Any';\n    }\n    if (ty.value === void 0) {\n        return 'google.protobuf.Any';\n    }\n    switch (typeof ty.value) {\n    case 'number':\n        return 'double';\n    case 'bigint':\n        return 'string';\n    case 'string':\n        return 'string';\n    case 'boolean':\n        return 'bool';\n    default:\n        return 'google.protobuf.Any';\n    }\n}\n\n\nfunction generateProto3CodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext) {\n    return (`repeated ${ty.repeated.typeName ?\n            formatTypeName(ty.repeated, ctx, ty.repeated.typeName) :\n            ty.repeated.kind === 'repeated' ?\n                'google.protobuf.Any' :\n                generateProto3CodeInner(ty.repeated, false, ctx)}`\n    );\n}\n\n\nfunction generateProto3CodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateProto3CodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    return 'repeated google.protobuf.Any';\n}\n\n\nfunction generateProto3CodeOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    const z = isNullableOneOf(ty, ctx);\n    if (z) {\n        return appendOptionalModifier(formatMemberType(z, ctx));\n    } else {\n        return 'google.protobuf.Any';\n    }\n}\n\n\nfunction generateProto3CodeOptional(ty: OptionalAssertion, ctx: CodegenContext) {\n    return appendOptionalModifier(generateProto3CodeInner(ty.optional, false, ctx));\n}\n\n\nfunction generateProto3CodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return (ty.typeName ?\n        formatTypeName(ty, ctx, ty.typeName) :\n        'google.protobuf.Any'\n    );\n}\n\n\nfunction generateProto3CodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    if (ty.members.length === 0) {\n        return '{}';\n    }\n    const sep = isInterface ? ';\\n' : ',\\n';\n    let count = 1;\n\n    const memberLines =\n        ty.members\n        .map(x =>\n            `${formatProto3CodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                x[1].typeName ?\n                    formatTypeName(x[1], {...ctx, nestLevel: ctx.nestLevel + 1}, x[1].typeName) :\n                    generateProto3CodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})} ${\n                x[0]} = ${count++}`);\n\n    return (\n        `{\\n${memberLines.join(sep)}${sep}${'    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateProto3CodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext): string {\n    switch (ty.kind) {\n    case 'never': case 'any': case 'unknown':\n        return 'google.protobuf.Any';\n    case 'primitive':\n        return generateProto3CodePrimitive(ty, ctx);\n    case 'primitive-value':\n        return generateProto3CodePrimitiveValue(ty, ctx);\n    case 'repeated':\n        return generateProto3CodeRepeated(ty, ctx);\n    case 'spread':\n        return generateProto3CodeSpread(ty, ctx);\n    case 'sequence':\n        return generateProto3CodeSequence(ty, ctx);\n    case 'one-of':\n        return generateProto3CodeOneOf(ty, ctx);\n    case 'optional':\n        return generateProto3CodeOptional(ty, ctx);\n    case 'enum':\n        return generateProto3CodeEnum(ty, ctx);\n    case 'object':\n        return generateProto3CodeObject(ty, isInterface, ctx);\n    case 'symlink':\n        return ty.symlinkTargetName;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateProto3Code(types: TypeAssertionMap): string {\n    let code =\n`\nsyntax = \"proto3\";\nimport \"google/protobuf/wrappers.proto\";\nimport \"google/protobuf/any.proto\";\n\n`;\n\n    const ctx = {nestLevel: 0};\n    for (const ty of types.entries()) {\n        if (ty[1].ty.noOutput) {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            code += `message ${ty[0]} {\\n${indent1}google.protobuf.Any value = 1;\\n${indent0}}\\n\\n`;\n            continue;\n        }\n        code += formatProto3CodeDocComment(ty[1].ty, ctx.nestLevel);\n        if (ty[1].ty.kind === 'object') {\n            code += `message ${ty[0]} ${\n                generateProto3CodeInner(ty[1].ty, true, ctx)}\\n\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            if (0 < ty[1].ty.values.filter(x => typeof x[1] !== 'number').length) {      // NOTE: string enum is not allowed\n                code += `message ${ty[0]} {\\n${indent1}google.protobuf.Any value = 1;\\n${indent0}}\\n\\n`;\n            } else {\n                code += `enum ${ty[0]} {\\n${\n                    indent1}option allow_alias = true;\\n${\n                    ty[1].ty.values.filter(x => x[1] === 0).length === 0 ?\n                        `${indent1}${ty[0]}__UNKNOWN__ = 0;\\n` :                        // NOTE: 0 value item is required\n                        ''}${\n                    ty[1].ty.values\n                        .map(x => `${\n                            formatProto3CodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                            indent1}${(() => {\n                                if (typeof x[1] === 'number') {\n                                    return `${ty[0]}_${x[0]} = ${x[1]}`;                 // NOTE: label namespace is shared by all top-level enum\n                                } else {\n                                    return `${ty[0]}_${x[0]} = '${escapeString(x[1])}'`; // NOTE: string enum is not allowed\n                                }\n                            })()};\\n`)\n                        .join('')}${indent0}}\\n\\n`;\n            }\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            // nothing to do\n        } else {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            code += `message ${ty[0]} {\\n${indent1}${generateProto3CodeInner(ty[1].ty, false, ctx)} value = 1;\\n${indent0}}\\n\\n`;\n        }\n    }\n    return code;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../../types';\n\n\n\nfunction formatTypeName(ty: TypeAssertion, ctx: CodegenContext, typeName: string) {\n    if (typeName.includes('.')) {\n        return generateGraphQlCodeInner(ty, false, ctx, false);\n    }\n    return typeName;\n}\n\n\nfunction formatGraphQlCodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction isNullableOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    const filtered = ty.oneOf.filter(x => !(\n        x.kind === 'primitive' && (x.primitiveName === 'null' || x.primitiveName === 'undefined') ||\n        x.kind === 'primitive-value' && (x.value === null || x.value === void 0)));\n    return (filtered.length === 1 && ty.oneOf.length !== 1 ? filtered[0] : null) ;\n}\n\n\nfunction generateGraphQlCodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    switch (ty.primitiveName) {\n    case 'number':\n        return 'Float';\n    case 'integer':\n        return 'Int';\n    case 'bigint':\n        return 'BigInt';\n    case 'string':\n        return 'String';\n    case 'boolean':\n        return 'Boolean';\n    case 'undefined': case 'null': default:\n        return 'Any'; // TODO: Any is invalid type.\n    }\n    // TODO: Function, DateStr, DateTimeStr\n}\n\n\nfunction generateGraphQlCodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null) {\n        return 'Any'; // TODO: Any is invalid type.\n    }\n    if (ty.value === void 0) {\n        return 'Any'; // TODO: Any is invalid type.\n    }\n    switch (typeof ty.value) {\n        case 'number':\n            return 'Float';\n        case 'bigint':\n            return 'BigInt';\n        case 'string':\n            return 'String';\n        case 'boolean':\n            return 'Boolean';\n        default:\n            return 'Any'; // TODO: Any is invalid type.\n    }\n}\n\n\nfunction generateGraphQlCodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext) {\n    return (`[${ty.repeated.typeName ?\n            formatTypeName(ty.repeated, ctx, ty.repeated.typeName) :\n            generateGraphQlCodeInner(ty.repeated, false, ctx, false)}${\n                (ty.repeated.kind === 'optional' ||\n                 ty.repeated.kind === 'one-of' && isNullableOneOf(ty.repeated, ctx)) ?\n                    '' : '!'}]`\n    );\n}\n\n\nfunction generateGraphQlCodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateGraphQlCodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    return '[Any]'; // TODO: Any is invalid type.\n}\n\n\nfunction generateGraphQlCodeOneOf(ty: OneOfAssertion, ctx: CodegenContext, isUnion: boolean) {\n    const z = isNullableOneOf(ty, ctx);\n    if (z) {\n        return z.typeName ?\n            z.typeName :\n            generateGraphQlCodeInner(z, false, ctx, false);\n    } else {\n        if (isUnion) {\n            return `${ty.oneOf\n                .map(x => x.typeName ?\n                    x.typeName :\n                    generateGraphQlCodeInner(x, false, ctx, false)).join(' | ')}`;\n        } else {\n            return 'Any'; // TODO: Any is invalid type.\n        }\n    }\n}\n\n\nfunction generateGraphQlCodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return (ty.typeName ?\n        formatTypeName(ty, ctx, ty.typeName) :\n        'Any'\n    );\n}\n\n\nfunction generateGraphQlCodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    if (ty.members.length === 0) {\n        return '{}';\n    }\n    const sep = '\\n';\n\n    const memberLines =\n        ty.members\n        .map(x =>\n            `${formatGraphQlCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                x[0]}: ${\n                x[1].typeName ?\n                    formatTypeName(x[1], {...ctx, nestLevel: ctx.nestLevel + 1}, x[1].typeName) :\n                    generateGraphQlCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1}, false)}${\n                (x[1].kind === 'optional' ||\n                 x[1].kind === 'one-of' && isNullableOneOf(x[1], ctx)) ?\n                    '' : '!'}`);\n\n    return (\n        `{\\n${memberLines.join(sep)}${sep}${'    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateGraphQlCodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext, isUnion: boolean): string {\n    let ret = '';\n\n    switch (ty.kind) {\n    case 'optional':\n        return generateGraphQlCodeInner(ty.optional, isInterface, ctx, false);\n    case 'one-of':\n        return generateGraphQlCodeOneOf(ty, ctx, isUnion); // TODO: inline union is invalid.\n    case 'spread':\n        return generateGraphQlCodeSpread(ty, ctx);\n    case 'sequence':\n        return generateGraphQlCodeSequence(ty, ctx);\n    case 'never':\n        ret = 'Any'; // TODO: Any is invalid type.\n        break;\n    case 'any':\n        ret = 'Any'; // TODO: Any is invalid type.\n        break;\n    case 'unknown':\n        ret = 'Any'; // TODO: Any is invalid type.\n        break;\n    case 'primitive':\n        ret = generateGraphQlCodePrimitive(ty, ctx);\n        break;\n    case 'primitive-value':\n        ret = generateGraphQlCodePrimitiveValue(ty, ctx);\n        break;\n    case 'repeated':\n        ret = generateGraphQlCodeRepeated(ty, ctx);\n        break;\n    case 'enum':\n        ret = generateGraphQlCodeEnum(ty, ctx);\n        break;\n    case 'object':\n        ret = generateGraphQlCodeObject(ty, isInterface, ctx);\n        break;\n    case 'symlink':\n        ret = ty.symlinkTargetName;\n        break;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n    return ret + '';\n}\n\n\nexport function generateGraphQlCode(types: TypeAssertionMap): string {\n    let code = `\\nscalar Any\\nunion BigInt = String | Int\\n\\n`;\n\n    const ctx = {nestLevel: 0};\n    for (const ty of types.entries()) {\n        if (ty[1].ty.noOutput) {\n            code += `scalar ${ty[0]}\\n\\n`;\n            continue;\n        }\n        code += formatGraphQlCodeDocComment(ty[1].ty, ctx.nestLevel);\n        if (ty[1].ty.kind === 'object') {\n            code += `type ${ty[0]} ${\n                generateGraphQlCodeInner(ty[1].ty, true, ctx, false)}\\n\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            code += `enum ${ty[0]} {\\n${\n                ty[1].ty.values\n                    .map(x => `${\n                        formatGraphQlCodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                        indent1}${x[0]}\\n`)\n                    .join('')}${indent0}}\\n\\n`;\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            // nothing to do\n        } else {\n            code += `union ${ty[0]} = ${generateGraphQlCodeInner(ty[1].ty, false, ctx, true)}\\n\\n`;\n        }\n    }\n    return code;\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../../types';\nimport { escapeString }   from '../../lib/escape';\nimport { nvl2 }           from './../util';\n\n\n\nfunction formatTypeName(ty: TypeAssertion, ctx: CodegenContext, typeName: string) {\n    if (typeName.includes('.') || ty.kind === 'symlink' || ty.kind === 'enum') {\n        return generateCSharpCodeInner(ty, false, ctx);\n    }\n    return typeName;\n}\n\n\nfunction formatCSharpCodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction formatMemberType(ty: TypeAssertion, ctx: CodegenContext): string {\n    if (ty.typeName) {\n        return formatTypeName(ty, ctx, ty.typeName);\n    } else {\n        switch (ty.kind) {\n        case 'primitive':\n            return generateCSharpCodePrimitive(ty, ctx);\n        case 'primitive-value':\n            return generateCSharpCodePrimitiveValue(ty, ctx);\n        case 'repeated':\n            return generateCSharpCodeRepeated(ty, ctx);\n        case 'one-of':\n            return generateCSharpCodeOneOf(ty, ctx);\n        default:\n            return 'object';\n        }\n    }\n}\n\n\nfunction appendOptionalModifier(name: string) {\n    switch (name) {\n    case 'decimal': case 'int': case 'double': case 'bool':\n        return `${name}?`;\n    default:\n        return name;\n    }\n}\n\n\nfunction isNullableOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    const filtered = ty.oneOf.filter(x => !(\n        x.kind === 'primitive' && (x.primitiveName === 'null' || x.primitiveName === 'undefined') ||\n        x.kind === 'primitive-value' && (x.value === null || x.value === void 0)));\n    return (filtered.length === 1 && ty.oneOf.length !== 1 ? filtered[0] : null) ;\n}\n\n\nfunction generateCSharpCodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    // TODO: Function, DateStr, DateTimeStr\n    switch (ty.primitiveName) {\n    case 'null': case 'undefined':\n        return 'object';\n    case 'integer':\n        return 'int';\n    case 'bigint':\n        return 'decimal';\n    case 'number':\n        return 'double';\n    case 'boolean':\n        return 'bool';\n    default:\n        return ty.primitiveName;\n    }\n}\n\n\nfunction generateCSharpCodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null || ty.value === void 0) {\n        return 'object';\n    }\n    switch (typeof ty.primitiveName) {\n    case 'bigint':\n        return 'decimal';\n    default:\n        switch (typeof ty.value) {\n        case 'number':\n            return 'double';\n        case 'string':\n            return 'string';\n        case 'boolean':\n            return 'bool';\n        default:\n            return 'object';\n        }\n    }\n}\n\n\nfunction generateCSharpCodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext): string {\n    return `${formatMemberType(ty.repeated, ctx)}[]`;\n}\n\n\nfunction generateCSharpCodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateCSharpCodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    return 'object[]';\n}\n\n\nfunction generateCSharpCodeOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    const z = isNullableOneOf(ty, ctx);\n    if (z) {\n        return appendOptionalModifier(formatMemberType(z, ctx));\n    } else {\n        return 'object';\n    }\n}\n\n\nfunction generateCSharpCodeOptional(ty: OptionalAssertion, ctx: CodegenContext) {\n    return appendOptionalModifier(generateCSharpCodeInner(ty.optional, false, ctx));\n}\n\n\nfunction generateCSharpCodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return 'object';\n}\n\n\nfunction addAttributes(ty: TypeAssertion, ctx: CodegenContext, typeName: string) {\n    const attrs: string[] = [];\n    let ty2: TypeAssertion = ty;\n\n    if (ty2.kind !== 'optional') {\n        switch (typeName) {\n        case 'decimal': case 'int': case 'double': case 'bool':\n            break;\n        default:\n            if (ty2.kind === 'one-of') {\n                if (! isNullableOneOf(ty2, ctx)) {\n                    attrs.push('Required');\n                }\n            } else {\n                attrs.push('Required');\n            }\n            break;\n        }\n        ty2 = ty;\n    }\n\n    switch (ty2.kind) {\n    case 'primitive':\n        {\n            if (typeof ty2.minLength === 'number') {\n                attrs.push(`MinLength(${ty2.minLength})`);\n            }\n            if (typeof ty2.maxLength === 'number') {\n                attrs.push(`MaxLength(${ty2.maxLength})`);\n            }\n            if (ty2.minValue !== null && ty2.minValue !== void 0 ||\n                ty2.maxValue !== null && ty2.maxValue !== void 0) {\n                switch (ty2.primitiveName) {\n                case 'string':\n                    attrs.push(`Range(typeof(string), \"${\n                        nvl2(ty2.minValue, x => escapeString(x), '')}\", \"${\n                        nvl2(ty2.maxValue, x => escapeString(x), '\\\\U00010FFFF')}\")`);\n                    break;\n                case 'bigint':\n                    attrs.push(`Range(typeof(decimal), ${\n                        nvl2(ty2.minValue, x => `new decimal(@\"${String(x)}\").ToString()`, 'Decimal.MinValue')}, ${\n                        nvl2(ty2.maxValue, x => `new decimal(@\"${String(x)}\").ToString()`, 'Decimal.MaxValue')})`);\n                    break;\n                case 'integer':\n                    attrs.push(`Range(${\n                        nvl2(ty2.minValue, x => `(int)${String(x)}`, 'Int32.MinValue')}, ${\n                        nvl2(ty2.maxValue, x => `(int)${String(x)}`, 'Int32.MaxValue')})`);\n                    break;\n                case 'number':\n                    attrs.push(`Range(${\n                        nvl2(ty2.minValue, x => `(double)${String(x)}`, 'Double.MinValue')}, ${\n                        nvl2(ty2.maxValue, x => `(double)${String(x)}`, 'Double.MaxValue')})`);\n                    break;\n                }\n            }\n            if (ty2.pattern) {\n                attrs.push(`RegularExpression(@\"${ty2.pattern.source.replace(/\"/g, '\"\"')}\")`);\n            }\n        }\n        break;\n    case 'repeated':\n        {\n            if (typeof ty2.min === 'number') {\n                attrs.push(`MinLength(${ty2.min})`);\n            }\n            if (typeof ty2.max === 'number') {\n                attrs.push(`MaxLength(${ty2.max})`);\n            }\n        }\n        break;\n    }\n\n    if (0 < attrs.length) {\n        return `[${attrs.join(', ')}]\\n${'    '.repeat(ctx.nestLevel + 1)}`;\n    } else{\n        return '';\n    }\n}\n\n\nfunction generateCSharpCodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    const sep = '\\n\\n';\n\n    const memberLines =\n        ty.members.filter(x => !(x[2]))\n        .map(x => {\n            const typeName =\n                x[1].typeName ?\n                    formatTypeName(x[1], {...ctx, nestLevel: ctx.nestLevel + 1}, x[1].typeName) :\n                    generateCSharpCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1});\n\n            return (\n                `${formatCSharpCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                    '    '.repeat(ctx.nestLevel + 1)}${addAttributes(x[1], ctx, typeName)}public ${\n                    typeName} ${x[0]} { get; set; }`\n            );\n        });\n\n    if (memberLines.length === 0) {\n        return (`\\n${\n            '    '.repeat(ctx.nestLevel)}{\\n${\n            '    '.repeat(ctx.nestLevel)}}`\n        );\n    }\n    return (`\\n${\n        '    '.repeat(ctx.nestLevel)}{\\n${memberLines.join(sep)}\\n${\n        '    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateCSharpCodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext): string {\n    switch (ty.kind) {\n    case 'never': case 'any': case 'unknown':\n        return 'object';\n    case 'primitive':\n        return generateCSharpCodePrimitive(ty, ctx);\n    case 'primitive-value':\n        return generateCSharpCodePrimitiveValue(ty, ctx);\n    case 'repeated':\n        return generateCSharpCodeRepeated(ty, ctx);\n    case 'spread':\n        return generateCSharpCodeSpread(ty, ctx);\n    case 'sequence':\n        return generateCSharpCodeSequence(ty, ctx);\n    case 'one-of':\n        return generateCSharpCodeOneOf(ty, ctx);\n    case 'optional':\n        return generateCSharpCodeOptional(ty, ctx);\n    case 'enum':\n        return generateCSharpCodeEnum(ty, ctx);\n    case 'object':\n        return generateCSharpCodeObject(ty, isInterface, ctx);\n    case 'symlink':\n        if (ctx.schema?.has(ty.symlinkTargetName)) {\n            const target = ctx.schema.get(ty.symlinkTargetName);\n            switch (target?.ty.kind) {\n            case 'enum':\n                return 'object';\n            }\n        }\n        return ty.symlinkTargetName;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateCSharpCode(schema: TypeAssertionMap): string {\n    let code =\n`using System.ComponentModel.DataAnnotations;\n\nnamespace Tynder.UserSchema\n{\n`;\n\n    const ctx: CodegenContext = {\n        nestLevel: 1,\n        schema,\n    };\n\n    for (const ty of schema.entries()) {\n        const indent0 = '    '.repeat(ctx.nestLevel);\n\n        if (ty[1].ty.kind === 'object') {\n            // nothing to do\n        } else if (ty[1].ty.kind === 'enum') {\n            // nothing to do\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            // nothing to do\n        } else {\n            code += formatCSharpCodeDocComment(ty[1].ty, ctx.nestLevel);\n            let tyName = 'System.Object';\n            switch (ty[1].ty.kind) {\n            case 'primitive':\n                switch (ty[1].ty.primitiveName) {\n                case 'integer':\n                    tyName =  'System.Int32';\n                    break;\n                case 'bigint':\n                    tyName =  'System.Decimal';\n                    break;\n                case 'number':\n                    tyName =  'System.Double';\n                    break;\n                case 'boolean':\n                    tyName =  'System.Boolean';\n                    break;\n                case 'string':\n                    tyName =  'System.String';\n                    break;\n                }\n                break;\n            case 'primitive-value':\n                if (ty[1].ty.value !== null && ty[1].ty.value !== void 0) {\n                    switch (typeof ty[1].ty.primitiveName) {\n                    case 'bigint':\n                        tyName =  'System.Decimal';\n                        break;\n                    default:\n                        switch (typeof ty[1].ty.value) {\n                        case 'number':\n                            tyName =  'System.Double';\n                            break;\n                        case 'boolean':\n                            tyName =  'System.Boolean';\n                            break;\n                        case 'string':\n                            tyName =  'System.String';\n                            break;\n                        }\n                    }\n                }\n                break;\n            }\n            code += `${indent0}using ${ty[0]} = ${tyName};\\n\\n`;\n        }\n    }\n\n    let isFirst = true;\n    for (const ty of schema.entries()) {\n        const accessModifier = ty[1].exported ? 'public' : 'public';\n        const indent0 = '    '.repeat(ctx.nestLevel);\n        const indent1 = '    '.repeat(ctx.nestLevel + 1);\n\n        if (ty[1].ty.kind === 'object' || ty[1].ty.kind === 'enum') {\n            if (isFirst) {\n                isFirst = false;\n                code += '\\n';\n            } else {\n                code += '\\n\\n';\n            }\n            code += formatCSharpCodeDocComment(ty[1].ty, ctx.nestLevel);\n        }\n\n        if (ty[1].ty.kind === 'object') {\n            code += `${indent0}${accessModifier} class ${ty[0]}${\n                ty[1].ty.baseTypes && ty[1].ty.baseTypes.length ? ` : ${\n                    ty[1].ty.baseTypes\n                        .filter(x => x.typeName)\n                        .map(x => formatTypeName(x, {...ctx, nestLevel: ctx.nestLevel + 1}, x.typeName as string))\n                        .join(', ')}` : ''} ${\n                generateCSharpCodeInner(ty[1].ty, true, ctx)}\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            let value: number | null = 0;\n            code += `${indent0}${accessModifier} static class ${ty[0]}\\n${indent0}{\\n${\n                ty[1].ty.values\n                    .map(x => `${\n                        formatCSharpCodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                        indent1}${(() => {\n                            if (value !== null && x[1] === value) {\n                                value++;\n                                return `public static double ${x[0]} { get { return ${x[1]}; } }`;\n                            } else {\n                                if (typeof x[1] === 'number') {\n                                    value = x[1] + 1;\n                                    return `public static double ${x[0]} { get { return ${x[1]}; } }`;\n                                } else {\n                                    return `public static string ${x[0]} { get { return \"${escapeString(x[1])}\"; } }`;\n                                }\n                            }\n                        })()}`)\n                    .join('\\n\\n')}\\n${indent0}}\\n`;\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            // nothing to do\n        } else {\n            // nothing to do\n        }\n    }\n    return code + '}\\n';\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         ObjectAssertion,\n         SerializedSchemaInfo,\n         TypeAssertionSetValue,\n         TypeAssertionMap } from './types';\nimport { escapeString }     from './lib/escape';\nimport { resolveSchema }    from './lib/resolver';\n\n\n\nexport const TynderSchemaVersion = 'tynder/1.0';\n\n\nfunction hasMetaInfo(ty: TypeAssertion) {\n    let hasInfo = false;\n\n    if (ty.messages) {\n        hasInfo = true;\n    }\n    if (ty.message) {\n        hasInfo = true;\n    }\n    if (ty.messageId) {\n        hasInfo = true;\n    }\n\n    switch (ty.kind) {\n    case 'repeated':\n        if (typeof ty.min === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.max === 'number') {\n            hasInfo = true;\n        }\n        break;\n    case 'primitive':\n        if (typeof ty.minValue === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.maxValue === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.greaterThanValue === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.lessThanValue === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.minLength === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.maxLength === 'number') {\n            hasInfo = true;\n        }\n        if (ty.pattern) {\n            hasInfo = true;\n        }\n        break;\n    }\n\n    return hasInfo;\n}\n\n\nfunction serializeInner(ty: TypeAssertion, nestLevel: number): TypeAssertion {\n    if (0 < nestLevel && ty.typeName && !hasMetaInfo(ty)) {\n        switch (ty.kind) {\n        case 'optional':\n            // nothing to do.\n            break;\n        default:\n            return ({\n                ...{\n                    kind: 'symlink',\n                    symlinkTargetName: ty.typeName as string, // NOTE: type inference failed if the switch statement is exists.\n                    typeName: ty.typeName,\n                },\n                ...(ty.name ? {name: ty.name} : {}),\n                ...(ty.docComment ? {docComment: ty.docComment} : {}),\n            });\n        }\n    }\n\n    const ret: TypeAssertion = {...ty};\n    switch (ret.kind) {\n    case 'never': case 'any': case 'unknown': case 'symlink': case 'operator':\n        break;\n    case 'primitive-value':\n        if (typeof ret.value === 'bigint') {\n            ret.value = String(ret.value);\n            ret.primitiveName = 'bigint';\n        }\n        break;\n    case 'primitive':\n        if (ret.pattern) {\n            ret.pattern = `/${ret.pattern.source}/${ret.pattern.flags}` as any;\n        }\n        break;\n    case 'repeated':\n        ret.repeated = serializeInner(ret.repeated, nestLevel + 1);\n        break;\n    case 'spread':\n        ret.spread = serializeInner(ret.spread, nestLevel + 1);\n        break;\n    case 'sequence':\n        ret.sequence = ret.sequence.map(x => serializeInner(x, nestLevel + 1));\n        break;\n    case 'one-of':\n        ret.oneOf = ret.oneOf.map(x => serializeInner(x, nestLevel + 1));\n        break;\n    case 'optional':\n        ret.optional = serializeInner(ret.optional, nestLevel + 1);\n        break;\n    case 'enum':\n        ret.values = ret.values.slice().map(x => x[2] === null || x[2] === void 0 ? x.slice(0, 2) : x) as any;\n        break;\n    case 'object':\n        ret.members = ret.members\n            .map(x => [x[0], serializeInner(x[1], nestLevel + 1), ...x.slice(2)]) as any;\n        if (ret.additionalProps) {\n            ret.additionalProps = ret.additionalProps\n                .map(x => [x[0].map(\n                    p => typeof p === 'string' ?\n                        p : `/${p.source}/${p.flags}`),\n                    serializeInner(x[1], nestLevel + 1), ...x.slice(2)]) as any;\n        }\n        if (ret.baseTypes) {\n            // NOTE: convert 'baseTypes' to 'symlink'.\n            ret.baseTypes = ret.baseTypes.map(x => serializeInner(x, nestLevel + 1)) as ObjectAssertion[];\n        }\n        break;\n    default:\n        throw new Error(`Unknown type assertion: ${(ret as any).kind}`);\n    }\n\n    return ret;\n}\n\n\nexport function serializeToObject(schema: TypeAssertionMap): SerializedSchemaInfo {\n    const ret: SerializedSchemaInfo = {\n        version: TynderSchemaVersion,\n        ns: {},\n    };\n    const current = {};\n\n    for (const ty of schema.entries()) {\n        current[ty[0]] = serializeInner(ty[1].ty, 0);\n    }\n\n    ret.ns['.'] = current;\n\n    return ret;\n}\n\n\nexport function serialize(schema: TypeAssertionMap, asTs?: boolean): string {\n    const ret = serializeToObject(schema);\n\n    if (asTs) {\n        return (\n            `\\n// tslint:disable: object-literal-key-quotes\\n` +\n            `const schema = ${JSON.stringify(ret, null, 2)};\\nexport default schema;\\n\\n` +\n            `export const enum Schema {\\n${Object.keys(ret.ns['.']).filter(x => {\n                return (!\n                    (/^[0-9]/.test(x) ||\n                     /[\\u0000-\\u001f\\u007f]/.test(x) ||\n                     /\\s/.test(x) ||\n                     /[@#$%^&+-=:;.,?!'\"`/|{}()<>[\\]\\*\\\\]/.test(x))\n                );\n            }).map(x => `    ${x} = '${x}',\\n`).join('')}` +\n            `}\\n// tslint:enable: object-literal-key-quotes\\n`\n        );\n    } else {\n        return JSON.stringify(ret, null, 2);\n    }\n}\n\n\nfunction deserializeRegExp(pat: string, errMsg: string) {\n    const m = (/^\\/(.*)\\/([gimsuy]*)$/s).exec(pat);\n    if (m) {\n        return new RegExp(m[1], m[2]);\n    } else {\n        throw new Error(errMsg);\n    }\n}\n\n\nfunction deserializeInner(ty: TypeAssertion) {\n    const ret: TypeAssertion = {...ty};\n    switch (ret.kind) {\n    case 'never': case 'any': case 'unknown':\n    case 'enum': case 'symlink': case 'operator':\n        // NOTE: 'symlink' and 'operator' will resolved by calling 'resolveSymbols()' in 'deserialize()'.\n        break;\n    case 'primitive-value':\n        if (ret.primitiveName === 'bigint') {\n            delete ret.primitiveName;\n            ret.value = BigInt(ret.value);\n        }\n        break;\n    case 'primitive':\n        if (ret.pattern) {\n            ret.pattern = deserializeRegExp(\n                ret.pattern as any,\n                `Unknown pattern match assertion: ${ret.pattern as any}`);\n        }\n        break;\n    case 'repeated':\n        ret.repeated = deserializeInner(ret.repeated);\n        break;\n    case 'spread':\n        ret.spread = deserializeInner(ret.spread);\n        break;\n    case 'sequence':\n        ret.sequence = ret.sequence.map(x => deserializeInner(x));\n        break;\n    case 'one-of':\n        ret.oneOf = ret.oneOf.map(x => deserializeInner(x));\n        break;\n    case 'optional':\n        ret.optional = deserializeInner(ret.optional);\n        break;\n    case 'object':\n        ret.members = ret.members\n            .map(x => [x[0], deserializeInner(x[1]), ...x.slice(2)]) as any;\n        if (ret.additionalProps) {\n            ret.additionalProps = ret.additionalProps\n                .map(x => [x[0].map(\n                    p => String(p).startsWith('/') ?\n                        deserializeRegExp(p as any, `Unknown additional props: ${p}`) : p),\n                    deserializeInner(x[1]), ...x.slice(2)]) as any;\n        }\n        // NOTE: keep 'baseTypes' as 'symlink'.\n        break;\n    default:\n        throw new Error(`Unknown type assertion: ${(ret as any).kind}`);\n    }\n    return ret;\n}\n\n\nexport function deserializeFromObject(obj: any) {\n    if (obj.version !== TynderSchemaVersion) {\n        throw new Error(`Unknown schema version: ${obj.version}`);\n    }\n\n    const schema: TypeAssertionMap = new Map<string, TypeAssertionSetValue>();\n    const current = obj.ns['.'];\n\n    for (const k in current) {\n        if (! Object.prototype.hasOwnProperty.call(current, k)) {\n            continue;\n        }\n        schema.set(k, {\n            ty: deserializeInner(current[k]),\n            exported: false,\n            isDeclare: false,\n            resolved: false,\n        });\n    }\n\n    return resolveSchema(schema, {isDeserialization: true});\n}\n\n\nexport function deserialize(text: string) {\n    const parsed = JSON.parse(text);\n    return deserializeFromObject(parsed);\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { Stereotype,\n         CustomConstraintInfo }             from './types';\nimport { stereotypes as dateStereotypes }   from './stereotypes/date';\nimport { constraints as uniqueConstraints } from './constraints/unique';\n\nexport * from './types';\nexport * from './compiler';\nexport * from './operators';\nexport * from './codegen';\nexport * from './serializer';\nexport * from './validator';\nexport * from './picker';\n\nexport const stereotypes: Array<[string, Stereotype]> = [\n    ...dateStereotypes,\n];\n\nexport const customConstraints: Array<[string, CustomConstraintInfo]> = [\n    ...uniqueConstraints,\n];\n"],"sourceRoot":""}