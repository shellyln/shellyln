{"version":3,"sources":["webpack://tynder/webpack/universalModuleDefinition","webpack://tynder/webpack/bootstrap","webpack://tynder/./node_modules/liyad/src/s-exp/errors.ts","webpack://tynder/./src/types/tynder-schema-types.ts","webpack://tynder/./node_modules/liyad/src/s-exp/ast.ts","webpack://tynder/./src/lib/util.ts","webpack://tynder/./node_modules/liyad/src/s-exp/evaluate.ts","webpack://tynder/./src/operators.ts","webpack://tynder/./node_modules/liyad/src/s-exp/compile.ops/helpers.ts","webpack://tynder/./src/lib/escape.ts","webpack://tynder/./src/lib/errors.ts","webpack://tynder/./src/lib/resolver.ts","webpack://tynder/./src/lib/reporter.ts","webpack://tynder/./src/stereotypes/noop.ts","webpack://tynder/./src/validator.ts","webpack://tynder/./node_modules/liyad/src/s-exp/types.ts","webpack://tynder/./src/picker.ts","webpack://tynder/./src/stereotypes/date.ts","webpack://tynder/./src/constraints/unique.ts","webpack://tynder/./node_modules/liyad/src/s-exp/consts.ts","webpack://tynder/./node_modules/liyad/src/s-exp/compile.ts","webpack://tynder/./node_modules/liyad/src/s-exp/compile.ops/index.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/types.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/parser.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/object-parser.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.fn.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.operator.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.macro.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/core.symbol.ts","webpack://tynder/./node_modules/liyad/src/s-exp/parser.ts","webpack://tynder/./node_modules/liyad/src/s-exp/defaults.ts","webpack://tynder/./node_modules/liyad/src/s-exp/interpreters/index.ts","webpack://tynder/./src/compiler.ts","webpack://tynder/./node_modules/fruitsconfits/src/lib/string-parser.ts","webpack://tynder/./node_modules/liyad/src/s-exp/operators/core/index.ts","webpack://tynder/./src/lib/codegen-ts.ts","webpack://tynder/./src/lib/codegen-json-schema.ts","webpack://tynder/./src/lib/codegen-proto3.ts","webpack://tynder/./src/lib/codegen-graphql.ts","webpack://tynder/./src/serializer.ts","webpack://tynder/./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setEvaluationCount","state","evalCount","config","maxEvalCount","checkParamsLength","args","min","max","length","Error","objConstructor","constructor","funConstructor","Function","checkUnsafeVarNames","varName","checkUnsafeVarNamesEx","target","con","__proto__","ErrorTypes","quote","x","symbol","reservedNames","backquote","wrapByUnquote","unquote","spread","splice","isSymbol","globalObj","NumberPattern","DatePattern","DateTimePattern","DateTimeNoTzPattern","dummyTargetObject","isUnsafeVarNames","toNumber","NaN","Number","resolveSplice","enableSplice","Array","isArray","slice","concat","resolveMacro","macroInfo","macroMap","lastErr","r1","formalArgs","fn","actualArgs","matchResult","matchMacroArgs","Boolean","lastIsSpread","error","next","resolveValueSymbolScope","nullIfNotDefined","scopes","localScope","scope","capturedScopes","isBlockLocal","globalScope","getGlobalScope","getScope","resolveValueSymbol","symInfo","symbolMap","valueSymbolResolverFallback","raiseOnUnresolvedSymbol","collectCapturedVariables","names","getCapturedScopes","a","unshift","assign","installScope","push","uninstallScope","pop","macroName","nm","startsWith","endsWith","tpos","lastIndexOf","tname","optimizeTailCall","fnBody","front","tail","if","self","varBaseName","tempVarsSyms","map","idx","until","let","set","evaluate","sym","resolveUnquote","eval","sprs","reverse","funcInfo","funcMap","v","funcSymbolResolverFallback","resolveFunctionSymbol","JSON","stringify","wrapExternalValue","car","cdr","dotted","picked","ty","kind","members","member","find","m2","operator","operands","omit","partial","optional","optTy","typeName","intersect","types","filter","lastTy","Map","from","values","oneOf","primitiveValue","ret","subtract","primitive","primitiveName","substring","regexpPatternStringType","pattern","repeated","option","sequenceOf","seq","sequence","enumType","ar","objectType","revMembers","membersProps","withName","additionalProps","checkRecursiveExtends","base","symlinkTargetName","baseTypes","z","derived","exts","ext","symlinkType","withTypeName","withOriginalTypeName","originalTypeName","withDocComment","docComment","withRange","minValue","maxValue","opt","withMinValue","withMaxValue","withGreaterThan","greaterThanValue","withLessThan","lessThanValue","withMinLength","minLength","withMaxLength","maxLength","withMatch","withStereotype","stereotype","withConstraint","customConstraints","customConstraintsArgs","withForceCast","forceCast","withRecordType","isRecordTypeField","withMeta","meta","withMsg","messages","message","withMsgId","messageId","applyMacros","tok","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","checkUnsafeVarNames_dynamic","escapeString","replace","ValidationError","ctx","super","updateSchema","original","schema","has","resolved","resolveMemberNames","rootSym","memberTreeSymbols","memberPos","addTypeName","mt","memberSym","join","k","test","memberTree","resolveSymbols","ctx2","nestLevel","symlinkStack","findIndex","ty2","xTy","link","link2","mergeTypeAndSymlink","baseSymlinks","isDeserialization","d2","operators","ctx3","resolverOps","resolveSchema","opts","ent","entries","errorTypeNames","defaultMessages","invalidDefinition","required","typeUnmatched","additionalPropUnmatched","repeatQtyUnmatched","sequenceUnmatched","valueRangeUnmatched","valuePatternUnmatched","valueLengthUnmatched","valueUnmatched","getErrorMessage","errType","InvalidDefinition","Required","TypeUnmatched","AdditionalPropUnmatched","RepeatQtyUnmatched","SequenceUnmatched","ValueRangeUnmatched","ValuePatternUnmatched","ValueLengthUnmatched","ValueUnmatched","nvl","alt","getExpectedType","String","formatErrorMessage","msg","data","tr","topRepeatable","dict","source","flags","dataPath","entryName","parentType","substitutions","RegExp","reportError","errorMessages","dataPathEntryArray","typeStack","pt","pi","isSet","len","j","q","constraints","cSrces","cSrc","pat","val","errors","code","reportErrorWithPush","tyidx","noopStereotype","tryParse","evaluateFormula","valueOrFormula","compare","b","tyA","isNaN","doCast","checkStereotypes","stereotypes","parsed","targetType","parseFloat","Math","trunc","BigInt","checkCustomConstraints","ccName","cc","kinds","includes","check","validateRoot","dataIndex","validateNeverTypeAssertion","chkSt","styp","mapper","validateAnyTypeAssertion","validateUnknownTypeAssertion","chkTarget","styVal","err","valueRangeErr","valueLengthErr","validatePrimitiveTypeAssertion","validatePrimitiveValueTypeAssertion","retVals","validateRepeatedAssertion","dIdx","sIdx","spreadLen","optionalOmitted","checkSpreadQuantity","ts","index","checkOptionalQuantity","savedErrLen","validateSequenceAssertion","choosed","savedCtxRecordTypeFieldValidated","recordTypeFieldValidated","count","firstErrLen","tyOne","e2","checkAll","validateOneOfAssertion","validateEnumAssertion","retVal","dataMembers","Set","noAdditionalProps","add","delete","getAdditionalMembers","allowImplicit","matchedAssertions","ap","at","hasError","size","validateObjectAssertion","validate","isType","getType","FatalError","MaxEvaluationCountError","ScriptTerminationError","where","pickMapper","pickRoot","pick","patch","needle","merge","FyPattern","FormulaPattern","UtcDate","Date","year","month","date","hours","minutes","seconds","ms","setUTCDate","setUTCFullYear","setUTCMonth","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","setTime","parse","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","LcDate","setDate","setFullYear","setMonth","setHours","setMinutes","setSeconds","setMilliseconds","getTime","evaluateFormulaBase","dateCtor","errMsg","formula","split","now","today","f","exec","parseInt","mo","yr","dateStereotype","datetimeStereotype","mapperErrMsg","checkerGen","fields","mapped","CMP","field","compileCore","_$_vars","compileValue","compFnBody","varNames","varsCount","compileToken","body","ops","arr","varNamesCount","varDefs","makeScope","scoped","varNamesCopy","enableTailCallOptimization","thiz","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","compileLambda","registerOperators","raise","quoted","vName","symName","checkNameCalled","checkNamePos","str","not","w1","w0","hasSpread","ParseError","result","parserInput","src","context","start","end","zeroWidth","helper","input","succeeded","tokens","zeroWidthError","pos","beginning","quantify","parser","matched","first","parsers","last","or","reduce","transform","trans","ctxTrans","t2","lookAhead","lookBehind","applyProductionRules","lexer","lexerInput","lexResult","completed","maxApply","rules","rule","rtol","nextSrc","makeProgram","e","objSequence","comparator","objClass","needles","some","objClassNot","$car","$$first","$cdr","$cons","$$firstAndSecond","$first","$second","$$second","$last","$rest","$firstAndSecond","$atom","$eq","$notEq","$list","$__scope","returnMultiple","kv","kvSym","kvName","xSym","xName","$__lambda","fa","enableSpread","$comp$__lambda","compile","$apply","apply","$raise","$pipe","$__let","$boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$typeof","tyName","$symbol","$isSymbol","$isNull","$isNil","$isUndefined","$isList","$isString","$isNumber","$isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","assignBlacklist","$objectAssign","$jsonStringify","$jsonParse","$now","$datetimeFromIso","dt","$datetime","padStart","$datetimeLc","$datetimeToIsoString","toISOString","$datetimeToComponents","getUTCDay","$datetimeToComponentsLc","getTimezoneOffset","getDay","$match","enableRegExpMatchOperators","$consoleLog","console","log","$consoleError","$consoleTrace","trace","$consoleTime","time","$consoleTimeEnd","timeEnd","$consoleTimeLog","timeLog","st","info","fArgs","aArgs","list","inprog","path","subst","tempVarSym","keyName","compilationOperators","macros","compilationMacros","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","isEOF","ch","trim","isNumberFirstChar","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","line","strings","getChar","virtualEof","disableEscape","eof","eofSeq","ch1","ch2","fromCodePoint","lookAheads","chs","skipWhitespaces","parseNumber","parseSymbol","enableShorthands","match","ws","parseStringOrComment","valuesStartSeq","valuesStopChar","allowPhysicalEof","eofSeqs","parseList","parseString","parseHereDoc","attrs","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","ahead","isSpliceUnquote","aheads","enableHereDoc","isHereDoc","Template","ahs","enableVerbatimStringLiteral","listStopChar","initialList","stripComments","defaultConfig","enableEvaluate","enableCompilationOperators","returnMultipleRoot","cons","atom","eq","lambda","defun","cond","while","doWhile","doUntil","defvar","setq","and","gensym","catch","symbols","funcs","initState","globals","resetState","$s","params","rawToToken","cls","charClass","notCls","codePointAt","charClassNot","clsFn","charClassByNeedleFn","cat","concatTokens","once","repeat","qty","combine","erase","isAlpha","isUpper","isLower","isNumber","isNonZeroNumber","isBinNum","isOctNum","isHexNum","isAlNum","isSpace","isSpaceWithinSingleLine","isControl","isWord","isNewline","isAny","binSep","octSep","hexSep","decimalIntegerNumber","bigDecimalIntegerNumber","floatingPointNumber","classes","alpha","upper","lower","num","nonzero","bin","oct","hex","alnum","space","spaceWithinSingleLine","ctrl","newline","word","any","numbers","prefixes","int","bigint","float","behind","getStringParsers","rawToken","$o","getObjectParsers","directiveLineComment","lineComment","hashLineComment","blockComment","commentOrSpace","trueValue","falseValue","nullValue","undefinedValue","positiveInfinityValue","negativeInfinityValue","nanValue","binaryIntegerValue","octalIntegerValue","decimalIntegerValue","bigDecimalIntegerValue","floatingPointNumberValue","numberValue","stringEscapeSeq","signleQuotStringValue","doubleQuotStringValue","backQuotStringValue","stringValue","regexpStringValue","symbolName","decoratorSymbolName","simpleConstExpr","objKey","listValue","ast","token","objectValue","objectKeyValuePair","constExpr","primitiveValueNoNullUndefined","primitiveTypeName","additionalPropPrimitiveTypeName","nullUndefinedTypeName","simpleOrDottedTypeName","sequenceType","spreadOrComplexType","arraySizeFactorInner","arraySizeFactor","complexArrayType","complexType","partialType","pickOrOmitType","genericOrSimpleType","spreadType","decorator","decoratorsClause","complexTypeInnerRoot","edge","interfaceDefInner","complexTypeInnerWOSinpleArrayType","op","binaryOp","op1","op2","isOperator","complexTypeExprRule3","complexTypeExprRule2","complexTypeExprRule1","typeDef","text","interfaceExtendsClause","interfaceKey","interfaceKeyTypePair","separator","interfaceDef","enumKeyValue","enumDef","internalDef","exportedDef","defStatement","externalTypeDef","importStatement","definition","program","lineAndCol","col","getLineAndCol","lisp","install","conf","startup","evaluateAST","repl","fRepl","sync","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","installer","SExpression","mapTyToTySet","gensymCount","def","tySet","exported","external","noOutput","ref","memberNames","export","redef","passthru","passThruCodeBlock","directive","greaterThan","lessThan","formatTypeName","formatTypeScriptCodeDocComment","indent","indexOf","trimLeft","generateTypeScriptCodeInner","isInterface","generateTypeScriptCodePrimitive","toString","generateTypeScriptCodePrimitiveValue","generateTypeScriptCodeRepeated","generateTypeScriptCodeSequence","generateTypeScriptCodeOneOf","generateTypeScriptCodeOptional","generateTypeScriptCodeEnum","memberLines","additionalPropsLines","ak","formatAdditionalPropsName","propsLines","generateTypeScriptCodeObject","generateTypeScriptCode","indent0","indent1","addMetaInfo","a2","changed","description","minItems","maxItems","minimum","maximum","exclusiveMinimum","exclusiveMaximum","generateJsonSchemaInner","$ref","type","items","anyOf","enum","properties","patternProperties","patternPropsCount","additionalProperties","generateJsonSchemaObject","$schema","definitions","generateJsonSchema","asTs","formatProto3CodeDocComment","generateProto3CodeInner","generateProto3CodePrimitive","generateProto3CodePrimitiveValue","generateProto3CodeRepeated","generateProto3CodeOptional","generateProto3CodeEnum","sep","generateProto3CodeObject","generateProto3Code","formatGraphQlCodeDocComment","generateGraphQlCodeInner","generateGraphQlCodeOneOf","generateGraphQlCodePrimitive","generateGraphQlCodePrimitiveValue","generateGraphQlCodeRepeated","generateGraphQlCodeEnum","generateGraphQlCodeObject","generateGraphQlCode","TynderSchemaVersion","serializeInner","hasInfo","hasMetaInfo","serializeToObject","version","current","serialize","deserializeRegExp","deserializeInner","deserializeFromObject","obj","deserialize","unique"],"mappings":"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","file":"tynder.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tynder\"] = factory();\n\telse\n\t\troot[\"tynder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         MaxEvaluationCountError } from './types';\r\nimport { globalObj }               from './consts';\r\n\r\n\r\n\r\nexport function setEvaluationCount(state: SxParserState) {\r\n    state.evalCount++;\r\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\r\n        throw new MaxEvaluationCountError();\r\n    }\r\n}\r\n\r\n\r\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\r\n    if (args.length < min) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\r\n    }\r\n    if (max && max < args.length) {\r\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\r\n    }\r\n    return args;\r\n}\r\n\r\n\r\nconst objConstructor = ({}).constructor; // NOTE: objConstructor            === Object\r\nconst funConstructor = Function;         // NOTE: ({}).toString.constructor === Function\r\n\r\nexport function checkUnsafeVarNames(name: string, varName: string) {\r\n    if (varName === '__proto__' ||\r\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\r\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (varName === 'prototype' || varName === 'constructor') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (objConstructor.hasOwnProperty(varName)) {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (varName === 'call' || varName === 'arguments' || varName === 'caller') {\r\n        // NOTE: arguments, caller are not accessible in strict mode\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    return varName;\r\n}\r\n\r\n\r\nexport function checkUnsafeVarNamesEx(name: string, target: any, varName: string) {\r\n    if (target === globalObj ||\r\n        varName === '__proto__' ||\r\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\r\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\r\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n    }\r\n    if (varName === 'prototype' || varName === 'constructor') {\r\n        if (target === null || target === void 0 || typeof target === 'function') {\r\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n        }\r\n    }\r\n    if (target === null || target === void 0 || target === objConstructor) {\r\n        if (objConstructor.hasOwnProperty(varName)) {\r\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n        }\r\n    }\r\n    if (target === null || target === void 0 || target === funConstructor) {\r\n        // checking 'call', 'arguments', 'caller', ...\r\n        let con: any = funConstructor;\r\n        while (con) {\r\n            if (con.hasOwnProperty(varName)) {\r\n                throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n            }\r\n            con = con.__proto__;\r\n        }\r\n    }\r\n    if (typeof target === 'function') {\r\n        if (!target.hasOwnProperty(varName)) {\r\n            // function's prototypes' members\r\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\r\n        }\r\n    }\r\n    return varName;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport type PrimitiveValueTypes = number | bigint | string | boolean | null | undefined;                                            // TODO: Function\nexport type PrimitiveValueTypeNames = 'number' | 'integer' | 'bigint' | 'string' | 'boolean' | 'null' | 'undefined';                // TODO: Function, DateStr, DateTimeStr\nexport type OptionalPrimitiveValueTypeNames = 'number?' | 'integer?' | 'bigint?' | 'string?' | 'boolean?' | 'null?' | 'undefined?'; // TODO: Function?, DateStr?, DateTimeStr?\nexport type PlaceholderTypeNames = 'never' | 'any' | 'unknown';\nexport type OptionalPlaceholderTypeNames = 'never?' | 'any?' | 'unknown?';\n\n\n\nexport enum ErrorTypes {\n    InvalidDefinition = 1,\n    Required,                // (all)\n    TypeUnmatched,           // Never/Unknown/Primitive/Object\n    AdditionalPropUnmatched, // Additional prop\n    RepeatQtyUnmatched,      // Repeated/Spread\n    SequenceUnmatched,       // Sequence\n    ValueRangeUnmatched,     // Primitive: minValue, maxValue, greaterThanValue, lessThanValue\n    ValuePatternUnmatched,   // Primitive: pattern\n    ValueLengthUnmatched,    // Primitive: minLength, maxLength\n    ValueUnmatched,          // PrimitiveValue\n}\n\n\nexport type ErrorMessages = Partial<{\n    invalidDefinition: string,\n    required: string,\n    typeUnmatched: string,\n    additionalPropUnmatched: string,\n    repeatQtyUnmatched: string,\n    sequenceUnmatched: string,\n    valueRangeUnmatched: string,\n    valuePatternUnmatched: string,\n    valueLengthUnmatched: string,\n    valueUnmatched: string,\n}>;\n\n\nexport interface TypeAssertionBase {\n    messageId?: string;\n    message?: string;             // Only one of 'message' or 'messages' can be set.\n    messages?: ErrorMessages;     // Only one of 'message' or 'messages' can be set.\n    name?: string;                // Member name or 'typeName' below. For error reporting and codegen.\n    typeName?: string;            // Named user defined 'type' or 'interface' name. For error reporting and codegen.\n    originalTypeName?: string;    // To keep right hand side type name of `type Y = X;`.\n    stereotype?: string;          // `stereotype` decorator value.\n    customConstraints?: string[]; //\n    customConstraintsArgs?: {     //\n        [constraintName: string]: any;\n    };\n    forceCast?: boolean;          // `forceCast` decorator value.\n    isRecordTypeField?: boolean;  // true if `recordType` decorator is set.\n    meta?: any;                   // `meta` decorator value; user defined custom properties (meta informations).\n    docComment?: string;          // Doc comment.\n    passThruCodeBlock?: string;   // Store a pass-thru code block (e.g. import statement). use it with kind===never\n    noOutput?: boolean;           // If true, skip code generation.\n}\n\n\nexport interface NeverTypeAssertion extends TypeAssertionBase {\n    kind: 'never';\n}\n\n\nexport interface AnyTypeAssertion extends TypeAssertionBase {\n    kind: 'any';\n}\n\n\nexport interface UnknownTypeAssertion extends TypeAssertionBase {\n    kind: 'unknown';\n}\n\n\nexport interface PrimitiveTypeAssertionConstraints {\n    minValue?: number | string | null; // TODO: bigint\n    maxValue?: number | string | null; // TODO: bigint\n    greaterThanValue?: number | string | null;\n    lessThanValue?: number | string | null;\n    minLength?: number | null;\n    maxLength?: number | null;\n    pattern?: RegExp | null;\n}\n\n\nexport interface PrimitiveTypeAssertion extends TypeAssertionBase, PrimitiveTypeAssertionConstraints {\n    kind: 'primitive';\n    primitiveName: PrimitiveValueTypeNames;\n}\n\n\nexport interface PrimitiveValueTypeAssertion extends TypeAssertionBase {\n    kind: 'primitive-value';\n    value: PrimitiveValueTypes;\n    primitiveName?: 'bigint'; // for deserializer hinting\n}\n\n\nexport interface RepeatedAssertionConstraints {\n    min: number | null;\n    max: number | null;\n}\n\n\nexport interface RepeatedAssertion extends TypeAssertionBase, RepeatedAssertionConstraints {\n    kind: 'repeated';\n    repeated: TypeAssertion;\n}\n\n\nexport interface SpreadAssertion extends TypeAssertionBase, RepeatedAssertionConstraints {\n    kind: 'spread';\n    spread: TypeAssertion;\n}\n\n\nexport interface SequenceAssertion extends TypeAssertionBase {\n    kind: 'sequence';\n    sequence: TypeAssertion[];\n}\n\n\nexport interface OneOfAssertion extends TypeAssertionBase {\n    kind: 'one-of';\n    oneOf: TypeAssertion[];\n}\n\n\nexport interface OptionalAssertion extends TypeAssertionBase {\n    kind: 'optional';\n    optional: TypeAssertion;\n}\n\n\nexport interface EnumAssertion extends TypeAssertionBase {\n    kind: 'enum';\n    values: Array<[\n        string,           // enum key\n        number | string,  // enum value\n        string?,          // doc comment\n    ]>;\n}\n\n\nexport type ObjectAssertionMember = [\n    string,         // name\n    TypeAssertion,  // type\n] | [\n    string,         // name\n    TypeAssertion,  // type\n    boolean,        // If true, defined by ancestor types\n] | [\n    string,         // name\n    TypeAssertion,  // type\n    boolean,        // If true, defined by ancestor types\n    string,         // doc comment\n];\n\n\n\nexport type AdditionalPropsKey = Array<'string' | 'number' | RegExp>;\n\n\nexport type AdditionalPropsMember = [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n] | [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n    boolean,             // If true, defined by ancestor types\n] | [\n    AdditionalPropsKey,  // name\n    TypeAssertion,       // type\n    boolean,             // If true, defined by ancestor types\n    string,              // doc comment\n];\n\n\nexport interface ObjectAssertion extends TypeAssertionBase {\n    kind: 'object';\n    members: ObjectAssertionMember[];\n    additionalProps?: AdditionalPropsMember[];\n    baseTypes?: Array<ObjectAssertion | AssertionSymlink>;\n}\n\n\nexport interface AssertionSymlink extends TypeAssertionBase {\n    kind: 'symlink';\n    symlinkTargetName: string;\n    memberTree?: string[];\n}\n\n\n// TODO: Add it to resolve backref in type operator's operands\nexport interface AssertionOperator extends TypeAssertionBase {\n    kind: 'operator';\n    operator: string;\n    operands: Array<TypeAssertion | string>;\n}\n\n\nexport type TypeAssertion =\n    NeverTypeAssertion |\n    AnyTypeAssertion |\n    UnknownTypeAssertion |\n    PrimitiveTypeAssertion |\n    PrimitiveValueTypeAssertion |\n    RepeatedAssertion |\n    SpreadAssertion |\n    SequenceAssertion |\n    OneOfAssertion |\n    OptionalAssertion |\n    EnumAssertion |\n    ObjectAssertion |\n    AssertionSymlink |\n    AssertionOperator;\n\n\nexport interface SerializedSchemaInfo {\n    version: string;\n    ns: {\n        [namespaceName: string]: {\n            [typeName: string]: TypeAssertion;\n        }\n    };\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol }     from './types';\r\n\r\n\r\n\r\nexport function quote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.quote}, x];\r\n}\r\n\r\n\r\nexport function isQuoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.quote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function backquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.backquote}, x];\r\n}\r\n\r\n\r\nexport function isBackquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.backquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function wrapByUnquote(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.unquote}, x];\r\n}\r\n\r\n\r\nexport function isUnquoted(state: SxParserState, x: any) {\r\n    if (Array.isArray(x) && 0 < x.length) {\r\n        const q = isSymbol(x);\r\n        if (q && q.symbol === state.config.reservedNames.unquote) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function spread(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.spread}, x];\r\n}\r\n\r\n\r\nexport function splice(state: SxParserState, x: any) {\r\n    return [{symbol: state.config.reservedNames.splice}, x];\r\n}\r\n\r\n\r\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\r\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\r\n        if (name !== void 0) {\r\n            return x.symbol === name ? x : null;\r\n        } else {\r\n            return x;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\n// tslint:disable-next-line:function-constructor\nconst globalObj = Function('return this')();\nconst objConstructor = ({}).constructor; // NOTE: objConstructor            === Object\nconst funConstructor = Function;         // NOTE: ({}).toString.constructor === Function\n\n\nexport const NumberPattern = /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)$/;\nexport const DatePattern = /^(\\d{4}-[01]\\d-[0-3]\\d)$/;\nexport const DateTimePattern =\n/^((?:(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d))(?:[+-][0-2]\\d:[0-5]\\d|Z))$/;\nexport const DateTimeNoTzPattern =\n   /^((?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d)|(?:\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d))$/;\n\n\nexport const dummyTargetObject = {};\n\n\nexport function isUnsafeVarNames(target: any, varName: string) {\n    if (target === globalObj ||\n        varName === '__proto__' ||\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\n        return true;\n    }\n    if (varName === 'prototype' || varName === 'constructor') {\n        if (target === null || target === void 0 || typeof target === 'function') {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === objConstructor) {\n        if (objConstructor.hasOwnProperty(varName)) {\n            return true;\n        }\n    }\n    if (target === null || target === void 0 || target === funConstructor) {\n        // checking 'call', 'arguments', 'caller', ...\n        let con: any = funConstructor;\n        while (con) {\n            if (con.hasOwnProperty(varName)) {\n                return true;\n            }\n            con = con.__proto__;\n        }\n    }\n    if (typeof target === 'function') {\n        if (!target.hasOwnProperty(varName)) {\n            // function's prototypes' members\n            return true;\n        }\n    }\n    return false;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedPair,\r\n         SxDottedFragment,\r\n         SxToken,\r\n         SxScope,\r\n         CapturedScopes,\r\n         SxMacroInfo }           from './types';\r\nimport { isSymbol }              from './ast';\r\nimport { setEvaluationCount,\r\n         checkUnsafeVarNamesEx } from './errors';\r\n\r\n\r\n\r\nexport function toNumber(x: any) {\r\n    switch (typeof x) {\r\n    case 'object': case 'symbol': case 'function':\r\n        return NaN;\r\n    default:\r\n        return Number(x);\r\n    }\r\n}\r\n\r\n\r\nexport function resolveUnquote(state: SxParserState, r: SxToken[]) {\r\n    for (let i = 0; i < r.length; i++) {\r\n        const symUnquote = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.unquote);\r\n        if (symUnquote) {\r\n            r = r.slice(0, i).concat([evaluate(state, (r[i] as SxToken[])[1])], r.slice(i + 1));\r\n        }\r\n        if (Array.isArray(r[i])) {\r\n            r = r.slice(0);\r\n            r[i] = resolveUnquote(state, r[i] as SxToken[]);\r\n        }\r\n    }\r\n    return resolveSplice(state, r);\r\n}\r\n\r\n\r\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\r\n    if (state.config.enableSplice) {\r\n        for (let i = r.length - 1; i >= 0; i--) {\r\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\r\n            if (symSplice) {\r\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\r\n            }\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function resolveMacro(state: SxParserState, x: SxSymbol, r: SxToken[]) {\r\n    const macroInfo = state.macroMap.get(x.symbol);\r\n    let lastErr = null;\r\n    if (macroInfo) {\r\n        let m: SxMacroInfo | undefined = macroInfo;\r\n        const r1 = r.slice(1);\r\n        while (m) {\r\n            if (m.formalArgs) {\r\n                const matchResult = matchMacroArgs(state, x.symbol, m.formalArgs, Boolean(m.lastIsSpread), r1);\r\n                if (! matchResult.error) {\r\n                    return {\r\n                        fn: m.fn(state, x.symbol, matchResult.formalArgs as SxSymbol[]),\r\n                        actualArgs: r.slice(0, 1).concat(matchResult.actualArgs as SxToken[]),\r\n                    };\r\n                }\r\n                lastErr = matchResult.error;\r\n                m = m.next;\r\n            } else {\r\n                return {\r\n                    fn: m.fn(state, x.symbol),\r\n                    actualArgs: r,\r\n                };\r\n            }\r\n        }\r\n        if (lastErr) {\r\n            throw new Error(lastErr);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\r\n    if (typeof x === 'function') {\r\n        return x;\r\n    }\r\n    const funcInfo = state.funcMap.get(x.symbol);\r\n    if (funcInfo) {\r\n        return funcInfo.fn(state, x.symbol);\r\n    } else {\r\n        const v = resolveValueSymbol(state, x);\r\n        if (typeof v === 'function') {\r\n            return v;\r\n        }\r\n        if (state.config.funcSymbolResolverFallback) {\r\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\r\n            return localScope.scope;\r\n        }\r\n        if (localScope.capturedScopes &&\r\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\r\n            return localScope.capturedScopes[x.symbol];\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    const globalScope = getGlobalScope(state);\r\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\r\n        return globalScope.scope;\r\n    }\r\n    return nullIfNotDefined ? null : getScope(state).scope;\r\n}\r\n\r\n\r\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\r\n    const scope = resolveValueSymbolScope(state, x, true);\r\n    if (scope) {\r\n        return scope[x.symbol];\r\n    }\r\n    const symInfo = state.symbolMap.get(x.symbol);\r\n    if (symInfo) {\r\n        return symInfo.fn(state, x.symbol);\r\n    } else {\r\n        if (state.config.valueSymbolResolverFallback) {\r\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\r\n        }\r\n        if (state.config.raiseOnUnresolvedSymbol) {\r\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\r\n        }\r\n        return x.symbol;\r\n    }\r\n}\r\n\r\n\r\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\r\n    const capturedScopes: CapturedScopes = {};\r\n    for (const n of names) {\r\n        const scope = resolveValueSymbolScope(state, n, true);\r\n        if (scope === null) {\r\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\r\n        }\r\n        checkUnsafeVarNamesEx('collectCapturedVariables', capturedScopes, n.symbol);\r\n        capturedScopes[n.symbol] = scope;\r\n    }\r\n    return capturedScopes;\r\n}\r\n\r\n\r\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\r\n    const a: CapturedScopes[] = [];\r\n    for (let i = state.scopes.length - 1; i > 0; i--) {\r\n        const localScope: SxScope = state.scopes[i];\r\n        if (localScope.capturedScopes) {\r\n            a.unshift(localScope.capturedScopes);\r\n        }\r\n        if (! localScope.isBlockLocal) {\r\n            break;\r\n        }\r\n    }\r\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\r\n}\r\n\r\n\r\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\r\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\r\n}\r\n\r\n\r\nexport function uninstallScope(state: SxParserState): any {\r\n    if (state.scopes.length < 2) {\r\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\r\n    }\r\n    return state.scopes.pop();\r\n}\r\n\r\n\r\nexport function getScope(state: SxParserState) {\r\n    return state.scopes[state.scopes.length - 1];\r\n}\r\n\r\n\r\nexport function getGlobalScope(state: SxParserState) {\r\n    return state.scopes[0];\r\n}\r\n\r\n\r\nexport function matchMacroArgs(\r\n        state: SxParserState, macroName: string,\r\n        formalArgs: SxSymbol[], lastIsSpread: boolean, actualArgs: SxToken[]) {\r\n\r\n    formalArgs = formalArgs.slice(0);\r\n    actualArgs = actualArgs.slice(0);\r\n    if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n        return ({ error: `[SX] macro call (${macroName}): Actual args too short: actual ${\r\n            actualArgs.length} / formal ${formalArgs.length}.` });\r\n    }\r\n    for (let i = formalArgs.length - (lastIsSpread ? 2 : 1); i >= 0; i--) {\r\n        let nm = formalArgs[i].symbol;\r\n        if (nm.startsWith('!')) {\r\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1);\r\n            nm = formalArgs[i].symbol;\r\n\r\n            if (! isSymbol(actualArgs[i])) {\r\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\r\n            }\r\n        } else if (nm.startsWith('<') && nm.endsWith('>')) {\r\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1, -1);\r\n            nm = formalArgs[i].symbol;\r\n\r\n            if (isSymbol(actualArgs[i], nm)) {\r\n                formalArgs = formalArgs.slice(0, i).concat(formalArgs.slice(i + 1));\r\n                actualArgs = actualArgs.slice(0, i).concat(actualArgs.slice(i + 1));\r\n            } else {\r\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not expected symbol.` });\r\n            }\r\n        } else {\r\n            const tpos = nm.lastIndexOf(':');\r\n            if (0 < tpos) {\r\n                const tname = nm.slice(tpos + 1);\r\n                switch (tname) {\r\n                case 'number':\r\n                    if (typeof actualArgs[i] !== 'number') {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not number.` });\r\n                    }\r\n                    break;\r\n                case 'string':\r\n                    if (typeof actualArgs[i] !== 'string') {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not string.` });\r\n                    }\r\n                    break;\r\n                case 'function':\r\n                    if (! (Array.isArray(actualArgs[i]) && isSymbol((actualArgs[i] as any)[0]))) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not function.` });\r\n                    }\r\n                    break;\r\n                case 'list':\r\n                    if (! Array.isArray(actualArgs[i])) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not list.` });\r\n                    }\r\n                    break;\r\n                case 'symbol':\r\n                    if (! isSymbol(actualArgs[i])) {\r\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\r\n                    }\r\n                    break;\r\n                case 'any':\r\n                    break;\r\n                default:\r\n                    return ({ error: `[SX] macro call (${macroName}): Formal arg(${i}: ${nm}) is unknown type ${tname}.` });\r\n                }\r\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(0, tpos);\r\n            }\r\n        }\r\n    }\r\n    return ({ formalArgs, actualArgs });\r\n}\r\n\r\n\r\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //    formalArgs: 'sym1 ... 'symN\r\n    //        fnBody: 'expr1 ... 'exprN\r\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\r\n        const front = fnBody.slice(0, fnBody.length - 1);\r\n        const tail = fnBody[fnBody.length - 1];\r\n        if (tail && (typeof tail[0] === 'object') && tail[0].symbol === state.config.reservedNames.if) {\r\n            // S expression: ($if cond t-expr f-expr)\r\n            if (Array.isArray(tail[3]) && (typeof tail[3][0] === 'object') && tail[3][0].symbol === state.config.reservedNames.self) {\r\n                // S expression (recursive):\r\n                //     (                                 ;; fnBody\r\n                //         expr1 ... exprN-1             ;; front\r\n                //         ($if cond                     ;; tail[0] [1]\r\n                //             t-expr                    ;;     [2]\r\n                //             ($self                    ;;     [3]\r\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\r\n                //     )\r\n                //\r\n                //  -> S exp (tail call optimization):\r\n                //     (                                                                  ;; fnBody\r\n                //         ($until cond                                                   ;; tail[1]\r\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\r\n                //                 expr1 ... exprN-1                                      ;; front\r\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\r\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\r\n                //             )                                                          ;;\r\n                //         )                                                              ;;\r\n                //         expr1 ... exprN-1                                              ;; front\r\n                //         t-expr                                                         ;; tail[2]\r\n                //     )\r\n\r\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\r\n\r\n                return [\r\n                    [{symbol: state.config.reservedNames.until}, tail[1],\r\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\r\n                            ...front,\r\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\r\n                            ...(tempVarsSyms.map((x, idx) =>\r\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\r\n                        ],\r\n                    ],\r\n                    ...front,\r\n                    tail[2],\r\n                ];\r\n            }\r\n        }\r\n    }\r\n    return fnBody;\r\n}\r\n\r\n\r\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\r\n    setEvaluationCount(state);\r\n\r\n    if (x === null || x === void 0) {\r\n        return x;\r\n    }\r\n    let r: SxToken = x;\r\n\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                return r;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym, r);\r\n                if (m) {\r\n                    r = m.fn(m.actualArgs as SxToken[]);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n\r\n    if (Array.isArray(r)) {\r\n        r = r.slice(0);\r\n        if (0 < r.length) {\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                if (sym.symbol === state.config.reservedNames.quote) {\r\n                    return r.slice(1, 2)[0];\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.backquote) {\r\n                    r = r.slice(1, 2)[0];\r\n                    if (Array.isArray(r)) {\r\n                        r = resolveUnquote(state, r);\r\n                    }\r\n                    return r;\r\n                }\r\n                if (sym.symbol === state.config.reservedNames.eval) {\r\n                    return evaluate(state, evaluate(state, r.slice(1, 2)[0]));\r\n                }\r\n            }\r\n\r\n            const sprs = [];\r\n            for (let i = 1; i < r.length; i++) {\r\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\r\n                if (symSpr) {\r\n                    sprs.push(i);\r\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\r\n                    r[i] = Array.isArray(a) ? a : [a];\r\n                } else {\r\n                    r[i] = evaluate(state, r[i]);\r\n                }\r\n            }\r\n            for (const i of sprs.reverse()) {\r\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\r\n            }\r\n\r\n            let fn: any;\r\n            if (typeof r[0] === 'function') {\r\n                fn = r[0];\r\n            } else if (sym) {\r\n                fn = resolveFunctionSymbol(state, sym);\r\n            } else {\r\n                fn = evaluate(state, r[0]);\r\n            }\r\n\r\n            if (typeof fn === 'function') {\r\n                r = (fn as any)(...(r.slice(1)));\r\n            } else {\r\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\r\n            }\r\n        }\r\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\r\n        r = (r as SxExternalValue).value;\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\r\n        r = resolveValueSymbol(state, r as SxSymbol);\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\r\n        const car = evaluate(state, (r as SxDottedPair).car);\r\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\r\n        if (Array.isArray(cdr)) {\r\n            const a = (cdr as any[]).slice(0);\r\n            a.unshift(car);\r\n            r = a;\r\n        } else {\r\n            r = { car, cdr };\r\n        }\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\r\n        r = [\r\n            evaluate(state, (r as SxDottedFragment).dotted),\r\n        ];\r\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\r\n        r = [];\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { NeverTypeAssertion,\n         AnyTypeAssertion,\n         UnknownTypeAssertion,\n         PrimitiveValueTypes,\n         PrimitiveValueTypeNames,\n         OptionalPrimitiveValueTypeNames,\n         PlaceholderTypeNames,\n         OptionalPlaceholderTypeNames,\n         ErrorMessages,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         ObjectAssertionMember,\n         AdditionalPropsKey,\n         AdditionalPropsMember,\n         ObjectAssertion,\n         AssertionSymlink,\n         AssertionOperator,\n         TypeAssertion }    from './types';\nimport { dummyTargetObject,\n         isUnsafeVarNames } from './lib/util';\n\n\n\n// emulate Pick<T> // ex. Pick<Foo, 'a' | 'b'>\nexport function picked(ty: TypeAssertion, ...names: string[]): ObjectAssertion | AssertionOperator {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const name of names) {\n                const member = ty.members.find(x => x[0] === name);\n                if (member) {\n                    if (member[2]) {\n                        const m2: ObjectAssertionMember = [...member] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.push(m2);\n                    } else {\n                        members.push(member);\n                    }\n                }\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'picked',\n                operands: [ty, ...names],\n            });\n        }\n    default:\n        return ({\n            kind: 'object',\n            members: [],\n        });\n    }\n}\n\n\n// emulate Omit<T> // ex. Omit<Foo, 'a' | 'b'>\nexport function omit(ty: TypeAssertion, ...names: string[]): ObjectAssertion | AssertionOperator {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const member of ty.members) {\n                if (! names.find(name => member[0] === name)) {\n                    if (member[2]) {\n                        const m2: ObjectAssertionMember = [...member] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.push(m2);\n                    } else {\n                        members.push(member);\n                    }\n                }\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'omit',\n                operands: [ty, ...names],\n            });\n        }\n    default:\n        return ({\n            kind: 'object',\n            members: [],\n        });\n    }\n}\n\n\n// emulate Partial<T>\nexport function partial(ty: TypeAssertion): TypeAssertion {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const members: ObjectAssertionMember[] = [];\n            for (const member of ty.members) {\n                let m: ObjectAssertionMember = member[1].kind === 'optional' ?\n                    member :\n                    [member[0], optional(member[1]), ...member.slice(2)] as ObjectAssertionMember;\n                if (m[2]) {\n                    m = [...m] as any;\n                    if (3 < m.length) {\n                        m[2] = false;\n                    } else {\n                        m.length = 2;\n                    }\n                }\n                m[1].name = m[0];\n                const optTy = {...(m[1] as OptionalAssertion).optional};\n                (m[1] as OptionalAssertion).optional = optTy;\n                if (optTy.name && optTy.name !== optTy.typeName) {\n                    delete optTy.name;\n                }\n                if (!optTy.name && optTy.typeName) {\n                    optTy.name = optTy.typeName;\n                }\n                members.push(m);\n            }\n            return ({\n                kind: 'object',\n                members,\n            });\n        }\n    case 'symlink': case 'operator':\n        {\n            return ({\n                kind: 'operator',\n                operator: 'partial',\n                operands: [ty],\n            });\n        }\n    default:\n        return ty;\n    }\n}\n\n\n// intersection (a & b)\nexport function intersect(...types: TypeAssertion[]): TypeAssertion {\n    if (types.length === 0) {\n        throw new Error(`Empty intersection type is not allowed.`);\n    }\n    if (0 < types.filter(x => x && typeof x === 'object' &&\n            (x.kind === 'symlink' || x.kind === 'operator')).length) {\n        return ({\n            kind: 'operator',\n            operator: 'intersect',\n            operands: types.slice(),\n        });\n    }\n    let lastTy: TypeAssertion | null = null;\n    const members = new Map<string, ObjectAssertionMember>();\n\n    for (const ty of types) {\n        if (ty && typeof ty === 'object') {\n            if (lastTy && lastTy.kind !== ty.kind) {\n                return ({\n                    kind: 'never',\n                });\n            }\n            lastTy = ty;\n            if (ty.kind === 'object') {\n                for (const m of ty.members) {\n                    if (m[2]) {\n                        const m2: ObjectAssertionMember = [...m] as any;\n                        if (3 < m2.length) {\n                            m2[2] = false;\n                        } else {\n                            m2.length = 2;\n                        }\n                        members.set(m[0], m2); // Overwrite if exists\n                    } else {\n                        members.set(m[0], m);  // Overwrite if exists\n                    }\n                }\n            }\n        } else {\n            return ({\n                kind: 'never',\n            });\n        }\n    }\n    if (lastTy && lastTy.kind !== 'object') {\n        return lastTy;\n    } else {\n        return ({\n            kind: 'object',\n            members: Array.from(members.values()),\n        });\n    }\n}\n\n\n// union (a | b)\nexport function oneOf(...types: Array<PrimitiveValueTypes | TypeAssertion>): TypeAssertion {\n    if (types.length === 0) {\n        throw new Error(`Empty union type is not allowed.`);\n    }\n    if (types.length === 1) {\n        const ty = types[0];\n        if (ty && typeof ty === 'object') {\n            return ty;\n        } else {\n            return primitiveValue(ty);\n        }\n    }\n    const ret: OneOfAssertion = {\n        kind: 'one-of',\n        oneOf: [],\n    };\n    for (const ty of types) {\n        // TODO: remove same type\n        if (ty && typeof ty === 'object') {\n            if (ty.kind === 'one-of') {\n                ret.oneOf = ret.oneOf.concat(ty.oneOf);\n            } else {\n                ret.oneOf.push(ty);\n            }\n        } else {\n            ret.oneOf.push(primitiveValue(ty));\n        }\n    }\n    return ret;\n}\n\n\n// subtraction (a - b)\nexport function subtract(...types: TypeAssertion[]): ObjectAssertion | AssertionOperator {\n    if (types.length === 0) {\n        throw new Error(`Empty subtraction type is not allowed.`);\n    }\n    if (0 < types.filter(x => x && typeof x === 'object' &&\n            (x.kind === 'symlink' || x.kind === 'operator')).length) {\n        return ({\n            kind: 'operator',\n            operator: 'subtract',\n            operands: types.slice(),\n        });\n    }\n    let ret = types[0];\n    if (!ret || typeof ret !== 'object' || ret.kind !== 'object') {\n        throw new Error(`First parameter of subtraction type should be 'object'.`);\n    }\n    for (const ty of types.slice(1)) {\n        if (ty && typeof ty === 'object' && ty.kind === 'object') {\n            ret = omit(ret, ...ty.members.map(m => m[0]));\n        }\n    }\n    return ret;\n}\n\n\nexport function primitive(typeName: PrimitiveValueTypeNames |\n                                    OptionalPrimitiveValueTypeNames |\n                                    PlaceholderTypeNames |\n                                    OptionalPlaceholderTypeNames):\n        PrimitiveTypeAssertion | OptionalAssertion | NeverTypeAssertion | AnyTypeAssertion | UnknownTypeAssertion {\n    switch (typeName) {\n    case 'never':\n        return ({\n            kind: 'never',\n        });\n    case 'any':\n        return ({\n            kind: 'any',\n        });\n    case 'unknown':\n        return ({\n            kind: 'unknown',\n        });\n    case 'number':\n        // FALL_THRU\n    case 'integer':\n        // FALL_THRU\n    case 'bigint':\n        // FALL_THRU\n    case 'string':\n        // FALL_THRU\n    case 'boolean':\n        // FALL_THRU\n    case 'null':\n        // FALL_THRU\n    case 'undefined':\n        return ({\n            kind: 'primitive',\n            primitiveName: typeName,\n        });\n    case 'never?':\n        return (optional({\n            kind: 'never',\n        }));\n    case 'any?':\n        return (optional({\n            kind: 'any',\n        }));\n    case 'unknown?':\n        return (optional({\n            kind: 'unknown',\n        }));\n    case 'number?':\n        // FALL_THRU\n    case 'integer?':\n        // FALL_THRU\n    case 'bigint?':\n        // FALL_THRU\n    case 'string?':\n        // FALL_THRU\n    case 'boolean?':\n        // FALL_THRU\n    case 'null?':\n        // FALL_THRU\n    case 'undefined?':\n        return (optional({\n            kind: 'primitive',\n            primitiveName: typeName.substring(0, typeName.length - 1) as any,\n        }));\n    default:\n        throw new Error(`Unknown primitive type assertion: ${typeName}`);\n    }\n    // TODO: Function, DateStr, DateTimeStr, Funtion?, DateStr?, DateTimeStr?\n}\n\n\nexport function regexpPatternStringType(pattern: RegExp): PrimitiveTypeAssertion {\n    return ({\n        kind: 'primitive',\n        primitiveName: 'string',\n        pattern,\n    });\n}\n\n\nexport function primitiveValue(value: PrimitiveValueTypes): PrimitiveValueTypeAssertion {\n    if (value === null || value === void 0) {\n        return ({\n            kind: 'primitive-value',\n            value,\n        });\n    } else switch (typeof value) {\n    case 'number':\n        // FALL_THRU\n    case 'bigint':\n        // FALL_THRU\n    case 'string':\n        // FALL_THRU\n    case 'boolean':\n        return ({\n            kind: 'primitive-value',\n            value,\n        });\n    default:\n        throw new Error(`Unknown primitive value assertion: ${value}`);\n    }\n}\n\n\nexport function optional(ty: PrimitiveValueTypes | TypeAssertion): OptionalAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        if (ty.kind === 'optional') {\n            return ty;\n        } else {\n            return ({\n                kind: 'optional',\n                optional: ty,\n                ...(ty.typeName ? {typeName: ty.typeName} : {}),\n            });\n        }\n    } else {\n        return ({\n            kind: 'optional',\n            optional: primitiveValue(ty),\n        });\n    }\n}\n\n\nexport function repeated(\n        ty: PrimitiveValueTypeNames | TypeAssertion, option?:\n        Partial<Pick<RepeatedAssertion, 'max'> & Pick<RepeatedAssertion, 'min'>>): RepeatedAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        return ({\n            kind: 'repeated',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            repeated: ty,\n        });\n    } else {\n        return ({\n            kind: 'repeated',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            repeated: primitive(ty),\n        });\n    }\n}\n\n\nexport function sequenceOf(...seq: Array<PrimitiveValueTypes | TypeAssertion>): SequenceAssertion {\n    return ({\n        kind: 'sequence',\n        sequence: seq.map(ty => ty && typeof ty === 'object' && ty.kind ? ty : primitiveValue(ty)),\n    });\n}\n\n\nexport function spread(\n        ty: PrimitiveValueTypes | TypeAssertion,\n        option?: Partial<Pick<SpreadAssertion, 'max'> & Pick<SpreadAssertion, 'min'>>): SpreadAssertion {\n    if (ty && typeof ty === 'object' && ty.kind) {\n        return ({\n            kind: 'spread',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            spread: ty,\n        });\n    } else {\n        return ({\n            kind: 'spread',\n            min: option && typeof option.min === 'number' ? option.min : null,\n            max: option && typeof option.max === 'number' ? option.max : null,\n            spread: primitiveValue(ty),\n        });\n    }\n}\n\n\nexport function enumType(...values: Array<[string, number | string | null, string?]>): EnumAssertion {\n    const ar = values.slice();\n    let value = 0;\n    for (let i = 0; i < ar.length; i++) {\n        if (isUnsafeVarNames(dummyTargetObject, ar[i][0])) {\n            throw new Error(`Unsafe symbol name is appeared in enum assertion: ${ar[i][0]}`);\n        }\n\n        if (ar[i][1] === null || ar[i][1] === void 0) {\n            ar[i][1] = value++;\n        } else if (typeof ar[i][1] === 'number') {\n            value = (ar[i][1] as number) + 1;\n        }\n        if (! ar[i][2]) {\n            ar[i].length = 2;\n        }\n    }\n    return ({\n        kind: 'enum',\n        values: ar as Array<[string, number | string, string?]>,\n    });\n}\n\n\nexport function objectType(\n        ...members: Array<[\n            string | AdditionalPropsKey,\n            PrimitiveValueTypes | TypeAssertion,\n            string?\n        ]>): ObjectAssertion {\n    const revMembers = members.slice().reverse();\n    for (const x of members) {\n        if (typeof x[0] === 'string') {\n            if (isUnsafeVarNames(dummyTargetObject, x[0])) {\n                throw new Error(`Unsafe symbol name is appeared in object assertion: ${x[0]}`);\n            }\n            if (members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n                throw new Error(`Duplicated member is found: ${x[0]}`);\n            }\n        }\n    }\n\n    const membersProps: ObjectAssertionMember[] = (members\n        .filter(\n            x => typeof x[0] === 'string') as\n                Array<[string, PrimitiveValueTypes | TypeAssertion, string?]>)\n        .map(\n            x => x[1] && typeof x[1] === 'object' && x[1].kind ?\n                [x[0], withName(x[1], x[0]), x[2]] :\n                [x[0], withName(primitiveValue(x[1]), x[0]), x[2]])\n        .map(\n            x => (x[2] ?\n                [x[0], x[1], false, ...x.slice(2)] :\n                [x[0], x[1]]) as ObjectAssertionMember);\n\n    const additionalProps: AdditionalPropsMember[] = (members\n        .filter(x => typeof x[0] !== 'string') as Array<[\n            AdditionalPropsKey,\n            PrimitiveValueTypes | TypeAssertion,\n            string?\n        ]>)\n        .map(x => x[1] && typeof x[1] === 'object' && x[1].kind ?\n            x :\n            [x[0], primitiveValue(x[1]), x[2]])\n        .map(\n            x => (x[2] ?\n                [x[0], x[1], false, ...x.slice(2)] :\n                [x[0], x[1]]) as AdditionalPropsMember);\n\n    return ({\n        ...{\n            kind: 'object',\n            members: membersProps,\n        },\n        ...(0 < additionalProps.length ? {\n            additionalProps,\n        } : {}),\n    });\n}\n\n\nfunction checkRecursiveExtends(ty: ObjectAssertion, base: ObjectAssertion | AssertionSymlink): boolean {\n    if (ty === base) {\n        return false;\n    }\n    if (ty.typeName &&\n        (ty.typeName === base.typeName ||\n         (base.kind === 'symlink' && ty.typeName === base.symlinkTargetName))) {\n        return false;\n    }\n    if (base.kind === 'object' && base.baseTypes) {\n        for (const z of base.baseTypes) {\n            if (! checkRecursiveExtends(ty, z)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\nexport function derived(ty: ObjectAssertion, ...exts: TypeAssertion[]): ObjectAssertion {\n    const ret: ObjectAssertion = {\n        kind: 'object',\n        members: [],\n        baseTypes: [],\n    };\n\n    for (const ext of exts) {\n        switch (ext.kind) {\n        case 'object':\n            if (! checkRecursiveExtends(ty, ext)) {\n                throw new Error(`Recursive extend is found: ${ty.name || '(unnamed)'}`);\n            }\n            for (const m of ext.members) {\n                if (! ret.members.find(x => x[0] === m[0])) {\n                    ret.members.push([m[0], m[1], true, ...m.slice(3)] as ObjectAssertionMember);\n                }\n                // TODO: Check for different types with the same name.\n            }\n        // FALL_THRU\n        case 'symlink':\n            (ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>).push(ext);\n            break;\n        case 'operator':\n            {\n                throw new Error(`Unresolved type operator is found: ${ext.operator}`);\n            }\n        }\n        // NOTE: 'symlink' base types will resolved by calling `resolveSymbols()`.\n        //       `resolveSymbols()` will call `derived()` after resolve symlink exts.\n    }\n    ret.members = ty.members.concat(ret.members);\n    if (ty.baseTypes) {\n        ret.baseTypes = ty.baseTypes\n            .filter(x => x.kind !== 'symlink')\n            .concat(ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>);\n    }\n    if ((ret.baseTypes as Array<ObjectAssertion | AssertionSymlink>).length === 0) {\n        delete ret.baseTypes;\n    }\n\n    const revMembers = ret.members.slice().reverse();\n    for (const x of ret.members) {\n        if (ret.members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n            throw new Error(`Duplicated member is found: ${x[0]} in ${ty.name || '(unnamed)'}`);\n        }\n    }\n\n    let additionalProps: AdditionalPropsMember[] = [];\n    if (ret.baseTypes) {\n        for (const base of ret.baseTypes) {\n            if (base.kind === 'object') {\n                if (base.additionalProps && 0 < base.additionalProps.length) {\n                    additionalProps = additionalProps.concat(\n                        base.additionalProps.map(x =>\n                            [x[0], x[1], true, ...x.slice(3)] as AdditionalPropsMember));\n                }\n            }\n            // NOTE: 'symlink' base types will resolved by calling `resolveSymbols()`.\n            //       `resolveSymbols()` will call `derived()` after resolve symlink exts.\n        }\n    }\n    if (ty.additionalProps && 0 < ty.additionalProps.length) {\n        additionalProps = additionalProps.concat(ty.additionalProps); // TODO: concat order\n    }\n    if (0 < additionalProps.length) {\n        ret.additionalProps = additionalProps;\n    }\n\n    return ret;\n}\n\n\nexport function symlinkType(name: string): AssertionSymlink {\n    return ({\n        kind: 'symlink',\n        symlinkTargetName: name,\n    });\n}\n\n\nexport function withName(ty: TypeAssertion, name: string) {\n    if (! name) {\n        return ty;\n    }\n    return ({...ty, name});\n}\n\n\nexport function withTypeName(ty: TypeAssertion, typeName: string) {\n    if (! typeName) {\n        return ty;\n    }\n    return ({...ty, typeName});\n}\n\n\nexport function withOriginalTypeName(ty: TypeAssertion, originalTypeName: string) {\n    if (! originalTypeName) {\n        return ty;\n    }\n    return ({...ty, originalTypeName});\n}\n\n\nexport function withDocComment(ty: TypeAssertion, docComment: string) {\n    if (! docComment) {\n        return ty;\n    }\n    return ({...ty, docComment});\n}\n\n\nexport function withRange(minValue: number | string, maxValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minValue !== 'number' && typeof minValue !== 'string') {\n            throw new Error(`Decorator '@range' parameter 'minValue' should be number or string.`);\n        }\n        if (typeof maxValue !== 'number' && typeof maxValue !== 'string') {\n            throw new Error(`Decorator '@range' parameter 'maxValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@range' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minValue, maxValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@range' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minValue, maxValue});\n        }\n    };\n}\n\n\nexport function withMinValue(minValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minValue !== 'number' && typeof minValue !== 'string') {\n            throw new Error(`Decorator '@minValue' parameter 'minValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@minValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@minValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minValue});\n        }\n    };\n}\n\n\nexport function withMaxValue(maxValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof maxValue !== 'number' && typeof maxValue !== 'string') {\n            throw new Error(`Decorator '@maxValue' parameter 'maxValue' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, maxValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxValue' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, maxValue});\n        }\n    };\n}\n\n\nexport function withGreaterThan(greaterThanValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof greaterThanValue !== 'number' && typeof greaterThanValue !== 'string') {\n            throw new Error(`Decorator '@greaterThan' parameter 'greaterThan' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@greaterThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, greaterThanValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@greaterThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, greaterThanValue});\n        }\n    };\n}\n\n\nexport function withLessThan(lessThanValue: number | string) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof lessThanValue !== 'number' && typeof lessThanValue !== 'string') {\n            throw new Error(`Decorator '@lessThan' parameter 'lessThan' should be number or string.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@lessThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, lessThanValue}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@lessThan' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, lessThanValue});\n        }\n    };\n}\n\n\nexport function withMinLength(minLength: number) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof minLength !== 'number') {\n            throw new Error(`Decorator '@minLength' parameter 'minLength' should be number.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@minLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, minLength}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@minLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, minLength});\n        }\n    };\n}\n\n\nexport function withMaxLength(maxLength: number) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof maxLength !== 'number') {\n            throw new Error(`Decorator '@maxLength' parameter 'maxLength' should be number.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, maxLength}});\n        } else {\n            if (!ty || ty.kind !== 'primitive') {\n                throw new Error(`Decorator '@maxLength' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, maxLength});\n        }\n    };\n}\n\n\nexport function withMatch(pattern: RegExp) {\n    return (ty: PrimitiveTypeAssertion) => {\n        if (typeof pattern !== 'object') {\n            throw new Error(`Decorator '@match' parameter 'pattern' should be RegExp.`);\n        }\n        if ((ty as TypeAssertion).kind === 'optional') {\n            const opt = (ty as any as OptionalAssertion).optional;\n            if (opt.kind !== 'primitive') {\n                throw new Error(`Decorator '@match' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, optional: {...opt, pattern}});\n        } else {\n            if (!ty || ty.kind !== 'primitive' || ty.primitiveName !== 'string') {\n                throw new Error(`Decorator '@match' cannot be applied to anything other than 'primitive'.`);\n            }\n            return ({...ty, pattern});\n        }\n    };\n}\n\n\nexport function withStereotype<T extends TypeAssertion>(stereotype: string): (ty: T) => T {\n    if (typeof stereotype !== 'string') {\n        throw new Error(`Decorator '@stereotype' parameter 'stereotype' should be string.`);\n    }\n    if (isUnsafeVarNames(dummyTargetObject, stereotype)) {\n        throw new Error(`Unsafe symbol name is appeared in stereotype assertion: ${stereotype}`);\n    }\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            const ret: T = ({\n                ...ty,\n                optional: {\n                    ...(ty as OptionalAssertion).optional,\n                    stereotype,\n                },\n            });\n            return ret;\n        } else {\n            const ret: T = ({\n                ...ty,\n                stereotype,\n            });\n            return ret;\n        }\n    };\n}\n\n\nexport function withConstraint<T extends TypeAssertion>(name: string, args?: any): (ty: T) => T {\n    if (typeof name !== 'string') {\n        throw new Error(`Decorator '@constraint' parameter 'name' should be string.`);\n    }\n    if (isUnsafeVarNames(dummyTargetObject, name)) {\n        throw new Error(`Unsafe symbol name is appeared in constraint assertion: ${name}`);\n    }\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            const opt = (ty as OptionalAssertion).optional;\n            const ret: T = ({\n                ...ty,\n                optional: {\n                    ...opt,\n                    customConstraints: opt.customConstraints\n                        ? opt.customConstraints.slice().push(name)\n                        : [name],\n                    customConstraintsArgs: opt.customConstraintsArgs\n                        ? {...opt.customConstraintsArgs, [name]: args}\n                        : {[name]: args},\n                },\n            });\n            return ret;\n        } else {\n            const ret: T = ({\n                ...ty,\n                customConstraints: ty.customConstraints\n                    ? ty.customConstraints.slice().push(name)\n                    : [name],\n                customConstraintsArgs: ty.customConstraintsArgs\n                    ? {...ty.customConstraintsArgs, [name]: args}\n                    : {[name]: args},\n            });\n            return ret;\n        }\n    };\n}\n\n\nexport function withForceCast<T extends TypeAssertion>(): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            const ret: T = ({\n                ...ty,\n                optional: {\n                    ...(ty as OptionalAssertion).optional,\n                    forceCast: true,\n                },\n            });\n            return ret;\n        } else {\n            const ret: T = ({\n                ...ty,\n                forceCast: true,\n            });\n            return ret;\n        }\n    };\n}\n\n\nexport function withRecordType<T extends TypeAssertion>(): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            const ret: T = ({\n                ...ty,\n                optional: {\n                    ...(ty as OptionalAssertion).optional,\n                    isRecordTypeField: true,\n                },\n            });\n            return ret;\n        } else {\n            const ret: T = ({\n                ...ty,\n                isRecordTypeField: true,\n            });\n            return ret;\n        }\n    };\n}\n\n\nexport function withMeta<T extends TypeAssertion>(meta: any): (ty: T) => T {\n    return (ty: T) => {\n        const ret: T = ({\n            ...ty,\n            meta,\n        });\n        return ret;\n    };\n}\n\n\nexport function withMsg<T extends TypeAssertion>(messages: string | ErrorMessages): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            if (typeof messages === 'string') {\n                const ret = ({\n                    ...ty,\n                    message: messages,\n                    optional: {...(ty as OptionalAssertion).optional, message: messages},\n                });\n                delete ret.messages;\n                delete ret.optional.messages;\n                return ret;\n            } else {\n                const ret = ({\n                    ...ty,\n                    messages,\n                    optional: {...(ty as OptionalAssertion).optional, messages},\n                });\n                delete ret.message;\n                delete ret.optional.message;\n                return ret;\n            }\n        } else {\n            if (typeof messages === 'string') {\n                const ret = ({...ty, message: messages});\n                delete ret.messages;\n                return ret;\n            } else {\n                const ret = ({...ty, messages});\n                delete ret.message;\n                return ret;\n            }\n        }\n    };\n}\n\n\nexport function withMsgId<T extends TypeAssertion>(messageId: string): (ty: T) => T {\n    return (ty: T) => {\n        if (ty.kind === 'optional') {\n            return ({\n                ...ty,\n                messageId,\n                optional: {...(ty as OptionalAssertion).optional, messageId},\n            });\n        } else {\n            return ({...ty, messageId});\n        }\n    };\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxToken }             from '../types';\r\nimport { isSymbol }            from '../ast';\r\nimport { resolveSplice,\r\n         resolveMacro,\r\n         resolveValueSymbol,\r\n         getScope }            from '../evaluate';\r\nimport { setEvaluationCount,\r\n         checkUnsafeVarNamesEx,\r\n         checkUnsafeVarNames } from '../errors';\r\n\r\n\r\n\r\nexport function applyMacros(state: SxParserState, tok: SxToken) {\r\n    let r: SxToken = tok;\r\n    for (;;) {\r\n        if (Array.isArray(r)) {\r\n            if (r.length === 0) {\r\n                break;\r\n            }\r\n            r = resolveSplice(state, r);\r\n            const sym = isSymbol(r[0]);\r\n            if (sym) {\r\n                const m = resolveMacro(state, sym, r);\r\n                if (m) {\r\n                    r = m.fn(m.actualArgs as SxToken[]);\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n        setEvaluationCount(state);\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport function stripQuote(state: SxParserState, tok: SxToken) {\r\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\r\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\r\n    }\r\n    return (tok as any)[1];\r\n}\r\n\r\n\r\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\r\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\r\n        return (tok as any)[1];\r\n    } else {\r\n        return tok;\r\n    }\r\n}\r\n\r\n\r\nexport function getScope_stateApplied(state: SxParserState) {\r\n    return (function() { return getScope(state); });\r\n}\r\n\r\n\r\nexport function resolveValueSymbol_dynamic(state: SxParserState, varName: string) {\r\n    checkUnsafeVarNames('(compiler)resolveValueSymbol_dynamic', varName);\r\n    return (function(){ return resolveValueSymbol(state, {symbol: varName}); });\r\n}\r\n\r\nexport function checkUnsafeVarNames_dynamic(name: string) {\r\n    return (function(varName: string){ return checkUnsafeVarNames(name, varName); });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport function escapeString(s: string) {\n    return (s\n        .replace(/\\x08/g, '\\\\b')\n        .replace(/\\f/g, '\\\\f')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\v/g, '\\\\v')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\'/g, '\\\\\\'')\n        .replace(/\\\"/g, '\\\\\\\"')\n        .replace(/\\`/g, '\\\\\\`')\n    );\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         ValidationContext } from '../types';\n\n\n\nexport class ValidationError extends Error {\n    public ty?: TypeAssertion;\n    public ctx?: Partial<ValidationContext>;\n    public constructor(message: string, ty?: TypeAssertion, ctx?: Partial<ValidationContext>) {\n        super(message);\n        this.ty = ty;\n        this.ctx = ctx;\n    }\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         TypeAssertionMap,\n         TypeAssertionSetValue,\n         ObjectAssertion,\n         AssertionSymlink,\n         SymbolResolverOperators,\n         ResolveSymbolOptions,\n         SymbolResolverContext } from '../types';\nimport * as operators            from '../operators';\nimport { NumberPattern }         from '../lib/util';\n\n\n\nfunction mergeTypeAndSymlink(ty: TypeAssertion, link: AssertionSymlink): TypeAssertion {\n    const link2 = {...link};\n    delete link2.kind;\n    delete link2.symlinkTargetName;\n    delete link2.memberTree;\n    return ({...ty, ...link2} as any as TypeAssertion);\n}\n\n\nfunction updateSchema(original: TypeAssertion, schema: TypeAssertionMap, ty: TypeAssertion, typeName: string | undefined) {\n    if (typeName && schema.has(typeName)) {\n        const z: TypeAssertionSetValue = schema.get(typeName) as TypeAssertionSetValue;\n        if (z.ty === original) {\n            schema.set(typeName, {...z, ty, resolved: true});\n        }\n    }\n    return ty;\n}\n\n\nexport function resolveMemberNames(\n        ty: TypeAssertion, rootSym: string, memberTreeSymbols: string[], memberPos: number): TypeAssertion {\n\n    const addTypeName = (mt: TypeAssertion, typeName: string | undefined, memberSym: string) => {\n        if (typeName) {\n            return ({\n                ...mt,\n                typeName: memberPos === 0 ?\n                    `${rootSym}.${memberTreeSymbols.join('.')}` :\n                    `${typeName}.${memberSym}`,\n            });\n        } else {\n            return mt;\n        }\n    };\n\n    for (let i = memberPos; i < memberTreeSymbols.length; i++) {\n        const memberSym = memberTreeSymbols[i];\n\n        switch (ty.kind) {\n        case 'optional':\n            return resolveMemberNames(ty.optional, rootSym, memberTreeSymbols, i + 1);\n        case 'object':\n            for (const m of ty.members) {\n                if (memberSym === m[0]) {\n                    return addTypeName(\n                        resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1),\n                        ty.typeName,\n                        memberSym,\n                    );\n                }\n            }\n            if (ty.additionalProps) {\n                for (const m of ty.additionalProps) {\n                    for (const k of m[0]) {\n                        switch (k) {\n                        case 'number':\n                            if (NumberPattern.test(memberSym)) {\n                                return resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1);\n                            }\n                            break;\n                        case 'string':\n                            return resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1);\n                        default:\n                            if (k.test(memberSym)) {\n                                return resolveMemberNames(m[1], rootSym, memberTreeSymbols, i + 1);\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            throw new Error(`Undefined member name is appeared: ${memberSym}`);\n        case 'symlink':\n            if (! ty.typeName) {\n                throw new Error(`Reference of anonymous type is appeared: ${memberSym}`);\n            }\n            return ({\n                ...{\n                    kind: 'symlink',\n                    symlinkTargetName: rootSym,\n                    name: memberSym,\n                    typeName: rootSym,\n                },\n                ...(0 < memberTreeSymbols.length ? {\n                    memberTree: memberTreeSymbols,\n                } : {}),\n            });\n        default:\n            // TODO: kind === 'operator'\n            throw new Error(`Unsupported type kind is appeared: (kind:${ty.kind}).${memberSym}`);\n        }\n    }\n    return ty;\n}\n\n\nexport function resolveSymbols(schema: TypeAssertionMap, ty: TypeAssertion, ctx: SymbolResolverContext): TypeAssertion {\n    const ctx2 = {...ctx, nestLevel: ctx.nestLevel + 1};\n    switch (ty.kind) {\n    case 'symlink':\n        {\n            const x = schema.get(ty.symlinkTargetName);\n            if (! x) {\n                throw new Error(`Undefined symbol '${ty.symlinkTargetName}' is referred.`);\n            }\n            if (0 <= ctx.symlinkStack.findIndex(s => s === ty.symlinkTargetName)) {\n                return ty;\n            }\n\n            const ty2 = {...ty};\n            let xTy = x.ty;\n            if (ty.memberTree && 0 < ty.memberTree.length) {\n                xTy = {\n                    ...resolveMemberNames(xTy, ty.symlinkTargetName, ty.memberTree, 0),\n                };\n                ty2.typeName = xTy.typeName;\n            }\n\n            return (\n                resolveSymbols(\n                    schema,\n                    mergeTypeAndSymlink(xTy, ty2),\n                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty2.symlinkTargetName]},\n                )\n            );\n        }\n    case 'repeated':\n        return updateSchema(ty, schema, {\n            ...ty,\n            repeated: resolveSymbols(schema, ty.repeated, ctx2),\n        }, ty.typeName);\n    case 'spread':\n        return updateSchema(ty, schema, {\n            ...ty,\n            spread: resolveSymbols(schema, ty.spread, ctx2),\n        }, ty.typeName);\n    case 'sequence':\n        return updateSchema(ty, schema, {\n            ...ty,\n            sequence: ty.sequence.map(x => resolveSymbols(schema, x, ctx2)),\n        }, ty.typeName);\n    case 'one-of':\n        return updateSchema(ty, schema, {\n            ...ty,\n            oneOf: ty.oneOf.map(x => resolveSymbols(schema, x, ctx2)),\n        }, ty.typeName);\n    case 'optional':\n        return updateSchema(ty, schema, {\n            ...ty,\n            optional: resolveSymbols(schema, ty.optional, ctx2),\n        }, ty.typeName);\n    case 'object':\n        {\n            if (0 < ctx.nestLevel && ty.typeName && 0 <= ctx.symlinkStack.findIndex(s => s === ty.typeName)) {\n                if (schema.has(ty.typeName)) {\n                    const z = schema.get(ty.typeName) as TypeAssertionSetValue;\n                    if (z.resolved) {\n                        return z.ty;\n                    }\n                }\n            }\n\n            const baseSymlinks = ty.baseTypes?.filter(x => x.kind === 'symlink') as AssertionSymlink[];\n            if (baseSymlinks && baseSymlinks.length > 0 && !ctx.isDeserialization) {\n                const exts = baseSymlinks\n                    .map(x => resolveSymbols(schema, x, ctx2))\n                    .filter(x => x.kind === 'object');\n                // TODO: if x.kind !== 'object' items exist -> error?\n                const d2 = resolveSymbols(\n                    schema,\n                    operators.derived({\n                        ...ty,\n                        ...(ty.baseTypes ? {\n                            baseTypes: ty.baseTypes.filter(x => x.kind !== 'symlink'),\n                        } : {}),\n                    }, ...exts),\n                    ty.typeName ?\n                        {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2,\n                );\n                return updateSchema(ty, schema, {\n                    ...ty,\n                    ...d2,\n                }, ty.typeName);\n            } else {\n                return updateSchema(ty, schema, {\n                    ...{\n                        ...ty,\n                        members: ty.members\n                            .map(x => [\n                                x[0],\n                                resolveSymbols(schema, x[1], ty.typeName ?\n                                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2),\n                                ...x.slice(2),\n                            ] as any),\n                    },\n                    ...(ty.additionalProps && 0 < ty.additionalProps.length ? {\n                        additionalProps: ty.additionalProps\n                            .map(x => [\n                                x[0],\n                                resolveSymbols(schema, x[1], ty.typeName ?\n                                    {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2),\n                                ...x.slice(2),\n                            ] as any),\n                    } : {}),\n                    ...(ty.baseTypes && 0 < ty.baseTypes.length ? {\n                        baseTypes: ctx.isDeserialization ?\n                            ty.baseTypes\n                                .map(x => x.kind === 'symlink' ? resolveSymbols(schema, x, ctx2) : x)\n                                .filter(x => x.kind === 'object') as ObjectAssertion[] :\n                            ty.baseTypes,\n                    } : {}),\n                }, ty.typeName);\n            }\n        }\n    case 'operator':\n        if (ctx2.operators) {\n            const ctx3 = ty.typeName ?\n                {...ctx2, symlinkStack: [...ctx2.symlinkStack, ty.typeName]} : ctx2;\n            const operands = ty.operands.map(x => {\n                if (typeof x === 'object' && x.kind) {\n                    return resolveSymbols(schema, x, ctx3);\n                }\n                return x;\n            });\n            if (0 < operands.filter(x => x && typeof x === 'object' &&\n                    (x.kind === 'symlink' || x.kind === 'operator')).length) {\n                throw new Error(`Unresolved type operator is found: ${ty.operator}`);\n            }\n            if (! ctx2.operators[ty.operator]) {\n                throw new Error(`Undefined type operator is found: ${ty.operator}`);\n            }\n            const ty2 = {...ty};\n            delete ty2.operator;\n            delete ty2.operands;\n            return updateSchema(\n                ty, schema,\n                {\n                    ...ty2,\n                    ...resolveSymbols(schema, ctx2.operators[ty.operator](...operands), ctx3),\n                },\n                ty.typeName,\n            );\n        } else {\n            return ty;\n        }\n    default:\n        return ty;\n    }\n}\n\n\nconst resolverOps: SymbolResolverOperators = {\n    picked: operators.picked,\n    omit: operators.omit,\n    partial: operators.partial,\n    intersect: operators.intersect,\n    subtract: operators.subtract,\n};\n\n\nexport function resolveSchema(schema: TypeAssertionMap, opts?: ResolveSymbolOptions): TypeAssertionMap {\n    for (const ent of schema.entries()) {\n        const ty = resolveSymbols(schema, ent[1].ty, {...opts, nestLevel: 0, symlinkStack: [ent[0]], operators: resolverOps});\n        ent[1].ty = ty;\n    }\n\n    return schema;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ErrorTypes,\n         ErrorMessages,\n         TypeAssertionErrorMessageConstraints,\n         TypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         OptionalAssertion,\n         ObjectAssertion,\n         ValidationContext } from '../types';\nimport { escapeString }      from './escape';\n\n\nexport const errorTypeNames = [\n    '',\n    'InvalidDefinition',\n    'Required',\n    'TypeUnmatched',\n    'AdditionalPropUnmatched',\n    'RepeatQtyUnmatched',\n    'SequenceUnmatched',\n    'ValueRangeUnmatched',\n    'ValuePatternUnmatched',\n    'ValueLengthUnmatched',\n    'ValueUnmatched',\n];\n\n\nexport const defaultMessages: ErrorMessages = {\n    invalidDefinition:       '\"%{name}\" of \"%{parentType}\" type definition is invalid.',\n    required:                '\"%{name}\" of \"%{parentType}\" is required.',\n    typeUnmatched:           '\"%{name}\" of \"%{parentType}\" should be type \"%{expectedType}\".',\n    additionalPropUnmatched: '\"%{addtionalProps}\" of \"%{parentType}\" are not matched to additional property patterns.',\n    repeatQtyUnmatched:      '\"%{name}\" of \"%{parentType}\" should repeat %{repeatQty} times.',\n    sequenceUnmatched:       '\"%{name}\" of \"%{parentType}\" sequence is not matched',\n    valueRangeUnmatched:     '\"%{name}\" of \"%{parentType}\" value should be in the range %{minValue} to %{maxValue}.',\n    valuePatternUnmatched:   '\"%{name}\" of \"%{parentType}\" value should be matched to pattern \"%{pattern}\"',\n    valueLengthUnmatched:    '\"%{name}\" of \"%{parentType}\" length should be in the range %{minLength} to %{maxLength}.',\n    valueUnmatched:          '\"%{name}\" of \"%{parentType}\" value should be \"%{expectedValue}\".',\n};\n\n\ntype TopRepeatable = RepeatedAssertion | SpreadAssertion | OptionalAssertion | null;\n\n\ninterface ReportErrorArguments {\n    ctx: ValidationContext;\n    substitutions?: [[string, string]]; // addtional or overwritten substitution values\n}\n\n\nfunction getErrorMessage(errType: ErrorTypes, ...messages: ErrorMessages[]) {\n    for (const m of messages) {\n        switch (errType) {\n        case ErrorTypes.InvalidDefinition:\n            if (m.invalidDefinition) {\n                return m.invalidDefinition;\n            }\n            break;\n        case ErrorTypes.Required:\n            if (m.required) {\n                return m.required;\n            }\n            break;\n        case ErrorTypes.TypeUnmatched:\n            if (m.typeUnmatched) {\n                return m.typeUnmatched;\n            }\n            break;\n        case ErrorTypes.AdditionalPropUnmatched:\n            if (m.additionalPropUnmatched) {\n                return m.additionalPropUnmatched;\n            }\n            break;\n        case ErrorTypes.RepeatQtyUnmatched:\n            if (m.repeatQtyUnmatched) {\n                return m.repeatQtyUnmatched;\n            }\n            break;\n        case ErrorTypes.SequenceUnmatched:\n            if (m.sequenceUnmatched) {\n                return m.sequenceUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueRangeUnmatched:\n            if (m.valueRangeUnmatched) {\n                return m.valueRangeUnmatched;\n            }\n            break;\n        case ErrorTypes.ValuePatternUnmatched:\n            if (m.valuePatternUnmatched) {\n                return m.valuePatternUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueLengthUnmatched:\n            if (m.valueLengthUnmatched) {\n                return m.valueLengthUnmatched;\n            }\n            break;\n        case ErrorTypes.ValueUnmatched:\n            if (m.valueUnmatched) {\n                return m.valueUnmatched;\n            }\n            break;\n        }\n    }\n    return '';\n}\n\n\nfunction nvl(v: any, alt: any) {\n    return (\n        v !== null && v !== void 0 ? v : alt\n    );\n}\n\n\nfunction findTopRepeatableAssertion(ctx: ValidationContext): TopRepeatable {\n    const ret = ctx.typeStack\n        .slice()\n        .reverse()\n        .map(x => Array.isArray(x) ? x[0] : x)\n        .find(x => x.kind === 'repeated' || x.kind === 'spread' || x.kind === 'optional'\n                ) as RepeatedAssertion | SpreadAssertion | OptionalAssertion || null;\n    return ret;\n}\n\n\nfunction getExpectedType(ty: TypeAssertion): string {\n    switch (ty.kind) {\n    case 'repeated':\n        return `(repeated ${getExpectedType(ty.repeated)})`;\n    case 'spread':\n        return getExpectedType(ty.spread);\n    case 'sequence':\n        return '(sequence)';\n    case 'primitive':\n        return ty.primitiveName;\n    case 'primitive-value':\n        return `(value ${\n            typeof ty.value === 'string' ?\n                `'${String(ty.value)}'` :\n                String(ty.value)})`;\n    case 'optional':\n        return getExpectedType(ty.optional);\n    case 'one-of':\n        return `(one of ${ty.oneOf.map(x => getExpectedType(x)).join(', ')})`;\n    case 'never': case 'any': case 'unknown':\n        return ty.kind;\n    case 'symlink':\n        return ty.symlinkTargetName;\n    default:\n        return ty.typeName ? ty.typeName : '?';\n    }\n}\n\n\nexport function formatErrorMessage(\n        msg: string, data: any, ty: TypeAssertion,\n        args: ReportErrorArguments,\n        values: {dataPath: string, topRepeatable: TopRepeatable, parentType: string, entryName: string}) {\n\n    let ret = msg;\n    // TODO: complex type object members' custom error messages are not displayed?\n    // TODO: escapeString() is needed?\n\n    const tr = values.topRepeatable;\n\n    const dict = new Map<string, string>([\n        ['expectedType',\n            ty.stereotype ?\n                ty.stereotype :\n            escapeString(getExpectedType(ty))],\n        ['type',\n            escapeString(typeof data)],\n        ['expectedValue',\n            escapeString(\n                ty.kind === 'primitive-value' ?\n                    String(ty.value) :\n                ty.kind === 'enum' ?\n                    ty.typeName ?\n                        `enum member of ${ty.typeName}` :\n                        '?' :\n                '?')],\n        ['value',\n            escapeString(String(data))],\n        ['repeatQty',\n            escapeString(\n                tr ?\n                    tr.kind !== 'optional' ? `${\n                        nvl(tr.min, '')}${\n                            (tr.min !== null && tr.min !== void 0) ||\n                            (tr.max !== null && tr.max !== void 0) ? '..' : ''}${\n                            nvl(tr.max, '')}` :\n                        '0..1' :\n                    '?')],\n        ['minValue',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.minValue, nvl(ty.greaterThanValue, '(smallest)'))}` : '?')],\n        ['maxValue',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.maxValue, nvl(ty.lessThanValue, '(biggest)'))}` : '?')],\n        ['pattern',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${ty.pattern ? `/${ty.pattern.source}/${ty.pattern.flags}` : '(pattern)'}` : '?')],\n        ['minLength',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.minLength, '0')}` : '?')],\n        ['maxLength',\n            escapeString(\n                ty.kind === 'primitive' ?\n                    `${nvl(ty.maxLength, '(biggest)')}` : '?')],\n        ['name',\n            escapeString(\n                `${ty.kind !== 'repeated' && values.dataPath.endsWith('repeated)') ?\n                    'repeated item of ' :\n                   ty.kind !== 'sequence' && values.dataPath.endsWith('sequence)') ?\n                    'sequence item of ' : ''}${\n                values.entryName || '?'}`)],\n        ['parentType',\n            escapeString(\n                values.parentType || '?')],\n        ['dataPath',\n            values.dataPath],\n\n        ...(args.substitutions || []),\n    ]);\n\n    for (const ent of dict.entries()) {\n        ret = ret.replace(new RegExp(`%{${ent[0]}}`), ent[1]);\n    }\n\n    return ret;\n}\n\n\ninterface DataPathEntry {\n    name: string;\n    kind: 'type' | 'key' | 'index';\n}\n\n\nexport function reportError(\n        errType: ErrorTypes, data: any, ty: TypeAssertion,\n        args: ReportErrorArguments) {\n\n    const messages: ErrorMessages[] = [];\n    if (ty.messages) {\n        messages.push(ty.messages);\n    }\n    if (args.ctx.errorMessages) {\n        messages.push(args.ctx.errorMessages);\n    }\n    messages.push(defaultMessages);\n\n    const dataPathEntryArray: DataPathEntry[] = [];\n\n    for (let i = 0; i < args.ctx.typeStack.length; i++) {\n        const p = args.ctx.typeStack[i];\n        const next = args.ctx.typeStack[i + 1];\n        const pt = Array.isArray(p) ? p[0] : p;\n        const pi = Array.isArray(next) ? next[1] : void 0;\n\n        let isSet = false;\n        if (pt.kind === 'repeated') {\n            if (i !== args.ctx.typeStack.length - 1) {\n                if (pt.name) {\n                    dataPathEntryArray.push({kind: 'key', name: pt.name});\n                }\n                dataPathEntryArray.push({kind: 'index', name: `(${pi !== void 0 ? `${pi}:` : ''}repeated)`});\n                isSet = true;\n            }\n        } else if (pt.kind === 'sequence') {\n            if (i !== args.ctx.typeStack.length - 1) {\n                if (pt.name) {\n                    dataPathEntryArray.push({kind: 'key', name: pt.name});\n                }\n                dataPathEntryArray.push({kind: 'index', name: `(${pi !== void 0 ? `${pi}:` : ''}sequence)`});\n                isSet = true;\n            }\n        }\n        if (! isSet) {\n            if (pt.name) {\n                if (i === 0) {\n                    if (pt.typeName) {\n                        dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n                    } else {\n                        dataPathEntryArray.push({kind: 'key', name: pt.name});\n                    }\n                } else {\n                    const len = dataPathEntryArray.length;\n                    if (len && dataPathEntryArray[len - 1].kind === 'type') {\n                        if (pt.kind === 'object' && next && pt.typeName) {\n                            dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n                        } else {\n                            dataPathEntryArray.push({kind: 'key', name: pt.name as string}); // NOTE: type inference failed\n                        }\n                    } else {\n                        if (pt.typeName) {\n                            dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n                        } else {\n                            dataPathEntryArray.push({kind: 'key', name: pt.name});\n                        }\n                    }\n                }\n            } else if (pt.typeName) {\n                dataPathEntryArray.push({kind: 'type', name: pt.typeName});\n            }\n        }\n    }\n\n    let dataPath = '';\n    for (let i = 0; i < dataPathEntryArray.length; i++) {\n        const p = dataPathEntryArray[i];\n        dataPath += p.name;\n        if (i + 1 === dataPathEntryArray.length) {\n            break;\n        }\n        dataPath += p.kind === 'type' ? ':' : '.';\n    }\n\n    let parentType = '';\n    let entryName = '';\n    for (let i = dataPathEntryArray.length - 1; 0 <= i; i--) {\n        const p = dataPathEntryArray[i];\n        if (p.kind === 'type') {\n            if (i !== 0 && i === dataPathEntryArray.length - 1) {\n                const q = dataPathEntryArray[i - 1];\n                if (q.kind === 'index') {\n                    continue; // e.g.: \"File:acl.(0:repeated).ACL\"\n                }\n            }                 // else: \"File:acl.(0:repeated).ACL:target\"\n            parentType = p.name;\n            for (let j = i + 1; j < dataPathEntryArray.length; j++) {\n                const q = dataPathEntryArray[j];\n                if (q.kind === 'key') {\n                    entryName = q.name;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    if (! parentType) {\n        for (let i = args.ctx.typeStack.length - 1; 0 <= i; i--) {\n            const p = args.ctx.typeStack[i];\n            const pt = Array.isArray(p) ? p[0] : p;\n            if (pt.typeName) {\n                parentType = pt.typeName;\n            }\n        }\n    }\n\n    const topRepeatable: TopRepeatable = findTopRepeatableAssertion(args.ctx);\n    const values = {dataPath, topRepeatable, parentType, entryName};\n\n    const constraints: TypeAssertionErrorMessageConstraints = {};\n    const cSrces: TypeAssertionErrorMessageConstraints[] = [ty as any];\n\n    if (errType === ErrorTypes.RepeatQtyUnmatched && topRepeatable) {\n        cSrces.unshift(topRepeatable as any);\n    }\n\n    for (const cSrc of cSrces) {\n        if (nvl(cSrc.minValue, false)) {\n            constraints.minValue = cSrc.minValue;\n        }\n        if (nvl(cSrc.maxValue, false)) {\n            constraints.maxValue = cSrc.maxValue;\n        }\n        if (nvl(cSrc.greaterThanValue, false)) {\n            constraints.greaterThanValue = cSrc.greaterThanValue;\n        }\n        if (nvl(cSrc.lessThanValue, false)) {\n            constraints.lessThanValue = cSrc.lessThanValue;\n        }\n        if (nvl(cSrc.minLength, false)) {\n            constraints.minLength = cSrc.minLength;\n        }\n        if (nvl(cSrc.maxLength, false)) {\n            constraints.maxLength = cSrc.maxLength;\n        }\n        if (nvl(cSrc.pattern, false)) {\n            const pat = cSrc.pattern as any as RegExp;\n            constraints.pattern = `/${pat.source}/${pat.flags}`;\n        }\n        if (nvl(cSrc.min, false)) {\n            constraints.min = cSrc.min;\n        }\n        if (nvl(cSrc.max, false)) {\n            constraints.max = cSrc.max;\n        }\n    }\n\n    const val: {value?: any} = {};\n\n    switch (typeof data) {\n    case 'number': case 'bigint': case 'string': case 'boolean': case 'undefined':\n        val.value = data;\n        break;\n    case 'object':\n        if (data === null) {\n            val.value = data;\n        }\n    }\n\n    if (ty.messageId) {\n        args.ctx.errors.push({\n            code: `${ty.messageId}-${errorTypeNames[errType]}`,\n            message: formatErrorMessage(ty.message ?\n                ty.message :\n                getErrorMessage(errType, ...messages), data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    } else if (ty.message) {\n        args.ctx.errors.push({\n            code: `${errorTypeNames[errType]}`,\n            message: formatErrorMessage(ty.message, data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    } else {\n        args.ctx.errors.push({\n            code: `${errorTypeNames[errType]}`,\n            message: formatErrorMessage(getErrorMessage(errType, ...messages), data, ty, args, values),\n            dataPath,\n            constraints,\n            ...val,\n        });\n    }\n}\n\n\nexport function reportErrorWithPush(\n        errType: ErrorTypes, data: any,\n        tyidx: [TypeAssertion, number | string | undefined],\n        args: ReportErrorArguments) {\n\n    try {\n        args.ctx.typeStack.push(tyidx);\n        reportError(errType, data, tyidx[0], args);\n    } finally {\n        args.ctx.typeStack.pop();\n    }\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { Stereotype } from '../types';\n\n\n\nexport const noopStereotype: Stereotype = {\n    tryParse: (value: any) => {\n        return ({ value });\n    },\n    evaluateFormula: (valueOrFormula: any) => {\n        return valueOrFormula;\n    },\n    compare: (a: any, b: any) => {\n        // NOTE: You should pass assertion value (schema value) into 'a'.\n        const tyA = typeof a;\n        const tyB = typeof b;\n        if (tyA !== tyB) {\n            return NaN;\n        }\n        switch (tyA) {\n        case 'number':\n            if (Number.isNaN(a) && Number.isNaN(b)) {\n                return 0;\n            } else {\n                return a - b;\n            }\n        default:\n            if (a === b) {\n                return 0;\n            } else if (a > b) {\n                return 1;\n            } else if (a < b) {\n                return -1;\n            } else {\n                return NaN;\n            }\n        }\n    },\n    doCast: false,\n};\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { ErrorTypes,\n         NeverTypeAssertion,\n         AnyTypeAssertion,\n         UnknownTypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SequenceAssertion,\n         SpreadAssertion,\n         OptionalAssertion,\n         OneOfAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertion,\n         ValidationContext,\n         TypeAssertionMap,\n         Stereotype,\n         CustomConstraintInfo } from './types';\nimport { ValidationError }      from './lib/errors';\nimport { NumberPattern,\n         isUnsafeVarNames }     from './lib/util';\nimport { reportError,\n         reportErrorWithPush }  from './lib/reporter';\nimport { resolveSymbols }       from './lib/resolver';\nimport { noopStereotype }       from './stereotypes/noop';\n\n\n\nfunction checkStereotypes(\n    data: any, ty: TypeAssertion, ctx: ValidationContext):\n        {value: any, stereotype: Stereotype} | null | false {\n\n    if (ty.stereotype && ctx.stereotypes) {\n        if (ctx.stereotypes.has(ty.stereotype)) {\n            const stereotype = ctx.stereotypes.get(ty.stereotype) as Stereotype;\n            const parsed = stereotype.tryParse(data);\n            if (parsed) {\n                return ({\n                    value: parsed.value,\n                    stereotype,\n                });\n            } else {\n                return null;\n            }\n        } else {\n            throw new Error(`Undefined stereotype is specified: ${ty.stereotype}`);\n        }\n    }\n    return false;\n}\n\n\nfunction forceCast(\n    targetType:\n        'number' | 'integer' | 'bigint' | 'string' | 'boolean' | 'undefined' | 'null' |\n        'symbol' | 'object' | 'function',\n    value: any) {\n\n    switch (targetType) {\n    case 'number':\n        if (typeof value === 'number') {\n            return value;\n        } else {\n            const a = Number.parseFloat(String(value));\n            if (Number.isNaN(a)) {\n                return Number(value ?? 0);\n            } else {\n                return a;\n            }\n        }\n    case 'integer':\n        if (typeof value === 'number' && Math.trunc(value) === value) {\n            return value;\n        } else {\n            let a = Number.parseFloat(String(value));\n            if (Number.isNaN(a)) {\n                a = Number(value ?? 0);\n            }\n            return Math.trunc(a);\n        }\n    case 'bigint':\n        try {\n            return BigInt(value ?? 0);\n        } catch {\n            return NaN;\n        }\n    case 'string':\n        return String(value);\n    case 'boolean':\n        return Boolean(value);\n    case 'undefined':\n        return void 0;\n    case 'null':\n        return null;\n    default:\n        return value;\n    }\n}\n\n\nfunction checkCustomConstraints(\n    data: any, ty: TypeAssertion, ctx: ValidationContext): boolean | null {\n\n    if (ty.customConstraints && ctx.customConstraints) {\n        for (const ccName of ty.customConstraints) {\n            if (ctx.customConstraints.has(ccName)) {\n                const cc = ctx.customConstraints.get(ccName) as CustomConstraintInfo;\n                if (cc.kinds && !cc.kinds.includes(ty.kind)) {\n                    return null;\n                }\n                if (! cc.check(data, ty.customConstraintsArgs && ty.customConstraintsArgs[ccName])) {\n                    return null;\n                }\n            } else {\n                throw new Error(`Undefined constraint is specified: ${ccName}`);\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\n\nfunction validateNeverTypeAssertion<T>(\n    data: any, ty: NeverTypeAssertion, ctx: ValidationContext): null {\n\n    reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nfunction validateAnyTypeAssertion<T>(\n    data: any, ty: AnyTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let chkSt = checkStereotypes(data, ty, ctx);\n    if (chkSt === null) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    } else if (chkSt === false) {\n        chkSt = {\n            value: data,\n            stereotype: noopStereotype,\n        };\n    }\n    const styp = chkSt.stereotype;\n\n    if (checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    // always matched\n    return ({value: ctx.mapper\n        ? ctx.mapper(styp.doCast ? chkSt.value : data, ty)\n        :            styp.doCast ? chkSt.value : data});\n}\n\n\nfunction validateUnknownTypeAssertion<T>(\n    data: any, ty: UnknownTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let chkSt = checkStereotypes(data, ty, ctx);\n    if (chkSt === null) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    } else if (chkSt === false) {\n        chkSt = {\n            value: data,\n            stereotype: noopStereotype,\n        };\n    }\n    const styp = chkSt.stereotype;\n\n    if (checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    // always matched\n    return ({value: ctx.mapper\n        ? ctx.mapper(styp.doCast ? chkSt.value : data, ty)\n        :            styp.doCast ? chkSt.value : data});\n}\n\n\nfunction validatePrimitiveTypeAssertion<T>(\n    data: any, ty: PrimitiveTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    const chkTarget = ty.forceCast ? forceCast(ty.primitiveName, data) : data;\n\n    if (ty.primitiveName === 'null') {\n        if (chkTarget !== null) {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n    } else if (ty.primitiveName === 'integer') {\n        if (typeof chkTarget !== 'number') {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n        if (Math.trunc(chkTarget) !== chkTarget) {\n            reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n            return null;\n        }\n    } else if (typeof chkTarget !== ty.primitiveName) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    // TODO: Function, DateStr, DateTimeStr\n\n    let chkSt = checkStereotypes(chkTarget, ty, ctx);\n    if (chkSt === null) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    } else if (chkSt === false) {\n        chkSt = {\n            value: chkTarget,\n            stereotype: ty.forceCast ? noopStereotype : noopStereotype,\n        };\n    }\n\n    const styVal = chkSt.value;\n    const styp = chkSt.stereotype;\n    let err = false;\n\n    let valueRangeErr = false;\n    switch (typeof ty.minValue) {\n    case 'number': case 'string': // TODO: bigint\n        if (styp.compare(styVal, styp.evaluateFormula(ty.minValue)) < 0) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.maxValue) {\n    case 'number': case 'string': // TODO: bigint\n        if (styp.compare(styVal, styp.evaluateFormula(ty.maxValue)) > 0) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.greaterThanValue) {\n    case 'number': case 'string': // TODO: bigint\n        if (styp.compare(styVal, styp.evaluateFormula(ty.greaterThanValue)) <= 0) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.lessThanValue) {\n    case 'number': case 'string': // TODO: bigint\n        if (styp.compare(styVal, styp.evaluateFormula(ty.lessThanValue)) >= 0) {\n            if (! valueRangeErr) {\n                reportError(ErrorTypes.ValueRangeUnmatched, data, ty, {ctx});\n            }\n            valueRangeErr = true;\n            err = true;\n        }\n    }\n\n    let valueLengthErr = false;\n    switch (typeof ty.minLength) {\n    case 'number':\n        if (typeof styVal !== 'string' || styVal.length < ty.minLength) {\n            if (! valueLengthErr) {\n                reportError(ErrorTypes.ValueLengthUnmatched, data, ty, {ctx});\n            }\n            valueLengthErr = true;\n            err = true;\n        }\n    }\n    switch (typeof ty.maxLength) {\n    case 'number':\n        if (typeof styVal !== 'string' || styVal.length > ty.maxLength) {\n            if (! valueLengthErr) {\n                reportError(ErrorTypes.ValueLengthUnmatched, data, ty, {ctx});\n            }\n            valueLengthErr = true;\n            err = true;\n        }\n    }\n\n    if (ty.pattern) {\n        if (typeof styVal !== 'string' || !ty.pattern.test(styVal)) {\n            reportError(ErrorTypes.ValuePatternUnmatched, data, ty, {ctx});\n            err = true;\n        }\n    }\n\n    if (checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        err = true;\n    }\n\n    const ret = !err\n        ? {value: ctx.mapper\n            ? ctx.mapper(styp.doCast ? chkSt.value : chkTarget, ty)\n            :            styp.doCast ? chkSt.value : chkTarget}\n        : null;\n    return ret;\n}\n\n\nfunction validatePrimitiveValueTypeAssertion<T>(\n    data: any, ty: PrimitiveValueTypeAssertion, ctx: ValidationContext): {value: T} | null {\n\n    const chkTarget = ty.forceCast ? forceCast(typeof ty.value, data) : data;\n\n    let chkSt = checkStereotypes(chkTarget, ty, ctx);\n    if (chkSt === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    } else if (chkSt === false) {\n        chkSt = {\n            value: chkTarget,\n            stereotype: ty.forceCast ? noopStereotype : noopStereotype,\n        };\n    }\n    const styp = chkSt.stereotype;\n\n    let ret = styp.compare(chkSt.value, styp.evaluateFormula(ty.value)) === 0\n        ? {value: ctx.mapper\n            ? ctx.mapper(styp.doCast ? chkSt.value : chkTarget, ty)\n            :            styp.doCast ? chkSt.value : chkTarget}\n        : null;\n    if (! ret) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n    }\n\n    if (ret && checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        ret = null;\n    }\n\n    return ret;\n}\n\n\nfunction validateRepeatedAssertion<T>(\n    data: any, ty: RepeatedAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (! Array.isArray(data)) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    if (typeof ty.min === 'number' && data.length < ty.min) {\n        reportError(ErrorTypes.RepeatQtyUnmatched, data, ty, {ctx});\n        return null;\n    }\n    if (typeof ty.max === 'number' && data.length > ty.max) {\n        reportError(ErrorTypes.RepeatQtyUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    const retVals: any[] = [];\n    for (let i = 0; i < data.length; i++) {\n        const x = data[i];\n        const r = validateRoot<T>(x, ty.repeated, ctx, i);\n        if (! r) {\n            return null;\n        }\n        retVals.push(r.value);\n    }\n\n    if (checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    return {value: retVals as any};\n}\n\n\nfunction validateSequenceAssertion<T>(\n    data: any, ty: SequenceAssertion, ctx: ValidationContext): {value: T} | null {\n\n    if (! Array.isArray(data)) {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        return null;\n    }\n    let dIdx = 0, // index of data\n        sIdx = 0; // index of types\n    let spreadLen = 0;\n    let optionalOmitted = false;\n\n    const checkSpreadQuantity = (ts: SpreadAssertion, index: number) => {\n        if (typeof ts.min === 'number' && spreadLen < ts.min) {\n            reportErrorWithPush(\n                spreadLen === 0 ?\n                    ErrorTypes.TypeUnmatched :\n                    ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        if (typeof ts.max === 'number' && spreadLen > ts.max) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        return ts;\n    };\n\n    const checkOptionalQuantity = (ts: OptionalAssertion, index: number) => {\n        if (spreadLen === 0) {\n            // All subsequent 'optional' assertions should be 'spreadLen === 0'.\n            optionalOmitted = true;\n        } else if (optionalOmitted) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        } else if (spreadLen > 1) {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, index], {ctx});\n            return null;\n        }\n        return ts;\n    };\n\n    const retVals: any[] = [];\n    while (dIdx < data.length && sIdx < ty.sequence.length) {\n        const ts = ty.sequence[sIdx];\n        if (ts.kind === 'spread') {\n            const savedErrLen = ctx.errors.length;\n            const r = validateRoot<T>(data[dIdx], ts.spread, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                spreadLen++;\n            } else {\n                // End of spreading\n                // rollback reported errors\n                ctx.errors.length = savedErrLen;\n                if (! checkSpreadQuantity(ts, dIdx)) {\n                    return null;\n                }\n                spreadLen = 0;\n                sIdx++;\n            }\n        } else if (ts.kind === 'optional') {\n            const savedErrLen = ctx.errors.length;\n            const r = validateRoot<T>(data[dIdx], ts.optional, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                spreadLen++;\n            } else {\n                // End of spreading\n                // rollback reported errors\n                ctx.errors.length = savedErrLen;\n                if (! checkOptionalQuantity(ts, dIdx)) {\n                    return null;\n                }\n                spreadLen = 0;\n                sIdx++;\n            }\n        } else {\n            const r = validateRoot<T>(data[dIdx], ts, ctx, dIdx);\n            if (r) {\n                retVals.push(r.value);\n                dIdx++;\n                sIdx++;\n            } else {\n                return null;\n            }\n        }\n    }\n    while (sIdx < ty.sequence.length) {\n        const ts = ty.sequence[sIdx];\n        if (ts.kind === 'spread') {\n            if (! checkSpreadQuantity(ts, dIdx)) {\n                return null;\n            }\n            spreadLen = 0;\n            sIdx++;\n        } else if (ts.kind === 'optional') {\n            if (! checkOptionalQuantity(ts, dIdx)) {\n                return null;\n            }\n            spreadLen = 0;\n            sIdx++;\n        } else {\n            reportErrorWithPush(ErrorTypes.RepeatQtyUnmatched, data, [ts, dIdx], {ctx});\n            return null;\n        }\n    }\n\n    const ret = data.length === dIdx ? {value: retVals as any} : null;\n    if (! ret) {\n        reportError(ErrorTypes.SequenceUnmatched, data, ty, {ctx});\n    }\n\n    if (ret && checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    return ret;\n}\n\n\nfunction validateOneOfAssertion<T>(\n    data: any, ty: OneOfAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let choosed = false;\n    const savedCtxRecordTypeFieldValidated = ctx.recordTypeFieldValidated;\n    ctx.recordTypeFieldValidated = false;\n\n    const savedErrLen = ctx.errors.length;\n    let count = 0;\n    let firstErrLen = savedErrLen;\n\n    for (const tyOne of ty.oneOf) {\n        const r = validateRoot<T>(data, tyOne, ctx);\n        if (r) {\n            // rollback reported errors\n            ctx.errors.length = savedErrLen;\n            ctx.recordTypeFieldValidated = savedCtxRecordTypeFieldValidated;\n            return r;\n        }\n\n        if (ctx.recordTypeFieldValidated) {\n            if (count !== 0) {\n                const e2 = ctx.errors.slice(firstErrLen);\n                ctx.errors.length = savedErrLen;\n                ctx.errors.push(...e2);\n            }\n            choosed = true;\n            break;\n        }\n\n        if (count === 0) {\n            firstErrLen = ctx.errors.length;\n        } else {\n            ctx.errors.length = firstErrLen;\n        }\n        count++;\n    }\n\n    if (! choosed) {\n        if (! ctx.checkAll) {\n            // rollback reported errors\n            ctx.errors.length = savedErrLen;\n        }\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n    }\n\n    ctx.recordTypeFieldValidated = savedCtxRecordTypeFieldValidated;\n    return null;\n}\n\n\nfunction validateEnumAssertion<T>(\n    data: any, ty: EnumAssertion, ctx: ValidationContext): {value: T} | null {\n\n    for (const v of ty.values) {\n        if (data === v[1]) {\n            return ({value: ctx.mapper ? ctx.mapper(data, ty) : data});\n        }\n    }\n    reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n    return null;\n}\n\n\nfunction validateObjectAssertion<T>(\n    data: any, ty: ObjectAssertion, ctx: ValidationContext): {value: T} | null {\n\n    let retVal = Array.isArray(data) ? [...data] : {...data};\n    const revMembers = ty.members.slice().reverse();\n    for (const x of ty.members) {\n        if (ty.members.find(m => m[0] === x[0]) !== revMembers.find(m => m[0] === x[0])) {\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(\n                `Duplicated member is found: ${x[0]} in ${ty.name || '(unnamed)'}`, ty, ctx);\n        }\n    }\n\n    if (data === null || typeof data !== 'object') {\n        reportError(ErrorTypes.TypeUnmatched, data, ty, {ctx});\n        if (ctx && ctx.checkAll) {\n            retVal = null;\n        } else {\n            return null;\n        }\n    } else {\n        const dataMembers = new Set<string>();\n        if (ctx.noAdditionalProps || ty.additionalProps && 0 < ty.additionalProps.length) {\n            if (! Array.isArray(data)) {\n                for (const m in data) {\n                    if (Object.prototype.hasOwnProperty.call(data, m)) {\n                        dataMembers.add(m);\n                    }\n                }\n            }\n        }\n        if (ctx.noAdditionalProps && Array.isArray(data) && 0 < data.length) {\n            const aps = ty.additionalProps || [];\n            if (aps.filter(x => x[0].includes('number')).length === 0) {\n                reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                    ctx,\n                    substitutions: [['addtionalProps', '[number]']],\n                });\n                if (ctx && ctx.checkAll) {\n                    retVal = null;\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        for (const x of ty.members) {\n            dataMembers.delete(x[0]);\n            if (Object.prototype.hasOwnProperty.call(data, x[0])) {\n                const mt = x[1].kind === 'optional' ?  // TODO: set name at compile time\n                    {\n                        ...x[1].optional,\n                        name: x[0],\n                        message: x[1].message,\n                        messages: x[1].messages,\n                        messageId: x[1].messageId,\n                    } : x[1];\n                const ret = validateRoot<T>(data[x[0]], mt, ctx);\n\n                if (ret) {\n                    if (retVal) {\n                        if (isUnsafeVarNames(retVal, x[0])) {\n                            continue;\n                        }\n                        retVal[x[0]] = ret.value;\n                        if (mt.isRecordTypeField) {\n                            ctx.recordTypeFieldValidated = true;\n                        }\n                    }\n                } else {\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            } else {\n                if (x[1].kind !== 'optional') {\n                    reportErrorWithPush(ErrorTypes.Required, data, [x[1], void 0], {ctx});\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        if (ty.additionalProps && 0 < ty.additionalProps.length) {\n            function* getAdditionalMembers() {\n                for (const m of dataMembers.values()) {\n                    yield m;\n                }\n                if (Array.isArray(data)) {\n                    for (let i = 0; i < data.length; i++) {\n                        yield String(i);\n                    }\n                }\n            }\n            for (const m of getAdditionalMembers()) {\n                let allowImplicit = false;\n                const matchedAssertions: TypeAssertion[] = [];\n\n                for (const ap of ty.additionalProps) {\n                    for (const pt of ap[0]) {\n                        const at = ap[1];\n                        if (pt === 'number') {\n                            if (NumberPattern.test(m)) {\n                                matchedAssertions.push(at);\n                            }\n                        } else if (pt === 'string') {\n                            matchedAssertions.push(at);\n                        } else {\n                            if (pt.test(m)) {\n                                matchedAssertions.push(at);\n                            }\n                        }\n                        if (at.kind === 'optional') {\n                            allowImplicit = true;\n                        }\n                    }\n                }\n                if (matchedAssertions.length === 0) {\n                    if (allowImplicit) {\n                        continue;\n                    }\n                    reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                        ctx,\n                        substitutions: [['addtionalProps', m]],\n                    });\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                        continue;\n                    } else {\n                        return null;\n                    }\n                }\n\n                dataMembers.delete(m);\n                let hasError = false;\n                const savedErrLen = ctx.errors.length;\n\n                for (const at of matchedAssertions) {\n                    const ret = validateRoot<T>(data[m], at.kind === 'optional' ?\n                        {\n                            ...at.optional,\n                            message: at.message,\n                            messages: at.messages,\n                            messageId: at.messageId,\n                            name: m,\n                        } : {\n                            ...at,\n                            name: m,\n                        }, ctx);\n                    if (ret) {\n                        if (retVal) {\n                            hasError = false;\n                            ctx.errors.length = savedErrLen;\n                            if (isUnsafeVarNames(retVal, m)) {\n                                continue;\n                            }\n                            retVal[m] = ret.value;\n                        }\n                        break;\n                    } else {\n                        hasError = true;\n                    }\n                }\n                if (hasError) {\n                    if (ctx && ctx.checkAll) {\n                        retVal = null;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n\n        if (ctx.noAdditionalProps && 0 < dataMembers.size) {\n            reportError(ErrorTypes.AdditionalPropUnmatched, data, ty, {\n                ctx,\n                substitutions: [['addtionalProps', Array.from(dataMembers.values()).join(', ')]],\n            });\n            if (ctx && ctx.checkAll) {\n                retVal = null;\n            } else {\n                return null;\n            }\n        }\n    }\n    if (! retVal) {\n        // TODO: Child is unmatched. reportError?\n        // TODO: report object's custom error message\n    }\n\n    if (retVal && checkCustomConstraints(data, ty, ctx) === null) {\n        reportError(ErrorTypes.ValueUnmatched, data, ty, {ctx});\n        return null;\n    }\n\n    return retVal ? {value: (ctx && ctx.mapper) ? ctx.mapper(retVal, ty) : retVal} : null;\n}\n\n\nexport function validateRoot<T>(\n    data: any, ty: TypeAssertion, ctx: ValidationContext, dataIndex?: number | string): {value: T} | null {\n\n    try {\n        ctx.typeStack.push(\n            typeof dataIndex === 'number' || typeof dataIndex === 'string' ?\n            [ty, dataIndex] : ty);\n\n        switch (ty.kind) {\n        case 'never':\n            return validateNeverTypeAssertion(data, ty, ctx);\n        case 'any':\n            return validateAnyTypeAssertion(data, ty, ctx);\n        case 'unknown':\n            return validateUnknownTypeAssertion(data, ty, ctx);\n        case 'primitive':\n            return validatePrimitiveTypeAssertion(data, ty, ctx);\n        case 'primitive-value':\n            return validatePrimitiveValueTypeAssertion(data, ty, ctx);\n        case 'repeated':\n            return validateRepeatedAssertion(data, ty, ctx);\n        case 'sequence':\n            return validateSequenceAssertion(data, ty, ctx);\n        case 'one-of':\n            return validateOneOfAssertion(data, ty, ctx);\n        case 'enum':\n            return validateEnumAssertion(data, ty, ctx);\n        case 'object':\n            return validateObjectAssertion(data, ty, ctx);\n        case 'symlink':\n            if (ctx.schema) {\n                return validateRoot<T>(data, resolveSymbols(ctx.schema, ty, {nestLevel: 0, symlinkStack: []}), ctx);\n            }\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unresolved symbol '${ty.symlinkTargetName}' is appeared.`, ty, ctx);\n        case 'operator':\n            if (ctx.schema) {\n                return validateRoot<T>(data, resolveSymbols(ctx.schema, ty, {nestLevel: 0, symlinkStack: []}), ctx);\n            }\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unresolved type operator is found: ${ty.operator}`, ty, ctx);\n        case 'spread': case 'optional':\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unexpected type assertion: ${(ty as any).kind}`, ty, ctx);\n        default:\n            reportError(ErrorTypes.InvalidDefinition, data, ty, {ctx});\n            throw new ValidationError(`Unknown type assertion: ${(ty as any).kind}`, ty, ctx);\n        }\n    } finally {\n        ctx.typeStack.pop();\n    }\n}\n\n\nexport function validate<T>(\n    data: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): {value: T} | null {\n\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n    };\n    try {\n        return validateRoot<T>(data, ty, ctx2);\n    } finally {\n        if (ctx) {\n            ctx.errors = ctx2.errors;\n        }\n    }\n}\n\n\nexport function isType<T>(\n    data: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): data is T {\n\n    return (!! validate<T>(data, ty, ctx));\n}\n\n\nexport function getType(schema: TypeAssertionMap, name: string): TypeAssertion {\n    if (schema.has(name)) {\n        return schema.get(name)?.ty as TypeAssertion;\n    }\n    throw new Error(`Undefined type name is referred: ${name}`);\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n\r\nexport type SxMacro = (state: SxParserState, name: string, formalArgs?: SxSymbol[]) => (list: SxToken[]) => SxToken;\r\n\r\nexport interface SxMacroInfo {\r\n    name: string;\r\n    fn: SxMacro;\r\n\r\n    formalArgs?: SxSymbol[];\r\n    lastIsSpread?: boolean;\r\n    next?: SxMacroInfo;\r\n}\r\n\r\n\r\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\r\n\r\nexport interface SxFuncInfo {\r\n    name: string;\r\n    fn: SxFunc;\r\n\r\n    // TODO: overloading\r\n    // formalArgs?: SxSymbol[];\r\n    // lastIsSpread?: boolean;\r\n    // next?: SxFuncInfo;\r\n}\r\n\r\n\r\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\r\n\r\nexport interface SxSymbolInfo {\r\n    name: string;\r\n    fn: SxSymbolResolver;\r\n}\r\n\r\n\r\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\r\n\r\nexport interface SxScope {\r\n    isBlockLocal: boolean;\r\n    scope: any;           // { [s: string]: any; };\r\n    capturedScopes?: CapturedScopes;\r\n}\r\n\r\n\r\nexport interface SxReservedNames {\r\n    eval: string;\r\n    quote: string;\r\n    backquote: string;\r\n    unquote: string;\r\n    spread: string;\r\n    splice: string;\r\n\r\n    car: string;\r\n    cdr: string;\r\n    cons: string;\r\n    atom: string;\r\n    eq: string;\r\n    list: string;\r\n\r\n    let: string;\r\n    lambda: string;\r\n    self: string;\r\n    defun: string;\r\n    thiz: string;\r\n\r\n    if: string;\r\n    cond: string;\r\n\r\n    while: string;\r\n    doWhile: string;\r\n    until: string;\r\n    doUntil: string;\r\n\r\n    get: string;\r\n    defvar: string;\r\n    setq: string;\r\n    set: string;\r\n    call: string;\r\n\r\n    not: string;\r\n    and: string;\r\n    or: string;\r\n\r\n    isSymbol: string;\r\n    gensym: string;\r\n    raise: string;\r\n    catch: string;\r\n\r\n    Template: string;\r\n}\r\n\r\nexport interface SxParserConfig {\r\n    raiseOnUnresolvedSymbol: boolean;\r\n    enableEvaluate: boolean;\r\n    enableHereDoc: boolean;\r\n    enableSpread: boolean;\r\n    enableSplice: boolean;\r\n    enableShorthands: boolean;\r\n    enableVerbatimStringLiteral: boolean;\r\n    enableTailCallOptimization: boolean;\r\n    enableRegExpMatchOperators: boolean; // IMPORTANT: Turn off to prevent ReDoS when executing untrusted code\r\n    enableCompilationOperators: boolean; // IMPORTANT: Turn off to prevent DoS when executing untrusted code\r\n    stripComments: boolean;\r\n    wrapExternalValue: boolean;\r\n    reservedNames: SxReservedNames;\r\n    returnMultipleRoot: boolean;\r\n    maxEvalCount: number;                // IMPORTANT: Set positive value to prevent DoS when executing untrusted code\r\n\r\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\r\n    JsxFragment?: any;\r\n\r\n    funcs: SxFuncInfo[];\r\n    macros: SxMacroInfo[];\r\n    symbols: SxSymbolInfo[];\r\n\r\n    funcSymbolResolverFallback?: SxFunc;\r\n    valueSymbolResolverFallback?: SxSymbolResolver;\r\n}\r\n\r\nexport interface SxParserState {\r\n    strings: TemplateStringsArray | string[];\r\n    values: any[];\r\n\r\n    index: number;\r\n    pos: number;\r\n    line: number;\r\n\r\n    evalCount: number;\r\n\r\n    scopes: SxScope[];\r\n\r\n    macroMap: Map<string, SxMacroInfo>;\r\n    funcMap: Map<string, SxFuncInfo>;\r\n    symbolMap: Map<string, SxSymbolInfo>;\r\n\r\n    config: SxParserConfig;\r\n}\r\n\r\nexport interface SxEof {\r\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\r\n    eofSeq?: string;\r\n}\r\n\r\nexport interface SxExternalValue {\r\n    value: any;\r\n}\r\n\r\nexport interface SxSymbol {\r\n    'symbol': string;\r\n\r\n    // TODO: debug info\r\n    // _fileName?: string;\r\n    // _line?: number;\r\n    // _col?: number;\r\n}\r\n\r\nexport interface SxComment {\r\n    comment: string;\r\n}\r\n\r\nexport interface SxDottedPair {\r\n    car: SxToken; // left\r\n    cdr: SxToken; // right\r\n}\r\n\r\nexport interface SxDottedFragment {\r\n    dotted: SxToken; // right\r\n}\r\n\r\n\r\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\r\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\r\nexport type SxChar = string | SxEof | SxExternalValue;\r\nexport type SxAtom = SxSymbol | string | number | boolean | null;\r\nexport type SxList = SxDottedPair | SxAtom[];\r\n\r\n\r\n\r\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\r\n\r\n\r\nexport interface CompilerContext {\r\n    _$_vars: any[];\r\n    varsCount: number;\r\n    varNames: Map<string, string>;\r\n    varNamesCount: number;\r\n    varDefs: string;\r\n    ops: Map<string, CompilerOperator>;\r\n    makeScope: (scoped: () => void) => void;\r\n    compileToken: (body: any[], i: number) => string;\r\n}\r\n\r\n\r\nexport interface LsxConfig {\r\n    jsx: (comp: any, props: any, ...children: any[]) => any;\r\n    jsxFlagment: any;\r\n    components: object;\r\n}\r\n\r\n\r\nexport class FatalError extends Error {\r\n    public constructor(message?: string | undefined) {\r\n        super(message);\r\n    }\r\n}\r\n\r\n\r\nexport class MaxEvaluationCountError extends FatalError {\r\n    public constructor() {\r\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\r\n    }\r\n}\r\n\r\n\r\nexport class ScriptTerminationError extends FatalError {\r\n    public constructor(where: string) {\r\n        super(`[SX] ${where}: Unexpected termination of script.`);\r\n    }\r\n}\r\n\r\n\r\nexport interface SExpressionRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\r\n}\r\n\r\n\r\nexport interface SExpressionTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\r\n    evaluateAST: (ast: SxToken[]) => R;\r\n    repl: () => SExpressionRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncRepl<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\r\n}\r\n\r\n\r\nexport interface SExpressionAsyncTemplateFn<R = SxToken> {\r\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\r\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\r\n    repl: () => SExpressionAsyncRepl<R>;\r\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\r\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\r\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\r\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { RecursivePartial,\n         TypeAssertion,\n         ValidationContext } from './types';\nimport { ValidationError }   from './lib/errors';\nimport { isUnsafeVarNames }  from './lib/util';\nimport { validate }          from './validator';\n\n\n\nfunction pickMapper(value: any, ty: TypeAssertion) {\n    switch (ty.kind) {\n    case 'object':\n        {\n            const ret = Array.isArray(value) ? [] : {};\n\n            const dataMembers = new Set<string>();\n            if (! Array.isArray(value)) {\n                for (const m in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, m)) {\n                        dataMembers.add(m);\n                    }\n                }\n            }\n\n            for (const x of ty.members) {\n                if (Object.hasOwnProperty.call(value, x[0])) {\n                    dataMembers.delete(x[0]);\n                    ret[x[0]] = value[x[0]];\n                }\n            }\n            if (ty.additionalProps && 0 < ty.additionalProps.length) {\n                function* getAdditionalMembers() {\n                    for (const m of dataMembers.values()) {\n                        yield m;\n                    }\n                    if (Array.isArray(value)) {\n                        for (let i = 0; i < value.length; i++) {\n                            yield String(i);\n                        }\n                    }\n                }\n                for (const m of getAdditionalMembers()) {\n                    ret[m] = value[m];\n                }\n            }\n            return ret;\n        }\n    default:\n        return value;\n    }\n}\n\n\nexport function pickRoot<T>(data: T, ty: TypeAssertion, ctx: ValidationContext): T {\n    switch (ty.kind) {\n    case 'never':\n        throw new ValidationError(`Type unmatched: ${(ty as any).kind}`, ty, ctx);\n    case 'any':\n        // FALL_THRU\n    case 'unknown':\n        // FALL_THRU\n    case 'primitive':\n        // FALL_THRU\n    case 'primitive-value':\n        // FALL_THRU\n    case 'repeated':\n        // FALL_THRU\n    case 'sequence':\n        // FALL_THRU\n    case 'one-of':\n        // FALL_THRU\n    case 'enum':\n        // FALL_THRU\n    case 'object':\n        {\n            const r = validate<T>(data, ty, ctx);\n            if (r) {\n                return r.value;\n            } else {\n                throw new ValidationError('Validation failed.', ty, ctx);\n            }\n        }\n    case 'spread': case 'optional': case 'symlink': case 'operator':\n        throw new ValidationError(`Unexpected type assertion: ${(ty as any).kind}`, ty, ctx);\n    default:\n        throw new ValidationError(`Unknown type assertion: ${(ty as any).kind}`, ty, ctx);\n    }\n}\n\n\nexport function pick<T>(data: T, ty: TypeAssertion, ctx?: Partial<ValidationContext>): RecursivePartial<T> {\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n        mapper: pickMapper,\n    };\n    try {\n        return pickRoot<T>(data, ty, ctx2);\n    } finally {\n        if (ctx) {\n            ctx.errors = ctx2.errors;\n        }\n    }\n}\n\n\nfunction merge(data: any, needle: any) {\n    if (data === null || data === void 0) {\n        return needle;\n    }\n    switch (typeof data) {\n    case 'object':\n        if (Array.isArray(data)) {\n            return [...needle];\n        } else {\n            const r: any = {...data};\n            for (const k in needle) {\n                if (Object.prototype.hasOwnProperty.call(needle, k)) {\n                    if (isUnsafeVarNames(r, k)) {\n                        continue;\n                    }\n                    r[k] = merge(r[k], needle[k]);\n                }\n            }\n            return r;\n        }\n    default:\n        return needle;\n    }\n}\n\n\nexport function patch<T>(data: T, needle: any, ty: TypeAssertion, ctx?: Partial<ValidationContext>): T {\n    const ctx2: ValidationContext = {\n        ...{errors: [], typeStack: []},\n        ...(ctx || {}),\n    };\n    const validated = pick<T>(needle, ty, ctx2);\n    return merge(data, validated);\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { Stereotype }         from '../types';\nimport { DatePattern,\n         DateTimePattern,\n         DateTimeNoTzPattern } from '../lib/util';\n\n\n\nconst FyPattern = /^first-date-of-fy\\(([0-9]+)\\)$/;\nconst FormulaPattern = /^([-+@])([0-9]+)(yr|mo|day|days|hr|min|sec|ms)$/;\n\n\nclass UtcDate extends Date {\n    public constructor();\n    // tslint:disable-next-line: unified-signatures\n    public constructor(str: string);\n    public constructor(\n        year: number, month: number, date?: number,\n        hours?: number, minutes?: number, seconds?: number, ms?: number)\n    public constructor(\n        year?: number | string, month?: number, date?: number,\n        hours?: number, minutes?: number, seconds?: number, ms?: number) {\n\n        super();\n        if (year === void 0) {\n            return;\n        }\n        if (typeof year === 'string') {\n            if (DateTimePattern.test(year)) {\n                // string parameter is expected to be treated as specified TZ\n                this.setTime(Date.parse(year)); // returns date in specified TZ\n            } else if (DatePattern.test(year)) {\n                // string parameter is expected to be treated as UTC\n                const d = new Date(year);       // returns date in UTC TZ (getUTC??? returns string parameter's date & time digits)\n                this.setTime(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate()));\n            } else if (DateTimeNoTzPattern.test(year)) {\n                // string parameter is expected to be treated as UTC\n                const d = new Date(year);       // returns date in local TZ (get??? returns string parameter's date & time digits)\n                this.setTime(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(),\n                    d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));\n            } else {\n                this.setTime(NaN);\n            }\n            return;\n        }\n\n        this.setUTCDate(1);\n\n        this.setUTCFullYear(year);\n        this.setUTCMonth(typeof month === 'number' ? month : 0);\n        this.setUTCDate(typeof date === 'number' ? date : 1);\n        this.setUTCHours(typeof hours === 'number' ? hours : 0);\n        this.setUTCMinutes(typeof minutes === 'number' ? minutes : 0);\n        this.setUTCSeconds(typeof seconds === 'number' ? seconds : 0);\n        this.setUTCMilliseconds(typeof ms === 'number' ? ms : 0);\n    }\n\n    public getFullYear(): number {\n        return this.getUTCFullYear();\n    }\n\n    public getMonth(): number {\n        return this.getUTCMonth();\n    }\n\n    public getDate(): number {\n        return this.getUTCDate();\n    }\n\n    public getHours(): number {\n        return this.getUTCHours();\n    }\n\n    public getMinutes(): number {\n        return this.getUTCMinutes();\n    }\n\n    public getSeconds(): number {\n        return this.getUTCSeconds();\n    }\n\n    public getMilliseconds(): number {\n        return this.getUTCMilliseconds();\n    }\n\n    // NOTE: set???() are not overridden!\n}\n\n\nclass LcDate extends Date {\n    public constructor();\n    // tslint:disable-next-line: unified-signatures\n    public constructor(str: string);\n    public constructor(\n        year: number, month: number, date?: number,\n        hours?: number, minutes?: number, seconds?: number, ms?: number)\n    public constructor(\n        year?: number | string, month?: number, date?: number,\n        hours?: number, minutes?: number, seconds?: number, ms?: number) {\n\n        super();\n        if (year === void 0) {\n            return;\n        }\n        if (typeof year === 'string') {\n            if (DateTimePattern.test(year)) {\n                // string parameter is expected to be treated as specified TZ\n                this.setTime(Date.parse(year)); // returns date in specified TZ\n            } else if (DatePattern.test(year)) {\n                // string parameter is expected to be treated as local TZ\n                const d = new Date(year);       // returns date in UTC TZ (getUTC??? returns string parameter's date & time digits)\n                const l = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n                this.setTime(l.getTime());\n            } else if (DateTimeNoTzPattern.test(year)) {\n                // string parameter is expected to be treated as local TZ\n                const d = new Date(year);       // returns date in local TZ (get??? returns string parameter's date & time digits)\n                this.setTime(d.getTime());\n            } else {\n                this.setTime(NaN);\n            }\n            return;\n        }\n\n        this.setDate(1);\n\n        this.setFullYear(year);\n        this.setMonth(typeof month === 'number' ? month : 0);\n        this.setDate(typeof date === 'number' ? date : 1);\n        this.setHours(typeof hours === 'number' ? hours : 0);\n        this.setMinutes(typeof minutes === 'number' ? minutes : 0);\n        this.setSeconds(typeof seconds === 'number' ? seconds : 0);\n        this.setMilliseconds(typeof ms === 'number' ? ms : 0);\n    }\n}\n\n\ninterface DateConstructor {\n    new (): Date;\n    // tslint:disable-next-line: unified-signatures\n    new (str: string): Date;\n    new (year: number, month: number, date?: number,\n         hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n}\n\n\nfunction evaluateFormulaBase(dateCtor: DateConstructor, valueOrFormula: string): Date {\n    const errMsg = `evaluateFormula: invalid parameter ${valueOrFormula}`;\n    if (typeof valueOrFormula !== 'string') {\n        throw new Error(errMsg);\n    }\n    if (valueOrFormula.startsWith('=')) {\n        const formula = valueOrFormula.slice(1).split(' ');\n        let d = new dateCtor();\n        const now = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes());\n        const today = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate());\n        d = now;\n        for (const f of formula) {\n            switch (f) {\n            case 'current': case 'now':\n                d = now;\n                break;\n            case 'today':\n                d = today;\n                break;\n            case 'first-date-of-yr': case 'first-date-of-fy(1)':\n                d = new dateCtor(d.getFullYear(), 0, 1);\n                break;\n            case 'last-date-of-yr':\n                d = new dateCtor(d.getFullYear(), 11, 31);\n                break;\n            case 'first-date-of-mo':\n                d = new dateCtor(d.getFullYear(), d.getMonth(), 1);\n                break;\n            case 'last-date-of-mo':\n                d = new dateCtor(d.getFullYear(), d.getMonth() + 1, 0);\n                break;\n            default:\n                if (f.startsWith('first-date-of-fy(')) {\n                    const m = FyPattern.exec(f);\n                    if (m) {\n                        const n = Number.parseInt(m[1], 10);\n                        if (0 < n && n <= 12) {\n                            const mo = d.getMonth() + 1;\n                            let yr = d.getFullYear();\n                            if (mo < n) {\n                                yr--;\n                            }\n                            d = new dateCtor(yr, n - 1, 1);\n                        } else {\n                            throw new Error(errMsg);\n                        }\n                    } else {\n                        throw new Error(errMsg);\n                    }\n                } else {\n                    const m = FormulaPattern.exec(f);\n                    if (m) {\n                        let n = Number.parseInt(m[2], 10);\n                        switch (m[3]) {\n                        case 'yr':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getFullYear() + n;\n                                break;\n                            case '-':\n                                n = d.getFullYear() - n;\n                                break;\n                            }\n                            d = new dateCtor(n, d.getMonth(), d.getDate(),\n                                d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'mo':\n                            switch (m[1]) {\n                            case '@':\n                                n -= 1;\n                                break;\n                            case '+':\n                                n = d.getMonth() + n;\n                                break;\n                            case '-':\n                                n = d.getMonth() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), n, d.getDate(),\n                                d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'day': case 'days':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getDate() + n;\n                                break;\n                            case '-':\n                                n = d.getDate() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), n,\n                                d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'hr':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getHours() + n;\n                                break;\n                            case '-':\n                                n = d.getHours() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(),\n                                n, d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'min':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getMinutes() + n;\n                                break;\n                            case '-':\n                                n = d.getMinutes() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(),\n                                d.getHours(), n, d.getSeconds(), d.getMilliseconds());\n                            break;\n                        case 'sec':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getSeconds() + n;\n                                break;\n                            case '-':\n                                n = d.getSeconds() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(),\n                                d.getHours(), d.getMinutes(), n, d.getMilliseconds());\n                            break;\n                        case 'ms':\n                            switch (m[1]) {\n                            case '@':\n                                break;\n                            case '+':\n                                n = d.getMilliseconds() + n;\n                                break;\n                            case '-':\n                                n = d.getMilliseconds() - n;\n                                break;\n                            }\n                            d = new dateCtor(d.getFullYear(), d.getMonth(), d.getDate(),\n                                d.getHours(), d.getMinutes(), d.getSeconds(), n);\n                            break;\n                        default:\n                            throw new Error(errMsg);\n                        }\n                    } else {\n                        if (!(DatePattern.test(f) || DateTimePattern.test(f) || DateTimeNoTzPattern.test(f))) {\n                            throw new Error(errMsg);\n                        }\n                        d = new dateCtor(f);\n                    }\n                }\n            }\n        }\n        return d;\n    } else {\n        if (! DatePattern.test(valueOrFormula)) {\n            throw new Error(errMsg);\n        }\n        return new dateCtor(valueOrFormula);\n    }\n}\n\n\nexport const dateStereotype: Stereotype = {\n    tryParse: (value: unknown) => {\n        return (\n            typeof value === 'string' && DatePattern.test(value)\n                ? { value: (new UtcDate(value)).getTime() }\n                : null\n        );\n    },\n    evaluateFormula: valueOrFormula => {\n        const d = evaluateFormulaBase(UtcDate, valueOrFormula);\n        return (new UtcDate(d.getFullYear(), d.getMonth(), d.getDate())).getTime();\n    },\n    compare: (a: number, b: number) => a - b,\n    doCast: false,\n};\n\n\nexport const lcDateStereotype: Stereotype = {\n    ...dateStereotype,\n    tryParse: (value: unknown) => {\n        if (typeof value === 'string' && DatePattern.test(value)) {\n            return ({ value: (new LcDate(value)).getTime() });\n        } else {\n            return null;\n        }\n    },\n    evaluateFormula: valueOrFormula => {\n        const d = evaluateFormulaBase(LcDate, valueOrFormula);\n        return (new LcDate(d.getFullYear(), d.getMonth(), d.getDate())).getTime();\n    },\n}\n\n\nexport const datetimeStereotype: Stereotype = {\n    tryParse: (value: unknown) => {\n        return (\n            typeof value === 'string' && (DateTimePattern.test(value) || DateTimeNoTzPattern.test(value))\n                ? { value: (new UtcDate(value)).getTime() } // If timezone is not specified, it is local time\n                : null\n        );\n    },\n    evaluateFormula: valueOrFormula => evaluateFormulaBase(UtcDate, valueOrFormula).getTime(),\n    compare: (a: number, b: number) => a - b,\n    doCast: false,\n};\n\n\nexport const lcDatetimeStereotype: Stereotype = {\n    ...datetimeStereotype,\n    tryParse: (value: unknown) => {\n        return (\n            typeof value === 'string' && (DateTimePattern.test(value) || DateTimeNoTzPattern.test(value))\n                ? { value: (new LcDate(value)).getTime() }\n                : null\n        );\n    },\n    evaluateFormula: valueOrFormula => evaluateFormulaBase(LcDate, valueOrFormula).getTime(),\n}\n\n\nexport const stereotypes: Array<[string, Stereotype]> = [\n    ['date', dateStereotype],\n    ['lcdate', lcDateStereotype],\n    ['datetime', datetimeStereotype],\n    ['lcdatetime', lcDatetimeStereotype],\n];\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { CustomConstraintInfo } from '../types';\nimport { dummyTargetObject,\n         isUnsafeVarNames }     from '../lib/util';\n\n\n\ntype MapperFn = (data: any, fields: string[]) => any[];\nconst mapperErrMsg = 'Unsafe symbol name is appeared in unique constraint assertion:';\n\n\nconst normalMapper: MapperFn = (data: any, fields: string[]) => {\n    const ret: any[] = [];\n    if (0 < fields.length) {\n        for (const field of fields) {\n            if (isUnsafeVarNames(dummyTargetObject, field)) {\n                throw new Error(`${mapperErrMsg} ${field}`);\n            }\n            ret.push(data[field]);\n        }\n    } else {\n        ret.push(data);\n    }\n    return ret;\n};\n\n\nconst nonNullMapper: MapperFn = (data: any, fields: string[]) => {\n    const ret: any[] = [];\n    if (0 < fields.length) {\n        for (const field of fields) {\n            if (isUnsafeVarNames(dummyTargetObject, field)) {\n                throw new Error(`${mapperErrMsg} ${field}`);\n            }\n            ret.push(data[field] ?? NaN);\n        }\n    } else {\n        ret.push(data);\n    }\n    return ret;\n};\n\n\nconst checkerGen = (mapper: MapperFn) => {\n    return ((data: any, args: any) => {\n        const errMsg = `evaluateFormula: invalid parameter ${args}`;\n        if (! Array.isArray(data)) {\n            throw new Error(errMsg);\n        }\n\n        const fields: string[] = [];\n        if (typeof args === 'string') {\n            fields.push(args);\n        } else if (Array.isArray(args)) {\n            for (const z of args) {\n                if (typeof z !== 'string') {\n                    throw new Error(errMsg);\n                }\n            }\n            fields.push(...args);\n        }\n\n        const mapped = data.map(x => mapper(x, fields));\n        for (let i = 0; i < mapped.length; i++) {\n            CMP: for (let j = 0; j < mapped.length; j++) {\n                if (i === j) {\n                    continue;\n                }\n                const a = mapped[i];\n                const b = mapped[j];\n                for (let k = 0; k < a.length; k++) { // TODO: this is slow! more better checking\n                    if (a[k] !== b[k]) {\n                        continue CMP;\n                    }\n                }\n                return false;\n            }\n        }\n\n        return true;\n    });\n};\n\n\nexport const constraints: Array<[string, CustomConstraintInfo]> = [\n    ['unique', {\n        kinds: ['repeated', 'sequence'],\n        check: checkerGen(normalMapper),\n    }],\n    ['unique-non-null', {\n        kinds: ['repeated', 'sequence'],\n        check: checkerGen(nonNullMapper),\n    }],\n];\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\n// tslint:disable-next-line:function-constructor\r\nexport const globalObj = Function('return this')();\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         SxFuncInfo,\r\n         CompilerOperator,\r\n         CompilerContext  }           from './types';\r\nimport { isSymbol }                   from './ast';\r\nimport { getCapturedScopes,\r\n         optimizeTailCall }           from './evaluate';\r\nimport { checkUnsafeVarNamesEx }      from './errors';\r\nimport { applyMacros,\r\n         stripQuoteOrPass,\r\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\r\nimport { registerOperators }          from './compile.ops';\r\n\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\r\n\r\n    function makeScope(scoped: () => void) {\r\n        const varNamesCopy = new Map<string, string>();\r\n        for (const x of ctx.varNames.entries()) {\r\n            varNamesCopy.set(x[0], x[1]);\r\n        }\r\n        scoped();\r\n        ctx.varNames = varNamesCopy;\r\n    }\r\n\r\n\r\n    function compileValue(b: any) {\r\n        let compFnBody = '';\r\n        if (b === null) {\r\n            compFnBody += '(null)';\r\n        } else if (b === void 0) {\r\n            compFnBody += '(void 0)';\r\n        } else switch (typeof b) {\r\n        case 'boolean': case 'number':\r\n            compFnBody += `(${String(b)})`;\r\n            break;\r\n        case 'object':\r\n            if (isSymbol(b)) {\r\n                const sym = b as SxSymbol;\r\n                checkUnsafeVarNamesEx('(compiler)compileValue', ctx.varNames, sym.symbol);\r\n                if (ctx.varNames.has(sym.symbol)) {\r\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\r\n                } else {\r\n                    _$_vars[ctx.varsCount] = sym.symbol;\r\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n                }\r\n                break;\r\n            } else {}\r\n            // FALL_THRU\r\n        default:\r\n            _$_vars[ctx.varsCount] = b;\r\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n            break;\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    function compileToken(body: any[], i: number) {\r\n        let compFnBody = '';\r\n        const b = body[i];\r\n        if (Array.isArray(b)) {\r\n            if (0 < b.length) {\r\n                const r: SxToken = applyMacros(state, b);\r\n                if (Array.isArray(r)) {\r\n                    if (0 < r.length) {\r\n                        if (isSymbol(r[0])) {\r\n                            const sym = r[0] as SxSymbol;\r\n                            const args = r.slice(1);\r\n                            checkUnsafeVarNamesEx('(compiler)compileToken', ops, sym.symbol);\r\n                            if (ops.has(sym.symbol)) {\r\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\r\n                            } else {\r\n                                if (sym.symbol === state.config.reservedNames.spread) {\r\n                                    compFnBody += `...(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else if (state.funcMap.has(sym.symbol)) {\r\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                } else if (ctx.varNames.has(sym.symbol)) {\r\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\r\n                                } else {\r\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\r\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\r\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            switch (typeof r[0]) {\r\n                            case 'function':\r\n                                _$_vars[ctx.varsCount] = r[0];\r\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\r\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n                                break;\r\n                            default:\r\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        compFnBody += '([])';\r\n                    }\r\n                } else {\r\n                    compFnBody += compileValue(b);\r\n                }\r\n            } else {\r\n                compFnBody += '([])';\r\n            }\r\n        } else {\r\n            compFnBody += compileValue(b);\r\n        }\r\n        return compFnBody;\r\n    }\r\n\r\n\r\n    const ctx: CompilerContext = {\r\n        _$_vars,\r\n        varsCount: 1,\r\n        varNames: new Map<string, string>(),\r\n        varNamesCount: 0,\r\n        varDefs: 'var x0;',\r\n        ops: new Map<string, CompilerOperator>(),\r\n        makeScope,\r\n        compileToken,\r\n    };\r\n\r\n    registerOperators(state, ctx);\r\n    const ops = ctx.ops;\r\n\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    // set 'this' object\r\n    ctx.varNames.set(state.config.reservedNames.thiz, `(this===(Function('return this')())?null:(this===void 0?null:this))`);\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n    if (capturedScopes) {\r\n        for (const x in capturedScopes) {\r\n            if (Object.prototype.hasOwnProperty.call(capturedScopes, x)) {\r\n                _$_vars[ctx.varsCount++] = x;\r\n                _$_vars[ctx.varsCount] = capturedScopes[x];\r\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\r\n                ctx.varsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    const compFormalArgs = `${formalArgs.map((x, i) => {\r\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\r\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\r\n    }).join(',')}`;\r\n\r\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\r\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\r\n}\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\r\n    // tslint:disable-next-line:no-eval\r\n    _$_vars[0] = eval(code);\r\n    return _$_vars[0];\r\n}\r\n\r\n\r\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\r\n    // tslint:disable-next-line:variable-name\r\n    const _$_vars: any[] = [];\r\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         CompilerContext }             from '../types';\r\nimport { isSymbol }                    from '../ast';\r\nimport { checkParamsLength,\r\n         checkUnsafeVarNamesEx,\r\n         checkUnsafeVarNames }         from '../errors';\r\nimport { stripQuote,\r\n         stripQuoteOrPass,\r\n         getScope_stateApplied,\r\n         resolveValueSymbol_dynamic,\r\n         checkUnsafeVarNames_dynamic } from './helpers';\r\n\r\n\r\n\r\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\r\n    const {\r\n        _$_vars,\r\n        ops,\r\n        makeScope,\r\n        compileToken,\r\n    } = ctx;\r\n\r\n\r\n    ops.set(state.config.reservedNames.quote, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        _$_vars[ctx.varsCount] = r[1];\r\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.self, function(r: SxToken[], args: SxToken[]) {\r\n        let compFnBody = '';\r\n        compFnBody += `((_$_vars[0])(${\r\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if condition 't-expr 'f-expr)\r\n        //  -> (if condition is true ) S expr  : t-expr\r\n        //  -> (if condition is false) S expr  : f-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if', args, 2, 3);\r\n        compFnBody += `(${compileToken(r, 1)}?(${\r\n            compileToken([stripQuote(state, r[2])], 0)}):(${\r\n            compileToken([stripQuote(state, r[3])], 0)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__if-null condition 'null-expr)\r\n        //  -> (if condition is not null ) S expr  : condition\r\n        //  -> (if condition is null)      S expr  : null-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\r\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\r\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        //  -> (if (eval condI) is true ) S expr  : exprI\r\n        //  -> (if no matched)            S expr  : null\r\n        let compFnBody = '';\r\n        {\r\n            checkParamsLength('compileToken:$__cond', args, 1);\r\n            compFnBody += `(`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\r\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\r\n            }\r\n            compFnBody += `null`;\r\n            for (let p = 0; p < args.length; p += 2) {\r\n                compFnBody += `)`;\r\n            }\r\n            compFnBody += `)`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__while', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n            }}return _$_rv})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n        //  -> (else)                                          S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__do-until', args, 1);\r\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\r\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\r\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n        //  -> (if n > 0) S expr  : exprN\r\n        //  -> (else)     S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__repeat', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n        //  -> (if list.length > 0) S expr  : exprN\r\n        //  -> (else)               S expr  : null\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__for', args, 2);\r\n        if (! isSymbol(args[0])) {\r\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\r\n        }\r\n        makeScope(() => {\r\n            const name = 'v' + ctx.varNamesCount++;\r\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\r\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\r\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\r\n                }}return _$_rv})(${compileToken(args, 1)}))`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n        //  -> (else)               S expr  : exprN\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__scope', args, 2);\r\n        // r[1]: isBlockLocal\r\n        // r[2]: returnMultiple\r\n        if (! Array.isArray(r[3])) {\r\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\r\n        }\r\n        makeScope(() => {\r\n            for (const x of stripQuote(state, r[3]) as any[]) {\r\n                let name = '';\r\n                if (Array.isArray(x)) {\r\n                    if (x.length < 1) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\r\n                    }\r\n                    if (! isSymbol(x[0])) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\r\n                    }\r\n                    name = x[0].symbol;\r\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\r\n                } else {\r\n                    if (! isSymbol(x)) {\r\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\r\n                    }\r\n                    name = x.symbol;\r\n                }\r\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n                ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n            }\r\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\r\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__try 'expr 'catch-expr)\r\n        //  ->                               S expr  : expr\r\n        //  -> (if error is raised in expr)  S expr  : catch-expr\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__try', args, 1, 2);\r\n        compFnBody += `((()=>{try{${\r\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\r\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\r\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\r\n        makeScope(() => {\r\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\r\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\r\n            compFnBody += `${\r\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\r\n        });\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.raise, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($raise 'expr)\r\n        //  -> S expr  : -\r\n        let compFnBody = '';\r\n        compFnBody += `((()=>{throw ${\r\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($boolean any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\r\n        compFnBody += `((x0=${compileToken(args, 0)\r\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__get', args, 1);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = symName;\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                compileToken(arr, idx)}]`).join('')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__let 'nameStrOrSymbol expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__let', args, 2, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        if (! ctx.varNames.has(name)) {\r\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\r\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\r\n        }\r\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : any\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__set', args, 2);\r\n        const quoted = stripQuote(state, r[1]);\r\n        const name = isSymbol(quoted) ?\r\n            quoted.symbol :\r\n            (typeof quoted === 'string' ?\r\n                quoted :\r\n                (Array.isArray(quoted) ?\r\n                    (isSymbol(quoted[0]) ?\r\n                        quoted[0].symbol :\r\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\r\n                    ) :\r\n                    null\r\n                )\r\n            );\r\n        if (typeof name !== 'string') {\r\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\r\n        }\r\n        let vName = '';\r\n        if (ctx.varNames.has(name)) {\r\n            vName = ctx.varNames.get(name) as string;\r\n        } else {\r\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\r\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\r\n        }\r\n        const regToVars = (symName: string) => {\r\n            _$_vars[ctx.varsCount] = checkUnsafeVarNames('compileToken:$__set', symName);\r\n            return `_$_vars[${String(ctx.varsCount++)}]`;\r\n        };\r\n        let checkNameCalled = false;\r\n        let checkNamePos = '';\r\n        const checkName = (str: string) => {\r\n            if (! checkNameCalled) {\r\n                _$_vars[ctx.varsCount] = checkUnsafeVarNames_dynamic('compileToken:$__set');\r\n                checkNamePos = String(ctx.varsCount++);\r\n                checkNameCalled = true;\r\n            }\r\n            return `(_$_vars[${checkNamePos}](${str}))`;\r\n        };\r\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\r\n            isSymbol(arr[idx]) ?\r\n                regToVars((arr as any)[idx].symbol) :\r\n                checkName(compileToken(arr, idx))}]`).join('')}=${compileToken(r, 2)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set(state.config.reservedNames.not, function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not any)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$not', args, 1, 1);\r\n        compFnBody += `(!${compileToken(args, 0)})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__and 'expr1 ... 'exprN)\r\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n        //  -> (else)                                                     S expr  : expr-i (false left most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__and', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($__or 'expr1 ... 'exprN)\r\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n        //  -> (else)                                                  S expr  : expr-i (false right most)\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$__or', args, 1);\r\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($eq arg1 arg2)\r\n        //  -> (if arg1 === arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:===', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($not-eq arg1 arg2)\r\n        //  -> (if arg1 !== arg2)  S expr  : true\r\n        //  -> (else)              S expr  : false\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (== a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:==', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (!= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:!=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (< a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (> a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>= a b)\r\n        //  -> S expr  : boolean\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<=', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($concat listOrString1 ... listOrStringN)\r\n        //  -> S expr  : listOrString\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$concat', args, 1);\r\n        let w1 = '';\r\n        if (Array.isArray(args[0]) && isSymbol((args[0] as any)[0], state.config.reservedNames.spread)) {\r\n            const w0 = compileToken(args[0] as any, 1);\r\n            w1 = `(${w0}[0]).concat((${w0}.length>1?${w0}[1]:(typeof ${w0}[0]==='string'?'':[])),`;\r\n        } else {\r\n            w1 = `${compileToken(args as any, 0)}.concat(`;\r\n        }\r\n        compFnBody += `(${w1}${\r\n            args.slice(1).map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (+ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:+', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n            };return _$_rv.reduce((x,y)=>x+y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (- number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:-', args, 1);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return (_$_rv.length>1?(_$_rv.reduce((x,y)=>x-y)):(_$_rv.length>0?-_$_rv[0]:NaN));})())`;\r\n        } else {\r\n            compFnBody += `(${r.length > 2 ?\r\n                args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\r\n                `-(${String(compileToken(r, 1))})`})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (* number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:*', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x*y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (** number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:**', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x**y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (/ number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:/', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x/y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (% number1 ... numberN)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:%', args, 2);\r\n\r\n        let hasSpread = false;\r\n        args.map((x, idx, arr) => {\r\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\r\n                hasSpread = true;\r\n            }\r\n        });\r\n        if (hasSpread) {\r\n            compFnBody += `((()=>{let _$_rv=[];${\r\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\r\n                };return _$_rv.reduce((x,y)=>x%y);})())`;\r\n        } else {\r\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\r\n        }\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (<< number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:<<', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: (>>> number shift)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:>>>', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-not number)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\r\n        compFnBody += `(~(${compileToken(r, 1)}))`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-and numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-or numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\r\n        return compFnBody;\r\n    });\r\n\r\n\r\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\r\n        // S expression: ($bit-xor numberA numberB)\r\n        //  -> S expr  : number\r\n        let compFnBody = '';\r\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\r\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\r\n        return compFnBody;\r\n    });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nexport interface ParserInputWithCtx<T extends ArrayLike<T[number]>, C> {\r\n    src: T;\r\n    start: number;\r\n    end: number;\r\n    context: C;\r\n}\r\nexport type ParserInput<T extends ArrayLike<T[number]>> = ParserInputWithCtx<T, undefined>;\r\nexport type StringParserInputWithCtx<C> = ParserInputWithCtx<string, C>;\r\nexport type StringParserInput = StringParserInputWithCtx<undefined>;\r\n\r\nexport class ParseError<T extends ArrayLike<T[number]>, C, R> extends Error {\r\n    public result: ParserFnFailedResult<T, C, R>;\r\n    constructor(result: ParserFnFailedResult<T, C, R>) {\r\n        super(result.message);\r\n        this.result = result;\r\n    }\r\n}\r\n\r\n\r\nexport function parserInput<T extends ArrayLike<T[number]>>(src: T): ParserInputWithCtx<T, undefined>;\r\nexport function parserInput<T extends ArrayLike<T[number]>, C>(src: T, context: C): ParserInputWithCtx<T, C>;\r\nexport function parserInput<T extends ArrayLike<T[number]>, C>(src: T, context?: C): ParserInputWithCtx<T, C> {\r\n    return ({\r\n        src,\r\n        start: 0,\r\n        end: src.length,\r\n        context: context as any,\r\n    });\r\n}\r\n\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ParserFnSucceededResult<T extends ArrayLike<T[number]>, C, R> =\r\n    {succeeded: true, next: ParserInputWithCtx<T, C>, tokens: R[]};\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ParserFnFailedResult<T extends ArrayLike<T[number]>, C, R> =\r\n    {succeeded: false, error: boolean, src: T, pos: number, message: string};\r\n\r\nexport type ParserFnWithCtx<T extends ArrayLike<T[number]>, C, R> =\r\n    (input: ParserInputWithCtx<T, C>) =>\r\n        ParserFnSucceededResult<T, C, R> |\r\n        ParserFnFailedResult<T, C, R>;\r\n\r\nexport type ParserFn<T extends ArrayLike<T[number]>, R> = ParserFnWithCtx<T, undefined, R>;\r\nexport type StringParserFnWithCtx<C, R> = ParserFnWithCtx<string, C, R>;\r\nexport type StringParserFn<R> = StringParserFnWithCtx<undefined, R>;\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { ParserInputWithCtx,\r\n         ParseError,\r\n         parserInput,\r\n         ParserFnFailedResult,\r\n         ParserFnWithCtx } from './types';\r\n\r\n\r\n\r\nfunction getLineAndCol(src: string, pos: number) {\r\n    let line = 1;\r\n    let col = 1;\r\n\r\n    for (let i = 0; i <= pos; i++) {\r\n        switch (src[i]) {\r\n        case '\\r':\r\n            if (src[i + 1] === '\\n') {\r\n                i++;\r\n            }\r\n            // FALL_TURU\r\n        case '\\n':\r\n            line++;\r\n            col = 1;\r\n            break;\r\n        default:\r\n            col++;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return ({\r\n        line,\r\n        col,\r\n    });\r\n}\r\n\r\n\r\nexport function formatErrorMessage<T extends ArrayLike<T[number]>, C, R>(\r\n    result: ParserFnFailedResult<T, C, R>) {\r\n\r\n    let msg = '';\r\n    let src = '';\r\n    if (typeof result.src === 'string') {\r\n        src = result.src.slice(Math.max(result.pos - 5, 0), result.pos + 55);\r\n\r\n        let ar = src.split(/\\r\\n|\\n|\\r/);\r\n        ar = ar.slice(0, 1)\r\n            .concat('          ^~~~~~~~')\r\n            .concat(...ar.slice(1));\r\n        src = ar.join('\\n') + '\\n\\n';\r\n\r\n        const lineAndCol = getLineAndCol(result.src, result.pos);\r\n        msg =  (`parse failed at position:${\r\n            result.pos} line:${lineAndCol.line} col:${lineAndCol.col} ${\r\n            result.message ? ` ${result.message}` : ''}\\n     ${src}`);\r\n    } else {\r\n        src = '     (object)\\n          ^~~~~~~~';\r\n        try {\r\n            src = '     ' +\r\n                JSON.stringify((result.src as any).slice(Math.max(result.pos - 10, 0), result.pos)) + '\\n          ' +\r\n                JSON.stringify((result.src as any).slice(result.pos, result.pos + 1)) + '\\n          ' +\r\n                JSON.stringify((result.src as any).slice(result.pos + 1, result.pos + 10));\r\n\r\n            let ar = src.split(/\\r\\n|\\n|\\r/);\r\n            ar = ar.slice(0, 2)\r\n                .concat('          ^~~~~~~~')\r\n                .concat(...ar.slice(2));\r\n            src = ar.join('\\n') + '\\n\\n';\r\n        } catch (e) {}\r\n\r\n        msg = (`parse failed at position:${\r\n            result.pos} ${\r\n            result.message ? ` ${result.message}` : ''}\\n     ${src}`);\r\n    }\r\n    return msg;\r\n}\r\n\r\n\r\nexport function zeroWidth<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return ({\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function zeroWidthError<T extends ArrayLike<T[number]>, C, R>(\r\n        message: string\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        throw new ParseError({\r\n            succeeded: false,\r\n            error: true,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: message || '',\r\n        });\r\n        // return ({\r\n        //     succeeded: false,\r\n        //     error: true,\r\n        //     src: input.src,\r\n        //     pos: input.start,\r\n        //     message: message || '',\r\n        // });\r\n    });\r\n}\r\n\r\n\r\nexport function beginning<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return (input.start === 0 ? {\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        } : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"beginning\"',\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function end<T extends ArrayLike<T[number]>, C, R>(\r\n        helper?: () => R\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        return (input.start === input.end ? {\r\n            succeeded: true,\r\n            next: {\r\n                src: input.src,\r\n                start: input.start,\r\n                end: input.end,\r\n                context: input.context,\r\n            },\r\n            tokens: helper ? [helper()] : [],\r\n        } : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"end\"',\r\n        });\r\n    });\r\n}\r\n\r\n// TODO: match by callback function parser\r\n// TODO: `nesting` parser\r\n\r\n\r\nexport function quantify<T extends ArrayLike<T[number]>, C, R>(\r\n        min?: number, max?: number\r\n        ): (parser: ParserFnWithCtx<T, C, R>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    min = min || 0;\r\n    return (parser => {\r\n        return (input => {\r\n            let next = input;\r\n            const matched: Array<{next: ParserInputWithCtx<T, C>, tokens: R[]}> = [];\r\n\r\n            for (;;) {\r\n                const x = parser(next);\r\n                if (x.succeeded) {\r\n                    next = x.next;\r\n                    matched.push({next: x.next, tokens: x.tokens});\r\n                    if (max && max === matched.length) {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if (x.error) {\r\n                        return x;\r\n                    }\r\n                    if (matched.length >= (min as number)) {\r\n                        break;\r\n                    } else {\r\n                        return ({\r\n                            succeeded: false,\r\n                            error: false,\r\n                            src: next.src,\r\n                            pos: next.start,\r\n                            message: 'operator \"quantify\"',\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            if (matched.length > 0) {\r\n                const r: R[] = [];\r\n                for (const x of matched) {\r\n                    r.push(...x.tokens);\r\n                }\r\n                return ({\r\n                    succeeded: true,\r\n                    next: (matched[matched.length - 1]).next,\r\n                    tokens: r,\r\n                });\r\n            } else {\r\n                return ({\r\n                    succeeded: true,\r\n                    next: {\r\n                        src: input.src,\r\n                        start: input.start,\r\n                        end: input.end,\r\n                        context: input.context,\r\n                    },\r\n                    tokens: [],\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function first<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        let matched: {next: ParserInputWithCtx<T, C>, tokens: R[]} | null = null;\r\n\r\n        let last: ParserFnFailedResult<T, C, R> | null = null;\r\n        for (const parser of parsers) {\r\n            const x = parser(input);\r\n            if (x.succeeded) {\r\n                matched = {next: x.next, tokens: x.tokens};\r\n                break;\r\n            }\r\n            if (last) {\r\n                if (x.error) {\r\n                    if (!last.error || last.pos < x.pos) {\r\n                        last = x;\r\n                    }\r\n                } else if (last.pos < x.pos) {\r\n                    last = x;\r\n                }\r\n            } else {\r\n                last = x;\r\n            }\r\n        }\r\n\r\n        return (matched ? {\r\n            succeeded: true, next: matched.next, tokens: matched.tokens\r\n        } : last ? last : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"first\"',\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function or<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        const matched: Array<{next: ParserInputWithCtx<T, C>, tokens: R[]}> = [];\r\n\r\n        let last: ParserFnFailedResult<T, C, R> | null = null;\r\n        for (const parser of parsers) {\r\n            const x = parser(input);\r\n            if (x.succeeded) {\r\n                matched.push({next: x.next, tokens: x.tokens});\r\n            } else {\r\n                if (last) {\r\n                    if (x.error) {\r\n                        if (!last.error || last.pos < x.pos) {\r\n                            last = x;\r\n                        }\r\n                    } else if (last.pos < x.pos) {\r\n                        last = x;\r\n                    }\r\n                } else {\r\n                    last = x;\r\n                }\r\n            }\r\n        }\r\n        if (matched.length > 0) {\r\n            const z = matched.reduce((a, b) => a.next.start >= b.next.start ? a : b);\r\n            return ({succeeded: true, next: z.next, tokens: z.tokens});\r\n        }\r\n\r\n        return (last ? last : {\r\n            succeeded: false,\r\n            error: false,\r\n            src: input.src,\r\n            pos: input.start,\r\n            message: 'operator \"or\"',\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function transform<T extends ArrayLike<T[number]>, C, R>(\r\n        trans?: ((tokens: R[], input: ParserInputWithCtx<T, C>) => R[]), ctxTrans?: ((context: C) => C)\r\n        ): (...parsers: Array<ParserFnWithCtx<T, C, R>>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return ((...parsers) => {\r\n        return (input => {\r\n            let next = input;\r\n            const tokens: R[] = [];\r\n\r\n            for (const parser of parsers) {\r\n                const x = parser(next);\r\n                if (! x.succeeded) {\r\n                    return x;\r\n                }\r\n                next = x.next;\r\n                tokens.push(...x.tokens);\r\n            }\r\n\r\n            // TODO: report errors while transforming\r\n            const t2 = trans ? trans(tokens, input) : tokens;\r\n            return ({\r\n                succeeded: true,\r\n                next: ctxTrans ? {\r\n                    src: next.src,\r\n                    start: next.start,\r\n                    end: next.end,\r\n                    context: ctxTrans(next.context),\r\n                } : next,\r\n                tokens: t2,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function combine<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return transform<T, C, R>()(...parsers);\r\n}\r\n\r\n\r\nexport function lookAhead<T extends ArrayLike<T[number]>, C, R>(\r\n        ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n        ): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        let next = input;\r\n\r\n        for (const parser of parsers) {\r\n            const x = parser(next);\r\n            if (! x.succeeded) {\r\n                return x;\r\n            }\r\n            next = x.next;\r\n        }\r\n\r\n        return ({\r\n            succeeded: true,\r\n            next: input,\r\n            tokens: [],\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function lookBehind<T extends ArrayLike<T[number]>, C, R>(\r\n        n: number, helper?: () => R): (\r\n            ...parsers: Array<ParserFnWithCtx<T, C, R>>\r\n            ) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return ((...parsers) => {\r\n        return (input => {\r\n            if (input.start - n < 0) {\r\n                return ({\r\n                    succeeded: false,\r\n                    error: false,\r\n                    src: input.src,\r\n                    pos: input.start,\r\n                    message: 'lookBehind: src is too short',\r\n                });\r\n            }\r\n            let next = {\r\n                src: input.src,\r\n                start: input.start - n,\r\n                end: input.end,\r\n                context: input.context,\r\n            };\r\n\r\n            for (const parser of parsers) {\r\n                const x = parser(next);\r\n                if (! x.succeeded) {\r\n                    return x;\r\n                }\r\n                next = x.next;\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: input,\r\n                tokens: helper ? [helper()] : [],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\n// tslint:disable-next-line: interface-over-type-literal\r\nexport type ApplyProductionRulesArg<T extends ArrayLike<T[number]>, C, R> = {\r\n    rules: Array<ParserFnWithCtx<R[], C, R> |\r\n           {parser: ParserFnWithCtx<R[], C, R>, rtol: boolean}>,\r\n    maxApply?: number,\r\n    check: ParserFnWithCtx<R[], C, R>,\r\n};\r\n\r\nexport function applyProductionRules<T extends ArrayLike<T[number]>, C, R>(\r\n        args: ApplyProductionRulesArg<T, C, R>\r\n        ): (lexer: ParserFnWithCtx<T, C, R>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return (lexer => {\r\n        return (lexerInput => {\r\n            const lexResult = lexer(lexerInput);\r\n            if (! lexResult.succeeded) {\r\n                return lexResult;\r\n            }\r\n\r\n            const input = parserInput<R[], C>(lexResult.tokens, lexerInput.context);\r\n            let next = input;\r\n            let completed = false;\r\n\r\n            if (args.check(next).succeeded) {\r\n                return ({\r\n                    succeeded: true,\r\n                    next: lexResult.next,\r\n                    tokens: lexResult.tokens,\r\n                });\r\n            }\r\n\r\n            completed: for (let i = 0;\r\n                    args.maxApply !== void 0 ? i < args.maxApply : true; i++) {\r\n                let matched = false;\r\n\r\n                rules: for (const rule of args.rules) {\r\n                    const {parser, rtol} =\r\n                        typeof rule === 'function' ?\r\n                            {parser: rule, rtol: false} : rule;\r\n                    const len = next.src.length;\r\n\r\n                    for (let s = 0; s <= len; s++) {\r\n                        const x = parser({\r\n                            src: next.src,\r\n                            start: rtol ? len - s : s,\r\n                            end: next.src.length,\r\n                            context: next.context,\r\n                        });\r\n                        if (x.succeeded) {\r\n                            matched = true;\r\n                            const nextSrc = next.src.slice(0, rtol ? len - s : s);\r\n                            nextSrc.push(...x.tokens);\r\n                            nextSrc.push(...next.src.slice(x.next.start));\r\n                            next = {\r\n                                src: nextSrc,\r\n                                start: 0,\r\n                                end: nextSrc.length,\r\n                                context: x.next.context,\r\n                            };\r\n                            if (args.check(next).succeeded) {\r\n                                completed = true;\r\n                                break completed;\r\n                            }\r\n                            break rules;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (! matched) {\r\n                    break;\r\n                }\r\n            }\r\n            if (! completed) {\r\n                if (! args.check(next).succeeded) {\r\n                    throw new ParseError({\r\n                        succeeded: false,\r\n                        error: true,\r\n                        src: input.src,\r\n                        pos: input.start,\r\n                        message: 'The application of production rules was not finished',\r\n                    });\r\n                }\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: lexResult.next,\r\n                tokens: next.src,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function makeProgram<T extends ArrayLike<T[number]>, C, R>(\r\n    parser: ParserFnWithCtx<T, C, R>): ParserFnWithCtx<T, C, R> {\r\n\r\n    return (input => {\r\n        try {\r\n            return parser(input);\r\n        } catch (e) {\r\n            if (e.result) {\r\n                return e.result;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { ParserFnWithCtx } from './types';\r\nimport { zeroWidth,\r\n         zeroWidthError,\r\n         beginning,\r\n         end,\r\n         quantify,\r\n         first,\r\n         or,\r\n         transform,\r\n         lookAhead,\r\n         lookBehind,\r\n         ApplyProductionRulesArg,\r\n         applyProductionRules,\r\n         makeProgram } from './parser';\r\n\r\n\r\n\r\nexport function objSequence<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (needle: T) => ParserFnWithCtx<T, C, R> {\r\n\r\n    return (needle => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            let matched = true;\r\n\r\n            if (len >= needle.length) {\r\n                for (let i = 0; i < needle.length; i++) {\r\n                    if (! comparator(input.src[input.start + i], needle[i])) {\r\n                        matched = false;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                matched = false;\r\n            }\r\n\r\n            return (matched ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needle.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needle)],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"objSequence(${needle})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClass<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (...needles: Array<T[number]>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            let index = -1;\r\n\r\n            const succeeded = len > 0 ? needles.some((needle, idx) => {\r\n                if (comparator(input.src[input.start], needle)) {\r\n                    index = idx;\r\n                    return true;\r\n                }\r\n            }) : false;\r\n\r\n            return (succeeded ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needles[index])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"objClass(${needles.join(',')})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClassNot<T extends ArrayLike<T[number]>, C, R>(\r\n    helper: (token: T[number]) => R,\r\n    comparator: (a: T[number], b: T[number]) => boolean,\r\n    ): (...needles: Array<T[number]>) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n\r\n            if (len > 0) {\r\n                for (const needle of needles) {\r\n                    let matched = true;\r\n\r\n                    if (! comparator(input.src[input.start], needle)) {\r\n                        matched = false;\r\n                        break;\r\n                    }\r\n\r\n                    if (matched) {\r\n                        return ({\r\n                            succeeded: false,\r\n                            error: false,\r\n                            src: input.src,\r\n                            pos: input.start,\r\n                            message: `operator \"objClassNot(${needles.join(',')})\"`,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(input.src[input.start])],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function objClassByNeedleFn<T extends ArrayLike<T[number]>, C, R>(\r\n        helper: (token: T[number]) => R,\r\n        comparator: (a: T[number], b: T[number]) => boolean,\r\n        ): (needle: (src: T[number]) => boolean) => ParserFnWithCtx<T, C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    // NOTE: <T> version `needles` type is `T`.\r\n    return (needle => {\r\n        return (input => {\r\n            const len = Math.max(0, input.end - input.start);\r\n            const matched = len > 0 ? needle(input.src[input.start]) : false;\r\n\r\n            return (matched ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + 1,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(input.src[input.start])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"objClassByNeedleFn\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function getObjectParsers<T extends ArrayLike<T[number]>, C, R>(\r\n        params: {\r\n            rawToToken: (rawToken: T[number]) => R,\r\n            concatTokens: (tokens: R[]) => R[],\r\n            comparator: (a: T[number], b: T[number]) => boolean,\r\n        }) {\r\n\r\n    const clsFn = objClassByNeedleFn<T, C, R>(params.rawToToken, params.comparator);\r\n\r\n    const isAny = clsFn(src => true);\r\n\r\n    // TODO: reduce unneccessary call for adding types.\r\n    return ({\r\n        seq: objSequence<T, C, R>(params.rawToToken, params.comparator),\r\n        cls: objClass<T, C, R>(params.rawToToken, params.comparator),\r\n        notCls: objClassNot<T, C, R>(params.rawToToken, params.comparator),\r\n        clsFn,\r\n        classes: {\r\n            any: isAny,\r\n        },\r\n        cat: transform<T, C, R>(params.concatTokens),\r\n        once: quantify<T, C, R>(1, 1),\r\n        repeat: quantify<T, C, R>(),\r\n        qty: (min?: number, max?: number) => quantify<T, C, R>(min, max), // TODO:\r\n        zeroWidth: (helper?: () => R) => zeroWidth<T, C, R>(helper),      // TODO:\r\n        err: (message: string) => zeroWidthError<T, C, R>(message),       // TODO:\r\n        beginning: (helper?: () => R) => beginning<T, C, R>(helper),      // TODO:\r\n        end: (helper?: () => R) => end<T, C, R>(helper),                  // TODO:\r\n        first: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => first<T, C, R>(...parsers), // TODO:\r\n        or: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => or<T, C, R>(...parsers),       // TODO:\r\n        combine: transform<T, C, R>(),\r\n        erase: transform<T, C, R>(tokens => []),\r\n        trans: (fn: (tokens: R[]) => R[]) => transform<T, C, R>(fn),                            // TODO:\r\n        ahead: (...parsers: Array<ParserFnWithCtx<T, C, R>>) => lookAhead<T, C, R>(...parsers), // TODO:\r\n        behind: (n: number, helper?: () => R) => lookBehind<T, C, R>(n, helper),\r\n        rules: (args: ApplyProductionRulesArg<T, C, R>) => applyProductionRules<T, C, R>(args), // TODO:\r\n        makeProgram,\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbol,\r\n         SxToken,\r\n         FatalError,\r\n         CapturedScopes,\r\n         SxMacroInfo }           from '../../types';\r\nimport { globalObj }             from '../../consts';\r\nimport { isSymbol,\r\n         quote }                 from '../../ast';\r\nimport { evaluate,\r\n         resolveValueSymbolScope,\r\n         collectCapturedVariables,\r\n         getCapturedScopes,\r\n         getScope,\r\n         getGlobalScope,\r\n         installScope,\r\n         uninstallScope,\r\n         optimizeTailCall,\r\n         toNumber }              from '../../evaluate';\r\nimport { compileLambda }         from '../../compile';\r\nimport { checkParamsLength,\r\n         checkUnsafeVarNamesEx } from '../../errors';\r\n\r\n\r\n\r\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($car '(first second ... last))\r\n    //  -> S expr  : first\r\n    checkParamsLength('$car', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car[0];\r\n};\r\nexport const $$car = $car(null as any, null as any);\r\n\r\n\r\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cdr '(first second ... last))\r\n    //  -> S expr  : (second ... last)\r\n    checkParamsLength('$cdr', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (! Array.isArray(car)) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n    if (car.length === 0) {\r\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\r\n    }\r\n    return car.slice(1);\r\n};\r\nexport const $$cdr = $cdr(null as any, null as any);\r\n\r\n\r\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\r\n    //  -> S expr  : (arg1 arg2-item1 ...)\r\n    // S expression: ($cons arg1 nilOrNull ... argN)\r\n    //  -> S expr  : (arg1)\r\n    // S expression: ($cons arg1 arg2 ... argN)\r\n    //  -> S expr  : arg1.arg2\r\n    checkParamsLength('$cons', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (car === null) {\r\n        car = [];\r\n    }\r\n    if (cdr === null) {\r\n        cdr = [];\r\n    }\r\n\r\n    if (Array.isArray(cdr)) {\r\n        cdr = cdr.slice(0);\r\n        cdr.unshift(car);\r\n        return cdr;\r\n    } else {\r\n        return {car, cdr};\r\n    }\r\n};\r\nexport const $$cons = $cons(null as any, null as any);\r\n\r\n\r\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first first second ... last)\r\n    //  -> S expr  : first\r\n    // S expression: ($first)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(0, 1);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$first = $first(null as any, null as any);\r\n\r\n\r\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($second first second ... last)\r\n    //  -> S expr  : second\r\n    // S expression: ($second first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1, 2);\r\n    return (cdr.length === 1) ? cdr[0] : null;\r\n};\r\nexport const $$second = $second(null as any, null as any);\r\n\r\n\r\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($last first second ... last)\r\n    //  -> S expr  : last\r\n    // S expression: ($last)\r\n    //  -> S expr  : null\r\n    const car: any = args.slice(args.length - 1, args.length);\r\n    return (car.length === 1) ? car[0] : null;\r\n};\r\nexport const $$last = $last(null as any, null as any);\r\n\r\n\r\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($rest first second ... last)\r\n    //  -> S expr  : (second ... last)\r\n    // S expression: ($rest first)\r\n    //  -> S expr  : null\r\n    const cdr: any = args.slice(1);\r\n    return (0 < cdr.length) ? cdr : null;\r\n};\r\nexport const $$rest = $rest(null as any, null as any);\r\n\r\n\r\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($first-and-second first second ... last)\r\n    //  -> S expr  : first.second\r\n    let car: any = args.slice(0, 1);\r\n    car = (car.length === 1) ? car[0] : null;\r\n\r\n    let cdr: any = args.slice(1, 2);\r\n    cdr = (cdr.length === 1) ? cdr[0] : null;\r\n\r\n    return {car, cdr};\r\n};\r\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\r\n\r\n\r\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($atom arg1 ...)\r\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\r\n    //  -> (if arg1 is nil or anything else) S expr  : true\r\n    checkParamsLength('$atom', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n\r\n    if (car === null || car === void 0) {\r\n        return true;\r\n    }\r\n    if (Array.isArray(car)) {\r\n        if (car.length === 0) return  true;\r\n        else                  return false;\r\n    }\r\n\r\n    switch (typeof car) {\r\n    case 'number': case 'string': case 'function': case 'boolean':\r\n        return true;\r\n    case 'object':\r\n        return isSymbol(car) ? true : false;\r\n    }\r\n    return false;\r\n};\r\nexport const $$atom = $atom(null as any, null as any);\r\n\r\n\r\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($eq arg1 arg2)\r\n    //  -> (if arg1 === arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$eq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car === cdr;\r\n};\r\nexport const $$eq = $eq(null as any, null as any);\r\n\r\n\r\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not-eq arg1 arg2)\r\n    //  -> (if arg1 !== arg2)  S expr  : true\r\n    //  -> (else)              S expr  : false\r\n    checkParamsLength('$notEq', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return car !== cdr;\r\n};\r\nexport const $$notEq = $notEq(null as any, null as any);\r\n\r\n\r\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\r\n    // S expression: ($list arg1 ... argN)\r\n    //  -> S expr  : (arg1 ... argN)\r\n    args.slice(0);\r\nexport const $$list = $list(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\r\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__scope', args, 3);\r\n\r\n    const isBlockLocal = $$first(...args);\r\n    const returnMultiple = $$second(...args);\r\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\r\n    let r: SxToken = null;\r\n\r\n    const scope: any = {};\r\n    if (Array.isArray(car)) {\r\n        for (const x of car) {\r\n            if (Array.isArray(x)) {\r\n                const kv = $$firstAndSecond(...x);\r\n                const kvSym = isSymbol(kv.car);\r\n                const kvName = kvSym ? kvSym.symbol : String(kv.car);\r\n                checkUnsafeVarNamesEx('$__scope', scope, kvName);\r\n                scope[kvName] = evaluate(state, kv.cdr);\r\n            } else {\r\n                const xSym = isSymbol(x);\r\n                const xName = xSym ? xSym.symbol : String(x);\r\n                checkUnsafeVarNamesEx('$__scope', scope, xName);\r\n                scope[xName] = null;\r\n            }\r\n        }\r\n    }\r\n    installScope(state, scope, isBlockLocal, capturedScopes);\r\n\r\n    try {\r\n        if (4 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(3)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(3)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\r\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\r\n    //  -> (else)               S expr  : exprN\r\n    checkParamsLength('$__globalScope', args, 1);\r\n\r\n    const returnMultiple = $$first(...args);\r\n    const cdr = $$second(...args);\r\n    let r: SxToken = null;\r\n\r\n    installScope(state, getGlobalScope(state).scope, true);\r\n    try {\r\n        if (2 < args.length) {\r\n            if (returnMultiple) {\r\n                r = [];\r\n                for (const x of args.slice(1)) {\r\n                    r.push(evaluate(state, x));\r\n                }\r\n            } else {\r\n                for (const x of args.slice(1)) {\r\n                    r = evaluate(state, x);\r\n                }\r\n            }\r\n        } else {\r\n            r = evaluate(state, cdr);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : exprN\r\n    checkParamsLength('$__capture', args, 1);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let r: SxToken = null;\r\n\r\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\r\n    installScope(state, {}, true, capturedScopes);\r\n    try {\r\n        for (const x of args.slice(1)) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } finally {\r\n        uninstallScope(state);\r\n    }\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    let fnBody = args.slice(1);\r\n    if (state.config.enableTailCallOptimization) {\r\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\r\n    }\r\n\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = function(this: any, ...actualArgs: any[]) {\r\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\r\n            throw new Error(`[SX] func call: Actual args too short: actual ${\r\n                actualArgs.length} / formal ${formalArgs.length}.`);\r\n        }\r\n        // TODO: add type checking\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            [state.config.reservedNames.thiz, this === globalObj || this === void 0 ? null : quote(state, this)],\r\n            ...(formalArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === formalArgs.length - 1) ?\r\n                        actualArgs.slice(index) : actualArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__lambda', args, 2);\r\n\r\n    const formalArgs: SxSymbol[] = args[0];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(1);\r\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $__lambda(state, name)(...args.slice(1));\r\n\r\n    checkUnsafeVarNamesEx('$__defun', state.funcMap, car.symbol);\r\n    // TODO: overloading\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn,\r\n        // formalArgs: ,\r\n        // lastIsSpread: ,\r\n        // next: ,\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$$__defun', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\r\n\r\n    checkUnsafeVarNamesEx('$$__defun', state.funcMap, car.symbol);\r\n    // TODO: overloading\r\n    state.funcMap.set(car.symbol, {\r\n        name: car.symbol,\r\n        fn: (st, nm) => fn,\r\n        // formalArgs: ,\r\n        // lastIsSpread: ,\r\n        // next: ,\r\n    });\r\n    return fn;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($refun 'name)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__refun', args, 1, 1);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n\r\n    checkUnsafeVarNamesEx('$__refun', state.funcMap, car.symbol);\r\n    const info = state.funcMap.get(car.symbol);\r\n    if (!info) {\r\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\r\n    }\r\n    return info.fn(state, car.symbol);\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__defmacro = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__defmacro', args, 3);\r\n\r\n    const car: SxSymbol = $$first(...args);\r\n    const formalArgs: SxSymbol[] = args[1];\r\n    if (! Array.isArray(formalArgs)) {\r\n        throw new Error(`[SX] $__defmacro: Invalid argument(s): args[1] is not array.`);\r\n    }\r\n\r\n    let lastIsSpread = false;\r\n    for (let i = 0; i < formalArgs.length; i++) {\r\n        const fa = formalArgs[i];\r\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\r\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\r\n            if (! isSymbol(fa[1])) {\r\n                throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n            }\r\n            formalArgs[i] = fa[1];\r\n            lastIsSpread = true;\r\n        } else if (! isSymbol(fa)) {\r\n            throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\r\n        }\r\n    }\r\n\r\n    const fnBody = args.slice(2);\r\n    const capturedScopes = getCapturedScopes(state);\r\n\r\n    const fn = (fArgs: SxSymbol[]) => (...aArgs: any[]) => {\r\n        return $__scope(state, name, capturedScopes)(false, false, [\r\n            [state.config.reservedNames.self, fn],\r\n            ...(fArgs.map((x: SxSymbol, index) => [\r\n                x.symbol,\r\n                quote(state,\r\n                    (lastIsSpread && index === fArgs.length - 1) ?\r\n                        aArgs.slice(index) : aArgs[index]\r\n                )\r\n            ])),\r\n        ], ...fnBody);\r\n    };\r\n\r\n    const m: SxMacroInfo = {\r\n        name: car.symbol,\r\n        fn: (st: SxParserState, nm: string, fArgs: SxSymbol[]) => (list: SxToken[]) => fn(fArgs)(...(list.slice(1))),\r\n        formalArgs,\r\n        lastIsSpread,\r\n    };\r\n\r\n    checkUnsafeVarNamesEx('$__defmacro', state.macroMap, car.symbol);\r\n\r\n    if (state.macroMap.has(car.symbol)) {\r\n        let curr = state.macroMap.get(car.symbol);\r\n        (curr as SxMacroInfo).next = m;\r\n        if (curr && curr.formalArgs) {\r\n            if (curr.formalArgs.length < formalArgs.length) {\r\n                state.macroMap.set(car.symbol, m);\r\n                m.next = curr;\r\n            } else {\r\n                let prev = curr;\r\n                curr = curr.next;\r\n                while (curr) {\r\n                    if (curr.formalArgs) {\r\n                        if (curr.formalArgs.length < formalArgs.length) {\r\n                            prev.next = m;\r\n                            m.next = curr;\r\n                            break;\r\n                        }\r\n                    }\r\n                    prev = curr;\r\n                    curr = curr.next;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        state.macroMap.set(car.symbol, m);\r\n    }\r\n    return fn;\r\n};\r\n\r\n\r\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($apply fn arg1 ... argN)\r\n    //  -> S expr  : fn'\r\n    checkParamsLength('$apply', args, 1);\r\n\r\n    const car: () => any = $$first(...args);\r\n    if (typeof car !== 'function') {\r\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\r\n    }\r\n\r\n    return (\r\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\r\n    );\r\n};\r\nexport const $$apply = $apply(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\r\n    //  -> S expr  : fn\r\n    checkParamsLength('$__call', args, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    const sym = isSymbol(cdr);\r\n    const xName = sym ? sym.symbol : evaluate(state, cdr) as any;\r\n\r\n    checkUnsafeVarNamesEx('$__call', car, xName);\r\n\r\n    return Function.prototype.apply.call(\r\n        car[xName],\r\n        car,\r\n        args.slice(2)\r\n    );\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__try 'expr 'catch-expr)\r\n    //  ->                               S expr  : expr\r\n    //  -> (if error is raised in expr)  S expr  : catch-expr\r\n    checkParamsLength('$__try', args, 1, 2);\r\n\r\n    let r: SxToken = [];\r\n    try {\r\n        r = evaluate(state, args[0]);\r\n    } catch (e) {\r\n        if (e instanceof FatalError) {\r\n            throw e;\r\n        }\r\n        if (1 < args.length) {\r\n            r = $__scope(state, name)(true, false, [\r\n                ['$error', quote(state, e)],\r\n                ['$parent', quote(state, getScope(state))],\r\n            ], args[1]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($raise 'expr)\r\n    //  -> S expr  : -\r\n    const car = $$first(...args);\r\n    throw car;\r\n};\r\nexport const $$raise = $raise(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if condition 't-expr 'f-expr)\r\n    //  -> (if condition is true ) S expr  : t-expr\r\n    //  -> (if condition is false) S expr  : f-expr\r\n    checkParamsLength('$__if', args, 2, 3);\r\n\r\n    const car = $$first(...args);\r\n    let r: SxToken = [];\r\n    if ($$boolean(car)) {\r\n        r = evaluate(state, args[1]);\r\n    } else {\r\n        if (2 < args.length) {\r\n            r = evaluate(state, args[2]);\r\n        } else {\r\n            r = null;\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__if-null condition 'null-expr)\r\n    //  -> (if condition is not null ) S expr  : condition\r\n    //  -> (if condition is null)      S expr  : null-expr\r\n    checkParamsLength('$__ifNull', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    let r: SxToken = [];\r\n    if (! $$ambiguousEq(car, null)) {\r\n        r = car;\r\n    } else {\r\n        r = evaluate(state, cdr);\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n    //  -> (if (eval condI) is true ) S expr  : exprI\r\n    //  -> (if no matched)            S expr  : null\r\n    checkParamsLength('$__cond', args, 1);\r\n\r\n    for (let i = 0; i < args.length - 1; i += 2) {\r\n        const c = args[i];\r\n        const x = args[i + 1];\r\n        if ($$boolean(evaluate(state, c))) {\r\n            return evaluate(state, x);\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__while', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$boolean(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doWhile', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$boolean(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__until', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    while ($$not(evaluate(state, car))) {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\r\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\r\n    //  -> (else)                                          S expr  : null\r\n    checkParamsLength('$__doUntil', args, 1);\r\n\r\n    const car = $$first(...args);\r\n    const cdr = args.slice(1);\r\n    let r: SxToken = null;\r\n    do {\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    } while ($$not(evaluate(state, car)));\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\r\n    //  -> (if n > 0) S expr  : exprN\r\n    //  -> (else)     S expr  : null\r\n    checkParamsLength('$__repeat', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n\r\n    checkUnsafeVarNamesEx('$__repeat', {}, sym.symbol); // NOTE: pass dummy target object.\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const n = toNumber($$second(...args));\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (let i = 0; i < n; i++) {\r\n        scope[sym.symbol] = i;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\r\n    //  -> (if list.length > 0) S expr  : exprN\r\n    //  -> (else)               S expr  : null\r\n    checkParamsLength('$__for', args, 2);\r\n\r\n    const sym = isSymbol($$first(...args));\r\n    if (! sym) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n    }\r\n\r\n    checkUnsafeVarNamesEx('$__for', {}, sym.symbol); // NOTE: pass dummy target object.\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n\r\n    const list = $$second(...args);\r\n    if (! Array.isArray(list)) {\r\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\r\n    }\r\n\r\n    const cdr = args.slice(2);\r\n    let r: SxToken = null;\r\n    for (const q of list) {\r\n        scope[sym.symbol] = q;\r\n        for (const x of cdr) {\r\n            r = evaluate(state, x);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get v fn1 ... fnN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$pipe', args, 1);\r\n\r\n    let v = args[0];\r\n    for (let i = 1; i < args.length; i++) {\r\n        v = args[i](v);\r\n    }\r\n    return v;\r\n};\r\nexport const $$pipe = $pipe(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__get', args, 1);\r\n\r\n    let v: any = null;\r\n    let sym = isSymbol(args[0]);\r\n\r\n    if (!sym) {\r\n        switch (typeof args[0]) {\r\n        case 'string': case 'number':\r\n            sym = {symbol: String(args[0])};\r\n            break;\r\n        default:\r\n            v = evaluate(state, args[0]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (sym) {\r\n        const scope = resolveValueSymbolScope(state, sym, true);\r\n        if (! scope) {\r\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\r\n        }\r\n        v = scope[sym.symbol];\r\n    }\r\n\r\n    for (let i = 1; i < args.length; i++) {\r\n        let q: any = args[i];\r\n        let inprog = true;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                v = q(v);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = v.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                checkUnsafeVarNamesEx('$__get', v, q);\r\n                v = v[q];\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\r\n            }\r\n        }\r\n    }\r\n    return v;\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__let 'nameStrOrSymbol expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__let', args, 2, 2);\r\n\r\n    let sym = isSymbol($$first(...args));\r\n\r\n    if (! sym) {\r\n        if (typeof args[0] === 'string') {\r\n            sym = {symbol: args[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    checkUnsafeVarNamesEx('$__let', {}, sym.symbol); // NOTE: pass dummy target object.\r\n\r\n    const scope = resolveValueSymbolScope(state, sym, false);\r\n    scope[sym.symbol] = args[1];\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\r\n    //  -> S expr  : any\r\n    checkParamsLength('$__set', args, 2, 2);\r\n\r\n    let path: any = [];\r\n\r\n    if (Array.isArray(args[0])) {\r\n        path = args[0];\r\n    } else {\r\n        path.push(args[0]);\r\n    }\r\n\r\n    let sym = isSymbol(path[0]);\r\n\r\n    if (! sym) {\r\n        if (typeof path[0] === 'string') {\r\n            checkUnsafeVarNamesEx('$__set', {}, path[0]); // NOTE: pass dummy target object.\r\n            sym = {symbol: path[0]};\r\n        } else {\r\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n        }\r\n    }\r\n\r\n    let scope = resolveValueSymbolScope(state, sym, true);\r\n    if (scope === null) {\r\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\r\n    }\r\n\r\n    let subst = false;\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n        let q: any = path[i];\r\n        let inprog = true;\r\n        const last = i === path.length - 1;\r\n        while (inprog) {\r\n            switch (typeof q) {\r\n            case 'function':\r\n                scope = q(scope);\r\n                inprog = false;\r\n                break;\r\n            case 'object':\r\n                if (Array.isArray(q)) {\r\n                    q = evaluate(state, q);\r\n                } else {\r\n                    sym = isSymbol(q);\r\n                    if (sym) {\r\n                        q = sym.symbol;\r\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\r\n                        q = evaluate(state, q);\r\n                    } else {\r\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'number':\r\n                if (q < 0) {\r\n                    q = scope.length + q;\r\n                }\r\n                // FALL_THRU\r\n            case 'string':\r\n                checkUnsafeVarNamesEx('$__set', scope, q);\r\n                if (last) {\r\n                    scope[q] = args[1];\r\n                    subst = true;\r\n                } else {\r\n                    scope = scope[q];\r\n                }\r\n                inprog = false;\r\n                break;\r\n            default:\r\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (! subst) {\r\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\r\n    }\r\n\r\n    return args[1];\r\n};\r\n\r\n\r\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($boolean any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$boolean', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (Array.isArray(car) && car.length === 0) return false;\r\n    else return Boolean(car);\r\n};\r\nexport const $$boolean = $boolean(null as any, null as any);\r\n\r\n\r\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($not any)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$not', args, 1, 1);\r\n\r\n    return ! $$boolean(...args);\r\n};\r\nexport const $$not = $not(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__and 'expr1 ... 'exprN)\r\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\r\n    //  -> (else)                                                     S expr  : expr-i (false left most)\r\n    checkParamsLength('$__and', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if (! $$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__and = $__and(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__or 'expr1 ... 'exprN)\r\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\r\n    //  -> (else)                                                  S expr  : expr-i (false right most)\r\n    checkParamsLength('$__or', args, 1);\r\n\r\n    let prev = null;\r\n    for (let i = 0; i < args.length; i++) {\r\n        const curr = evaluate(state, args[i]);\r\n        if ($$boolean(curr)) {\r\n            return curr;\r\n        }\r\n        prev = curr;\r\n    }\r\n    return prev;\r\n};\r\n// tslint:disable-next-line:variable-name\r\nexport const $$__or = $__or(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (== a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ambiguousEq', args, 2, 2);\r\n\r\n    let {car, cdr} = $$firstAndSecond(...args);\r\n    if (Array.isArray(car) && car.length === 0) car = null;\r\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\r\n    if (car === void 0) car = null;\r\n    if (cdr === void 0) cdr = null;\r\n    // tslint:disable-next-line:triple-equals\r\n    return car == cdr;\r\n};\r\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\r\n\r\n\r\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (!= a b)\r\n    //  -> S expr  : boolean\r\n    return ! $$ambiguousEq(...args);\r\n};\r\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\r\n\r\n\r\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (< a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$lt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) < toNumber(cdr);\r\n};\r\nexport const $$lt = $lt(null as any, null as any);\r\n\r\n\r\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (<= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$le', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) <= toNumber(cdr);\r\n};\r\nexport const $$le = $le(null as any, null as any);\r\n\r\n\r\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (> a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$gt', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) > toNumber(cdr);\r\n};\r\nexport const $$gt = $gt(null as any, null as any);\r\n\r\n\r\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: (>= a b)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$ge', args, 2, 2);\r\n\r\n    const {car, cdr} = $$firstAndSecond(...args);\r\n    return toNumber(car) >= toNumber(cdr);\r\n};\r\nexport const $$ge = $ge(null as any, null as any);\r\n\r\n\r\nexport const $typeof = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($typeof x)\r\n    //  -> S expr  : 'null' | 'bigint' | 'boolean' | 'function' | 'number' | 'string' | 'undefined' |\r\n    //               'js-symbol' | 'list' | 'object'\r\n    checkParamsLength('$typeof', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    if (car === null) {\r\n        return 'null';\r\n    }\r\n    const tyName = typeof car;\r\n    switch (tyName) {\r\n    case 'object':\r\n        if (Array.isArray(car)) {\r\n            return 'list';\r\n        } else {\r\n            return 'object';\r\n        }\r\n    case 'symbol':\r\n        return 'js-symbol';\r\n    default:\r\n        return tyName;\r\n    }\r\n};\r\nexport const $$typeof = $typeof(null as any, null as any);\r\n\r\n\r\nexport const $symbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($symbol)\r\n    // S expression: ($symbol name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$symbol', args, 1, 1);\r\n\r\n    if (typeof args[0] === 'string') {\r\n        return {symbol: args[0]};\r\n    } else {\r\n        throw new Error(`[SX] $symbol: Invalid argument(s): item(s) of args[0] is not string.`);\r\n    }\r\n};\r\nexport const $$symbol = $symbol(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__gensym = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__gensym)\r\n    // S expression: ($__gensym name)\r\n    //  -> S expr  : symbol\r\n    checkParamsLength('$__gensym', args, 0, 1);\r\n\r\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\r\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\r\n    if (args.length === 1) {\r\n        const a = isSymbol(args[0]);\r\n        if (a) {\r\n            $__let(state, '')(a, tempVarSym);\r\n        } else if (typeof args[0] === 'string') {\r\n            $__let(state, '')({symbol: args[0]}, tempVarSym);\r\n        } else {\r\n            throw new Error(`[SX] $__gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\r\n        }\r\n    }\r\n    return tempVarSym;\r\n};\r\n\r\n\r\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-symbol x)\r\n    // S expression: ($is-symbol x name)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isSymbol', args, 1, 2);\r\n\r\n    if (args.length === 1) {\r\n        return (isSymbol(args[0]) ? true : false);\r\n    } else {\r\n        if (typeof args[1] === 'string') {\r\n            return (isSymbol(args[0], args[1]) ? true : false);\r\n        } else {\r\n            throw new Error(`[SX] $isSymbol: Invalid argument(s): item(s) of args[1] is not string.`);\r\n        }\r\n    }\r\n};\r\nexport const $$isSymbol = $isSymbol(null as any, null as any);\r\n\r\n\r\nexport const $isNull = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-null x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNull', args, 1, 1);\r\n\r\n    return $$first(...args) === null;\r\n};\r\nexport const $$isNull = $isNull(null as any, null as any);\r\n\r\n\r\nexport const $isNil = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-nil x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNil', args, 1, 1);\r\n\r\n    const car = $$first(...args);\r\n    return Array.isArray(car) && car.length === 0;\r\n};\r\nexport const $$isNil = $isNil(null as any, null as any);\r\n\r\n\r\nexport const $isUndefined = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-undefined x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isUndefined', args, 1, 1);\r\n\r\n    return $$first(...args) === void 0;\r\n};\r\nexport const $$isUndefined = $isUndefined(null as any, null as any);\r\n\r\n\r\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-list x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isList', args, 1, 1);\r\n\r\n    return Array.isArray($$first(...args));\r\n};\r\nexport const $$isList = $isList(null as any, null as any);\r\n\r\n\r\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-string x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isString', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'string';\r\n};\r\nexport const $$isString = $isString(null as any, null as any);\r\n\r\n\r\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-number x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNumber', args, 1, 1);\r\n\r\n    return typeof $$first(...args) === 'number';\r\n};\r\nexport const $$isNumber = $isNumber(null as any, null as any);\r\n\r\n\r\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-NaN x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isNaN', args, 1, 1);\r\n\r\n    return Number.isNaN($$first(...args));\r\n};\r\nexport const $$isNaN = $isNaN(null as any, null as any);\r\n\r\n\r\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-finate x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isFinite', args, 1, 1);\r\n\r\n    return Number.isFinite($$first(...args));\r\n};\r\nexport const $$isFinite = $isFinite(null as any, null as any);\r\n\r\n\r\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($is-integer x)\r\n    //  -> S expr  : boolean\r\n    checkParamsLength('$isInteger', args, 1, 1);\r\n\r\n    return Number.isInteger($$first(...args));\r\n};\r\nexport const $$isInteger = $isInteger(null as any, null as any);\r\n\r\n\r\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-string x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$toString', args, 1, 1);\r\n\r\n    return String($$first(...args));\r\n};\r\nexport const $$toString = $toString(null as any, null as any);\r\n\r\n\r\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($to-number x)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$toNumber', args, 1, 1);\r\n\r\n    return toNumber($$first(...args));\r\n};\r\nexport const $$toNumber = $toNumber(null as any, null as any);\r\n\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($__# '(name value...)...)\r\n    //  -> JSON    : {name: value, ...}\r\n    const r: any = {};\r\n    for (const x of args) {\r\n        if (Array.isArray(x) && 0 < x.length) {\r\n            const sym = isSymbol(x[0]);\r\n            const keyName =\r\n                sym ? sym.symbol :\r\n                String(evaluate(state, x[0]));\r\n\r\n            checkUnsafeVarNamesEx('$__#', r, keyName);\r\n            if (x.length === 1) {\r\n                // S expression: (# ... (keyName) ...)\r\n                //  -> JSON    : {..., keyName: true, ...}\r\n                r[keyName] = true;\r\n            } else if (x.length === 2) {\r\n                // S expression: (# ... (keyName value) ...)\r\n                //  -> JSON    : {..., keyName: value, ...}\r\n                r[keyName] = evaluate(state, x[1]);\r\n            } else {\r\n                // S expression: (# ... (keyName value1 value2 ...) ...)\r\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\r\n                r[keyName] =\r\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\r\n                    .concat(x.slice(1)));\r\n            }\r\n        } else {\r\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\r\n        }\r\n    }\r\n    return r;\r\n};\r\n\r\n\r\nconst assignBlacklist = [\r\n    globalObj,\r\n    (Object as any).__proto__,\r\n    ({} as any).__proto__,\r\n    (Function as any).__proto__,\r\n];\r\n\r\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($object-assign x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$objectAssign', args, 1);\r\n\r\n    if (assignBlacklist.includes(args[0])) {\r\n        throw new Error(`[SX] $objectAssign: Invalid argument: args[0] is blacklisted object.`);\r\n    }\r\n    return Object.assign(args[0], ...(args.slice(1)));\r\n};\r\nexport const $$objectAssign = $objectAssign(null as any, null as any);\r\n\r\n\r\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-stringify x)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$jsonStringify', args, 1, 1);\r\n\r\n    return JSON.stringify($$first(...args));\r\n};\r\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\r\n\r\n\r\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($json-parse x)\r\n    //  -> S expr  : object\r\n    checkParamsLength('$jsonParse', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    return JSON.parse(s);\r\n};\r\nexport const $$jsonParse = $jsonParse(null as any, null as any);\r\n\r\n\r\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($now)\r\n    //  -> S expr  : number\r\n    return Date.now();\r\n};\r\nexport const $$now = $now(null as any, null as any);\r\n\r\n\r\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-from-iso str)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\r\n\r\n    const s = $$first(...args);\r\n    if (typeof s !== 'string') {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\r\n    }\r\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\r\n\r\n\r\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime year month1-12 day)\r\n    // S expression: ($datetime year month1-12 day hours)\r\n    // S expression: ($datetime year month1-12 day hours minutes)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetime', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n        s += 'Z';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetime = $datetime(null as any, null as any);\r\n\r\n\r\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-lc year month1-12 day)\r\n    // S expression: ($datetime-lc year month1-12 day hours)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\r\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\r\n    //  -> S expr  : number\r\n    checkParamsLength('$datetimeLc', args, 3, 7);\r\n\r\n    let s = '';\r\n    const year = Number(args[0]);\r\n    if (year >= 0) {\r\n        s += String(year).padStart(4, '0');\r\n    } else {\r\n        s += '-' + String(-year).padStart(6, '0');\r\n    }\r\n    // month1\r\n    s += '-' + String(Number(args[1])).padStart(2, '0');\r\n    // day\r\n    s += '-' + String(Number(args[2])).padStart(2, '0');\r\n    // hours\r\n    if (args.length >= 4) {\r\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\r\n        // minutes\r\n        if (args.length >= 5) {\r\n            s += ':' + String(Number(args[4])).padStart(2, '0');\r\n        } else {\r\n            s += ':00';\r\n        }\r\n        // seconds\r\n        if (args.length >= 6) {\r\n            s += ':' + String(Number(args[5])).padStart(2, '0');\r\n        }\r\n        // milliseconds\r\n        if (args.length >= 7) {\r\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\r\n        }\r\n    } else {\r\n        s += 'T00:00:00.000';\r\n    }\r\n    const dt = new Date(s).getTime();\r\n    if (Number.isNaN(dt)) {\r\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\r\n    }\r\n    return dt;\r\n};\r\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-iso-string number)\r\n    //  -> S expr  : string\r\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\r\n    }\r\n    return dt.toISOString();\r\n};\r\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getUTCFullYear(),\r\n        dt.getUTCMonth() + 1,\r\n        dt.getUTCDate(),\r\n        dt.getUTCHours(),\r\n        dt.getUTCMinutes(),\r\n        dt.getUTCSeconds(),\r\n        dt.getUTCMilliseconds(),\r\n        0, // TZ\r\n        dt.getUTCDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\r\n\r\n\r\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($datetime-to-components-lc number)\r\n    //  -> S expr  : list\r\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\r\n\r\n    const n = $$first(...args);\r\n    if (typeof n !== 'number') {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\r\n    }\r\n    const dt = new Date(n);\r\n    if (Number.isNaN(dt.getTime())) {\r\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\r\n    }\r\n    return ([\r\n        dt.getFullYear(),\r\n        dt.getMonth() + 1,\r\n        dt.getDate(),\r\n        dt.getHours(),\r\n        dt.getMinutes(),\r\n        dt.getSeconds(),\r\n        dt.getMilliseconds(),\r\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\r\n                                 // If your time zone is UTC+2:00, +120 will be returned.\r\n        dt.getDay(),\r\n    ]);\r\n};\r\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\r\n\r\n\r\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($match pattern-str string)\r\n    // S expression: ($match pattern-str options-str string)\r\n    //  -> S expr  : array\r\n    checkParamsLength('$match', args, 2, 3);\r\n\r\n    if (! state.config.enableRegExpMatchOperators) {\r\n        throw new Error(`[SX] $match: Operator is disabled by configuration.`);\r\n    }\r\n\r\n    if (args.length === 2) {\r\n        const m = new RegExp(args[0]);\r\n        return m.exec(args[1]);\r\n    } else {\r\n        const m = new RegExp(args[0], args[1]);\r\n        return m.exec(args[2]);\r\n    }\r\n};\r\nexport const $$match = $match(null as any, null as any);\r\n\r\n\r\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-log expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.log(...args);\r\n    return null;\r\n};\r\nexport const $$consoleLog = $consoleLog(null as any, null as any);\r\n\r\n\r\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-error expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.error(...args);\r\n    return null;\r\n};\r\nexport const $$consoleError = $consoleError(null as any, null as any);\r\n\r\n\r\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-trace expr1 ... exprN)\r\n    //  -> S expr  : null\r\n    console.trace(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\r\n\r\n\r\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time)\r\n    // S expression: ($console-time label)\r\n    //  -> S expr  : null\r\n    console.time(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTime = $consoleTime(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-end)\r\n    // S expression: ($console-time-end label)\r\n    //  -> S expr  : null\r\n    console.timeEnd(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\r\n\r\n\r\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\r\n    // S expression: ($console-time-log label)\r\n    // S expression: ($console-time-log label value ... value)\r\n    //  -> S expr  : null\r\n    (console as any).timeLog(...args);\r\n    return null;\r\n};\r\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxFuncInfo } from '../../types';\r\nimport * as ops       from './core.fn';\r\n\r\n\r\n\r\nexport const operators: SxFuncInfo[] = [{\r\n    name: '$car',\r\n    fn: ops.$car,\r\n}, {\r\n    name: '$cdr',\r\n    fn: ops.$cdr,\r\n}, {\r\n    name: '$cons',\r\n    fn: ops.$cons,\r\n}, {\r\n    name: '$first',\r\n    fn: ops.$first,\r\n}, {\r\n    name: '$second',\r\n    fn: ops.$second,\r\n}, {\r\n    name: '$last',\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$progn', // alias of $last\r\n    fn: ops.$last,\r\n}, {\r\n    name: '$rest',\r\n    fn: ops.$rest,\r\n}, {\r\n    name: '$first-and-second',\r\n    fn: ops.$firstAndSecond,\r\n}, {\r\n    name: '$atom',\r\n    fn: ops.$atom,\r\n}, {\r\n    name: '$eq',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '===',\r\n    fn: ops.$eq,\r\n}, {\r\n    name: '$not-eq',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '!==',\r\n    fn: ops.$notEq,\r\n}, {\r\n    name: '$list',\r\n    fn: ops.$list,\r\n}, {\r\n    name: '$__scope',\r\n    fn: ops.$__scope,\r\n}, {\r\n    name: '$__global',\r\n    fn: ops.$__globalScope,\r\n}, {\r\n    name: '$__capture',\r\n    fn: ops.$__capture,\r\n}, {\r\n    name: '$__lambda',\r\n    fn: ops.$__lambda,\r\n}, {\r\n    name: '$__defun',\r\n    fn: ops.$__defun,\r\n}, {\r\n    name: '$__refun',\r\n    fn: ops.$__refun,\r\n}, {\r\n    name: '$__defmacro',\r\n    fn: ops.$__defmacro,\r\n}, {\r\n    name: '$apply',\r\n    fn: ops.$apply,\r\n}, {\r\n    name: '$__call',\r\n    fn: ops.$__call,\r\n}, {\r\n    name: '$__try',\r\n    fn: ops.$__try,\r\n}, {\r\n    name: '$raise',\r\n    fn: ops.$raise,\r\n}, {\r\n    name: '$__if',\r\n    fn: ops.$__if,\r\n}, {\r\n    name: '$__if-null',\r\n    fn: ops.$__ifNull,\r\n}, {\r\n    name: '$__cond',\r\n    fn: ops.$__cond,\r\n}, {\r\n    name: '$__while',\r\n    fn: ops.$__while,\r\n}, {\r\n    name: '$__do-while',\r\n    fn: ops.$__doWhile,\r\n}, {\r\n    name: '$__until',\r\n    fn: ops.$__until,\r\n}, {\r\n    name: '$__do-until',\r\n    fn: ops.$__doUntil,\r\n}, {\r\n    name: '$__repeat',\r\n    fn: ops.$__repeat,\r\n}, {\r\n    name: '$__for',\r\n    fn: ops.$__for,\r\n}, {\r\n    name: '$pipe',\r\n    fn: ops.$pipe,\r\n}, {\r\n    name: '$__get',\r\n    fn: ops.$__get,\r\n}, {\r\n    name: '$__let',\r\n    fn: ops.$__let,\r\n}, {\r\n    name: '$__set',\r\n    fn: ops.$__set,\r\n}, {\r\n    name: '$boolean',\r\n    fn: ops.$boolean,\r\n}, {\r\n    name: '$not',\r\n    fn: ops.$not,\r\n}, {\r\n    name: '$__and',\r\n    fn: ops.$__and,\r\n}, {\r\n    name: '$__or',\r\n    fn: ops.$__or,\r\n}, {\r\n    name: '==',\r\n    fn: ops.$ambiguousEq,\r\n}, {\r\n    name: '!=',\r\n    fn: ops.$ambiguousNotEq,\r\n}, {\r\n    name: '<',\r\n    fn: ops.$lt,\r\n}, {\r\n    name: '<=',\r\n    fn: ops.$le,\r\n}, {\r\n    name: '>',\r\n    fn: ops.$gt,\r\n}, {\r\n    name: '>=',\r\n    fn: ops.$ge,\r\n}, {\r\n    name: '$typeof',\r\n    fn: ops.$typeof,\r\n}, {\r\n    name: '$symbol',\r\n    fn: ops.$symbol,\r\n}, {\r\n    name: '$__gensym',\r\n    fn: ops.$__gensym,\r\n}, {\r\n    name: '$is-symbol',\r\n    fn: ops.$isSymbol,\r\n}, {\r\n    name: '$is-null',\r\n    fn: ops.$isNull,\r\n}, {\r\n    name: '$is-nil',\r\n    fn: ops.$isNil,\r\n}, {\r\n    name: '$is-undefined',\r\n    fn: ops.$isUndefined,\r\n}, {\r\n    name: '$is-list',\r\n    fn: ops.$isList,\r\n}, {\r\n    name: '$is-string',\r\n    fn: ops.$isString,\r\n}, {\r\n    name: '$is-number',\r\n    fn: ops.$isNumber,\r\n}, {\r\n    name: '$is-NaN',\r\n    fn: ops.$isNaN,\r\n}, {\r\n    name: '$is-finite',\r\n    fn: ops.$isFinite,\r\n}, {\r\n    name: '$is-integer',\r\n    fn: ops.$isInteger,\r\n}, {\r\n    name: '$to-string',\r\n    fn: ops.$toString,\r\n}, {\r\n    name: '$to-number',\r\n    fn: ops.$toNumber,\r\n}, {\r\n    name: '$__#',\r\n    fn: ops.$__toObject,\r\n}, {\r\n    name: '$object-assign',\r\n    fn: ops.$objectAssign,\r\n}, {\r\n    name: '$json-stringify',\r\n    fn: ops.$jsonStringify,\r\n}, {\r\n    name: '$now',\r\n    fn: ops.$now,\r\n}, {\r\n    name: '$datetime-from-iso',\r\n    fn: ops.$datetimeFromIso,\r\n}, {\r\n    name: '$datetime',\r\n    fn: ops.$datetime,\r\n}, {\r\n    name: '$datetime-lc',\r\n    fn: ops.$datetimeLc,\r\n}, {\r\n    name: '$datetime-to-iso-string',\r\n    fn: ops.$datetimeToIsoString,\r\n}, {\r\n    name: '$datetime-to-components',\r\n    fn: ops.$datetimeToComponents,\r\n}, {\r\n    name: '$datetime-to-components-lc',\r\n    fn: ops.$datetimeToComponentsLc,\r\n}, {\r\n    name: '$json-parse',\r\n    fn: ops.$jsonParse,\r\n}, {\r\n    name: '$match',\r\n    fn: ops.$match,\r\n}, {\r\n    name: '$console-log',\r\n    fn: ops.$consoleLog,\r\n}, {\r\n    name: '$console-error',\r\n    fn: ops.$consoleError,\r\n}, {\r\n    name: '$console-trace',\r\n    fn: ops.$consoleTrace,\r\n}, {\r\n    name: '$console-time',\r\n    fn: ops.$consoleTime,\r\n}, {\r\n    name: '$console-time-end',\r\n    fn: ops.$consoleTimeEnd,\r\n}, {\r\n    name: '$console-time-log',\r\n    fn: ops.$consoleTimeLog,\r\n}];\r\n\r\n\r\nexport const compilationOperators: SxFuncInfo[] = [{\r\n    name: '$$__lambda',\r\n    fn: ops.$comp$__lambda,\r\n}, {\r\n    name: '$$__defun',\r\n    fn: ops.$comp$__defun,\r\n}];\r\n\r\n\r\n// for backword compatibility\r\nexport default ([] as SxFuncInfo[]).concat(operators, compilationOperators);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxParserState }     from '../../types';\r\nimport { isSymbol,\r\n         quote }             from '../../ast';\r\nimport { checkParamsLength } from '../../errors';\r\n\r\n\r\n\r\nexport const macros: SxMacroInfo[] = [{\r\n    name: '$scope',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            list[1],\r\n            list[2],\r\n            ...(list.slice(3).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$local',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($local ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$global',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($__global expr1 ... exprN)\r\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\r\n        return [{symbol: '$__global'},\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-let', // alias of $local\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\r\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\r\n        return [{symbol: '$__scope'},\r\n            true,\r\n            false,\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$capture',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__capture'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '->',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$refun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($refun name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '<-',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (<- name)\r\n        //  -> S expr  : ($__refun 'name)\r\n        return [{symbol: '$__refun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$defmacro',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($defmacro name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$__defmacro'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$call',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($call thisArg symbol arg1 ... argN)\r\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\r\n        checkParamsLength('$call', list, 3);\r\n\r\n        return [{symbol: '$__call'},\r\n            list[1],\r\n            quote(state, list[2]),\r\n            ...(list.slice(3)),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$try',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($try expr catch-expr)\r\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\r\n        return [{symbol: '$__try'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if cond t-expr f-expr)\r\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\r\n        return [{symbol: '$__if'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$if-null',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($if-null cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '??',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (?? cond null-expr)\r\n        //  -> S expr  : ($__if-null cont 'null-expr)\r\n        return [{symbol: '$__if-null'},\r\n            list[1],\r\n            ...(list.slice(2).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$cond',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($cond cond1 expr1 ... condN exprN)\r\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\r\n        return [{symbol: '$__cond'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($while condition expr1 exprN)\r\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-while',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-while condition expr1 exprN)\r\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-while'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($until condition expr1 exprN)\r\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$do-until',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($do-until condition expr1 exprN)\r\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\r\n        return [{symbol: '$__do-until'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$repeat',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($repeat i of n-times expr1 exprN)\r\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__repeat'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$for',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($for x of list expr1 exprN)\r\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\r\n        const symOf = isSymbol(list[2], 'of');\r\n        if (! symOf) {\r\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\r\n        }\r\n        return [{symbol: '$__for'},\r\n            quote(state, list[1]),\r\n            list[3],\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$get',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\r\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\r\n        return [{symbol: '$__get'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$let',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$let', list, 3, 3);\r\n\r\n        return [{symbol: '$__let'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-defvar',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($let nameStrOrSymbol expr)\r\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\r\n        checkParamsLength('$clisp-defvar', list, 3, 3);\r\n\r\n        return [{symbol: '$global'},\r\n            [{symbol: '$__let'},\r\n                quote(state, list[1]),\r\n                list[2]\r\n            ],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$set',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($set nameOrListOfNameOrIndex expr)\r\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\r\n        checkParamsLength('$set', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$clisp-setq', // alias of $set\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($clisp-setq symbol expr)\r\n        //  -> S expr  : ($__set 'symbol expr)\r\n        checkParamsLength('$clisp-setq', list, 3, 3);\r\n\r\n        return [{symbol: '$__set'},\r\n            quote(state, list[1]),\r\n            list[2],\r\n        ];\r\n    },\r\n}, {\r\n    name: '$and',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($and expr1 ... exprN)\r\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\r\n        return [{symbol: '$__and'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$or',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($or expr1 ... exprN)\r\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\r\n        return [{symbol: '$__or'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$gensym',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($gensym)\r\n        // S expression: ($gensym name)\r\n        //  -> S expr  : ($__gensym 'name)\r\n        return [\r\n            {symbol: '$__gensym'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '#',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (# (name value...)...)\r\n        //  -> S expr  : ($__# '(name value...)...)\r\n        return [\r\n            {symbol: '$__#'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\nexport const compilationMacros: SxMacroInfo[] = [{\r\n    name: '$$closure',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\r\n        const symUse = isSymbol(list[2], 'use');\r\n        if (! symUse) {\r\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\r\n        }\r\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\r\n            quote(state, list[1]),\r\n            ...(list.slice(4).map(x => quote(state, x))),\r\n        ])];\r\n    },\r\n}, {\r\n    name: '|=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\r\n        return [{symbol: '$$closure'},\r\n            ...list.slice(1),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$lambda',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '=>',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__lambda'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}, {\r\n    name: '$$defun',\r\n    fn: (state: SxParserState, name: string) => (list) => {\r\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\r\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\r\n        return [{symbol: '$$__defun'},\r\n            ...(list.slice(1).map(x => quote(state, x))),\r\n        ];\r\n    },\r\n}];\r\n\r\n\r\n// for backword compatibility\r\nexport default ([] as SxMacroInfo[]).concat(macros, compilationMacros);\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxSymbolInfo } from '../../types';\r\n\r\n\r\n\r\nexport const symbols: SxSymbolInfo[] = [\r\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\r\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\r\n\r\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\r\n\r\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\r\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\r\n\r\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\r\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\r\n\r\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\r\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\r\n\r\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\r\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\r\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\r\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\r\n\r\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\r\n];\r\n\r\n\r\nexport default symbols;\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserState,\r\n         SxEof,\r\n         SxExternalValue,\r\n         SxSymbol,\r\n         SxDottedFragment,\r\n         SxComment,\r\n         SxToken,\r\n         SxChar,\r\n         ScriptTerminationError } from './types';\r\nimport { quote,\r\n         backquote,\r\n         wrapByUnquote,\r\n         spread,\r\n         splice }                 from './ast';\r\n\r\n\r\n\r\nfunction isEOF(ch: SxChar): boolean {\r\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\r\n}\r\n\r\n\r\nfunction isSpace(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && ch.trim().length === 0;\r\n}\r\n\r\n\r\nfunction isNumberFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\r\n}\r\n\r\n\r\nfunction isSymbolFirstChar(ch: SxChar): boolean {\r\n    return typeof ch === 'string' &&\r\n        !isSpace(ch) &&\r\n        !isNumberFirstChar(ch);\r\n}\r\n\r\n\r\n\r\nfunction lookCurrentLineHint(state: SxParserState): string {\r\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\r\n        state.strings.length > state.index ?\r\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\r\n}\r\n\r\n\r\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    if (state.strings.length <= state.index) {\r\n        return {eof: true};\r\n    }\r\n    if (state.strings[state.index].length <= state.pos) {\r\n        if ((! state.values) || (state.values.length <= state.index)) {\r\n            state.pos = 0;\r\n            state.index++;\r\n            return getChar(state);\r\n        } else {\r\n            const ch = {value: state.values[state.index]};\r\n            state.pos = 0;\r\n            state.index++;\r\n            return ch;\r\n        }\r\n    }\r\n    if (virtualEof) {\r\n        for (const v of virtualEof) {\r\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\r\n            if (ch === v) {\r\n                state.pos += v.length;\r\n                state.line += ch.split('\\n').length - 1;\r\n                return { eof: false , eofSeq: v };\r\n            }\r\n        }\r\n    }\r\n    {\r\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n        state.pos++;\r\n\r\n        if (ch === '\\n') {\r\n            state.line++;\r\n        }\r\n\r\n        if ((! disableEscape) && ch === '\\\\') {\r\n            if (state.strings[state.index].length <= state.pos) {\r\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\r\n            state.pos++;\r\n\r\n            switch (ch) {\r\n            case 'b':\r\n                ch = '\\b';\r\n                break;\r\n            case 't':\r\n                ch = '\\t';\r\n                break;\r\n            case 'n':\r\n                ch = '\\n';\r\n                break;\r\n            case 'v':\r\n                ch = '\\v';\r\n                break;\r\n            case 'f':\r\n                ch = '\\f';\r\n                break;\r\n            case 'r':\r\n                ch = '\\r';\r\n                break;\r\n            case 'U': case 'u':\r\n                {\r\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\r\n                        let ch1 = '';\r\n                        for (let i = 0; i < 6; i++) {\r\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\r\n                            if (ch2 === '}') {\r\n                                if (i === 0) {\r\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                                }\r\n                                state.pos += i;\r\n                                break;\r\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\r\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            ch1 += ch2;\r\n                        }\r\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos++;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    } else {\r\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\r\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\r\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        state.pos += 4;\r\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return ch;\r\n    }\r\n}\r\n\r\n\r\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    const chs: SxChar[] = [];\r\n\r\n    try {\r\n        for (let i = 0; i < n; i++) {\r\n            chs.push(getChar(state, virtualEof, disableEscape));\r\n        }\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return chs;\r\n}\r\n\r\n\r\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\r\n    const index = state.index;\r\n    const pos = state.pos;\r\n    const line = state.line;\r\n    let ch: SxChar;\r\n\r\n    try {\r\n        ch = getChar(state, virtualEof, disableEscape);\r\n    } finally {\r\n        state.index = index;\r\n        state.pos = pos;\r\n        state.line = line;\r\n    }\r\n\r\n    return ch;\r\n}\r\n\r\n\r\nfunction skipWhitespaces(state: SxParserState): void {\r\n    let ch = lookAhead(state);\r\n    while (!isEOF(ch) && isSpace(ch)) {\r\n        getChar(state);\r\n        ch = lookAhead(state);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\r\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n    }\r\n    return Number(s);\r\n}\r\n\r\n\r\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\r\n    let s = '';\r\n    let ch = lookAhead(state, virtualEof);\r\n\r\n    while (! isEOF(ch)) {\r\n        if (typeof ch === 'string') {\r\n            if (isSpace(ch)) {\r\n                break;\r\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\r\n                break;\r\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\r\n                getChar(state, virtualEof);\r\n                s += ch;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                getChar(state, virtualEof);\r\n                const v = (ch as SxExternalValue).value;\r\n                s += String(ch);\r\n            } else {\r\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        ch = lookAhead(state, virtualEof);\r\n    }\r\n\r\n    if (state.config.enableShorthands) {\r\n        let m: RegExpMatchArray | null = null;\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        if (m = s.match(/^:((?:\\:[^=:]+?)+?)=$/)) {\r\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\r\n            const ws = m[1].slice(1).split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.set},\r\n                        ws\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^:((?:\\:[^@:]+?)+?)@([^@:]+?)$/)) {\r\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\r\n            const ws = m[1].slice(1).split(':');\r\n            const z =\r\n                [{symbol: state.config.reservedNames.splice},\r\n                    [{symbol: state.config.reservedNames.call},\r\n                        [{symbol: state.config.reservedNames.get}, ...ws],\r\n                        {symbol: m[2]},\r\n                    ]\r\n                ];\r\n            return z as any;\r\n        }\r\n        // tslint:disable-next-line:no-conditional-assignment\r\n        else if (m = s.match(/^:((?:\\:[^:]+?)+?)$/)) {\r\n            // ::foo:bar:baz -> ($get foo bar baz)\r\n            const ws = m[1].slice(1).split(':');\r\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\r\n            return z as any;\r\n        }\r\n    }\r\n\r\n    return {symbol: s};\r\n}\r\n\r\n\r\nfunction parseStringOrComment(\r\n        state: SxParserState, eof: string[],\r\n        valuesStartSeq: string | null,\r\n        valuesStopChar: string,\r\n        disableEscape: boolean,\r\n        allowPhysicalEof: boolean,\r\n    ): { strings: string[], values: any[] } {\r\n\r\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\r\n    const strings: string[] = [];\r\n    const values: any[] = [];\r\n\r\n    for (;;) {\r\n        let s = '';\r\n        let ch = lookAhead(state, eofSeqs, disableEscape);\r\n\r\n        while (! isEOF(ch)) {\r\n            if (typeof ch === 'string') {\r\n                getChar(state, eofSeqs, disableEscape);\r\n                s += ch;\r\n            } else {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state, eofSeqs, disableEscape);\r\n                    const v = (ch as SxExternalValue).value;\r\n                    s += String(ch);\r\n                } else {\r\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            }\r\n\r\n            ch = lookAhead(state, eofSeqs, disableEscape);\r\n        }\r\n\r\n        getChar(state, eofSeqs, disableEscape);\r\n\r\n        if ((ch as SxEof).eof === true) {\r\n            if (! allowPhysicalEof) {\r\n                throw new ScriptTerminationError('parseStringOrComment');\r\n            }\r\n        }\r\n\r\n        strings.push(s);\r\n\r\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\r\n            values.push(parseList(state, valuesStopChar, []));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return { strings, values };\r\n}\r\n\r\n\r\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\r\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape, false).strings[0];\r\n}\r\n\r\n\r\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\r\n    const q: SxToken[] = [symbol];\r\n\r\n    if (attrs) {\r\n        q.push(attrs);\r\n    }\r\n\r\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false, false);\r\n    for (let i = 0; i < inner.strings.length; i++) {\r\n        q.push(inner.strings[i]);\r\n        if (i < inner.values.length) {\r\n            q.push(inner.values[i]);\r\n        }\r\n    }\r\n\r\n    return q;\r\n}\r\n\r\n\r\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false, true).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\r\n    return {\r\n        comment: parseStringOrComment(state, ['|#'], null, ')', false, false).strings[0]\r\n    };\r\n}\r\n\r\n\r\nfunction parseOneToken(state: SxParserState): SxToken {\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case ')':\r\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n\r\n        case '(':\r\n            getChar(state);\r\n            return parseList(state, ')', []);\r\n\r\n        case \"'\": case \"`\": case ',':\r\n            {\r\n                getChar(state);\r\n                const ahead = lookAhead(state);\r\n                let isSpliceUnquote = false;\r\n                if (ch === ',' && ahead === '@') {\r\n                    getChar(state);\r\n                    isSpliceUnquote = true;\r\n                }\r\n                skipWhitespaces(state);\r\n                const ret = (ch === \"'\" ?\r\n                        quote :\r\n                        (ch === \"`\" ? backquote : wrapByUnquote))\r\n                    (state, parseOneToken(state)\r\n                );\r\n                return (isSpliceUnquote ? splice(state, ret) : ret);\r\n            }\r\n\r\n        case \".\":\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 2);\r\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    skipWhitespaces(state);\r\n                    return spread(state, parseOneToken(state));\r\n                } else {\r\n                    skipWhitespaces(state);\r\n                    return {dotted: parseOneToken(state)};\r\n                }\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            return parseSingleLineComment(state);\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseMultiLineComment(state);\r\n                } else {\r\n                    return parseSymbol(state);\r\n                }\r\n            }\r\n\r\n        case '\"':\r\n            {\r\n                getChar(state);\r\n                const aheads = lookAheads(state, 4);\r\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\r\n                    let isHereDoc = true;\r\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\r\n                        // here doc\r\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\r\n                        if (aheads[2] === '+' || aheads[2] === '-') {\r\n                            if (! isNumberAfterSignChar(aheads[3])) {\r\n                                isHereDoc = false;\r\n                            }\r\n                        }\r\n                        // here doc\r\n                    } else if (isSymbolFirstChar(aheads[2])) {\r\n                        isHereDoc = false;\r\n                    } else {\r\n                        // here doc\r\n                    }\r\n                    getChar(state);\r\n                    getChar(state);\r\n\r\n                    let sym: SxSymbol | number | null = null;\r\n                    let attrs: SxToken[] | null = null;\r\n                    if (isHereDoc) {\r\n                        sym = {symbol: state.config.reservedNames.Template};\r\n                    } else {\r\n                        sym = parseSymbol(state, ['@']);\r\n                        if (sym === null) {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        if (typeof sym === 'number') {\r\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                        }\r\n                        const ahs = lookAheads(state, 2);\r\n                        if (ahs[0] === '@') {\r\n                            if (ahs[1] !== '{') {\r\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                            }\r\n                            getChar(state);\r\n                            getChar(state);\r\n                            const a = parseList(state, '}', [{symbol: '@'}]);\r\n                            if (Array.isArray(a)) {\r\n                                attrs = a;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return parseHereDoc(state, sym, attrs);\r\n                } else {\r\n                    return parseString(state, false);\r\n                }\r\n            }\r\n\r\n        case '@':\r\n            if (state.config.enableVerbatimStringLiteral) {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '\"') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    return parseString(state, true);\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            if (typeof ch !== 'string') {\r\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\r\n                    getChar(state);\r\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\r\n                } else {\r\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                }\r\n            } else if (isSpace(ch)) {\r\n                break;\r\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\r\n                if (ch === '+' || ch === '-') {\r\n                    const aheads = lookAheads(state, 2);\r\n                    if (! isNumberAfterSignChar(aheads[1])) {\r\n                        return parseSymbol(state);\r\n                    }\r\n                }\r\n                return parseNumber(state);\r\n            } else if (isSymbolFirstChar(ch)) {\r\n                return parseSymbol(state);\r\n            } else {\r\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n            }\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseOneToken');\r\n}\r\n\r\n\r\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\r\n    const r: SxToken[] = initialList.slice(0);\r\n    let dotted = false;\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case listStopChar:\r\n            getChar(state);\r\n            if (dotted) {\r\n                return r[0];\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        default:\r\n            {\r\n                const t = parseOneToken(state);\r\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\r\n                    if (r.length !== 1) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    dotted = true;\r\n                    if (Array.isArray(t)) {\r\n                        t.unshift(r.pop() as SxToken);\r\n                        r.push(t);\r\n                    } else {\r\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\r\n                    }\r\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                    if (! state.config.stripComments) {\r\n                        r.push(t);\r\n                    }\r\n                } else {\r\n                    if (dotted) {\r\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n                    }\r\n                    r.push(t);\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    throw new ScriptTerminationError('parseList');\r\n}\r\n\r\n\r\n\r\nexport function parse(state: SxParserState) {\r\n    const r: SxToken[] = [];\r\n\r\n    skipWhitespaces(state);\r\n    let ch = lookAhead(state);\r\n\r\n    while (! isEOF(ch)) {\r\n        switch (ch) {\r\n        case '(':\r\n            getChar(state);\r\n            r.push(parseList(state, ')', []));\r\n            break;\r\n\r\n        case \"'\": case \"`\":\r\n            {\r\n                getChar(state);\r\n                skipWhitespaces(state);\r\n                for (;;) {\r\n                    const t = parseOneToken(state);\r\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\r\n                        if (! state.config.stripComments) {\r\n                            r.push(t);\r\n                        }\r\n                    } else {\r\n                        r.push((ch === \"'\" ? quote : backquote)(state, t));\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n        case ';':\r\n            getChar(state);\r\n            if (state.config.stripComments) {\r\n                parseSingleLineComment(state);\r\n            } else {\r\n                r.push(parseSingleLineComment(state));\r\n            }\r\n            break;\r\n\r\n        case '#':\r\n            {\r\n                const aheads = lookAheads(state, 2);\r\n                if (aheads[1] === '|') {\r\n                    getChar(state);\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseMultiLineComment(state);\r\n                    } else {\r\n                        r.push(parseMultiLineComment(state));\r\n                    }\r\n                } else {\r\n                    getChar(state);\r\n                    if (state.config.stripComments) {\r\n                        parseSingleLineComment(state);\r\n                    } else {\r\n                        r.push(parseSingleLineComment(state));\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case '\"':\r\n            {\r\n                const aheads = lookAheads(state, 3);\r\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\r\n                    r.push(parseOneToken(state));\r\n                    break;\r\n                }\r\n            }\r\n            // FALL_THRU\r\n\r\n        default:\r\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\r\n        }\r\n\r\n        skipWhitespaces(state);\r\n        ch = lookAhead(state);\r\n    }\r\n\r\n    return r;\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxReservedNames,\r\n         SxParserConfig } from './types';\r\n\r\n\r\n\r\nexport const defaultReservedNames: SxReservedNames = {\r\n    eval: '$eval',\r\n    quote: '$quote',\r\n    backquote: '$backquote',\r\n    unquote: '$unquote',\r\n    spread: '$spread',\r\n    splice: '$splice',\r\n\r\n    car: '$car',\r\n    cdr: '$cdr',\r\n    cons: '$cons',\r\n    atom: '$atom',\r\n    eq: '$eq',\r\n    list: '$list',\r\n\r\n    let: '$clisp-let',\r\n    lambda: '$lambda',\r\n    self: '$self',\r\n    defun: '$defun',\r\n    thiz: '$this',\r\n\r\n    if: '$if',\r\n    cond: '$cond',\r\n\r\n    while: '$while',\r\n    doWhile: '$do-while',\r\n    until: '$until',\r\n    doUntil: '$do-until',\r\n\r\n    get: '$get',\r\n    defvar: '$clisp-defvar',\r\n    setq: '$clisp-setq',\r\n    set: '$set',\r\n    call: '$call',\r\n\r\n    not: '$not',\r\n    and: '$and',\r\n    or: '$or',\r\n\r\n    isSymbol: '$is-symbol',\r\n    gensym: '$gensym',\r\n    raise: '$raise',\r\n    catch: '$catch',\r\n\r\n    Template: 'Template',\r\n};\r\n\r\nexport const defaultConfig: SxParserConfig = {\r\n    raiseOnUnresolvedSymbol: false,\r\n    enableEvaluate: true,\r\n    enableHereDoc: true,\r\n    enableSpread: true,\r\n    enableSplice: true,\r\n    enableShorthands: true,\r\n    enableVerbatimStringLiteral: true,\r\n    enableTailCallOptimization: true,\r\n    enableRegExpMatchOperators: true,\r\n    enableCompilationOperators: true,\r\n    stripComments: false,\r\n    wrapExternalValue: true,\r\n    returnMultipleRoot: false,\r\n    maxEvalCount: 0,\r\n\r\n    reservedNames: defaultReservedNames,\r\n    symbols: [],\r\n    macros: [],\r\n    funcs: [],\r\n};\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxMacroInfo,\r\n         SxFuncInfo,\r\n         SxSymbolInfo,\r\n         SxParserConfig,\r\n         SxParserState,\r\n         SxToken,\r\n         SExpressionTemplateFn,\r\n         SExpressionAsyncTemplateFn } from '../types';\r\nimport { parse }                      from '../parser';\r\nimport { evaluate }                   from '../evaluate';\r\nimport { defaultConfig }              from '../defaults';\r\n\r\n\r\n\r\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\r\n    return {\r\n        strings: typeof strings === 'string' ? [strings] : strings,\r\n        values: values || [],\r\n\r\n        index: 0,\r\n        pos: 0,\r\n        line: 0,\r\n\r\n        evalCount: 0,\r\n\r\n        scopes: [{isBlockLocal: false, scope: globals}],\r\n\r\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\r\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\r\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\r\n\r\n        config,\r\n    };\r\n}\r\n\r\n\r\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\r\n    state.strings = typeof strings === 'string' ? [strings] : strings;\r\n    state.values = values || [];\r\n    state.index = 0;\r\n    state.pos = 0;\r\n    state.line = 0;\r\n    state.evalCount = 0;\r\n    return state;\r\n}\r\n\r\n\r\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fRepl;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n\r\n\r\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\r\n    let config = conf || Object.assign({}, defaultConfig);\r\n    let globalScope: any = {};\r\n    let startup: SxToken[] = [];\r\n\r\n    const exec = async (state: SxParserState, s: SxToken[]) => {\r\n        if (config.enableEvaluate) {\r\n            for (let i = 0; i < s.length; i++) {\r\n                s[i] = evaluate(state, s[i]);\r\n\r\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\r\n                    s[i] = await s[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (config.returnMultipleRoot) {\r\n            return s.length === 1 ? s[0] : s;\r\n        } else {\r\n            return s[s.length - 1];\r\n        }\r\n    };\r\n\r\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        return exec(state, startup.concat(parse(state)));\r\n    }) as any;\r\n\r\n    f.evaluateAST = (ast: SxToken[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        return exec(state, startup.concat(ast));\r\n    };\r\n    (f as any).repl = () => {\r\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\r\n            if (config.enableEvaluate) {\r\n                for (let i = 0; i < s.length; i++) {\r\n                    s[i] = evaluate(stat, s[i]);\r\n                }\r\n            }\r\n\r\n            if (config.returnMultipleRoot) {\r\n                return s.length === 1 ? s[0] : s;\r\n            } else {\r\n                return s[s.length - 1];\r\n            }\r\n        };\r\n        const state = initState(config, Object.assign({}, globalScope), '');\r\n        exec(state, startup.slice(0));\r\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return exec(state, parse(state));\r\n        }) as any;\r\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\r\n            resetState(state, strings, values);\r\n            return execSync(state, parse(state));\r\n        }) as any;\r\n        (fRepl as any).sync = fReplSync;\r\n        return fRepl;\r\n    };\r\n    f.setGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globals || {});\r\n        return f;\r\n    };\r\n    f.appendGlobals = (globals: object) => {\r\n        globalScope = Object.assign({}, globalScope, globals || {});\r\n        return f;\r\n    };\r\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = parse(state);\r\n        return f;\r\n    };\r\n    f.setStartupAST = (ast: SxToken[]) => {\r\n        startup = ast;\r\n        return f;\r\n    };\r\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\r\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\r\n        startup = startup.concat(parse(state));\r\n        return f;\r\n    };\r\n    f.appendStartupAST = (ast: SxToken[]) => {\r\n        startup = startup.concat(ast);\r\n        return f;\r\n    };\r\n    f.install = (installer) => {\r\n        config = installer(config);\r\n        return f;\r\n    };\r\n\r\n    return f;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { parserInput,\n         ParserFnWithCtx }       from 'fruitsconfits/modules/lib/types';\nimport { formatErrorMessage }    from 'fruitsconfits/modules/lib/parser';\nimport { getStringParsers }      from 'fruitsconfits/modules/lib/string-parser';\nimport { getObjectParsers }      from 'fruitsconfits/modules/lib/object-parser';\nimport { SxTokenChild,\n         SxToken,\n         SxSymbol,\n         SxParserConfig }        from 'liyad/modules/s-exp/types';\nimport installCore               from 'liyad/modules/s-exp/operators/core';\nimport { SExpression }           from 'liyad/modules/s-exp/interpreters';\nimport { defaultConfig }         from 'liyad/modules/s-exp/defaults';\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         ErrorMessages,\n         TypeAssertionSetValue,\n         TypeAssertionMap }      from './types';\nimport * as operators            from './operators';\nimport { resolveMemberNames,\n         resolveSchema }         from './lib/resolver';\nimport { dummyTargetObject,\n         isUnsafeVarNames }      from './lib/util';\n\n\n\ninterface SxOp {\n    'op': string;\n}\n\ntype AstChild = SxTokenChild | SxOp | undefined;\n\ninterface Ctx {\n    docComment?: string;\n}\ntype Ast = SxToken | AstChild | SxOp | undefined;\n\nconst $s = getStringParsers<Ctx, Ast>({\n    rawToToken: rawToken => rawToken,\n    concatTokens: tokens => (tokens.length ?\n        [tokens.reduce((a, b) => String(a) + b)] : []),\n});\n\nconst $o = getObjectParsers<Ast[], Ctx, Ast>({\n    rawToToken: rawToken => rawToken,\n    concatTokens: tokens => (tokens.length ?\n        [tokens.reduce((a, b) => String(a) + b)] : []),\n    comparator: (a, b) => a === b,\n});\n\nconst {seq, cls, notCls, clsFn, classes, numbers, cat,\n       once, repeat, qty, zeroWidth, err, beginning, end,\n       first, or, combine, erase, trans, ahead, rules,\n       makeProgram} = $s;\n\n\nconst directiveLineComment =\n    trans(tokens => [[{symbol: 'directive'}, ...tokens]])(\n        erase(qty(2)(cls('/'))),\n        erase(repeat(classes.space)),\n        cat(seq('@tynder-'), repeat(classes.alnum)), // [0]\n        erase(repeat(classes.space)),\n        cat(repeat(notCls('\\r\\n', '\\n', '\\r'))),     // [1]\n        erase(first(classes.newline, ahead(end()))), );\n\nconst lineComment =\n    combine(\n        erase(qty(2)(cls('/'))),\n        first(\n            combine(\n                ahead(repeat(classes.space),\n                      notCls('@tynder-'), ),\n                repeat(notCls('\\r\\n', '\\n', '\\r')),\n                first(classes.newline, ahead(end())), ),\n            first(classes.newline, ahead(end())), ));\n\nconst hashLineComment =\n    combine(\n        seq('#'),\n        repeat(notCls('\\r\\n', '\\n', '\\r')),\n        first(classes.newline, ahead(end())), );\n\nconst docComment =\n    combine(\n        seq('/**'),\n        repeat(classes.space),\n        input => {\n            const ret = cat(repeat(notCls('*/')))(input);\n            if (ret.succeeded) {\n                // define a reducer\n                const ctx2 = {...ret.next.context}; // NOTE: context is immutable\n                ctx2.docComment = (ret.tokens[0] as string || '').trim();\n                ret.next.context = ctx2;\n            }\n            return ret;\n        },\n        seq('*/'), );\n\nconst blockComment =\n    combine(\n        seq('/*'),\n        repeat(notCls('*/')),\n        seq('*/'), );\n\nconst commentOrSpace =\n    first(classes.space, lineComment, hashLineComment, docComment, blockComment);\n\n\nconst trueValue =\n    trans(tokens => [true])\n    (seq('true'));\n\nconst falseValue =\n    trans(tokens => [false])\n    (seq('false'));\n\nconst nullValue =\n    trans(tokens => [null])\n    (seq('null'));\n\nconst undefinedValue =\n    trans(tokens => [void 0])\n    (seq('undefined'));\n\nconst positiveInfinityValue =\n    trans(tokens => [Number.POSITIVE_INFINITY])\n    (qty(0, 1)(seq('+')), seq('Infinity'));\n\nconst negativeInfinityValue =\n    trans(tokens => [Number.NEGATIVE_INFINITY])\n    (seq('-Infinity'));\n\nconst nanValue =\n    trans(tokens => [Number.NaN])\n    (seq('NaN'));\n\n\nconst binaryIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 2)])\n    (numbers.bin(seq('0b')));\n\nconst octalIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 8)])\n    (numbers.oct(seq('0o'), seq('0')));\n\nconst hexIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 16)])\n    (numbers.hex(seq('0x'), seq('0X')));\n\nconst decimalIntegerValue =\n    trans(tokens => [Number.parseInt((tokens as string[])[0].replace(/_/g, ''), 10)])\n    (numbers.int);\n\nconst bigDecimalIntegerValue =\n    trans(tokens => [BigInt((tokens as string[])[0].replace(/_/g, '')) as any])\n    (numbers.bigint);\n\nconst floatingPointNumberValue =\n    trans(tokens => [Number.parseFloat((tokens as string[])[0].replace(/_/g, ''))])\n    (numbers.float);\n\nconst numberValue =\n    first(octalIntegerValue,\n          hexIntegerValue,\n          binaryIntegerValue,\n          bigDecimalIntegerValue,\n          floatingPointNumberValue,\n          decimalIntegerValue,\n          positiveInfinityValue,\n          negativeInfinityValue,\n          nanValue, );\n\n\nconst stringEscapeSeq = first(\n    trans(t => ['\\''])(seq('\\\\\\'')),\n    trans(t => ['\\\"'])(seq('\\\\\"')),\n    trans(t => ['\\`'])(seq('\\\\`')),\n    trans(t => ['/'])(seq('\\\\/')),\n    trans(t => ['\\\\'])(seq('\\\\\\\\')),\n    trans(t => [''])(seq('\\\\\\r\\n')),\n    trans(t => [''])(seq('\\\\\\r')),\n    trans(t => [''])(seq('\\\\\\n')),\n    trans(t => ['\\n'])(seq('\\\\n')),\n    trans(t => ['\\r'])(seq('\\\\r')),\n    trans(t => ['\\v'])(seq('\\\\v')),\n    trans(t => ['\\t'])(seq('\\\\t')),\n    trans(t => ['\\b'])(seq('\\\\b')),\n    trans(t => ['\\f'])(seq('\\\\f')),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\u')),\n                qty(4, 4)(classes.hex), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\u{')),\n                qty(1, 6)(classes.hex),\n                erase(seq('}')), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 16))])(\n        cat(erase(seq('\\\\x')),\n                qty(2, 2)(classes.hex), )),\n    trans(t => [String.fromCodePoint(Number.parseInt((t as string[])[0], 8))])(\n        cat(erase(seq('\\\\')),\n                qty(3, 3)(classes.oct), )));\n\nconst signleQuotStringValue =\n    trans(tokens => [tokens[0]])(\n        erase(seq(\"'\")),\n            cat(repeat(first(\n                stringEscapeSeq,\n                combine(cls('\\r', '\\n'), err('Line breaks within strings are not allowed.')),\n                notCls(\"'\"),\n            ))),\n        erase(seq(\"'\")), );\n\nconst doubleQuotStringValue =\n    trans(tokens => [tokens[0]])(\n        erase(seq('\"')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                combine(cls('\\r', '\\n'), err('Line breaks within strings are not allowed.')),\n                notCls('\"'),\n            ))),\n        erase(seq('\"')), );\n\nconst backQuotStringValue =\n    trans(tokens => [tokens[0]])(\n        erase(seq('`')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                notCls('`'),\n            ))),\n        erase(seq('`')), );\n\nconst stringValue =\n    first(signleQuotStringValue, doubleQuotStringValue, backQuotStringValue);\n\nconst regexpStringValue =\n    // TODO: '/' ']' '\\\\' in character class '[]' is not parsed correctly.\n    trans(tokens => [{value: tokens[1] ?\n            new RegExp(tokens[0] as string, tokens[1] as string) :\n            new RegExp(tokens[0] as string)}])(\n        erase(seq('/')),\n            cat(repeat(first(\n                stringEscapeSeq,\n                notCls('/'),\n            ))),\n        erase(seq('/')),\n        cat(qty(0)(cls('g', 'i', 'm', 's', 'u', 'y'))), );\n\n\nconst symbolName =\n    trans(tokens => tokens)\n    (cat(combine(\n        first(classes.alpha, cls('$', '_')),\n        repeat(first(classes.alnum, cls('$', '_'))), )));\n\nconst decoratorSymbolName =\n    trans(tokens => [{symbol: (tokens as string[])[0]}])\n    (cat(combine(\n        seq('@'),\n        first(classes.alpha, cls('$', '_')),\n        repeat(first(classes.alnum, cls('$', '_'))), )));\n\n\nconst simpleConstExpr =\n    first(trueValue, falseValue, nullValue, undefinedValue,\n          numberValue, stringValue, );\n\nconst objKey =\n    first(stringValue, symbolName);\n\nconst listValue = first(\n    trans(tokens => [[]])(erase(\n        seq('['),\n            repeat(commentOrSpace),\n        seq(']'), )),\n    trans(tokens => {\n        const ast: Ast = [{symbol: '$list'}];\n        for (const token of tokens) {\n            ast.push(token as any);\n        }\n        return [ast];\n    })(\n        erase(seq('[')),\n            combine(\n                erase(repeat(commentOrSpace)),\n                first(input => listValue(input),   // NOTE: recursive definitions\n                      input => objectValue(input), //       should place as lambda.\n                      simpleConstExpr,\n                      ),\n                erase(repeat(commentOrSpace)), ),\n            repeat(combine(\n                erase(repeat(commentOrSpace),\n                      seq(','),\n                      repeat(commentOrSpace)),\n                first(input => listValue(input),   // NOTE: recursive definitions\n                      input => objectValue(input), //       should place as lambda.\n                      simpleConstExpr,\n                      ),\n                erase(repeat(commentOrSpace)), )),\n            qty(0, 1)(erase(\n                seq(','),\n                repeat(commentOrSpace), )),\n            first(ahead(seq(']')), err('listValue: Unexpected token has appeared.')),\n        erase(seq(']')),\n    ), );\n\nconst objectKeyValuePair =\n    combine(\n        objKey,\n        erase(repeat(commentOrSpace),\n              first(seq(':'), err('\":\" is needed.')),\n              repeat(commentOrSpace)),\n        first(input => listValue(input),   // NOTE: recursive definitions\n              input => objectValue(input), //       should place as lambda.\n              simpleConstExpr,\n              err('object value is needed.')), );\n\nconst objectValue = first(\n    trans(tokens => [[{symbol: '#'}]])(erase(\n        seq('{'),\n            repeat(commentOrSpace),\n        seq('}'),\n    )),\n    trans(tokens => {\n        const ast: Ast = [{symbol: '#'}];\n        for (let i = 0; i < tokens.length; i += 2) {\n            if (isUnsafeVarNames(dummyTargetObject, tokens[i] as string)) {\n                throw new Error(`Unsafe symbol name is appeared in object literal: ${tokens[i]}`);\n            }\n            ast.push([tokens[i], tokens[i + 1]]);\n        }\n        return [ast];\n    })(\n        erase(seq('{')),\n            combine(\n                erase(repeat(commentOrSpace)),\n                objectKeyValuePair,\n                erase(repeat(commentOrSpace)), ),\n            repeat(combine(\n                erase(seq(','),\n                      repeat(commentOrSpace)),\n                objectKeyValuePair,\n                erase(repeat(commentOrSpace)), )),\n            qty(0, 1)(erase(\n                seq(','),\n                repeat(commentOrSpace), )),\n            first(ahead(seq('}')), err('objectValue: Unexpected token has appeared.')),\n        erase(seq('}')),\n    ), );\n\nconst constExpr =\n    first(simpleConstExpr,\n          listValue,\n          objectValue, );\n\n\n// const primitiveValue = trans(tokens => [[{symbol: 'primitiveValue'}, tokens[0]]])(\n//     first(trueValue, falseValue, nullValue, undefinedValue,\n//           numberValue, stringValue, ));\n\nconst primitiveValueNoNullUndefined =\n    trans(tokens => [[{symbol: 'primitiveValue'}, tokens[0]]])(\n        first(trueValue, falseValue,\n              numberValue, stringValue, ));\n\n\nconst primitiveTypeName =\n    trans(tokens => [[{symbol: 'primitive'}, tokens[0]]])(\n        first(seq('number?'), seq('integer?'), seq('bigint?'), seq('string?'), seq('boolean?'), // TODO: '?' is allowed in the sequence assertion\n              seq('number'), seq('integer'), seq('bigint'), seq('string'), seq('boolean'), ));  // TODO: function\n\nconst additionalPropPrimitiveTypeName =\n    first(seq('number'), seq('string'));\n\nconst nullUndefinedTypeName =\n    trans(tokens => [[{symbol: 'primitive'}, tokens[0]]])(\n        first(seq('null'), seq('undefined'), seq('any'), seq('unknown'), seq('never')), );\n\nconst simpleOrDottedTypeName =\n    first(primitiveTypeName,\n          nullUndefinedTypeName,\n          trans(tokens =>\n                [[{symbol: 'ref'}, ...tokens]])(\n            ahead(notCls('Array', 'Partial', 'Pick', 'Omit')),\n            combine(\n                symbolName,\n                repeat(combine(\n                    erase(repeat(commentOrSpace), seq('.'), repeat(commentOrSpace)),\n                    symbolName, )))));\n\n\nconst sequenceType =\n    trans(tokens => [[{symbol: 'sequenceOf'}, ...tokens]])(\n        combine(\n            erase(seq('[')),\n                combine(\n                    erase(repeat(commentOrSpace)),\n                    input => spreadOrComplexType(first(seq(','), seq(']')))(input),\n                    erase(repeat(commentOrSpace)), ),\n                repeat(combine(\n                    erase(seq(','),\n                        repeat(commentOrSpace)),\n                    input => spreadOrComplexType(first(seq(','), seq(']')))(input),\n                    erase(repeat(commentOrSpace)), )),\n                qty(0, 1)(erase(\n                    seq(','),\n                    repeat(commentOrSpace), )),\n                first(ahead(seq(']')), err('sequenceType: Unexpected token has appeared.')),\n            erase(seq(']')), ));\n\n\nconst arraySizeFactorInner =\n    first(\n        trans(tokens => [[{symbol: '#'}, ['max', tokens[0]]]])(\n            erase(seq('..')),\n            erase(repeat(commentOrSpace)),\n            decimalIntegerValue, ),\n        trans(tokens => [[{symbol: '#'}, ['min', tokens[0]], ['max', tokens[1]]]])(\n            decimalIntegerValue,\n            erase(repeat(commentOrSpace)),\n            erase(seq('..')),\n            erase(repeat(commentOrSpace)),\n            decimalIntegerValue, ),\n        trans(tokens => [[{symbol: '#'}, ['min', tokens[0]]]])(\n            decimalIntegerValue,\n            erase(repeat(commentOrSpace)),\n            erase(seq('..')), ),\n        trans(tokens => [[{symbol: '#'}, ['min', tokens[0]], ['max', tokens[0]]]])(\n            decimalIntegerValue, ));\n\nconst arraySizeFactor =\n    trans(tokens =>\n        tokens.length > 0 ?\n            tokens :\n            [[{symbol: '#'}]])(\n        erase(seq('[')),\n            erase(repeat(commentOrSpace)),\n            qty(0, 1)(arraySizeFactorInner),\n            erase(repeat(commentOrSpace)),\n        erase(seq(']')), );\n\nconst complexArrayType =\n    trans(tokens => [[{symbol: 'repeated'}, tokens[0], tokens[1]]])(\n        erase(seq('Array')),\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            first(input => complexType(first(seq(','), seq('>')))(input),\n                  err('type is expected in Array type.'), ),        // [0]\n            erase(repeat(commentOrSpace)),\n            qty(0, 1)(combine(\n                erase(seq(',')),\n                erase(repeat(commentOrSpace)),\n                first(arraySizeFactorInner,                         // [1]\n                      err('complexArrayType: Unexpected token has appeared. Expect array size.'), ),\n                erase(repeat(commentOrSpace)), )),\n        first(ahead(seq('>')),\n              err('\\'>\\' is expected in Array type.'), ),\n        erase(seq('>')), );\n\nconst partialType =\n    trans(tokens => [[{symbol: 'partial'}, tokens[0], tokens[1]]])(\n        erase(seq('Partial')),\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            first(input => complexType(first(seq(','), seq('>')))(input),\n                  err('type is expected in Partial type.'), ),      // [0]\n            erase(repeat(commentOrSpace)),\n        first(ahead(seq('>')),\n              err('\\'>\\' is expected in Partial type.'), ),\n        erase(seq('>')), );\n\nconst pickOrOmitType =\n    trans(tokens => [[{symbol: tokens[0] === 'Pick' ? 'picked' : 'omit'}, tokens[1], ...tokens.slice(2)]])(\n        first(seq('Pick'),\n              seq('Omit'), ),                                       // [0]\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            first(input => complexType(first(seq(','), seq('>')))(input),\n                  err('type is expected in Partial type.'), ),      // [1]\n            erase(repeat(commentOrSpace)),\n            combine(\n                erase(seq(',')),\n                erase(repeat(commentOrSpace)),\n                    stringValue,                                    // [2]\n                    qty(0)(combine(\n                        erase(repeat(commentOrSpace)),\n                        erase(seq('|')),\n                        erase(repeat(commentOrSpace)),\n                        stringValue, )),                            // [3],...\n                erase(repeat(commentOrSpace)), ),\n        first(ahead(seq('>')),\n              err('\\'>\\' is expected in Pick|Omit type.'), ),\n        erase(seq('>')), );\n\nconst genericOrSimpleType =\n    trans(tokens => [tokens[0]])(                     // remove generics parameters\n        simpleOrDottedTypeName,                       // [0]\n        erase(repeat(commentOrSpace)),\n        qty(0, 1)(combine(\n            erase(seq('<')),\n                combine(                              // [1]\n                    erase(repeat(commentOrSpace)),\n                    first(input => complexType(first(seq(','), seq('>')))(input),\n                          err('type is expected in generic type.'), ),\n                    erase(repeat(commentOrSpace)), ),\n                repeat(combine(                       // [2]...\n                    erase(seq(','),\n                          repeat(commentOrSpace)),\n                    first(input => complexType(first(seq(','), seq('>')))(input),\n                          err('type is expected in generic type.'), ),\n                    erase(repeat(commentOrSpace)), )),\n                qty(0, 1)(erase(\n                    seq(','),\n                    repeat(commentOrSpace), )),\n                first(ahead(seq('>')), err('genericType: Unexpected token has appeared.')),\n            erase(seq('>')), )));\n\nconst spreadType =\n    trans(tokens => [[{symbol: 'spread'}, tokens[0], tokens[1]]])(\n        erase(seq('...')),\n        erase(repeat(commentOrSpace)),\n        erase(seq('<')),\n            erase(repeat(commentOrSpace)),\n            input => complexType(first(seq(','), seq('>')))(input),\n            erase(repeat(commentOrSpace)),\n            qty(0, 1)(combine(\n                erase(seq(',')),\n                erase(repeat(commentOrSpace)),\n                first(arraySizeFactorInner,\n                      err('spreadType: Unexpected token has appeared. Expect array size.'), ),\n                erase(repeat(commentOrSpace)), )),\n            first(ahead(seq('>')), err('spreadType: Unexpected token has appeared.')),\n        erase(seq('>')), );\n\n\nconst decorator =\n    trans(tokens => [tokens])(\n        decoratorSymbolName,\n        qty(0, 1)(first(\n            combine(erase(\n                seq('('),\n                    repeat(commentOrSpace),\n                seq(')'), )),\n            combine(\n                erase(seq('(')),\n                    first(\n                        combine(\n                            combine(\n                                erase(repeat(commentOrSpace)),\n                                first(regexpStringValue, constExpr),\n                                erase(repeat(commentOrSpace)), ),\n                            repeat(combine(\n                                erase(repeat(commentOrSpace)),\n                                erase(seq(',')),\n                                erase(repeat(commentOrSpace)),\n                                first(regexpStringValue, constExpr),\n                                erase(repeat(commentOrSpace)), )),\n                            qty(0, 1)(erase(\n                                seq(','),\n                                repeat(commentOrSpace), )),\n                            first(ahead(seq(')')), err('decorator: Unexpected token has appeared. Expect \")\".')), ),\n                        err('decorator: Unexpected token has appeared.'), ),\n                erase(seq(')')),\n            ), )));\n\nconst decoratorsClause =\n    trans(tokens => tokens)(\n        repeat(combine(\n            decorator,\n            erase(repeat(commentOrSpace)), )));\n\n\nconst complexTypeInnerWOSinpleArrayType = (edge: ParserFnWithCtx<string, Ctx, Ast>) =>\n    first(primitiveValueNoNullUndefined,\n          genericOrSimpleType,\n          partialType,\n          pickOrOmitType,\n          complexArrayType,\n          sequenceType,\n          input => interfaceDefInner(first(seq(';'), seq(',')))(input), );\n\nconst complexTypeInnerRoot: (separator: ParserFnWithCtx<string, Ctx, Ast>) => ParserFnWithCtx<string, Ctx, Ast> =\n    (edge: ParserFnWithCtx<string, Ctx, Ast>) =>\n    trans(tokens => {\n            let ty = [{symbol: '$pipe'}, tokens[1], ...(tokens[0] as Ast[])];\n            if (tokens[2] !== null) {\n                for (const z of tokens[2] as Ast[]) {\n                    ty = [{symbol: 'repeated'}, ty, z];\n                }\n            }\n            return ([[\n                ty,\n                ...(tokens[3] ? [tokens[3]] : []),\n                ...tokens.slice(4),\n            ]]);\n        })(\n        trans(tokens => [tokens])(qty(0, 1)(decoratorsClause)),          // [0]\n        first(                                                           // [1]\n            input => complexTypeInnerWOSinpleArrayType(edge)(input),\n            combine(\n                erase(seq('(')),\n                    erase(repeat(commentOrSpace)),\n                    input => complexType(edge)(input),\n                    erase(repeat(commentOrSpace)),\n                erase(seq(')')), )),\n        combine(\n            trans(tokens => tokens[0] !== null ? [tokens] : [null])(     // [2]\n                first(\n                    qty(1)(combine(\n                        erase(repeat(commentOrSpace)),\n                        arraySizeFactor, )),\n                    zeroWidth(() => null), )),\n            combine(first(                                               // [3]...\n                trans(tokens => [tokens[0], ...(tokens[1] as Ast[])])(\n                    qty(1)(combine(\n                        erase(repeat(commentOrSpace)),\n                        trans(tokens => [{op: tokens[0]} as any])(or(seq('&'), seq('|'), seq('-'))),\n                        erase(repeat(commentOrSpace)),\n                        input => complexTypeInnerRoot(edge)(input), ))),\n                trans(tokens => [])(), ))));\n\n\nconst binaryOp = (op: string, op1: any, op2: any) => {\n    return [{symbol: op}, op1, op2];\n};\n\nconst isOperator = (v: any, op: string) => {\n    if (typeof v === 'object' && v.op === op) {\n        return true;\n    }\n    return false;\n};\n\nconst isValue = (v: any) => {\n    // TODO: check type\n    return true;\n};\n\n\n// production rules:\n//   S -> S \"&\" S\nconst complexTypeExprRule3 = $o.trans(tokens => [binaryOp('intersect', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, '&')),\n    $o.clsFn(t => isValue(t)),\n);\n\n// production rules:\n//   S -> S \"|\" S\nconst complexTypeExprRule2 = $o.trans(tokens => [binaryOp('oneOf', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, '|')),\n    $o.clsFn(t => isValue(t)),\n);\n\n// production rules:\n//   S -> S \"-\" S\nconst complexTypeExprRule1 = $o.trans(tokens => [binaryOp('subtract', tokens[0], tokens[2])])(\n    $o.clsFn(t => isValue(t)),\n    $o.clsFn(t => isOperator(t, '-')),\n    $o.clsFn(t => isValue(t)),\n);\n\nconst complexType = (edge: ParserFnWithCtx<string, Ctx, Ast>) => rules({\n    rules: [\n        complexTypeExprRule3,\n        complexTypeExprRule2,\n        complexTypeExprRule1,\n    ],\n    check: $o.combine($o.classes.any, $o.end()),\n})(trans(tokens => tokens[0] as Ast[])(complexTypeInnerRoot(edge)));\n\n\nconst spreadOrComplexType: (separator: ParserFnWithCtx<string, Ctx, Ast>) => ParserFnWithCtx<string, Ctx, Ast> =\n    (edge: ParserFnWithCtx<string, Ctx, Ast>) =>\n    first(spreadType, complexType(edge));\n\n\nconst typeDef =\n    trans(tokens => [[{symbol: 'def'}, tokens[1], [{symbol: 'docComment'}, tokens[2], tokens[0] ] ]])(\n        erase(seq('type')),\n            input => {                                               // TODO: extract function\n                const ret = zeroWidth(() => [])(input);\n                if (ret.succeeded) {\n                    const text = ret.next.context.docComment;\n                    ret.next.context = {...ret.next.context};\n                    delete ret.next.context.docComment;\n                    ret.tokens.length = 0;\n                    ret.tokens.push(text ? text : null);\n                }\n                return ret;\n            },                                                       // [0]\n            erase(qty(1)(commentOrSpace)),\n            first(symbolName,                                        // [1]\n                  err('typeDef: Unexpected token has appeared. Expect symbol name.'), ),\n            erase(repeat(commentOrSpace)),\n        first(ahead(seq('=')), err('typeDef: Unexpected token has appeared. Expect \"=\".')),\n        erase(seq('=')),\n            first(\n                combine(erase(repeat(commentOrSpace)),\n                        input => complexType(first(seq(','), seq(';')))(input),  // [2]\n                        erase(repeat(commentOrSpace)), ),\n                err('typeDef: Unexpected token has appeared.'), ),\n        first(ahead(seq(';')), err('typeDef: Unexpected token has appeared. Expect \";\".')),\n        erase(seq(';')), );\n\n\nconst interfaceExtendsClause =\n    trans(tokens => [\n            [{symbol: '$list'},\n                ...tokens.map(x => [{symbol: 'ref'}, x])], ])(\n        erase(first(\n            seq('extends'),\n            combine(symbolName,\n                    err('interfaceExtendsClause: Unexpected token has appeared. Expect \"extends\" keyword.'), ))),\n        erase(qty(1)(commentOrSpace)),\n        first(symbolName,\n              err('interfaceExtendsClause: Unexpected token has appeared. Expect symbol name.'), ),\n        repeat(combine(\n            erase(repeat(commentOrSpace)),\n            erase(seq(',')),\n            erase(repeat(commentOrSpace)),\n            first(symbolName,\n                  err('interfaceExtendsClause: Unexpected token has appeared. Expect symbol name.'), ))));\n\nconst interfaceKey =\n    first(\n        trans(tokens => [[{symbol: '$list'}, ...tokens]])(\n            erase(seq('[')),\n                erase(repeat(commentOrSpace),\n                      objKey,\n                      repeat(commentOrSpace),\n                      first(seq(':'), err('\":\" is needed.')),\n                      repeat(commentOrSpace), ),\n                repeat(combine(\n                    first(regexpStringValue,\n                          additionalPropPrimitiveTypeName, ),\n                    erase(repeat(commentOrSpace),\n                          seq('|'),\n                          repeat(commentOrSpace), ))),\n                first(regexpStringValue,\n                      additionalPropPrimitiveTypeName, ),\n                erase(repeat(commentOrSpace)),\n                first(ahead(seq(']')), err('interfaceKey: Unexpected token has appeared. Expect \"]\".')),\n            erase(seq(']')), ),\n        objKey, );\n\nconst interfaceKeyTypePair = (separator: ParserFnWithCtx<string, Ctx, Ast>) =>\n    trans(tokens => [\n            [{symbol: '$list'},\n                tokens[2],\n                [{symbol: '$pipe'},\n                    tokens[3] === '?' ?\n                        [{symbol: 'optional'}, tokens[4]] :\n                        tokens[4], ...(tokens[0] as Ast[]), ],\n                tokens[1], ]])(\n        trans(tokens => [tokens])(first(\n            decoratorsClause,\n            zeroWidth(() => []), )),                // [0] decorators\n        input => {\n            const ret = zeroWidth(() => [])(input);\n            if (ret.succeeded) {\n                const text = ret.next.context.docComment;\n                ret.next.context = {...ret.next.context};\n                delete ret.next.context.docComment;\n                ret.tokens.length = 0;\n                ret.tokens.push(text ? text : null);\n            }\n            return ret;\n        },                                          // [1]\n        interfaceKey,                               // [2] key\n        first(                                      // [3] '?' | ''\n            combine(\n                erase(repeat(commentOrSpace)),\n                seq('?'),\n                erase(repeat(commentOrSpace)), ),\n            zeroWidth(() => ['']), ),\n        erase(repeat(commentOrSpace),\n            first(seq(':'), err('\":\" is needed.')),\n            repeat(commentOrSpace), ),\n        first(                                      // [4] type\n            input => complexType(first(separator, seq('}')))(input),\n            err('interface member type is needed.'), ));\n\nconst interfaceDefInner: (separator: ParserFnWithCtx<string, Ctx, Ast>) => ParserFnWithCtx<string, Ctx, Ast> =\n    (separator: ParserFnWithCtx<string, Ctx, Ast>) =>\n    trans(tokens => [[{symbol: 'objectType'}, ...tokens]])(\n        first(\n            combine(erase(\n                seq('{'),\n                    repeat(commentOrSpace),\n                seq('}'), )),\n            combine(\n                erase(seq('{')),\n                    combine(\n                        erase(repeat(commentOrSpace)),\n                        interfaceKeyTypePair(separator),\n                        erase(repeat(commentOrSpace)), ),\n                    repeat(combine(\n                        erase(separator,\n                              repeat(commentOrSpace)),\n                        interfaceKeyTypePair(separator),\n                        erase(repeat(commentOrSpace)), )),\n                    qty(0, 1)(erase(\n                        separator,\n                        repeat(commentOrSpace), )),\n                    first(ahead(seq('}')), err('interfaceDefInner: Unexpected token has appeared. Expect \"}\".')),\n                erase(seq('}')), )));\n\nconst interfaceDef =\n    trans(tokens => [\n        [{symbol: 'def'},\n            tokens[1],\n            [{symbol: 'docComment'},\n                [{symbol: 'derived'}, tokens[3], [{symbol: '$spread'}, tokens[2]]],\n                tokens[0], ]]])(\n    erase(seq('interface')),\n        input => {                               // TODO: extract function\n            const ret = zeroWidth(() => [])(input);\n            if (ret.succeeded) {\n                const text = ret.next.context.docComment;\n                ret.next.context = {...ret.next.context};\n                delete ret.next.context.docComment;\n                ret.tokens.length = 0;\n                ret.tokens.push(text ? text : null);\n            }\n            return ret;\n        },                                       // [0] base types\n        erase(qty(1)(commentOrSpace)),\n        first(symbolName,                        // [1] symbol\n              err('interfaceDef: Unexpected token has appeared. Expect symbol name.'), ),\n        erase(repeat(commentOrSpace)),\n        first(interfaceExtendsClause,            // [2]\n              zeroWidth(() => []), ),\n        erase(repeat(commentOrSpace)),\n    first(\n        input => interfaceDefInner(\n            first(seq(';'), seq(',')), )(input), // [3]\n        err('interfaceDef: Unexpected token has appeared.'), ),\n);\n\n\nconst enumKeyValue =\n    trans(tokens => [[{symbol: '$list'}, tokens[1], tokens[2], tokens[0]]])(\n        input => {\n            const ret = zeroWidth(() => [])(input);\n            if (ret.succeeded) {\n                const text = ret.next.context.docComment;\n                ret.next.context = {...ret.next.context};\n                delete ret.next.context.docComment;\n                ret.tokens.length = 0;\n                ret.tokens.push(text ? text : null);\n            }\n            return ret;\n        },                                       // [0]\n        symbolName,\n        erase(repeat(commentOrSpace)),\n        first(\n            combine(\n                erase(seq('=')),\n                first(\n                    combine(erase(repeat(commentOrSpace)),\n                            first(decimalIntegerValue,\n                                  stringValue, ),\n                            erase(repeat(commentOrSpace)), ),\n                    err('enumKeyValue: Unexpected token has appeared.'), )),\n            zeroWidth(() => null), ));\n\nconst enumDef =\n    trans(tokens => [\n        [{symbol: 'def'}, tokens[1],\n            [{symbol: 'docComment'},\n                [{symbol: 'enumType'}, ...tokens.slice(2)],\n                tokens[0], ]]])(\n    erase(seq('enum')),\n        input => {                               // TODO: extract function\n            const ret = zeroWidth(() => [])(input);\n            if (ret.succeeded) {\n                const text = ret.next.context.docComment;\n                ret.next.context = {...ret.next.context};\n                delete ret.next.context.docComment;\n                ret.tokens.length = 0;\n                ret.tokens.push(text ? text : null);\n            }\n            return ret;\n        },                                       // [0]\n        erase(qty(1)(commentOrSpace)),\n        first(symbolName,\n              err('enumDef: Unexpected token has appeared. Expect symbol name.'), ),\n        erase(repeat(commentOrSpace)),\n    first(\n        combine(erase(\n            seq('{'),\n                repeat(commentOrSpace),\n            seq('}'), )),\n        combine(\n            erase(seq('{')),\n                combine(\n                    erase(repeat(commentOrSpace)),\n                    enumKeyValue,\n                    erase(repeat(commentOrSpace)), ),\n                repeat(combine(\n                    erase(seq(','),\n                          repeat(commentOrSpace)),\n                    enumKeyValue,\n                    erase(repeat(commentOrSpace)), )),\n                qty(0, 1)(erase(\n                    seq(','),\n                    repeat(commentOrSpace), )),\n                first(ahead(seq('}')), err('enumDef: Unexpected token has appeared. Expect \"}\".')),\n            erase(seq('}')), ),\n        err('enumDef: Unexpected token has appeared.'), ));\n\n\nconst internalDef =\n    first(typeDef,\n          interfaceDef,\n          enumDef, );\n\n\nconst exportedDef =\n    trans(tokens => [[{symbol: 'export'}, tokens[0]]])(\n        erase(seq('export'),\n              qty(1)(commentOrSpace), ),\n        first(internalDef,\n              err('exportedDef: Unexpected token has appeared.'), ));\n\n\nconst defStatement =\n    trans(tokens => [\n        [{symbol: '$local'}, [\n                [{symbol: '_ty'}, tokens[1]],\n            ],\n            [{symbol: 'redef'},\n                {symbol: '_ty'},\n                [{symbol: '$pipe'}, {symbol: '_ty'}, ...(tokens[0] as Ast[])], ]]])(\n        trans(tokens => [tokens])(first(\n            decoratorsClause,\n            zeroWidth(() => []), )),      // [0] decorators\n        first(exportedDef,                // [1] body\n              internalDef), );\n\n\nconst externalTypeDef =\n    trans(tokens => [[{symbol: 'external'}, ...tokens]])(\n        erase(seq('external')),\n            erase(qty(1)(commentOrSpace)),\n            symbolName,\n            repeat(combine(\n                erase(repeat(commentOrSpace)),\n                erase(cls(',')),\n                erase(repeat(commentOrSpace)),\n                first(symbolName,\n                      err('externalTypeDef: Unexpected token has appeared. Expect symbol name.'), ),\n                erase(repeat(commentOrSpace)),\n            )),\n            erase(repeat(commentOrSpace)),\n        first(ahead(cls(';')), err('externalTypeDef: Unexpected token has appeared. Expect \";\".')),\n        erase(cls(';')), );\n\nconst importStatement =\n    trans(tokens => [[{symbol: 'passthru'}, tokens[0]]])(\n        cat(seq('import'),\n            qty(1)(commentOrSpace),\n            cat(repeat(notCls(';'))),\n            first(ahead(seq(';')), err('importStatement: Unexpected token has appeared. Expect \";\".')),\n            cls(';'), ));\n\n\nconst definition =\n    first(directiveLineComment,\n          defStatement,\n          externalTypeDef,\n          importStatement, );\n\nconst program =\n    makeProgram(combine(\n        erase(repeat(commentOrSpace)),\n        repeat(combine(\n            definition,\n            erase(repeat(commentOrSpace)), )),\n        erase(repeat(commentOrSpace)),\n        first(ahead(end()), err('program: Unexpected token has appeared.')),\n        end(), ));\n\n\nexport function parse(s: string) {\n    const z = program(parserInput(s, {/* TODO: set initial state to the context */}));\n    if (! z.succeeded) {\n        throw new Error(formatErrorMessage(z));\n    }\n    return z.tokens;\n}\n\n\nconst lisp = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n    config = installCore(config);\n    config.stripComments = true;\n    return SExpression(config);\n})();\n\n\n// tslint:disable: object-literal-key-quotes\nexport function compile(s: string) {\n    const mapTyToTySet = new Map<TypeAssertion, TypeAssertionSetValue>();\n    const schema: TypeAssertionMap = new Map<string, TypeAssertionSetValue>();\n    let gensymCount = 0;\n\n    const def = (name: SxSymbol | string, ty: TypeAssertion): TypeAssertion => {\n        let ret = ty;\n\n        const sym = typeof name === 'string' ? name : name.symbol;\n        if (isUnsafeVarNames(dummyTargetObject, sym)) {\n            throw new Error(`Unsafe symbol name is appeared: ${sym}`);\n        }\n\n        if (! mapTyToTySet.has(ret)) {\n            const originalTypeName = ret.typeName;\n            ret = operators.withName(operators.withTypeName(\n                originalTypeName ?\n                    operators.withOriginalTypeName(ret, originalTypeName) :\n                    ret,\n                sym), sym);\n        }\n\n        const tySet = mapTyToTySet.has(ret) ?\n            mapTyToTySet.get(ret) as TypeAssertionSetValue :\n            {ty: ret, exported: false, resolved: false};\n\n        schema.set(sym, tySet);\n\n        if (! mapTyToTySet.has(ret)) {\n            // TODO: aliases are not exported correctly\n            mapTyToTySet.set(ret, tySet);\n        }\n        return ret;\n    };\n\n    const ref = (name: SxSymbol | string, ...memberNames: (SxSymbol | string)[]): TypeAssertion => {\n        const sym = typeof name === 'string' ? name : name.symbol;\n        if (isUnsafeVarNames(dummyTargetObject, sym)) {\n            throw new Error(`Unsafe symbol name is appeared: ${sym}`);\n        }\n\n        const memberTreeSymbols = memberNames.map(x => {\n            const ms = typeof x === 'string' ? x : x.symbol;\n            if (isUnsafeVarNames(dummyTargetObject, ms)) {\n                throw new Error(`Unsafe symbol name is appeared: ${ms}`);\n            }\n            return ms;\n        });\n\n        if (! schema.has(sym)) {\n            return ({\n                ...{\n                    kind: 'symlink',\n                    symlinkTargetName: sym,\n                    name: sym,\n                    typeName: sym,\n                },\n                ...(0 < memberTreeSymbols.length ? {\n                    memberTree: memberTreeSymbols,\n                } : {}),\n            });\n        }\n\n        let ty = resolveMemberNames(\n            (schema.get(sym) as TypeAssertionSetValue).ty,\n            sym, memberTreeSymbols,\n            0,\n        );\n\n        if (ty.noOutput) {\n            ty = {...ty};\n            delete ty.noOutput;\n        }\n        return ty;\n    };\n\n    const external = (...names: string[]) => {\n        for (const name of names) {\n            const ty = def(name, operators.primitive('any'));\n            ty.noOutput = true;\n        }\n    };\n\n    lisp.setGlobals({\n        picked: operators.picked,\n        omit: operators.omit,\n        partial: operators.partial,\n        intersect: operators.intersect,\n        oneOf: operators.oneOf,\n        subtract: operators.subtract,\n        primitive: operators.primitive,\n        primitiveValue: operators.primitiveValue,\n        optional: operators.optional,\n        repeated: operators.repeated,\n        sequenceOf: operators.sequenceOf,\n        spread: operators.spread,\n        enumType: operators.enumType,\n        objectType: operators.objectType,\n        derived: operators.derived,\n        def,\n        ref,\n        export: (ty: TypeAssertion) => {\n            // NOTE: 'ty' should already be registered to 'mapTyToTySet' and 'schema'\n            const tySet = mapTyToTySet.has(ty) ?\n                mapTyToTySet.get(ty) as TypeAssertionSetValue :\n                {ty, exported: false, resolved: false};\n            tySet.exported = true;\n            return ty;\n        },\n        redef: (original: TypeAssertion, ty: TypeAssertion) => {\n            if (original === ty) {\n                return ty;\n            }\n            // NOTE: 'ty' should already be registered to 'mapTyToTySet' and 'schema'\n            const tySet = mapTyToTySet.has(original) ?\n                mapTyToTySet.get(original) as TypeAssertionSetValue :\n                {ty: original, exported: false, resolved: false};\n            tySet.ty = ty;\n            mapTyToTySet.set(tySet.ty, tySet);\n            if (ty.name) {\n                schema.set(ty.name, tySet);\n            }\n            return tySet.ty;\n        },\n        external,\n        passthru: (str: string) => {\n            const ty: TypeAssertion = {\n                kind: 'never',\n                passThruCodeBlock: str || '',\n            };\n            schema.set(`__$$$gensym_${gensymCount++}$$$__`, {ty, exported: false, resolved: false});\n            return ty;\n        },\n        directive: (name: string, body: string) => {\n            switch (name) {\n            case '@tynder-external':\n                external(...body.split(',').map(x => x.trim()));\n                break;\n            default:\n                throw new Error(`Unknown directive is appeared: ${name}`);\n            }\n            return [];\n        },\n        docComment: operators.withDocComment,\n        '@range': (minValue: number | string, maxValue: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withRange(minValue, maxValue)(ty),\n        '@minValue': (minValue: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMinValue(minValue)(ty),\n        '@maxValue': (maxValue: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMaxValue(maxValue)(ty),\n        '@greaterThan': (greaterThan: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withGreaterThan(greaterThan)(ty),\n        '@lessThan': (lessThan: number | string) => (ty: PrimitiveTypeAssertion) =>\n            operators.withLessThan(lessThan)(ty),\n        '@minLength': (minLength: number) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMinLength(minLength)(ty),\n        '@maxLength': (maxLength: number) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMaxLength(maxLength)(ty),\n        '@match': (pattern: RegExp) => (ty: PrimitiveTypeAssertion) =>\n            operators.withMatch(pattern)(ty),\n        '@stereotype': (stereotype: string) => (ty: TypeAssertion) =>\n            operators.withStereotype(stereotype)(ty),\n        '@constraint': (name: string, args?: any) => (ty: TypeAssertion) =>\n            operators.withConstraint(name, args)(ty),\n        '@forceCast': () => (ty: TypeAssertion) =>\n            operators.withForceCast()(ty),\n        '@recordType': () => (ty: TypeAssertion) =>\n            operators.withRecordType()(ty),\n        '@meta': (meta: any) => (ty: TypeAssertion) =>\n            operators.withMeta(meta)(ty),\n        '@msg': (messages: string | ErrorMessages) => (ty: TypeAssertion) =>\n            operators.withMsg(messages)(ty),\n        '@msgId': (messageId: string) => (ty: TypeAssertion) =>\n            operators.withMsgId(messageId)(ty),\n    });\n\n    const z = parse(s);\n    lisp.evaluateAST(z as SxToken[]);\n\n    return resolveSchema(schema);\n}\n// tslint:enable: object-literal-key-quotes\n","// Copyright (c) 2019 Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { StringParserFnWithCtx } from './types';\r\nimport { zeroWidth,\r\n         zeroWidthError,\r\n         beginning,\r\n         end,\r\n         quantify,\r\n         first,\r\n         or,\r\n         transform,\r\n         lookAhead,\r\n         lookBehind,\r\n         ApplyProductionRulesArg,\r\n         applyProductionRules,\r\n         makeProgram } from './parser';\r\n\r\n\r\n\r\nexport function charSequence<C, R>(\r\n        helper: (token: string) => R\r\n        ): (needle: string) => StringParserFnWithCtx<C, R> {\r\n\r\n    return (needle => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            return (src.startsWith(needle) ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needle.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needle)],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"charSequence(${needle})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClass<C, R>(\r\n        helper: (token: string) => R\r\n        ): (...needles: string[]) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            let index = -1;\r\n\r\n            const succeeded = needles.some((needle, idx) => {\r\n                const matched = src.startsWith(needle);\r\n                if (matched) {\r\n                    index = idx;\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            return (succeeded ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + needles[index].length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(needles[index])],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"charClass(${needles.join(',')})\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClassNot<C, R>(\r\n    helper: (token: string) => R\r\n    ): (...needles: string[]) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return ((...needles) => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n\r\n            for (const needle of needles) {\r\n                const matched = src.startsWith(needle);\r\n                if (matched) {\r\n                    return ({\r\n                        succeeded: false,\r\n                        error: false,\r\n                        src: input.src,\r\n                        pos: input.start,\r\n                        message: `operator \"charClassNot(${needles.join(',')})\"`,\r\n                    });\r\n                }\r\n            }\r\n            const p = input.src.codePointAt(input.start);\r\n            if (p === void 0) {\r\n                return ({\r\n                    succeeded: false,\r\n                    error: false,\r\n                    src: input.src,\r\n                    pos: input.start,\r\n                    message: `operator \"charClassNot(${needles.join(',')})\"`,\r\n                });\r\n            }\r\n            const c = String.fromCodePoint(p);\r\n\r\n            return ({\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + c.length,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(c)],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function charClassByNeedleFn<C, R>(\r\n        helper: (token: string) => R\r\n        ): (needle: (src: string) => number) => StringParserFnWithCtx<C, R> {\r\n\r\n    // NOTE: needles[i] should be one character. surrogate pair and/or ligature are accepted.\r\n    return (needle => {\r\n        return (input => {\r\n            const src = input.src.slice(input.start, input.end);\r\n            const len = needle(src);\r\n\r\n            return (len >= 0 ? {\r\n                succeeded: true,\r\n                next: {\r\n                    src: input.src,\r\n                    start: input.start + len,\r\n                    end: input.end,\r\n                    context: input.context,\r\n                },\r\n                tokens: [helper(src.substring(0, len))],\r\n            } : {\r\n                succeeded: false,\r\n                error: false,\r\n                src: input.src,\r\n                pos: input.start,\r\n                message: `operator \"charClassByNeedleFn\"`,\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport function getStringParsers<C, R>(\r\n        params: {\r\n            rawToToken: (rawToken: string) => R,\r\n            concatTokens: (tokens: R[]) => R[],\r\n        }) {\r\n\r\n    const seq = charSequence<C, R>(params.rawToToken);\r\n    const cls = charClass<C, R>(params.rawToToken);\r\n    const notCls = charClassNot<C, R>(params.rawToToken);\r\n    const clsFn = charClassByNeedleFn<C, R>(params.rawToToken);\r\n    const cat = transform<string, C, R>(params.concatTokens);\r\n    const once = quantify<string, C, R>(1, 1);\r\n    const repeat = quantify<string, C, R>();\r\n    // TODO: reduce unneccessary call for adding types.\r\n    const qty = (min?: number, max?: number) => quantify<string, C, R>(min, max);\r\n    const combine = transform<string, C, R>();\r\n    const erase = transform<string, C, R>(tokens => []);\r\n\r\n    const isAlpha = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'Z') ||\r\n            ('a' <= c && c <= 'z')) ? c.length : -1);\r\n    });\r\n\r\n    const isUpper = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('A' <= c && c <= 'Z') ? c.length : -1);\r\n    });\r\n\r\n    const isLower = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('a' <= c && c <= 'z') ? c.length : -1);\r\n    });\r\n\r\n    const isNumber = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '9') ? c.length : -1);\r\n    });\r\n\r\n    const isNonZeroNumber = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('1' <= c && c <= '9') ? c.length : -1);\r\n    });\r\n\r\n    const isBinNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '1') ? c.length : -1);\r\n    });\r\n\r\n    const isOctNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ('0' <= c && c <= '7') ? c.length : -1);\r\n    });\r\n\r\n    const isHexNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'F') ||\r\n            ('a' <= c && c <= 'f') ||\r\n            ('0' <= c && c <= '9')) ? c.length : -1);\r\n    });\r\n\r\n    const isAlNum = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            ('A' <= c && c <= 'Z') ||\r\n            ('a' <= c && c <= 'z') ||\r\n            ('0' <= c && c <= '9')) ? c.length : -1);\r\n    });\r\n\r\n    const isSpace = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((' \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n            '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n            '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c) ? c.length : -1);\r\n    });\r\n\r\n    const isSpaceWithinSingleLine = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((' \\f\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n            '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n            '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c) ? c.length : -1);\r\n    });\r\n\r\n    const isControl = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return ((\r\n            (0x0000 <= p && p <= 0x001f) ||\r\n            (0x007f <= p && p <= 0x009f)) ? c.length : -1);\r\n    });\r\n\r\n    const isWord = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return (\r\n            ((' \\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e' +\r\n              '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a' +\r\n              '​\\u2028\\u2029\\u202f\\u205f​\\u3000\\ufeff').includes(c)) ||\r\n            ((0x0000 <= p && p <= 0x001f) ||\r\n             (0x007f <= p && p <= 0x009f)) ?\r\n            -1 : c.length);\r\n    });\r\n\r\n    const isNewline = cls('\\r\\n', '\\n', '\\r');\r\n\r\n    const isAny = clsFn(src => {\r\n        const p = src.codePointAt(0);\r\n        if (p === void 0) {\r\n            return -1;\r\n        }\r\n        const c = String.fromCodePoint(p);\r\n        return c.length;\r\n    });\r\n\r\n\r\n    const binSep =\r\n        first(isBinNum, cls('_'));\r\n    const octSep =\r\n        first(isOctNum, cls('_'));\r\n    const hexSep =\r\n        first(isHexNum, cls('_'));\r\n\r\n    const binaryIntegerNumber = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isBinNum), repeat(binSep)), );\r\n    const octalIntegerNumber = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isOctNum), repeat(octSep)), );\r\n    const hexIntegerValue = (...prefixes: Array<StringParserFnWithCtx<C, R>>) =>\r\n        combine(erase(first(...prefixes)),\r\n            cat(once(isHexNum), repeat(hexSep)), );\r\n    const decimalIntegerNumber =\r\n        combine(cat(qty(0, 1)(cls('+', '-')),\r\n            first(combine(once(isNonZeroNumber), repeat(first(isNumber, cls('_')))),\r\n                seq('0'), )));\r\n    const bigDecimalIntegerNumber =\r\n        combine(cat(decimalIntegerNumber,\r\n            erase(seq('n')), ));\r\n    const floatingPointNumber =\r\n        combine(cat(qty(0, 1)(cls('+', '-')),\r\n            first(combine(once(isNonZeroNumber), repeat(first(isNumber, cls('_')))),\r\n                seq('0'), ),\r\n            qty(0, 1)(combine(seq('.'),\r\n                qty(1)(first(isNumber, cls('_'))), )),\r\n            qty(0, 1)(combine(cls('E', 'e'), qty(0, 1)(cls('+', '-')),\r\n                first(combine(once(isNonZeroNumber), repeat(isNumber)), seq('0')), ))));\r\n\r\n    // TODO: reduce unneccessary call for adding types.\r\n    return ({\r\n        seq,\r\n        cls,\r\n        notCls,\r\n        clsFn,\r\n        classes: {\r\n            alpha: isAlpha,\r\n            upper: isUpper,\r\n            lower: isLower,\r\n            num: isNumber,\r\n            nonzero: isNonZeroNumber,\r\n            bin: isBinNum,\r\n            oct: isOctNum,\r\n            hex: isHexNum,\r\n            alnum: isAlNum,\r\n            space: isSpace,\r\n            spaceWithinSingleLine: isSpaceWithinSingleLine,\r\n            ctrl: isControl,\r\n            newline: isNewline,\r\n            word: isWord,\r\n            any: isAny,\r\n        },\r\n        numbers: {\r\n            bin: binaryIntegerNumber,\r\n            oct: octalIntegerNumber,\r\n            hex: hexIntegerValue,\r\n            int: decimalIntegerNumber,\r\n            bigint: bigDecimalIntegerNumber,\r\n            float: floatingPointNumber,\r\n        },\r\n        cat,\r\n        once,\r\n        repeat,\r\n        qty,\r\n        zeroWidth: (helper?: () => R) => zeroWidth<string, C, R>(helper), // TODO:\r\n        err: (message: string) => zeroWidthError<string, C, R>(message),  // TODO:\r\n        beginning: (helper?: () => R) => beginning<string, C, R>(helper), // TODO:\r\n        end: (helper?: () => R) => end<string, C, R>(helper),             // TODO:\r\n        first: (...parsers: Array<StringParserFnWithCtx<C, R>>) => first<string, C, R>(...parsers), // TODO:\r\n        or: (...parsers: Array<StringParserFnWithCtx<C, R>>) => or<string, C, R>(...parsers),       // TODO:\r\n        combine,\r\n        erase,\r\n        trans: (fn: (tokens: R[]) => R[]) => transform<string, C, R>(fn),                                 // TODO:\r\n        ahead: (...parsers: Array<StringParserFnWithCtx<C, R>>) => lookAhead<string, C, R>(...parsers),   // TODO:\r\n        behind: (n: number, helper?: () => R) => lookBehind<string, C, R>(n, helper),\r\n        rules: (args: ApplyProductionRulesArg<string, C, R>) => applyProductionRules<string, C, R>(args), // TODO:\r\n        makeProgram,\r\n    });\r\n}\r\n","// Copyright (c) 2018, Shellyl_N and Authors\r\n// license: ISC\r\n// https://github.com/shellyln\r\n\r\n\r\nimport { SxParserConfig }       from '../../types';\r\nimport { operators,\r\n         compilationOperators } from './core.operator';\r\nimport { macros,\r\n         compilationMacros }    from './core.macro';\r\nimport symbols                  from './core.symbol';\r\n\r\n\r\n\r\nexport default function install(config: SxParserConfig): SxParserConfig {\r\n    config.funcs = (config.funcs || [])\r\n        .concat(operators)\r\n        .concat(config.enableCompilationOperators ? compilationOperators : []);\r\n    config.macros = (config.macros || [])\r\n        .concat(macros)\r\n        .concat(config.enableCompilationOperators ? compilationMacros : []);\r\n    config.symbols = (config.symbols || []).concat(symbols);\r\n    return config;\r\n}\r\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         AdditionalPropsKey,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../types';\nimport { escapeString }   from '../lib/escape';\n\n\n\nfunction formatTypeName(typeName: string) {\n    if (typeName.includes('.')) {\n        const z = typeName.split('.');\n        let s = z[0];\n        for (let i = 1; i < z.length; i++) {\n            s += `['${escapeString(z[i])}']`\n        }\n        return `(${s})`;\n    }\n    return typeName;\n}\n\n\nfunction formatTypeScriptCodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction generateTypeScriptCodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    // TODO: Function, DateStr, DateTimeStr\n    switch (ty.primitiveName) {\n    case 'integer':\n        return 'number';\n    default:\n        return ty.primitiveName;\n    }\n}\n\n\nfunction generateTypeScriptCodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null) {\n        return 'null';\n    }\n    if (ty.value === void 0) {\n        return 'undefined';\n    }\n    switch (typeof ty.value) {\n    case 'string':\n        return `'${escapeString(ty.value)}'`;\n    case 'bigint':\n        return `${ty.value.toString()}n`;\n    default:\n        return ty.value.toString();\n    }\n}\n\n\nfunction generateTypeScriptCodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext) {\n    return (ty.repeated.kind === 'primitive' ||\n            ty.repeated.kind === 'never' ||\n            ty.repeated.kind === 'any' ||\n            ty.repeated.kind === 'unknown' ||\n            ty.repeated.kind === 'object' ||\n            ty.repeated.kind === 'symlink' ||\n            (ty.repeated.kind === 'one-of' && ty.repeated.typeName) ?\n        `${ty.repeated.typeName ?\n            formatTypeName(ty.repeated.typeName) :\n            generateTypeScriptCodeInner(ty.repeated, false, ctx)}[]` :\n        `Array<${ty.repeated.typeName ?\n            formatTypeName(ty.repeated.typeName) :\n            generateTypeScriptCodeInner(ty.repeated, false, ctx)}>`\n    );\n}\n\n\nfunction generateTypeScriptCodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateTypeScriptCodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    return `[${\n        ty.sequence\n            .filter(x => x.kind !== 'spread')\n            .map(x => x.typeName ?\n                formatTypeName(x.typeName) :\n                generateTypeScriptCodeInner(x, false, {...ctx, nestLevel: ctx.nestLevel + 1}))\n            .join(', ')}]`;\n}\n\n\nfunction generateTypeScriptCodeOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    return `(${ty.oneOf\n        .map(x => x.typeName ?\n            formatTypeName(x.typeName) :\n            generateTypeScriptCodeInner(x, false, ctx)).join(' | ')})`;\n}\n\n\nfunction generateTypeScriptCodeOptional(ty: OptionalAssertion, ctx: CodegenContext) {\n    return generateTypeScriptCodeInner(ty.optional, false, ctx);\n}\n\n\nfunction generateTypeScriptCodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return `(${ty.values.map(x => `${x[1]}`).join(' | ')})`;\n}\n\n\nfunction formatAdditionalPropsName(ak: AdditionalPropsKey, i: number) {\n    return (`[propName${i}: ${ak.map(x => typeof x === 'string' ? x : 'string').join(' | ')}]`);\n}\n\n\nfunction generateTypeScriptCodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    if (ty.members.filter(x => !(x[2])).length === 0 &&\n        ty.additionalProps?.filter(x => !(x[2])).length === 0) {\n        return '{}';\n    }\n    // NOTE: Semicolon is always preferred.\n    // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/member-delimiter-style.md\n    const sep = isInterface ? ';\\n' : ';\\n';\n\n    const memberLines =\n        ty.members.filter(x => !(x[2]))\n        .map(x =>\n            `${formatTypeScriptCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                x[0]}${x[1].kind === 'optional' ? '?' : ''}: ${\n                x[1].typeName ?\n                    formatTypeName(x[1].typeName) :\n                    generateTypeScriptCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})}`);\n\n    const additionalPropsLines =\n        ty.additionalProps?.filter(x => !(x[2]))\n        .map((x, i) =>\n            `${formatTypeScriptCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                formatAdditionalPropsName(x[0], i)}${x[1].kind === 'optional' ? '?' : ''}: ${\n                x[1].typeName ?\n                    formatTypeName(x[1].typeName) :\n                    generateTypeScriptCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})}`) || [];\n\n    const propsLines = memberLines.concat(additionalPropsLines);\n    if (propsLines.length === 0) {\n        return '{}';\n    }\n    return (\n        `{\\n${propsLines.join(sep)}${sep}${'    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateTypeScriptCodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext): string {\n    switch (ty.kind) {\n    case 'never':\n        return 'never';\n    case 'any':\n        return 'any';\n    case 'unknown':\n        return 'unknown';\n    case 'primitive':\n        return generateTypeScriptCodePrimitive(ty, ctx);\n    case 'primitive-value':\n        return generateTypeScriptCodePrimitiveValue(ty, ctx);\n    case 'repeated':\n        return generateTypeScriptCodeRepeated(ty, ctx);\n    case 'spread':\n        return generateTypeScriptCodeSpread(ty, ctx);\n    case 'sequence':\n        return generateTypeScriptCodeSequence(ty, ctx);\n    case 'one-of':\n        return generateTypeScriptCodeOneOf(ty, ctx);\n    case 'optional':\n        return generateTypeScriptCodeOptional(ty, ctx);\n    case 'enum':\n        return generateTypeScriptCodeEnum(ty, ctx);\n    case 'object':\n        return generateTypeScriptCodeObject(ty, isInterface, ctx);\n    case 'symlink':\n        return ty.symlinkTargetName;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateTypeScriptCode(types: TypeAssertionMap): string {\n    let code = '';\n    const ctx = {nestLevel: 0};\n    for (const ty of types.entries()) {\n        if (ty[1].ty.noOutput) {\n            continue;\n        }\n        code += formatTypeScriptCodeDocComment(ty[1].ty, ctx.nestLevel);\n        if (ty[1].exported) {\n            code += 'export ';\n        }\n        if (ty[1].ty.kind === 'object') {\n            code += `interface ${ty[0]}${\n                ty[1].ty.baseTypes && ty[1].ty.baseTypes.length ? ` extends ${\n                    ty[1].ty.baseTypes\n                        .filter(x => x.typeName)\n                        .map(x => formatTypeName(x.typeName as string))\n                        .join(', ')}` : ''} ${\n                generateTypeScriptCodeInner(ty[1].ty, true, ctx)}\\n\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            let value: number | null = 0;\n            code += `enum ${ty[0]} {\\n${\n                ty[1].ty.values\n                    .map(x => `${\n                        formatTypeScriptCodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                        indent1}${(() => {\n                            if (value !== null && x[1] === value) {\n                                value++;\n                                return `${x[0]}`;\n                            } else {\n                                if (typeof x[1] === 'number') {\n                                    value = x[1] + 1;\n                                    return `${x[0]} = ${x[1]}`;\n                                } else {\n                                    return `${x[0]} = '${escapeString(x[1])}'`;\n                                }\n                            }\n                        })()},\\n`)\n                    .join('')}${indent0}}\\n\\n`;\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            code += `${ty[1].ty.passThruCodeBlock}\\n\\n`;\n        } else {\n            code += `type ${ty[0]} = ${\n                (ty[1].ty.originalTypeName ?\n                    formatTypeName(ty[1].ty.originalTypeName) :\n                    void 0) ||\n                generateTypeScriptCodeInner(ty[1].ty, false, ctx)};\\n\\n`;\n        }\n    }\n    return code;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         TypeAssertionMap } from '../types';\nimport * as JsonSchema      from '../types/json-schema-types';\n\n\n\nfunction addMetaInfo(a: JsonSchema.JsonSchemaAssertion, ty: TypeAssertion) {\n    const a2 = {...a};\n    let changed = false;\n\n    if (ty.docComment) {\n        a2.description = ty.docComment;\n        changed = true;\n    }\n    switch (ty.kind) {\n    case 'repeated':\n        if (typeof ty.min === 'number') {\n            (a2 as JsonSchema.JsonSchemaArrayAssertion).minItems = ty.min;\n            changed = true;\n        }\n        if (typeof ty.max === 'number') {\n            (a2 as JsonSchema.JsonSchemaArrayAssertion).maxItems = ty.max;\n            changed = true;\n        }\n        break;\n    case 'primitive':\n        if (typeof ty.minValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).minimum = ty.minValue;\n            changed = true;\n        }\n        if (typeof ty.maxValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).maximum = ty.maxValue;\n            changed = true;\n        }\n        if (typeof ty.greaterThanValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).exclusiveMinimum = ty.greaterThanValue;\n            changed = true;\n        }\n        if (typeof ty.lessThanValue === 'number') {\n            (a2 as JsonSchema.JsonSchemaNumberAssertion).exclusiveMaximum = ty.lessThanValue;\n            changed = true;\n        }\n        if (typeof ty.minLength === 'number') {\n            (a2 as JsonSchema.JsonSchemaStringAssertion).minLength = ty.minLength;\n            changed = true;\n        }\n        if (typeof ty.maxLength === 'number') {\n            (a2 as JsonSchema.JsonSchemaStringAssertion).maxLength = ty.maxLength;\n            changed = true;\n        }\n        if (ty.pattern) {\n            (a2 as JsonSchema.JsonSchemaStringAssertion).pattern = ty.pattern.source;\n            changed = true;\n        }\n        break;\n    }\n    return (changed ? a2 : a);\n}\n\nfunction generateJsonSchemaInner(schema: TypeAssertionMap, ty: TypeAssertion, nestLevel: number): JsonSchema.JsonSchemaAssertion {\n    if (0 < nestLevel && ty.typeName) {\n        const ret: JsonSchema.JsonSchemaRefAssertion = {\n            $ref: `#/definitions/${ty.typeName.replace(/\\./g, '/properties/')}`,\n        };\n        const r2 = addMetaInfo(ret, ty);\n        if (ret !== r2) {\n            // NOTE: `$ref` cannot have value constraints.\n            return generateJsonSchemaInner(schema, ty, 0);\n        } else {\n            return ret;\n        }\n    }\n\n    switch (ty.kind) {\n    case 'symlink':\n        {\n            const ret: JsonSchema.JsonSchemaRefAssertion = {\n                $ref: `#/definitions/${ty.symlinkTargetName}`,\n            };\n            const r2 = addMetaInfo(ret, ty);\n            if (ret !== r2) {\n                // NOTE: `$ref` cannot have value constraints.\n                const t2 = schema.get(ty.symlinkTargetName)?.ty;\n                if (t2) {\n                    return generateJsonSchemaInner(schema, t2, 0);\n                } else {\n                    // Drop constraints.\n                    return ret;\n                }\n            } else {\n                return ret;\n            }\n        }\n    case 'repeated':\n        {\n            const ret: JsonSchema.JsonSchemaArrayAssertion = {\n                type: 'array',\n                items: generateJsonSchemaInner(schema, ty.repeated, nestLevel + 1),\n            };\n            if (typeof ty.min === 'number') {\n                ret.minItems = ty.min;\n            }\n            if (typeof ty.max === 'number') {\n                ret.maxItems = ty.max;\n            }\n            return addMetaInfo(ret, ty);\n        }\n    case 'sequence':\n        {\n            const ret: JsonSchema.JsonSchemaArrayAssertion = {\n                type: 'array',\n                items: { anyOf: ty.sequence.map(x => generateJsonSchemaInner(schema, x, nestLevel + 1)) },\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'spread':\n        {\n            return generateJsonSchemaInner(schema, ty.spread, nestLevel + 1);\n        }\n    case 'one-of':\n        {\n            const ret: JsonSchema.JsonSchemaAnyOfAssertion = {\n                anyOf: ty.oneOf.map(x => generateJsonSchemaInner(schema, x, nestLevel + 1)),\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'optional':\n        {\n            const ret: JsonSchema.JsonSchemaOneOfAssertion = {\n                oneOf: [\n                    generateJsonSchemaInner(schema, ty.optional, nestLevel + 1),\n                    {type: 'null'},\n                ],\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'enum':\n        {\n            const ret: JsonSchema.JsonSchemaTsEnumAssertion = {\n                type: ['string', 'number'],\n                enum: ty.values.map(x => x[1]),\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'object':\n        {\n            const properties: JsonSchema.JsonSchemaObjectPropertyAssertion = {};\n            const patternProperties: JsonSchema.JsonSchemaObjectPropertyAssertion = {};\n            let patternPropsCount = 0;\n            const required: string[] = [];\n            for (const m of ty.members) {\n                const z = generateJsonSchemaInner(schema,\n                    m[1].kind === 'optional' ?\n                        m[1].optional :\n                        m[1],\n                    nestLevel + 1);\n\n                if (m[3]) {\n                    z.description = m[3];\n                } else {\n                    delete z.description;\n                }\n                properties[m[0]] = z;\n\n                if (m[1].kind !== 'optional') {\n                    required.push(m[0]);\n                }\n            }\n            for (const m of ty.additionalProps || []) {\n                const z = generateJsonSchemaInner(schema, m[1], nestLevel + 1);\n                if (m[3]) {\n                    z.description = m[3];\n                } else {\n                    delete z.description;\n                }\n                for (const k of m[0]) {\n                    patternPropsCount++;\n                    switch (k) {\n                    case 'number':\n                        patternProperties['^[0-9]+$'] = z;\n                        break;\n                    case 'string':\n                        patternProperties['^.*$'] = z;\n                        break;\n                    default:\n                        patternProperties[k.source] = z;\n                        break;\n                    }\n                }\n            }\n            const ret: JsonSchema.JsonSchemaObjectAssertion = {\n                type: 'object',\n                properties,\n                ...(0 < patternPropsCount ? {patternProperties} : {}),\n                ...(0 < required.length ? {required} : {}),\n                additionalProperties: false,\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'primitive':\n        {\n            switch (ty.primitiveName) {\n            case 'null': case 'undefined':\n                {\n                    const ret: JsonSchema.JsonSchemaNullAssertion = {\n                        type: 'null',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'number':\n                {\n                    const ret: JsonSchema.JsonSchemaNumberAssertion = {\n                        type: 'number',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'bigint':\n                {\n                    const ret: JsonSchema.JsonSchemaBigIntAssertion = {\n                        type: ['integer', 'string'],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'integer':\n                {\n                    const ret: JsonSchema.JsonSchemaNumberAssertion = {\n                        type: 'integer',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'string':\n                {\n                    const ret: JsonSchema.JsonSchemaStringAssertion = {\n                        type: 'string',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'boolean':\n                {\n                    const ret: JsonSchema.JsonSchemaBooleanAssertion = {\n                        type: 'boolean',\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            }\n            // TODO: Function, DateStr, DateTimeStr\n        }\n    case 'primitive-value':\n        {\n            switch (typeof ty.value) {\n            case 'number':\n                {\n                    const ret: JsonSchema.JsonSchemaNumberValueAssertion = {\n                        type: 'number',\n                        enum: [ty.value],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'bigint':\n                {\n                    const ret: JsonSchema.JsonSchemaBigIntNumberValueAssertion = {\n                        type: ['integer', 'string'],\n                        enum: [ty.value.toString()],\n                    };\n                    if (BigInt(Number.MIN_SAFE_INTEGER) <= ty.value && ty.value <= BigInt(Number.MAX_SAFE_INTEGER)) {\n                        ret.enum.push(Number(ty.value));\n                    }\n                    return addMetaInfo(ret, ty);\n                }\n            case 'string':\n                {\n                    const ret: JsonSchema.JsonSchemaStringValueAssertion = {\n                        type: 'string',\n                        enum: [ty.value],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            case 'boolean':\n                {\n                    const ret: JsonSchema.JsonSchemaBooleanValueAssertion = {\n                        type: 'boolean',\n                        enum: [ty.value],\n                    };\n                    return addMetaInfo(ret, ty);\n                }\n            default:\n                throw new Error(`Unknown primitive-value assertion: ${typeof ty.value}`);\n            }\n        }\n    case 'never':\n        {\n            const ret: JsonSchema.JsonSchemaNullAssertion = {\n                type: 'null',\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'any': case 'unknown':\n        {\n            const ret: JsonSchema.JsonSchemaAnyAssertion = {\n                type: ['null', 'integer', 'number', 'string', 'boolean', 'array', 'object'],\n            };\n            return addMetaInfo(ret, ty);\n        }\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateJsonSchemaObject(schema: TypeAssertionMap) {\n    const ret: JsonSchema.JsonSchemaRootAssertion = {\n        $schema: 'http://json-schema.org/draft-06/schema#',\n        definitions: {},\n    };\n    for (const ty of schema.entries()) {\n        if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            continue;\n        }\n        (ret.definitions as object)[ty[0]] = generateJsonSchemaInner(schema, ty[1].ty, 0);\n    }\n    return ret;\n}\n\n\nexport function generateJsonSchema(schema: TypeAssertionMap, asTs?: boolean): string {\n    const ret = generateJsonSchemaObject(schema);\n\n    if (asTs) {\n        return (\n            `\\n// tslint:disable: object-literal-key-quotes\\n` +\n            `const schema = ${JSON.stringify(ret, null, 2)};\\nexport default schema;` +\n            `\\n// tslint:enable: object-literal-key-quotes\\n`\n        );\n    } else {\n        return JSON.stringify(ret, null, 2);\n    }\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         OptionalAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../types';\nimport { escapeString }   from '../lib/escape';\n\n\n\nfunction formatProto3CodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction generateProto3CodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    switch (ty.primitiveName) {\n    case 'number':\n        return 'double';\n    case 'integer':\n        return 'int32';\n    case 'bigint':\n        return 'string';\n    case 'string':\n        return 'string';\n    case 'boolean':\n        return 'bool';\n    case 'undefined': case 'null': default:\n        return 'google.protobuf.Any';\n    }\n    // TODO: Function, integer, DateStr, DateTimeStr\n}\n\n\nfunction generateProto3CodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null) {\n        return 'google.protobuf.Any';\n    }\n    if (ty.value === void 0) {\n        return 'google.protobuf.Any';\n    }\n    switch (typeof ty.value) {\n    case 'number':\n        return 'double';\n    case 'bigint':\n        return 'string';\n    case 'string':\n        return 'string';\n    case 'boolean':\n        return 'bool';\n    default:\n        return 'google.protobuf.Any';\n    }\n}\n\n\nfunction generateProto3CodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext) {\n    return (`repeated ${ty.repeated.typeName ?\n            ty.repeated.typeName :\n            generateProto3CodeInner(ty.repeated, false, ctx)}`\n    );\n}\n\n\nfunction generateProto3CodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateProto3CodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    return 'google.protobuf.Any';\n}\n\n\nfunction generateProto3CodeOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    return 'google.protobuf.Any';\n}\n\n\nfunction generateProto3CodeOptional(ty: OptionalAssertion, ctx: CodegenContext) {\n    const r = generateProto3CodeInner(ty.optional, false, ctx);\n    switch (r) {\n    case 'double':\n        return 'google.protobuf.DoubleValue';\n    case 'int64':\n        return 'google.protobuf.Int64Value';\n    case 'int32':\n        return 'google.protobuf.Int32Value';\n    case 'string':\n        return 'google.protobuf.StringValue';\n    case 'bool':\n        return 'google.protobuf.BoolValue';\n    default:\n        return 'google.protobuf.Any';\n    }\n}\n\n\nfunction generateProto3CodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return `(${ty.values.map(x => `${x[1]}`).join(' | ')})`;\n}\n\n\nfunction generateProto3CodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    if (ty.members.length === 0) {\n        return '{}';\n    }\n    const sep = isInterface ? ';\\n' : ',\\n';\n    let count = 1;\n\n    const memberLines =\n        ty.members\n        .map(x =>\n            `${formatProto3CodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                x[1].typeName ?\n                    x[1].typeName :\n                    generateProto3CodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})} ${\n                x[0]} = ${count++}`);\n\n    return (\n        `{\\n${memberLines.join(sep)}${sep}${'    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateProto3CodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext): string {\n    switch (ty.kind) {\n    case 'never': case 'any': case 'unknown':\n        return 'google.protobuf.Any';\n    case 'primitive':\n        return generateProto3CodePrimitive(ty, ctx);\n    case 'primitive-value':\n        return generateProto3CodePrimitiveValue(ty, ctx);\n    case 'repeated':\n        return generateProto3CodeRepeated(ty, ctx);\n    case 'spread':\n        return generateProto3CodeSpread(ty, ctx);\n    case 'sequence':\n        return generateProto3CodeSequence(ty, ctx);\n    case 'one-of':\n        return generateProto3CodeOneOf(ty, ctx);\n    case 'optional':\n        return generateProto3CodeOptional(ty, ctx);\n    case 'enum':\n        return generateProto3CodeEnum(ty, ctx);\n    case 'object':\n        return generateProto3CodeObject(ty, isInterface, ctx);\n    case 'symlink':\n        return ty.symlinkTargetName;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n}\n\n\nexport function generateProto3Code(types: TypeAssertionMap): string {\n    let code =\n`\nsyntax = \"proto3\";\nimport \"google/protobuf/wrappers.proto\";\nimport \"google/protobuf/any.proto\";\n\n`;\n\n    const ctx = {nestLevel: 0};\n    for (const ty of types.entries()) {\n        if (ty[1].ty.noOutput) {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            code += `message ${ty[0]} {\\n${indent1}google.protobuf.Any value = 1;\\n${indent0}}\\n\\n`;\n            continue;\n        }\n        code += formatProto3CodeDocComment(ty[1].ty, ctx.nestLevel);\n        if (ty[1].ty.kind === 'object') {\n            code += `message ${ty[0]} ${\n                generateProto3CodeInner(ty[1].ty, true, ctx)}\\n\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            if (0 < ty[1].ty.values.filter(x => typeof x[1] !== 'number').length) {\n                code += `message ${ty[0]} {\\n${indent1}google.protobuf.Any value = 1;\\n${indent0}}\\n\\n`;\n            } else {\n                code += `enum ${ty[0]} {\\n${\n                    ty[1].ty.values\n                        .map(x => `${\n                            formatProto3CodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                            indent1}${(() => {\n                                if (typeof x[1] === 'number') {\n                                    return `${x[0]} = ${x[1]}`;\n                                } else {\n                                    return `${x[0]} = '${escapeString(x[1])}'`;\n                                }\n                            })()};\\n`)\n                        .join('')}${indent0}}\\n\\n`;\n            }\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            // nothing to do\n        } else {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            code += `message ${ty[0]} {\\n${indent1}${generateProto3CodeInner(ty[1].ty, false, ctx)} value = 1;\\n${indent0}}\\n\\n`;\n        }\n    }\n    return code;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         PrimitiveTypeAssertion,\n         PrimitiveValueTypeAssertion,\n         RepeatedAssertion,\n         SpreadAssertion,\n         SequenceAssertion,\n         OneOfAssertion,\n         EnumAssertion,\n         ObjectAssertion,\n         TypeAssertionMap,\n         CodegenContext } from '../types';\n\n\n\nfunction formatGraphQlCodeDocComment(ty: TypeAssertion | string, nestLevel: number) {\n    let code = '';\n    const indent = '    '.repeat(nestLevel);\n    const docComment = typeof ty === 'string' ? ty : ty.docComment;\n    if (docComment) {\n        if (0 <= docComment.indexOf('\\n')) {\n            code += `${indent}/**\\n${indent}  ${\n                docComment\n                    .split('\\n')\n                    .map(x => x.trimLeft())\n                    .join(`\\n${indent} `)}\\n${indent} */\\n`;\n        } else {\n            code += `${indent}/** ${docComment} */\\n`;\n        }\n    }\n    return code;\n}\n\n\nfunction generateGraphQlCodePrimitive(ty: PrimitiveTypeAssertion, ctx: CodegenContext) {\n    switch (ty.primitiveName) {\n    case 'number':\n        return 'Float';\n    case 'integer':\n        return 'Int';\n    case 'bigint':\n        return 'BigInt';\n    case 'string':\n        return 'String';\n    case 'boolean':\n        return 'Boolean';\n    case 'undefined': case 'null': default:\n        return 'Any'; // TODO: Any is invalid type.\n    }\n    // TODO: Function, DateStr, DateTimeStr\n}\n\n\nfunction generateGraphQlCodePrimitiveValue(ty: PrimitiveValueTypeAssertion, ctx: CodegenContext) {\n    if (ty.value === null) {\n        return 'Any'; // TODO: Any is invalid type.\n    }\n    if (ty.value === void 0) {\n        return 'Any'; // TODO: Any is invalid type.\n    }\n    switch (typeof ty.value) {\n        case 'number':\n            return 'Float';\n        case 'bigint':\n            return 'BigInt';\n        case 'string':\n            return 'String';\n        case 'boolean':\n            return 'Boolean';\n        default:\n            return 'Any'; // TODO: Any is invalid type.\n    }\n}\n\n\nfunction generateGraphQlCodeRepeated(ty: RepeatedAssertion, ctx: CodegenContext) {\n    return (`[${ty.repeated.typeName ?\n            ty.repeated.typeName :\n            generateGraphQlCodeInner(ty.repeated, false, ctx)}${\n                ty.repeated.kind === 'optional' ? '' : '!'}]`\n    );\n}\n\n\nfunction generateGraphQlCodeSpread(ty: SpreadAssertion, ctx: CodegenContext) {\n    return '';\n}\n\n\nfunction generateGraphQlCodeSequence(ty: SequenceAssertion, ctx: CodegenContext) {\n    return 'Any'; // TODO: Any is invalid type.\n}\n\n\nfunction generateGraphQlCodeOneOf(ty: OneOfAssertion, ctx: CodegenContext) {\n    return `${ty.oneOf\n        .map(x => x.typeName ?\n            x.typeName :\n            generateGraphQlCodeInner(x, false, ctx)).join(' | ')}`;\n}\n\n\nfunction generateGraphQlCodeEnum(ty: EnumAssertion, ctx: CodegenContext) {\n    return `${ty.values.map(x => `${x[1]}`).join(' | ')}`; // TODO: invalid syntax\n}\n\n\nfunction generateGraphQlCodeObject(ty: ObjectAssertion, isInterface: boolean, ctx: CodegenContext) {\n    if (ty.members.length === 0) {\n        return '{}';\n    }\n    const sep = '\\n';\n\n    const memberLines =\n        ty.members\n        .map(x =>\n            `${formatGraphQlCodeDocComment(x[3] || '', ctx.nestLevel + 1)}${\n                '    '.repeat(ctx.nestLevel + 1)}${\n                x[0]}: ${\n                x[1].typeName ?\n                    `${x[1].typeName}` :\n                    generateGraphQlCodeInner(x[1], false, {...ctx, nestLevel: ctx.nestLevel + 1})}${\n                x[1].kind === 'optional' ? '' : '!'}`);\n\n    return (\n        `{\\n${memberLines.join(sep)}${sep}${'    '.repeat(ctx.nestLevel)}}`\n    );\n}\n\n\nfunction generateGraphQlCodeInner(ty: TypeAssertion, isInterface: boolean, ctx: CodegenContext): string {\n    let ret = '';\n\n    switch (ty.kind) {\n    case 'optional':\n        return generateGraphQlCodeInner(ty.optional, isInterface, ctx);\n    case 'one-of':\n        return generateGraphQlCodeOneOf(ty, ctx); // TODO: inline union is invalid.\n    case 'spread':\n        return generateGraphQlCodeSpread(ty, ctx);\n    case 'sequence':\n        return generateGraphQlCodeSequence(ty, ctx);\n    case 'never':\n        ret = 'Any'; // TODO: Any is invalid type.\n        break;\n    case 'any':\n        ret = 'Any'; // TODO: Any is invalid type.\n        break;\n    case 'unknown':\n        ret = 'Any'; // TODO: Any is invalid type.\n        break;\n    case 'primitive':\n        ret = generateGraphQlCodePrimitive(ty, ctx);\n        break;\n    case 'primitive-value':\n        ret = generateGraphQlCodePrimitiveValue(ty, ctx);\n        break;\n    case 'repeated':\n        ret = generateGraphQlCodeRepeated(ty, ctx);\n        break;\n    case 'enum':\n        ret = generateGraphQlCodeEnum(ty, ctx);\n        break;\n    case 'object':\n        ret = generateGraphQlCodeObject(ty, isInterface, ctx);\n        break;\n    case 'symlink':\n        ret = ty.symlinkTargetName;\n        break;\n    case 'operator':\n        throw new Error(`Unexpected type assertion: ${(ty as any).kind}`);\n    default:\n        throw new Error(`Unknown type assertion: ${(ty as any).kind}`);\n    }\n    return ret + '';\n}\n\n\nexport function generateGraphQlCode(types: TypeAssertionMap): string {\n    let code = `\\nscalar Any\\nunion BigInt = String | Int\\n\\n`;\n\n    const ctx = {nestLevel: 0};\n    for (const ty of types.entries()) {\n        if (ty[1].ty.noOutput) {\n            code += `scalar ${ty[0]}\\n\\n`;\n            continue;\n        }\n        code += formatGraphQlCodeDocComment(ty[1].ty, ctx.nestLevel);\n        if (ty[1].ty.kind === 'object') {\n            code += `type ${ty[0]} ${\n                generateGraphQlCodeInner(ty[1].ty, true, ctx)}\\n\\n`;\n        } else if (ty[1].ty.kind === 'enum') {\n            const indent0 = '    '.repeat(ctx.nestLevel);\n            const indent1 = '    '.repeat(ctx.nestLevel + 1);\n            code += `enum ${ty[0]} {\\n${\n                ty[1].ty.values\n                    .map(x => `${\n                        formatGraphQlCodeDocComment(x[2] || '', ctx.nestLevel + 1)}${\n                        indent1}${x[0]}\\n`)\n                    .join('')}${indent0}}\\n\\n`;\n        } else if (ty[1].ty.kind === 'never' && ty[1].ty.passThruCodeBlock) {\n            // nothing to do\n        } else {\n            code += `union ${ty[0]} = ${generateGraphQlCodeInner(ty[1].ty, false, ctx)}\\n\\n`;\n        }\n    }\n    return code;\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { TypeAssertion,\n         ObjectAssertion,\n         SerializedSchemaInfo,\n         TypeAssertionSetValue,\n         TypeAssertionMap } from './types';\nimport { resolveSchema }    from './lib/resolver';\n\n\n\nexport const TynderSchemaVersion = 'tynder/1.0';\n\n\nfunction hasMetaInfo(ty: TypeAssertion) {\n    let hasInfo = false;\n\n    if (ty.messages) {\n        hasInfo = true;\n    }\n    if (ty.message) {\n        hasInfo = true;\n    }\n    if (ty.messageId) {\n        hasInfo = true;\n    }\n\n    switch (ty.kind) {\n    case 'repeated':\n        if (typeof ty.min === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.max === 'number') {\n            hasInfo = true;\n        }\n        break;\n    case 'primitive':\n        if (typeof ty.minValue === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.maxValue === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.greaterThanValue === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.lessThanValue === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.minLength === 'number') {\n            hasInfo = true;\n        }\n        if (typeof ty.maxLength === 'number') {\n            hasInfo = true;\n        }\n        if (ty.pattern) {\n            hasInfo = true;\n        }\n        break;\n    }\n\n    return hasInfo;\n}\n\n\nfunction serializeInner(ty: TypeAssertion, nestLevel: number): TypeAssertion {\n    if (0 < nestLevel && ty.typeName && !hasMetaInfo(ty)) {\n        switch (ty.kind) {\n        case 'optional':\n            // nothing to do.\n            break;\n        default:\n            return ({\n                ...{\n                    kind: 'symlink',\n                    symlinkTargetName: ty.typeName as string, // NOTE: type inference failed if the switch statement is exists.\n                    typeName: ty.typeName,\n                },\n                ...(ty.name ? {name: ty.name} : {}),\n                ...(ty.docComment ? {docComment: ty.docComment} : {}),\n            });\n        }\n    }\n\n    const ret: TypeAssertion = {...ty};\n    switch (ret.kind) {\n    case 'never': case 'any': case 'unknown': case 'symlink': case 'operator':\n        break;\n    case 'primitive-value':\n        if (typeof ret.value === 'bigint') {\n            ret.value = String(ret.value);\n            ret.primitiveName = 'bigint';\n        }\n        break;\n    case 'primitive':\n        if (ret.pattern) {\n            ret.pattern = `/${ret.pattern.source}/${ret.pattern.flags}` as any;\n        }\n        break;\n    case 'repeated':\n        ret.repeated = serializeInner(ret.repeated, nestLevel + 1);\n        break;\n    case 'spread':\n        ret.spread = serializeInner(ret.spread, nestLevel + 1);\n        break;\n    case 'sequence':\n        ret.sequence = ret.sequence.map(x => serializeInner(x, nestLevel + 1));\n        break;\n    case 'one-of':\n        ret.oneOf = ret.oneOf.map(x => serializeInner(x, nestLevel + 1));\n        break;\n    case 'optional':\n        ret.optional = serializeInner(ret.optional, nestLevel + 1);\n        break;\n    case 'enum':\n        ret.values = ret.values.slice().map(x => x[2] === null || x[2] === void 0 ? x.slice(0, 2) : x) as any;\n        break;\n    case 'object':\n        ret.members = ret.members\n            .map(x => [x[0], serializeInner(x[1], nestLevel + 1), ...x.slice(2)]) as any;\n        if (ret.additionalProps) {\n            ret.additionalProps = ret.additionalProps\n                .map(x => [x[0].map(\n                    p => typeof p === 'string' ?\n                        p : `/${p.source}/${p.flags}`),\n                    serializeInner(x[1], nestLevel + 1), ...x.slice(2)]) as any;\n        }\n        if (ret.baseTypes) {\n            // NOTE: convert 'baseTypes' to 'symlink'.\n            ret.baseTypes = ret.baseTypes.map(x => serializeInner(x, nestLevel + 1)) as ObjectAssertion[];\n        }\n        break;\n    default:\n        throw new Error(`Unknown type assertion: ${(ret as any).kind}`);\n    }\n\n    return ret;\n}\n\n\nexport function serializeToObject(schema: TypeAssertionMap): SerializedSchemaInfo {\n    const ret: SerializedSchemaInfo = {\n        version: TynderSchemaVersion,\n        ns: {},\n    };\n    const current = {};\n\n    for (const ty of schema.entries()) {\n        current[ty[0]] = serializeInner(ty[1].ty, 0);\n    }\n\n    ret.ns['.'] = current;\n\n    return ret;\n}\n\n\nexport function serialize(schema: TypeAssertionMap, asTs?: boolean): string {\n    const ret = serializeToObject(schema);\n\n    if (asTs) {\n        return (\n            `\\n// tslint:disable: object-literal-key-quotes\\n` +\n            `const schema = ${JSON.stringify(ret, null, 2)};\\nexport default schema;` +\n            `\\n// tslint:enable: object-literal-key-quotes\\n`\n        );\n    } else {\n        return JSON.stringify(ret, null, 2);\n    }\n}\n\n\nfunction deserializeRegExp(pat: string, errMsg: string) {\n    const m = (/^\\/(.*)\\/([gimsuy]*)$/s).exec(pat);\n    if (m) {\n        return new RegExp(m[1], m[2]);\n    } else {\n        throw new Error(errMsg);\n    }\n}\n\n\nfunction deserializeInner(ty: TypeAssertion) {\n    const ret: TypeAssertion = {...ty};\n    switch (ret.kind) {\n    case 'never': case 'any': case 'unknown':\n    case 'enum': case 'symlink': case 'operator':\n        // NOTE: 'symlink' and 'operator' will resolved by calling 'resolveSymbols()' in 'deserialize()'.\n        break;\n    case 'primitive-value':\n        if (ret.primitiveName === 'bigint') {\n            delete ret.primitiveName;\n            ret.value = BigInt(ret.value);\n        }\n        break;\n    case 'primitive':\n        if (ret.pattern) {\n            ret.pattern = deserializeRegExp(\n                ret.pattern as any,\n                `Unknown pattern match assertion: ${ret.pattern as any}`);\n        }\n        break;\n    case 'repeated':\n        ret.repeated = deserializeInner(ret.repeated);\n        break;\n    case 'spread':\n        ret.spread = deserializeInner(ret.spread);\n        break;\n    case 'sequence':\n        ret.sequence = ret.sequence.map(x => deserializeInner(x));\n        break;\n    case 'one-of':\n        ret.oneOf = ret.oneOf.map(x => deserializeInner(x));\n        break;\n    case 'optional':\n        ret.optional = deserializeInner(ret.optional);\n        break;\n    case 'object':\n        ret.members = ret.members\n            .map(x => [x[0], deserializeInner(x[1]), ...x.slice(2)]) as any;\n        if (ret.additionalProps) {\n            ret.additionalProps = ret.additionalProps\n                .map(x => [x[0].map(\n                    p => String(p).startsWith('/') ?\n                        deserializeRegExp(p as any, `Unknown additional props: ${p}`) : p),\n                    deserializeInner(x[1]), ...x.slice(2)]) as any;\n        }\n        // NOTE: keep 'baseTypes' as 'symlink'.\n        break;\n    default:\n        throw new Error(`Unknown type assertion: ${(ret as any).kind}`);\n    }\n    return ret;\n}\n\n\nexport function deserializeFromObject(obj: any) {\n    if (obj.version !== TynderSchemaVersion) {\n        throw new Error(`Unknown schema version: ${obj.version}`);\n    }\n\n    const schema: TypeAssertionMap = new Map<string, TypeAssertionSetValue>();\n    const current = obj.ns['.'];\n\n    for (const k in current) {\n        if (! Object.prototype.hasOwnProperty.call(current, k)) {\n            continue;\n        }\n        schema.set(k, {\n            ty: deserializeInner(current[k]),\n            exported: false,\n            resolved: false,\n        });\n    }\n\n    return resolveSchema(schema, {isDeserialization: true});\n}\n\n\nexport function deserialize(text: string) {\n    const parsed = JSON.parse(text);\n    return deserializeFromObject(parsed);\n}\n","// Copyright (c) 2019 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { Stereotype,\n         CustomConstraintInfo }             from './types';\nimport { stereotypes as dateStereotypes }   from './stereotypes/date';\nimport { constraints as uniqueConstraints } from './constraints/unique';\n\nexport * from './types';\nexport * from './compiler';\nexport * from './operators';\nexport * from './codegen';\nexport * from './serializer';\nexport * from './validator';\nexport * from './picker';\n\nexport const stereotypes: Array<[string, Stereotype]> = [\n    ...dateStereotypes,\n];\n\nexport const customConstraints: Array<[string, CustomConstraintInfo]> = [\n    ...uniqueConstraints,\n];\n"],"sourceRoot":""}